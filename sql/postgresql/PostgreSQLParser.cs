//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PostgreSQLParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Linq;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PostgreSQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, ALL=30, ANALYSE=31, ANALYZE=32, 
		AND=33, ANY=34, ARRAY=35, AS=36, ASC=37, ASYMMETRIC=38, BOTH=39, CASE=40, 
		CAST=41, CHECK=42, COLLATE=43, COLUMN=44, CONSTRAINT=45, CREATE=46, CURRENT_CATALOG=47, 
		CURRENT_DATE=48, CURRENT_ROLE=49, CURRENT_TIME=50, CURRENT_TIMESTAMP=51, 
		CURRENT_USER=52, DEFAULT=53, DEFERRABLE=54, DESC=55, DISTINCT=56, DO=57, 
		ELSE=58, EXCEPT=59, FALSE_P=60, FETCH=61, FOR=62, FOREIGN=63, FROM=64, 
		GRANT=65, GROUP_P=66, HAVING=67, IN_P=68, INITIALLY=69, INTERSECT=70, 
		INTO=71, LATERAL_P=72, LEADING=73, LIMIT=74, LOCALTIME=75, LOCALTIMESTAMP=76, 
		NOT=77, NULL_P=78, OFFSET=79, ON=80, ONLY=81, OR=82, ORDER=83, PLACING=84, 
		PRIMARY=85, REFERENCES=86, RETURNING=87, SELECT=88, SESSION_USER=89, SOME=90, 
		SYMMETRIC=91, TABLE=92, THEN=93, TO=94, TRAILING=95, TRUE_P=96, UNION=97, 
		UNIQUE=98, USER=99, USING=100, VARIADIC=101, WHEN=102, WHERE=103, WINDOW=104, 
		WITH=105, AUTHORIZATION=106, BINARY=107, COLLATION=108, CONCURRENTLY=109, 
		CROSS=110, CURRENT_SCHEMA=111, FREEZE=112, FULL=113, ILIKE=114, INNER_P=115, 
		IS=116, ISNULL=117, JOIN=118, LEFT=119, LIKE=120, NATURAL=121, NOTNULL=122, 
		OUTER_P=123, OVER=124, OVERLAPS=125, RIGHT=126, SIMILAR=127, VERBOSE=128, 
		ABORT_P=129, ABSOLUTE_P=130, ACCESS=131, ACTION=132, ADD_P=133, ADMIN=134, 
		AFTER=135, AGGREGATE=136, ALSO=137, ALTER=138, ALWAYS=139, ASSERTION=140, 
		ASSIGNMENT=141, AT=142, ATTRIBUTE=143, BACKWARD=144, BEFORE=145, BEGIN_P=146, 
		BY=147, CACHE=148, CALLED=149, CASCADE=150, CASCADED=151, CATALOG=152, 
		CHAIN=153, CHARACTERISTICS=154, CHECKPOINT=155, CLASS=156, CLOSE=157, 
		CLUSTER=158, COMMENT=159, COMMENTS=160, COMMIT=161, COMMITTED=162, CONFIGURATION=163, 
		CONNECTION=164, CONSTRAINTS=165, CONTENT_P=166, CONTINUE_P=167, CONVERSION_P=168, 
		COPY=169, COST=170, CSV=171, CURSOR=172, CYCLE=173, DATA_P=174, DATABASE=175, 
		DAY_P=176, DEALLOCATE=177, DECLARE=178, DEFAULTS=179, DEFERRED=180, DEFINER=181, 
		DELETE_P=182, DELIMITER=183, DELIMITERS=184, DICTIONARY=185, DISABLE_P=186, 
		DISCARD=187, DOCUMENT_P=188, DOMAIN_P=189, DOUBLE_P=190, DROP=191, EACH=192, 
		ENABLE_P=193, ENCODING=194, ENCRYPTED=195, ENUM_P=196, ESCAPE=197, EVENT=198, 
		EXCLUDE=199, EXCLUDING=200, EXCLUSIVE=201, EXECUTE=202, EXPLAIN=203, EXTENSION=204, 
		EXTERNAL=205, FAMILY=206, FIRST_P=207, FOLLOWING=208, FORCE=209, FORWARD=210, 
		FUNCTION=211, FUNCTIONS=212, GLOBAL=213, GRANTED=214, HANDLER=215, HEADER_P=216, 
		HOLD=217, HOUR_P=218, IDENTITY_P=219, IF_P=220, IMMEDIATE=221, IMMUTABLE=222, 
		IMPLICIT_P=223, INCLUDING=224, INCREMENT=225, INDEX=226, INDEXES=227, 
		INHERIT=228, INHERITS=229, INLINE_P=230, INSENSITIVE=231, INSERT=232, 
		INSTEAD=233, INVOKER=234, ISOLATION=235, KEY=236, LABEL=237, LANGUAGE=238, 
		LARGE_P=239, LAST_P=240, LEAKPROOF=241, LEVEL=242, LISTEN=243, LOAD=244, 
		LOCAL=245, LOCATION=246, LOCK_P=247, MAPPING=248, MATCH=249, MATERIALIZED=250, 
		MAXVALUE=251, MINUTE_P=252, MINVALUE=253, MODE=254, MONTH_P=255, MOVE=256, 
		NAME_P=257, NAMES=258, NEXT=259, NO=260, NOTHING=261, NOTIFY=262, NOWAIT=263, 
		NULLS_P=264, OBJECT_P=265, OF=266, OFF=267, OIDS=268, OPERATOR=269, OPTION=270, 
		OPTIONS=271, OWNED=272, OWNER=273, PARSER=274, PARTIAL=275, PARTITION=276, 
		PASSING=277, PASSWORD=278, PLANS=279, PRECEDING=280, PREPARE=281, PREPARED=282, 
		PRESERVE=283, PRIOR=284, PRIVILEGES=285, PROCEDURAL=286, PROCEDURE=287, 
		PROGRAM=288, QUOTE=289, RANGE=290, READ=291, REASSIGN=292, RECHECK=293, 
		RECURSIVE=294, REF=295, REFRESH=296, REINDEX=297, RELATIVE_P=298, RELEASE=299, 
		RENAME=300, REPEATABLE=301, REPLACE=302, REPLICA=303, RESET=304, RESTART=305, 
		RESTRICT=306, RETURNS=307, REVOKE=308, ROLE=309, ROLLBACK=310, ROWS=311, 
		RULE=312, SAVEPOINT=313, SCHEMA=314, SCROLL=315, SEARCH=316, SECOND_P=317, 
		SECURITY=318, SEQUENCE=319, SEQUENCES=320, SERIALIZABLE=321, SERVER=322, 
		SESSION=323, SET=324, SHARE=325, SHOW=326, SIMPLE=327, SNAPSHOT=328, STABLE=329, 
		STANDALONE_P=330, START=331, STATEMENT=332, STATISTICS=333, STDIN=334, 
		STDOUT=335, STORAGE=336, STRICT_P=337, STRIP_P=338, SYSID=339, SYSTEM_P=340, 
		TABLES=341, TABLESPACE=342, TEMP=343, TEMPLATE=344, TEMPORARY=345, TEXT_P=346, 
		TRANSACTION=347, TRIGGER=348, TRUNCATE=349, TRUSTED=350, TYPE_P=351, TYPES_P=352, 
		UNBOUNDED=353, UNCOMMITTED=354, UNENCRYPTED=355, UNKNOWN=356, UNLISTEN=357, 
		UNLOGGED=358, UNTIL=359, UPDATE=360, VACUUM=361, VALID=362, VALIDATE=363, 
		VALIDATOR=364, VARYING=365, VERSION_P=366, VIEW=367, VOLATILE=368, WHITESPACE_P=369, 
		WITHOUT=370, WORK=371, WRAPPER=372, WRITE=373, XML_P=374, YEAR_P=375, 
		YES_P=376, ZONE=377, BETWEEN=378, BIGINT=379, BIT=380, BOOLEAN_P=381, 
		CHAR_P=382, CHARACTER=383, COALESCE=384, DEC=385, DECIMAL_P=386, EXISTS=387, 
		EXTRACT=388, FLOAT_P=389, GREATEST=390, INOUT=391, INT_P=392, INTEGER=393, 
		INTERVAL=394, LEAST=395, NATIONAL=396, NCHAR=397, NONE=398, NULLIF=399, 
		NUMERIC=400, OVERLAY=401, POSITION=402, PRECISION=403, REAL=404, ROW=405, 
		SETOF=406, SMALLINT=407, SUBSTRING=408, TIME=409, TIMESTAMP=410, TREAT=411, 
		TRIM=412, VALUES=413, VARCHAR=414, XMLATTRIBUTES=415, XMLCONCAT=416, XMLELEMENT=417, 
		XMLEXISTS=418, XMLFOREST=419, XMLPARSE=420, XMLPI=421, XMLROOT=422, XMLSERIALIZE=423, 
		CALL=424, CURRENT_P=425, CATALOG_P=426, ATTACH=427, DETACH=428, EXPRESSION=429, 
		GENERATED=430, LOGGED=431, STORED=432, INCLUDE=433, ROUTINE=434, TRANSFORM=435, 
		IMPORT_P=436, POLICY=437, METHOD=438, REFERENCING=439, NEW=440, OLD=441, 
		VALUE_P=442, SUBSCRIPTION=443, PUBLICATION=444, OUT_P=445, END_P=446, 
		ROUTINES=447, SCHEMAS=448, PROCEDURES=449, INPUT_P=450, SUPPORT=451, PARALLEL=452, 
		SQL_P=453, DEPENDS=454, OVERRIDING=455, CONFLICT=456, SKIP_P=457, LOCKED=458, 
		TIES=459, ROLLUP=460, CUBE=461, GROUPING=462, SETS=463, TABLESAMPLE=464, 
		ORDINALITY=465, XMLTABLE=466, COLUMNS=467, XMLNAMESPACES=468, ROWTYPE=469, 
		NORMALIZED=470, WITHIN=471, FILTER=472, GROUPS=473, OTHERS=474, NFC=475, 
		NFD=476, NFKC=477, NFKD=478, UESCAPE=479, VIEWS=480, NORMALIZE=481, DUMP=482, 
		PRINT_STRICT_PARAMS=483, VARIABLE_CONFLICT=484, ERROR=485, USE_VARIABLE=486, 
		USE_COLUMN=487, ALIAS=488, CONSTANT=489, PERFORM=490, GET=491, DIAGNOSTICS=492, 
		STACKED=493, ELSIF=494, WHILE=495, REVERSE=496, FOREACH=497, SLICE=498, 
		EXIT=499, RETURN=500, QUERY=501, RAISE=502, SQLSTATE=503, DEBUG=504, LOG=505, 
		INFO=506, NOTICE=507, WARNING=508, EXCEPTION=509, ASSERT=510, LOOP=511, 
		OPEN=512, Identifier=513, QuotedIdentifier=514, UnterminatedQuotedIdentifier=515, 
		InvalidQuotedIdentifier=516, InvalidUnterminatedQuotedIdentifier=517, 
		UnicodeQuotedIdentifier=518, UnterminatedUnicodeQuotedIdentifier=519, 
		InvalidUnicodeQuotedIdentifier=520, InvalidUnterminatedUnicodeQuotedIdentifier=521, 
		StringConstant=522, UnterminatedStringConstant=523, UnicodeEscapeStringConstant=524, 
		UnterminatedUnicodeEscapeStringConstant=525, BeginDollarStringConstant=526, 
		BinaryStringConstant=527, UnterminatedBinaryStringConstant=528, InvalidBinaryStringConstant=529, 
		InvalidUnterminatedBinaryStringConstant=530, HexadecimalStringConstant=531, 
		UnterminatedHexadecimalStringConstant=532, InvalidHexadecimalStringConstant=533, 
		InvalidUnterminatedHexadecimalStringConstant=534, Integral=535, NumericFail=536, 
		Numeric=537, PLSQLVARIABLENAME=538, PLSQLIDENTIFIER=539, Whitespace=540, 
		Newline=541, LineComment=542, BlockComment=543, UnterminatedBlockComment=544, 
		MetaCommand=545, EndMetaCommand=546, ErrorCharacter=547, EscapeStringConstant=548, 
		UnterminatedEscapeStringConstant=549, InvalidEscapeStringConstant=550, 
		InvalidUnterminatedEscapeStringConstant=551, AfterEscapeStringConstantMode_NotContinued=552, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=553, DollarText=554, 
		EndDollarStringConstant=555, AfterEscapeStringConstantWithNewlineMode_Continued=556;
	public const int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createschemastmt = 21, RULE_optschemaname = 22, RULE_optschemaeltlist = 23, 
		RULE_schema_stmt = 24, RULE_variablesetstmt = 25, RULE_set_rest = 26, 
		RULE_generic_set = 27, RULE_set_rest_more = 28, RULE_var_name = 29, RULE_var_list = 30, 
		RULE_var_value = 31, RULE_iso_level = 32, RULE_opt_boolean_or_string = 33, 
		RULE_zone_value = 34, RULE_opt_encoding = 35, RULE_nonreservedword_or_sconst = 36, 
		RULE_variableresetstmt = 37, RULE_reset_rest = 38, RULE_generic_reset = 39, 
		RULE_setresetclause = 40, RULE_functionsetresetclause = 41, RULE_variableshowstmt = 42, 
		RULE_constraintssetstmt = 43, RULE_constraints_set_list = 44, RULE_constraints_set_mode = 45, 
		RULE_checkpointstmt = 46, RULE_discardstmt = 47, RULE_altertablestmt = 48, 
		RULE_alter_table_cmds = 49, RULE_partition_cmd = 50, RULE_index_partition_cmd = 51, 
		RULE_alter_table_cmd = 52, RULE_alter_column_default = 53, RULE_opt_drop_behavior = 54, 
		RULE_opt_collate_clause = 55, RULE_alter_using = 56, RULE_replica_identity = 57, 
		RULE_reloptions = 58, RULE_opt_reloptions = 59, RULE_reloption_list = 60, 
		RULE_reloption_elem = 61, RULE_alter_identity_column_option_list = 62, 
		RULE_alter_identity_column_option = 63, RULE_partitionboundspec = 64, 
		RULE_hash_partbound_elem = 65, RULE_hash_partbound = 66, RULE_altercompositetypestmt = 67, 
		RULE_alter_type_cmds = 68, RULE_alter_type_cmd = 69, RULE_closeportalstmt = 70, 
		RULE_copystmt = 71, RULE_copy_from = 72, RULE_opt_program = 73, RULE_copy_file_name = 74, 
		RULE_copy_options = 75, RULE_copy_opt_list = 76, RULE_copy_opt_item = 77, 
		RULE_opt_binary = 78, RULE_copy_delimiter = 79, RULE_opt_using = 80, RULE_copy_generic_opt_list = 81, 
		RULE_copy_generic_opt_elem = 82, RULE_copy_generic_opt_arg = 83, RULE_copy_generic_opt_arg_list = 84, 
		RULE_copy_generic_opt_arg_list_item = 85, RULE_createstmt = 86, RULE_opttemp = 87, 
		RULE_opttableelementlist = 88, RULE_opttypedtableelementlist = 89, RULE_tableelementlist = 90, 
		RULE_typedtableelementlist = 91, RULE_tableelement = 92, RULE_typedtableelement = 93, 
		RULE_columnDef = 94, RULE_columnOptions = 95, RULE_colquallist = 96, RULE_colconstraint = 97, 
		RULE_colconstraintelem = 98, RULE_generated_when = 99, RULE_constraintattr = 100, 
		RULE_tablelikeclause = 101, RULE_tablelikeoptionlist = 102, RULE_tablelikeoption = 103, 
		RULE_tableconstraint = 104, RULE_constraintelem = 105, RULE_opt_no_inherit = 106, 
		RULE_opt_column_list = 107, RULE_columnlist = 108, RULE_columnElem = 109, 
		RULE_opt_c_include = 110, RULE_key_match = 111, RULE_exclusionconstraintlist = 112, 
		RULE_exclusionconstraintelem = 113, RULE_exclusionwhereclause = 114, RULE_key_actions = 115, 
		RULE_key_update = 116, RULE_key_delete = 117, RULE_key_action = 118, RULE_optinherit = 119, 
		RULE_optpartitionspec = 120, RULE_partitionspec = 121, RULE_part_params = 122, 
		RULE_part_elem = 123, RULE_table_access_method_clause = 124, RULE_optwith = 125, 
		RULE_oncommitoption = 126, RULE_opttablespace = 127, RULE_optconstablespace = 128, 
		RULE_existingindex = 129, RULE_createstatsstmt = 130, RULE_alterstatsstmt = 131, 
		RULE_createasstmt = 132, RULE_create_as_target = 133, RULE_opt_with_data = 134, 
		RULE_creatematviewstmt = 135, RULE_create_mv_target = 136, RULE_optnolog = 137, 
		RULE_refreshmatviewstmt = 138, RULE_createseqstmt = 139, RULE_alterseqstmt = 140, 
		RULE_optseqoptlist = 141, RULE_optparenthesizedseqoptlist = 142, RULE_seqoptlist = 143, 
		RULE_seqoptelem = 144, RULE_opt_by = 145, RULE_numericonly = 146, RULE_numericonly_list = 147, 
		RULE_createplangstmt = 148, RULE_opt_trusted = 149, RULE_handler_name = 150, 
		RULE_opt_inline_handler = 151, RULE_validator_clause = 152, RULE_opt_validator = 153, 
		RULE_opt_procedural = 154, RULE_createtablespacestmt = 155, RULE_opttablespaceowner = 156, 
		RULE_droptablespacestmt = 157, RULE_createextensionstmt = 158, RULE_create_extension_opt_list = 159, 
		RULE_create_extension_opt_item = 160, RULE_alterextensionstmt = 161, RULE_alter_extension_opt_list = 162, 
		RULE_alter_extension_opt_item = 163, RULE_alterextensioncontentsstmt = 164, 
		RULE_createfdwstmt = 165, RULE_fdw_option = 166, RULE_fdw_options = 167, 
		RULE_opt_fdw_options = 168, RULE_alterfdwstmt = 169, RULE_create_generic_options = 170, 
		RULE_generic_option_list = 171, RULE_alter_generic_options = 172, RULE_alter_generic_option_list = 173, 
		RULE_alter_generic_option_elem = 174, RULE_generic_option_elem = 175, 
		RULE_generic_option_name = 176, RULE_generic_option_arg = 177, RULE_createforeignserverstmt = 178, 
		RULE_opt_type = 179, RULE_foreign_server_version = 180, RULE_opt_foreign_server_version = 181, 
		RULE_alterforeignserverstmt = 182, RULE_createforeigntablestmt = 183, 
		RULE_importforeignschemastmt = 184, RULE_import_qualification_type = 185, 
		RULE_import_qualification = 186, RULE_createusermappingstmt = 187, RULE_auth_ident = 188, 
		RULE_dropusermappingstmt = 189, RULE_alterusermappingstmt = 190, RULE_createpolicystmt = 191, 
		RULE_alterpolicystmt = 192, RULE_rowsecurityoptionalexpr = 193, RULE_rowsecurityoptionalwithcheck = 194, 
		RULE_rowsecuritydefaulttorole = 195, RULE_rowsecurityoptionaltorole = 196, 
		RULE_rowsecuritydefaultpermissive = 197, RULE_rowsecuritydefaultforcmd = 198, 
		RULE_row_security_cmd = 199, RULE_createamstmt = 200, RULE_am_type = 201, 
		RULE_createtrigstmt = 202, RULE_triggeractiontime = 203, RULE_triggerevents = 204, 
		RULE_triggeroneevent = 205, RULE_triggerreferencing = 206, RULE_triggertransitions = 207, 
		RULE_triggertransition = 208, RULE_transitionoldornew = 209, RULE_transitionrowortable = 210, 
		RULE_transitionrelname = 211, RULE_triggerforspec = 212, RULE_triggerforopteach = 213, 
		RULE_triggerfortype = 214, RULE_triggerwhen = 215, RULE_function_or_procedure = 216, 
		RULE_triggerfuncargs = 217, RULE_triggerfuncarg = 218, RULE_optconstrfromtable = 219, 
		RULE_constraintattributespec = 220, RULE_constraintattributeElem = 221, 
		RULE_createeventtrigstmt = 222, RULE_event_trigger_when_list = 223, RULE_event_trigger_when_item = 224, 
		RULE_event_trigger_value_list = 225, RULE_altereventtrigstmt = 226, RULE_enable_trigger = 227, 
		RULE_createassertionstmt = 228, RULE_definestmt = 229, RULE_definition = 230, 
		RULE_def_list = 231, RULE_def_elem = 232, RULE_def_arg = 233, RULE_old_aggr_definition = 234, 
		RULE_old_aggr_list = 235, RULE_old_aggr_elem = 236, RULE_opt_enum_val_list = 237, 
		RULE_enum_val_list = 238, RULE_alterenumstmt = 239, RULE_opt_if_not_exists = 240, 
		RULE_createopclassstmt = 241, RULE_opclass_item_list = 242, RULE_opclass_item = 243, 
		RULE_opt_default = 244, RULE_opt_opfamily = 245, RULE_opclass_purpose = 246, 
		RULE_opt_recheck = 247, RULE_createopfamilystmt = 248, RULE_alteropfamilystmt = 249, 
		RULE_opclass_drop_list = 250, RULE_opclass_drop = 251, RULE_dropopclassstmt = 252, 
		RULE_dropopfamilystmt = 253, RULE_dropownedstmt = 254, RULE_reassignownedstmt = 255, 
		RULE_dropstmt = 256, RULE_object_type_any_name = 257, RULE_object_type_name = 258, 
		RULE_drop_type_name = 259, RULE_object_type_name_on_any_name = 260, RULE_any_name_list = 261, 
		RULE_any_name = 262, RULE_attrs = 263, RULE_type_name_list = 264, RULE_truncatestmt = 265, 
		RULE_opt_restart_seqs = 266, RULE_commentstmt = 267, RULE_comment_text = 268, 
		RULE_seclabelstmt = 269, RULE_opt_provider = 270, RULE_security_label = 271, 
		RULE_fetchstmt = 272, RULE_fetch_args = 273, RULE_from_in = 274, RULE_opt_from_in = 275, 
		RULE_grantstmt = 276, RULE_revokestmt = 277, RULE_privileges = 278, RULE_privilege_list = 279, 
		RULE_privilege = 280, RULE_privilege_target = 281, RULE_grantee_list = 282, 
		RULE_grantee = 283, RULE_opt_grant_grant_option = 284, RULE_grantrolestmt = 285, 
		RULE_revokerolestmt = 286, RULE_opt_grant_admin_option = 287, RULE_opt_granted_by = 288, 
		RULE_alterdefaultprivilegesstmt = 289, RULE_defacloptionlist = 290, RULE_defacloption = 291, 
		RULE_defaclaction = 292, RULE_defacl_privilege_target = 293, RULE_indexstmt = 294, 
		RULE_opt_unique = 295, RULE_opt_concurrently = 296, RULE_opt_index_name = 297, 
		RULE_access_method_clause = 298, RULE_index_params = 299, RULE_index_elem_options = 300, 
		RULE_index_elem = 301, RULE_opt_include = 302, RULE_index_including_params = 303, 
		RULE_opt_collate = 304, RULE_opt_class = 305, RULE_opt_asc_desc = 306, 
		RULE_opt_nulls_order = 307, RULE_createfunctionstmt = 308, RULE_opt_or_replace = 309, 
		RULE_func_args = 310, RULE_func_args_list = 311, RULE_function_with_argtypes_list = 312, 
		RULE_function_with_argtypes = 313, RULE_func_args_with_defaults = 314, 
		RULE_func_args_with_defaults_list = 315, RULE_func_arg = 316, RULE_arg_class = 317, 
		RULE_param_name = 318, RULE_func_return = 319, RULE_func_type = 320, RULE_func_arg_with_default = 321, 
		RULE_aggr_arg = 322, RULE_aggr_args = 323, RULE_aggr_args_list = 324, 
		RULE_aggregate_with_argtypes = 325, RULE_aggregate_with_argtypes_list = 326, 
		RULE_createfunc_opt_list = 327, RULE_common_func_opt_item = 328, RULE_createfunc_opt_item = 329, 
		RULE_func_as = 330, RULE_transform_type_list = 331, RULE_opt_definition = 332, 
		RULE_table_func_column = 333, RULE_table_func_column_list = 334, RULE_alterfunctionstmt = 335, 
		RULE_alterfunc_opt_list = 336, RULE_opt_restrict = 337, RULE_removefuncstmt = 338, 
		RULE_removeaggrstmt = 339, RULE_removeoperstmt = 340, RULE_oper_argtypes = 341, 
		RULE_any_operator = 342, RULE_operator_with_argtypes_list = 343, RULE_operator_with_argtypes = 344, 
		RULE_dostmt = 345, RULE_dostmt_opt_list = 346, RULE_dostmt_opt_item = 347, 
		RULE_createcaststmt = 348, RULE_cast_context = 349, RULE_dropcaststmt = 350, 
		RULE_opt_if_exists = 351, RULE_createtransformstmt = 352, RULE_transform_element_list = 353, 
		RULE_droptransformstmt = 354, RULE_reindexstmt = 355, RULE_reindex_target_type = 356, 
		RULE_reindex_target_multitable = 357, RULE_reindex_option_list = 358, 
		RULE_reindex_option_elem = 359, RULE_altertblspcstmt = 360, RULE_renamestmt = 361, 
		RULE_opt_column = 362, RULE_opt_set_data = 363, RULE_alterobjectdependsstmt = 364, 
		RULE_opt_no = 365, RULE_alterobjectschemastmt = 366, RULE_alteroperatorstmt = 367, 
		RULE_operator_def_list = 368, RULE_operator_def_elem = 369, RULE_operator_def_arg = 370, 
		RULE_altertypestmt = 371, RULE_alterownerstmt = 372, RULE_createpublicationstmt = 373, 
		RULE_opt_publication_for_tables = 374, RULE_publication_for_tables = 375, 
		RULE_alterpublicationstmt = 376, RULE_createsubscriptionstmt = 377, RULE_publication_name_list = 378, 
		RULE_publication_name_item = 379, RULE_altersubscriptionstmt = 380, RULE_dropsubscriptionstmt = 381, 
		RULE_rulestmt = 382, RULE_ruleactionlist = 383, RULE_ruleactionmulti = 384, 
		RULE_ruleactionstmt = 385, RULE_ruleactionstmtOrEmpty = 386, RULE_event = 387, 
		RULE_opt_instead = 388, RULE_notifystmt = 389, RULE_notify_payload = 390, 
		RULE_listenstmt = 391, RULE_unlistenstmt = 392, RULE_transactionstmt = 393, 
		RULE_opt_transaction = 394, RULE_transaction_mode_item = 395, RULE_transaction_mode_list = 396, 
		RULE_transaction_mode_list_or_empty = 397, RULE_opt_transaction_chain = 398, 
		RULE_viewstmt = 399, RULE_opt_check_option = 400, RULE_loadstmt = 401, 
		RULE_createdbstmt = 402, RULE_createdb_opt_list = 403, RULE_createdb_opt_items = 404, 
		RULE_createdb_opt_item = 405, RULE_createdb_opt_name = 406, RULE_opt_equal = 407, 
		RULE_alterdatabasestmt = 408, RULE_alterdatabasesetstmt = 409, RULE_dropdbstmt = 410, 
		RULE_drop_option_list = 411, RULE_drop_option = 412, RULE_altercollationstmt = 413, 
		RULE_altersystemstmt = 414, RULE_createdomainstmt = 415, RULE_alterdomainstmt = 416, 
		RULE_opt_as = 417, RULE_altertsdictionarystmt = 418, RULE_altertsconfigurationstmt = 419, 
		RULE_any_with = 420, RULE_createconversionstmt = 421, RULE_clusterstmt = 422, 
		RULE_cluster_index_specification = 423, RULE_vacuumstmt = 424, RULE_analyzestmt = 425, 
		RULE_vac_analyze_option_list = 426, RULE_analyze_keyword = 427, RULE_vac_analyze_option_elem = 428, 
		RULE_vac_analyze_option_name = 429, RULE_vac_analyze_option_arg = 430, 
		RULE_opt_analyze = 431, RULE_opt_verbose = 432, RULE_opt_full = 433, RULE_opt_freeze = 434, 
		RULE_opt_name_list = 435, RULE_vacuum_relation = 436, RULE_vacuum_relation_list = 437, 
		RULE_opt_vacuum_relation_list = 438, RULE_explainstmt = 439, RULE_explainablestmt = 440, 
		RULE_explain_option_list = 441, RULE_explain_option_elem = 442, RULE_explain_option_name = 443, 
		RULE_explain_option_arg = 444, RULE_preparestmt = 445, RULE_prep_type_clause = 446, 
		RULE_preparablestmt = 447, RULE_executestmt = 448, RULE_execute_param_clause = 449, 
		RULE_deallocatestmt = 450, RULE_insertstmt = 451, RULE_insert_target = 452, 
		RULE_insert_rest = 453, RULE_override_kind = 454, RULE_insert_column_list = 455, 
		RULE_insert_column_item = 456, RULE_opt_on_conflict = 457, RULE_opt_conf_expr = 458, 
		RULE_returning_clause = 459, RULE_deletestmt = 460, RULE_using_clause = 461, 
		RULE_lockstmt = 462, RULE_opt_lock = 463, RULE_lock_type = 464, RULE_opt_nowait = 465, 
		RULE_opt_nowait_or_skip = 466, RULE_updatestmt = 467, RULE_set_clause_list = 468, 
		RULE_set_clause = 469, RULE_set_target = 470, RULE_set_target_list = 471, 
		RULE_declarecursorstmt = 472, RULE_cursor_name = 473, RULE_cursor_options = 474, 
		RULE_opt_hold = 475, RULE_selectstmt = 476, RULE_select_with_parens = 477, 
		RULE_select_no_parens = 478, RULE_select_clause = 479, RULE_simple_select = 480, 
		RULE_set_operator = 481, RULE_set_operator_with_all_or_distinct = 482, 
		RULE_with_clause = 483, RULE_cte_list = 484, RULE_common_table_expr = 485, 
		RULE_opt_materialized = 486, RULE_opt_with_clause = 487, RULE_into_clause = 488, 
		RULE_opt_strict = 489, RULE_opttempTableName = 490, RULE_opt_table = 491, 
		RULE_all_or_distinct = 492, RULE_distinct_clause = 493, RULE_opt_all_clause = 494, 
		RULE_opt_sort_clause = 495, RULE_sort_clause = 496, RULE_sortby_list = 497, 
		RULE_sortby = 498, RULE_select_limit = 499, RULE_opt_select_limit = 500, 
		RULE_limit_clause = 501, RULE_offset_clause = 502, RULE_select_limit_value = 503, 
		RULE_select_offset_value = 504, RULE_select_fetch_first_value = 505, RULE_i_or_f_const = 506, 
		RULE_row_or_rows = 507, RULE_first_or_next = 508, RULE_group_clause = 509, 
		RULE_group_by_list = 510, RULE_group_by_item = 511, RULE_empty_grouping_set = 512, 
		RULE_rollup_clause = 513, RULE_cube_clause = 514, RULE_grouping_sets_clause = 515, 
		RULE_having_clause = 516, RULE_for_locking_clause = 517, RULE_opt_for_locking_clause = 518, 
		RULE_for_locking_items = 519, RULE_for_locking_item = 520, RULE_for_locking_strength = 521, 
		RULE_locked_rels_list = 522, RULE_values_clause = 523, RULE_from_clause = 524, 
		RULE_from_list = 525, RULE_table_ref = 526, RULE_alias_clause = 527, RULE_opt_alias_clause = 528, 
		RULE_func_alias_clause = 529, RULE_join_type = 530, RULE_join_outer = 531, 
		RULE_join_qual = 532, RULE_relation_expr = 533, RULE_relation_expr_list = 534, 
		RULE_relation_expr_opt_alias = 535, RULE_tablesample_clause = 536, RULE_opt_repeatable_clause = 537, 
		RULE_func_table = 538, RULE_rowsfrom_item = 539, RULE_rowsfrom_list = 540, 
		RULE_opt_col_def_list = 541, RULE_opt_ordinality = 542, RULE_where_clause = 543, 
		RULE_where_or_current_clause = 544, RULE_opttablefuncelementlist = 545, 
		RULE_tablefuncelementlist = 546, RULE_tablefuncelement = 547, RULE_xmltable = 548, 
		RULE_xmltable_column_list = 549, RULE_xmltable_column_el = 550, RULE_xmltable_column_option_list = 551, 
		RULE_xmltable_column_option_el = 552, RULE_xml_namespace_list = 553, RULE_xml_namespace_el = 554, 
		RULE_typename = 555, RULE_opt_array_bounds = 556, RULE_simpletypename = 557, 
		RULE_consttypename = 558, RULE_generictype = 559, RULE_opt_type_modifiers = 560, 
		RULE_numeric = 561, RULE_opt_float = 562, RULE_bit = 563, RULE_constbit = 564, 
		RULE_bitwithlength = 565, RULE_bitwithoutlength = 566, RULE_character = 567, 
		RULE_constcharacter = 568, RULE_character_c = 569, RULE_opt_varying = 570, 
		RULE_constdatetime = 571, RULE_constinterval = 572, RULE_opt_timezone = 573, 
		RULE_opt_interval = 574, RULE_interval_second = 575, RULE_opt_escape = 576, 
		RULE_a_expr = 577, RULE_not_la = 578, RULE_b_expr = 579, RULE_c_expr = 580, 
		RULE_plsqlvariablename = 581, RULE_func_application = 582, RULE_func_expr = 583, 
		RULE_func_expr_windowless = 584, RULE_func_expr_common_subexpr = 585, 
		RULE_xml_root_version = 586, RULE_opt_xml_root_standalone = 587, RULE_xml_attributes = 588, 
		RULE_xml_attribute_list = 589, RULE_xml_attribute_el = 590, RULE_document_or_content = 591, 
		RULE_xml_whitespace_option = 592, RULE_xmlexists_argument = 593, RULE_xml_passing_mech = 594, 
		RULE_within_group_clause = 595, RULE_filter_clause = 596, RULE_window_clause = 597, 
		RULE_window_definition_list = 598, RULE_window_definition = 599, RULE_over_clause = 600, 
		RULE_window_specification = 601, RULE_opt_existing_window_name = 602, 
		RULE_opt_partition_clause = 603, RULE_opt_frame_clause = 604, RULE_frame_extent = 605, 
		RULE_frame_bound = 606, RULE_opt_window_exclusion_clause = 607, RULE_row = 608, 
		RULE_explicit_row = 609, RULE_implicit_row = 610, RULE_sub_type = 611, 
		RULE_all_op = 612, RULE_mathop = 613, RULE_qual_op = 614, RULE_qual_all_op = 615, 
		RULE_subquery_Op = 616, RULE_expr_list = 617, RULE_func_arg_list = 618, 
		RULE_func_arg_expr = 619, RULE_type_list = 620, RULE_array_expr = 621, 
		RULE_array_expr_list = 622, RULE_extract_list = 623, RULE_extract_arg = 624, 
		RULE_unicode_normal_form = 625, RULE_overlay_list = 626, RULE_position_list = 627, 
		RULE_substr_list = 628, RULE_trim_list = 629, RULE_in_expr = 630, RULE_case_expr = 631, 
		RULE_when_clause_list = 632, RULE_when_clause = 633, RULE_case_default = 634, 
		RULE_case_arg = 635, RULE_columnref = 636, RULE_indirection_el = 637, 
		RULE_opt_slice_bound = 638, RULE_indirection = 639, RULE_opt_indirection = 640, 
		RULE_opt_asymmetric = 641, RULE_opt_target_list = 642, RULE_target_list = 643, 
		RULE_target_el = 644, RULE_qualified_name_list = 645, RULE_qualified_name = 646, 
		RULE_name_list = 647, RULE_name = 648, RULE_attr_name = 649, RULE_file_name = 650, 
		RULE_func_name = 651, RULE_aexprconst = 652, RULE_xconst = 653, RULE_bconst = 654, 
		RULE_fconst = 655, RULE_iconst = 656, RULE_sconst = 657, RULE_anysconst = 658, 
		RULE_opt_uescape = 659, RULE_signediconst = 660, RULE_roleid = 661, RULE_rolespec = 662, 
		RULE_role_list = 663, RULE_colid = 664, RULE_type_function_name = 665, 
		RULE_nonreservedword = 666, RULE_collabel = 667, RULE_identifier = 668, 
		RULE_plsqlidentifier = 669, RULE_unreserved_keyword = 670, RULE_col_name_keyword = 671, 
		RULE_type_func_name_keyword = 672, RULE_reserved_keyword = 673, RULE_pl_function = 674, 
		RULE_comp_options = 675, RULE_comp_option = 676, RULE_sharp = 677, RULE_option_value = 678, 
		RULE_opt_semi = 679, RULE_pl_block = 680, RULE_decl_sect = 681, RULE_decl_start = 682, 
		RULE_decl_stmts = 683, RULE_label_decl = 684, RULE_decl_stmt = 685, RULE_decl_statement = 686, 
		RULE_opt_scrollable = 687, RULE_decl_cursor_query = 688, RULE_decl_cursor_args = 689, 
		RULE_decl_cursor_arglist = 690, RULE_decl_cursor_arg = 691, RULE_decl_is_for = 692, 
		RULE_decl_aliasitem = 693, RULE_decl_varname = 694, RULE_decl_const = 695, 
		RULE_decl_datatype = 696, RULE_decl_collate = 697, RULE_decl_notnull = 698, 
		RULE_decl_defval = 699, RULE_decl_defkey = 700, RULE_assign_operator = 701, 
		RULE_proc_sect = 702, RULE_proc_stmt = 703, RULE_stmt_perform = 704, RULE_stmt_call = 705, 
		RULE_opt_expr_list = 706, RULE_stmt_assign = 707, RULE_stmt_getdiag = 708, 
		RULE_getdiag_area_opt = 709, RULE_getdiag_list = 710, RULE_getdiag_list_item = 711, 
		RULE_getdiag_item = 712, RULE_getdiag_target = 713, RULE_assign_var = 714, 
		RULE_stmt_if = 715, RULE_stmt_elsifs = 716, RULE_stmt_else = 717, RULE_stmt_case = 718, 
		RULE_opt_expr_until_when = 719, RULE_case_when_list = 720, RULE_case_when = 721, 
		RULE_opt_case_else = 722, RULE_stmt_loop = 723, RULE_stmt_while = 724, 
		RULE_stmt_for = 725, RULE_for_control = 726, RULE_opt_for_using_expression = 727, 
		RULE_opt_cursor_parameters = 728, RULE_opt_reverse = 729, RULE_opt_by_expression = 730, 
		RULE_for_variable = 731, RULE_stmt_foreach_a = 732, RULE_foreach_slice = 733, 
		RULE_stmt_exit = 734, RULE_exit_type = 735, RULE_stmt_return = 736, RULE_opt_return_result = 737, 
		RULE_stmt_raise = 738, RULE_opt_stmt_raise_level = 739, RULE_opt_raise_list = 740, 
		RULE_opt_raise_using = 741, RULE_opt_raise_using_elem = 742, RULE_opt_raise_using_elem_list = 743, 
		RULE_stmt_assert = 744, RULE_opt_stmt_assert_message = 745, RULE_loop_body = 746, 
		RULE_stmt_execsql = 747, RULE_stmt_dynexecute = 748, RULE_opt_execute_using = 749, 
		RULE_opt_execute_using_list = 750, RULE_opt_execute_into = 751, RULE_stmt_open = 752, 
		RULE_opt_open_bound_list_item = 753, RULE_opt_open_bound_list = 754, RULE_opt_open_using = 755, 
		RULE_sql_expression_list = 756, RULE_opt_scroll_option = 757, RULE_opt_scroll_option_no = 758, 
		RULE_stmt_fetch = 759, RULE_into_target = 760, RULE_opt_cursor_from = 761, 
		RULE_opt_fetch_direction = 762, RULE_stmt_move = 763, RULE_stmt_close = 764, 
		RULE_stmt_null = 765, RULE_stmt_commit = 766, RULE_stmt_rollback = 767, 
		RULE_plsql_opt_transaction_chain = 768, RULE_stmt_set = 769, RULE_cursor_variable = 770, 
		RULE_exception_sect = 771, RULE_proc_exceptions = 772, RULE_proc_exception = 773, 
		RULE_proc_conditions = 774, RULE_proc_condition = 775, RULE_opt_block_label = 776, 
		RULE_opt_loop_label = 777, RULE_opt_label = 778, RULE_opt_exitcond = 779, 
		RULE_any_identifier = 780, RULE_plsql_unreserved_keyword = 781, RULE_sql_expression = 782, 
		RULE_expr_until_then = 783, RULE_expr_until_semi = 784, RULE_expr_until_rightbracket = 785, 
		RULE_expr_until_loop = 786, RULE_make_execsql_stmt = 787, RULE_opt_returning_clause_into = 788;
	public static readonly string[] ruleNames = {
		"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
		"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
		"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
		"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
		"altergroupstmt", "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
		"schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
		"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
		"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
		"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
		"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
		"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
		"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
		"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
		"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
		"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
		"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
		"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
		"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
		"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
		"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
		"opttemp", "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
		"typedtableelementlist", "tableelement", "typedtableelement", "columnDef", 
		"columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
		"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
		"tablelikeoption", "tableconstraint", "constraintelem", "opt_no_inherit", 
		"opt_column_list", "columnlist", "columnElem", "opt_c_include", "key_match", 
		"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
		"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
		"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
		"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
		"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
		"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
		"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
		"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
		"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
		"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
		"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
		"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
		"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
		"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
		"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
		"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
		"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
		"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
		"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
		"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
		"triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
		"transitionoldornew", "transitionrowortable", "transitionrelname", "triggerforspec", 
		"triggerforopteach", "triggerfortype", "triggerwhen", "function_or_procedure", 
		"triggerfuncargs", "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
		"constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
		"event_trigger_when_item", "event_trigger_value_list", "altereventtrigstmt", 
		"enable_trigger", "createassertionstmt", "definestmt", "definition", "def_list", 
		"def_elem", "def_arg", "old_aggr_definition", "old_aggr_list", "old_aggr_elem", 
		"opt_enum_val_list", "enum_val_list", "alterenumstmt", "opt_if_not_exists", 
		"createopclassstmt", "opclass_item_list", "opclass_item", "opt_default", 
		"opt_opfamily", "opclass_purpose", "opt_recheck", "createopfamilystmt", 
		"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
		"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
		"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
		"any_name_list", "any_name", "attrs", "type_name_list", "truncatestmt", 
		"opt_restart_seqs", "commentstmt", "comment_text", "seclabelstmt", "opt_provider", 
		"security_label", "fetchstmt", "fetch_args", "from_in", "opt_from_in", 
		"grantstmt", "revokestmt", "privileges", "privilege_list", "privilege", 
		"privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
		"grantrolestmt", "revokerolestmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
		"defacl_privilege_target", "indexstmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem_options", 
		"index_elem", "opt_include", "index_including_params", "opt_collate", 
		"opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
		"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
		"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
		"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
		"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
		"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
		"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
		"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
		"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
		"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
		"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
		"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
		"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
		"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
		"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
		"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
		"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
		"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
		"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
		"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
		"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
		"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
		"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", "createdbstmt", 
		"createdb_opt_list", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
		"opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", 
		"drop_option_list", "drop_option", "altercollationstmt", "altersystemstmt", 
		"createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
		"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
		"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
		"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
		"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
		"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
		"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
		"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
		"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
		"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
		"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
		"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
		"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", "set_target", 
		"set_target_list", "declarecursorstmt", "cursor_name", "cursor_options", 
		"opt_hold", "selectstmt", "select_with_parens", "select_no_parens", "select_clause", 
		"simple_select", "set_operator", "set_operator_with_all_or_distinct", 
		"with_clause", "cte_list", "common_table_expr", "opt_materialized", "opt_with_clause", 
		"into_clause", "opt_strict", "opttempTableName", "opt_table", "all_or_distinct", 
		"distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause", 
		"sortby_list", "sortby", "select_limit", "opt_select_limit", "limit_clause", 
		"offset_clause", "select_limit_value", "select_offset_value", "select_fetch_first_value", 
		"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
		"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
		"grouping_sets_clause", "having_clause", "for_locking_clause", "opt_for_locking_clause", 
		"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
		"values_clause", "from_clause", "from_list", "table_ref", "alias_clause", 
		"opt_alias_clause", "func_alias_clause", "join_type", "join_outer", "join_qual", 
		"relation_expr", "relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
		"opt_repeatable_clause", "func_table", "rowsfrom_item", "rowsfrom_list", 
		"opt_col_def_list", "opt_ordinality", "where_clause", "where_or_current_clause", 
		"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
		"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
		"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
		"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
		"opt_type_modifiers", "numeric", "opt_float", "bit", "constbit", "bitwithlength", 
		"bitwithoutlength", "character", "constcharacter", "character_c", "opt_varying", 
		"constdatetime", "constinterval", "opt_timezone", "opt_interval", "interval_second", 
		"opt_escape", "a_expr", "not_la", "b_expr", "c_expr", "plsqlvariablename", 
		"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
		"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
		"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
		"window_definition_list", "window_definition", "over_clause", "window_specification", 
		"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
		"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", "explicit_row", 
		"implicit_row", "sub_type", "all_op", "mathop", "qual_op", "qual_all_op", 
		"subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", "type_list", 
		"array_expr", "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
		"overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
		"case_expr", "when_clause_list", "when_clause", "case_default", "case_arg", 
		"columnref", "indirection_el", "opt_slice_bound", "indirection", "opt_indirection", 
		"opt_asymmetric", "opt_target_list", "target_list", "target_el", "qualified_name_list", 
		"qualified_name", "name_list", "name", "attr_name", "file_name", "func_name", 
		"aexprconst", "xconst", "bconst", "fconst", "iconst", "sconst", "anysconst", 
		"opt_uescape", "signediconst", "roleid", "rolespec", "role_list", "colid", 
		"type_function_name", "nonreservedword", "collabel", "identifier", "plsqlidentifier", 
		"unreserved_keyword", "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
		"pl_function", "comp_options", "comp_option", "sharp", "option_value", 
		"opt_semi", "pl_block", "decl_sect", "decl_start", "decl_stmts", "label_decl", 
		"decl_stmt", "decl_statement", "opt_scrollable", "decl_cursor_query", 
		"decl_cursor_args", "decl_cursor_arglist", "decl_cursor_arg", "decl_is_for", 
		"decl_aliasitem", "decl_varname", "decl_const", "decl_datatype", "decl_collate", 
		"decl_notnull", "decl_defval", "decl_defkey", "assign_operator", "proc_sect", 
		"proc_stmt", "stmt_perform", "stmt_call", "opt_expr_list", "stmt_assign", 
		"stmt_getdiag", "getdiag_area_opt", "getdiag_list", "getdiag_list_item", 
		"getdiag_item", "getdiag_target", "assign_var", "stmt_if", "stmt_elsifs", 
		"stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", "case_when", 
		"opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
		"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
		"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
		"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
		"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
		"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
		"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
		"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
		"sql_expression_list", "opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", 
		"into_target", "opt_cursor_from", "opt_fetch_direction", "stmt_move", 
		"stmt_close", "stmt_null", "stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", 
		"stmt_set", "cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
		"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
		"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
		"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
		"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", "'='", 
		"'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", "':='", 
		"'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'\\\\'", 
		null, null, null, null, null, null, null, null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
		"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", "LESS_EQUALS", 
		"EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", "TYPECAST", 
		"PERCENT", "PARAM", "Operator", "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", 
		"ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", "COLLATE", 
		"COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DEFAULT", "DEFERRABLE", 
		"DESC", "DISTINCT", "DO", "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", 
		"FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", "INITIALLY", 
		"INTERSECT", "INTO", "LATERAL_P", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
		"NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", "PRIMARY", 
		"REFERENCES", "RETURNING", "SELECT", "SESSION_USER", "SOME", "SYMMETRIC", 
		"TABLE", "THEN", "TO", "TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", 
		"USING", "VARIADIC", "WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", 
		"BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", 
		"FULL", "ILIKE", "INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", 
		"NOTNULL", "OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
		"ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", 
		"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
		"ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", 
		"CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", 
		"CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", 
		"CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", 
		"CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", "DATABASE", 
		"DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", 
		"DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", "DOCUMENT_P", 
		"DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", "ENCODING", "ENCRYPTED", 
		"ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
		"EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", 
		"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANTED", "HANDLER", 
		"HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
		"IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
		"INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", "INVOKER", 
		"ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
		"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "MAPPING", "MATCH", 
		"MATERIALIZED", "MAXVALUE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", 
		"MOVE", "NAME_P", "NAMES", "NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", 
		"NULLS_P", "OBJECT_P", "OF", "OFF", "OIDS", "OPERATOR", "OPTION", "OPTIONS", 
		"OWNED", "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", 
		"PLANS", "PRECEDING", "PREPARE", "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", 
		"PROCEDURAL", "PROCEDURE", "PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", 
		"RECHECK", "RECURSIVE", "REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", 
		"RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", 
		"RETURNS", "REVOKE", "ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", 
		"SCHEMA", "SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", 
		"SERIALIZABLE", "SERVER", "SESSION", "SET", "SHARE", "SHOW", "SIMPLE", 
		"SNAPSHOT", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS", 
		"STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "SYSID", "SYSTEM_P", 
		"TABLES", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", 
		"TRIGGER", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
		"UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", 
		"VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", "VIEW", "VOLATILE", 
		"WHITESPACE_P", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "YEAR_P", 
		"YES_P", "ZONE", "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", "CHARACTER", 
		"COALESCE", "DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", 
		"INOUT", "INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", 
		"NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", "REAL", 
		"ROW", "SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", 
		"TRIM", "VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", 
		"XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", 
		"CALL", "CURRENT_P", "CATALOG_P", "ATTACH", "DETACH", "EXPRESSION", "GENERATED", 
		"LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", 
		"METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", 
		"OUT_P", "END_P", "ROUTINES", "SCHEMAS", "PROCEDURES", "INPUT_P", "SUPPORT", 
		"PARALLEL", "SQL_P", "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", 
		"TIES", "ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", 
		"XMLTABLE", "COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", 
		"FILTER", "GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", 
		"VIEWS", "NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", "VARIABLE_CONFLICT", 
		"ERROR", "USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", "PERFORM", 
		"GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", "FOREACH", 
		"SLICE", "EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", "LOG", 
		"INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "Identifier", 
		"QuotedIdentifier", "UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", 
		"InvalidUnterminatedQuotedIdentifier", "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
		"InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
		"StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
		"UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
		"BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
		"InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
		"UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
		"InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
		"Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", "Newline", 
		"LineComment", "BlockComment", "UnterminatedBlockComment", "MetaCommand", 
		"EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
		"InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
		"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
		"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PostgreSQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PostgreSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		    private IParseTree GetParsedSqlTree(string script,int line = 0)
		    {
		        var ph = getPostgreSQLParser(script);
		        var result = ph.root();
		        foreach (var err in ph.ParseErrors)
		        {
		            ParseErrors.Add(new ParseError(err.Number, err.Offset, err.Line + line, err.Column, err.Message));
		        }
	            return result;
	        }
	    private void ParseRoutineBody(Createfunc_opt_listContext _localctx)
	    {
	        var lang =
	            _localctx
	                .createfunc_opt_item()
	                .FirstOrDefault(coi => coi.LANGUAGE() != null)
	                ?.nonreservedword_or_sconst()?.nonreservedword()?.identifier()?
	                .Identifier()?.GetText();
	        var func_as = _localctx.createfunc_opt_item()
	            .FirstOrDefault(coi => coi.func_as() != null);
	        if (func_as != null)
	        {
	            var txt = GetRoutineBodyString(func_as.func_as().sconst(0));
	            var line = func_as.func_as()
	                .sconst(0).Start.Line;
	            var ph = getPostgreSQLParser(txt);
	            switch (lang)
	            {
	                case "plpgsql":
	                    func_as.func_as().Definition = ph.plsqlroot();
	                    break;
	                case "sql":
	                    func_as.func_as().Definition = ph.root();
	                    break;
	            }
	            foreach (var err in ph.ParseErrors)
	            {
	                ParseErrors.Add(new ParseError(err.Number, err.Offset, err.Line + line, err.Column, err.Message));
	            }
	        }
	    }
	    private static string TrimQuotes(string s)
	    {
	        return string.IsNullOrEmpty(s) ? s : s.Substring(1, s.Length - 2);
	    }

	        public static string unquote(string s)
	        {
	            var r = new StringBuilder(s.Length);
	            var i = 0;
				while(i<s.Length)
	            {
	                var c = s[i];
	                r.Append(c);
					if(c=='\''&&i<s.Length-1&&(s[i+1]=='\'')) i++;
	                i++;
	            }
			return r.ToString();
	        }
		        public static string GetRoutineBodyString(SconstContext rule)
		        {
		            var anysconst = rule.anysconst();
		            var StringConstant = anysconst.StringConstant();
		            if (null != StringConstant) return unquote(TrimQuotes(StringConstant.GetText()));
		            var UnicodeEscapeStringConstant = anysconst.UnicodeEscapeStringConstant();
		            if (null != UnicodeEscapeStringConstant) return TrimQuotes(UnicodeEscapeStringConstant.GetText());
		            var EscapeStringConstant = anysconst.EscapeStringConstant();
		            if (null != EscapeStringConstant) return TrimQuotes(EscapeStringConstant.GetText());
		            string result = "";
		            var dollartext = anysconst.DollarText();
		            foreach (var s in dollartext)
		            {
		                result += s;
		            }
		            return result;
		        }

		    public static PostgreSQLParser getPostgreSQLParser(string script)
		    {
		       var CharStream = CharStreams.fromString(script);
		       var Lexer = new PostgreSQLLexer(CharStream);
		       var Tokens = new CommonTokenStream(Lexer);
		       var Parser = new PostgreSQLParser(Tokens);
		       var ErrorListener = new PostgreSQLParserErrorListener();
		       ErrorListener.grammar = Parser;
		       Parser.AddErrorListener(ErrorListener);
		       return Parser;
		    }

		    internal class PostgreSQLParserErrorListener : BaseErrorListener
	        {
	            internal PostgreSQLParser grammar;
		        public PostgreSQLParserErrorListener()
		        {
		        }
		        public override void SyntaxError(TextWriter output, IRecognizer recognizer, IToken offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e)
		        {
		            grammar?.ParseErrors.Add(new ParseError(0, 0, line, charPositionInLine, msg));
		        }
		    }

	    public class ParseError
	    {
	        public ParseError(int number, int offset, int line, int column, string message)
	        {
	            Number = number;
	            Offset = offset;
	            Message = message;
	            Line = line;
	            Column = column;
	        }
	        public int Number { get; }
	        public int Offset { get; }
	        public int Line { get; }
	        public int Column { get; }
	        public string Message { get; }
	    }
	        private readonly IList<ParseError> m_ParseErrors = new List<ParseError>();
	        public IList<ParseError> ParseErrors => m_ParseErrors;
	        public IParseTree Root => root();
	        public IParseTree PlSqlRoot => plsqlroot();

		public PostgreSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PostgreSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtblockContext stmtblock() {
			return GetRuleContext<StmtblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PostgreSQLParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578;
			stmtblock();
			State = 1579;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlrootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pl_functionContext pl_function() {
			return GetRuleContext<Pl_functionContext>(0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlroot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlroot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlroot(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlrootContext plsqlroot() {
		PlsqlrootContext _localctx = new PlsqlrootContext(Context, State);
		EnterRule(_localctx, 2, RULE_plsqlroot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtmultiContext stmtmulti() {
			return GetRuleContext<StmtmultiContext>(0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtblock(this);
		}
	}

	[RuleVersion(0)]
	public StmtblockContext stmtblock() {
		StmtblockContext _localctx = new StmtblockContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmtblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1583;
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlconsolecommandContext[] plsqlconsolecommand() {
			return GetRuleContexts<PlsqlconsolecommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlconsolecommandContext plsqlconsolecommand(int i) {
			return GetRuleContext<PlsqlconsolecommandContext>(i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtmulti(this);
		}
	}

	[RuleVersion(0)]
	public StmtmultiContext stmtmulti() {
		StmtmultiContext _localctx = new StmtmultiContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1585;
				stmt();
				State = 1588;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMI:
					{
					State = 1586;
					Match(SEMI);
					}
					break;
				case MetaCommand:
					{
					State = 1587;
					plsqlconsolecommand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << SEMI) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << CREATE) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (GRANT - 65)) | (1L << (SELECT - 65)) | (1L << (TABLE - 65)) | (1L << (WITH - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ABORT_P - 129)) | (1L << (ALTER - 129)) | (1L << (BEGIN_P - 129)) | (1L << (CHECKPOINT - 129)) | (1L << (CLOSE - 129)) | (1L << (CLUSTER - 129)) | (1L << (COMMENT - 129)) | (1L << (COMMIT - 129)) | (1L << (COPY - 129)) | (1L << (DEALLOCATE - 129)) | (1L << (DECLARE - 129)) | (1L << (DELETE_P - 129)) | (1L << (DISCARD - 129)) | (1L << (DROP - 129)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (EXECUTE - 202)) | (1L << (EXPLAIN - 202)) | (1L << (INSERT - 202)) | (1L << (LISTEN - 202)) | (1L << (LOAD - 202)) | (1L << (LOCK_P - 202)) | (1L << (MOVE - 202)) | (1L << (NOTIFY - 202)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (PREPARE - 281)) | (1L << (REASSIGN - 281)) | (1L << (REFRESH - 281)) | (1L << (REINDEX - 281)) | (1L << (RELEASE - 281)) | (1L << (RESET - 281)) | (1L << (REVOKE - 281)) | (1L << (ROLLBACK - 281)) | (1L << (SAVEPOINT - 281)) | (1L << (SECURITY - 281)) | (1L << (SET - 281)) | (1L << (SHOW - 281)) | (1L << (START - 281)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (TRUNCATE - 349)) | (1L << (UNLISTEN - 349)) | (1L << (UPDATE - 349)) | (1L << (VACUUM - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (VALUES - 413)) | (1L << (CALL - 413)) | (1L << (IMPORT_P - 413)) | (1L << (END_P - 413)))) != 0) || _la==MetaCommand );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltereventtrigstmtContext altereventtrigstmt() {
			return GetRuleContext<AltereventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercollationstmtContext altercollationstmt() {
			return GetRuleContext<AltercollationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasestmtContext alterdatabasestmt() {
			return GetRuleContext<AlterdatabasestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return GetRuleContext<AlterdatabasesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return GetRuleContext<AlterdefaultprivilegesstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdomainstmtContext alterdomainstmt() {
			return GetRuleContext<AlterdomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterenumstmtContext alterenumstmt() {
			return GetRuleContext<AlterenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensionstmtContext alterextensionstmt() {
			return GetRuleContext<AlterextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return GetRuleContext<AlterextensioncontentsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfdwstmtContext alterfdwstmt() {
			return GetRuleContext<AlterfdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterforeignserverstmtContext alterforeignserverstmt() {
			return GetRuleContext<AlterforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfunctionstmtContext alterfunctionstmt() {
			return GetRuleContext<AlterfunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltergroupstmtContext altergroupstmt() {
			return GetRuleContext<AltergroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return GetRuleContext<AlterobjectdependsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectschemastmtContext alterobjectschemastmt() {
			return GetRuleContext<AlterobjectschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterownerstmtContext alterownerstmt() {
			return GetRuleContext<AlterownerstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroperatorstmtContext alteroperatorstmt() {
			return GetRuleContext<AlteroperatorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertypestmtContext altertypestmt() {
			return GetRuleContext<AltertypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpolicystmtContext alterpolicystmt() {
			return GetRuleContext<AlterpolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterseqstmtContext alterseqstmt() {
			return GetRuleContext<AlterseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersystemstmtContext altersystemstmt() {
			return GetRuleContext<AltersystemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertablestmtContext altertablestmt() {
			return GetRuleContext<AltertablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertblspcstmtContext altertblspcstmt() {
			return GetRuleContext<AltertblspcstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercompositetypestmtContext altercompositetypestmt() {
			return GetRuleContext<AltercompositetypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpublicationstmtContext alterpublicationstmt() {
			return GetRuleContext<AlterpublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolesetstmtContext alterrolesetstmt() {
			return GetRuleContext<AlterrolesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolestmtContext alterrolestmt() {
			return GetRuleContext<AlterrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersubscriptionstmtContext altersubscriptionstmt() {
			return GetRuleContext<AltersubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterstatsstmtContext alterstatsstmt() {
			return GetRuleContext<AlterstatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return GetRuleContext<AltertsconfigurationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsdictionarystmtContext altertsdictionarystmt() {
			return GetRuleContext<AltertsdictionarystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterusermappingstmtContext alterusermappingstmt() {
			return GetRuleContext<AlterusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzestmtContext analyzestmt() {
			return GetRuleContext<AnalyzestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckpointstmtContext checkpointstmt() {
			return GetRuleContext<CheckpointstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseportalstmtContext closeportalstmt() {
			return GetRuleContext<CloseportalstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterstmtContext clusterstmt() {
			return GetRuleContext<ClusterstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentstmtContext commentstmt() {
			return GetRuleContext<CommentstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintssetstmtContext constraintssetstmt() {
			return GetRuleContext<ConstraintssetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopystmtContext copystmt() {
			return GetRuleContext<CopystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateamstmtContext createamstmt() {
			return GetRuleContext<CreateamstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateassertionstmtContext createassertionstmt() {
			return GetRuleContext<CreateassertionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatecaststmtContext createcaststmt() {
			return GetRuleContext<CreatecaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateconversionstmtContext createconversionstmt() {
			return GetRuleContext<CreateconversionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedomainstmtContext createdomainstmt() {
			return GetRuleContext<CreatedomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateextensionstmtContext createextensionstmt() {
			return GetRuleContext<CreateextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefdwstmtContext createfdwstmt() {
			return GetRuleContext<CreatefdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeignserverstmtContext createforeignserverstmt() {
			return GetRuleContext<CreateforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeigntablestmtContext createforeigntablestmt() {
			return GetRuleContext<CreateforeigntablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefunctionstmtContext createfunctionstmt() {
			return GetRuleContext<CreatefunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreategroupstmtContext creategroupstmt() {
			return GetRuleContext<CreategroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopclassstmtContext createopclassstmt() {
			return GetRuleContext<CreateopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopfamilystmtContext createopfamilystmt() {
			return GetRuleContext<CreateopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepublicationstmtContext createpublicationstmt() {
			return GetRuleContext<CreatepublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteropfamilystmtContext alteropfamilystmt() {
			return GetRuleContext<AlteropfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepolicystmtContext createpolicystmt() {
			return GetRuleContext<CreatepolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateplangstmtContext createplangstmt() {
			return GetRuleContext<CreateplangstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateschemastmtContext createschemastmt() {
			return GetRuleContext<CreateschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return GetRuleContext<CreatesubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestatsstmtContext createstatsstmt() {
			return GetRuleContext<CreatestatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetablespacestmtContext createtablespacestmt() {
			return GetRuleContext<CreatetablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetransformstmtContext createtransformstmt() {
			return GetRuleContext<CreatetransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateeventtrigstmtContext createeventtrigstmt() {
			return GetRuleContext<CreateeventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreaterolestmtContext createrolestmt() {
			return GetRuleContext<CreaterolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateuserstmtContext createuserstmt() {
			return GetRuleContext<CreateuserstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateusermappingstmtContext createusermappingstmt() {
			return GetRuleContext<CreateusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedbstmtContext createdbstmt() {
			return GetRuleContext<CreatedbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatestmtContext deallocatestmt() {
			return GetRuleContext<DeallocatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinestmtContext definestmt() {
			return GetRuleContext<DefinestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardstmtContext discardstmt() {
			return GetRuleContext<DiscardstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DostmtContext dostmt() {
			return GetRuleContext<DostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropcaststmtContext dropcaststmt() {
			return GetRuleContext<DropcaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopclassstmtContext dropopclassstmt() {
			return GetRuleContext<DropopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopfamilystmtContext dropopfamilystmt() {
			return GetRuleContext<DropopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropownedstmtContext dropownedstmt() {
			return GetRuleContext<DropownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropstmtContext dropstmt() {
			return GetRuleContext<DropstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return GetRuleContext<DropsubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptablespacestmtContext droptablespacestmt() {
			return GetRuleContext<DroptablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptransformstmtContext droptransformstmt() {
			return GetRuleContext<DroptransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroprolestmtContext droprolestmt() {
			return GetRuleContext<DroprolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropusermappingstmtContext dropusermappingstmt() {
			return GetRuleContext<DropusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropdbstmtContext dropdbstmt() {
			return GetRuleContext<DropdbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FetchstmtContext fetchstmt() {
			return GetRuleContext<FetchstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantrolestmtContext grantrolestmt() {
			return GetRuleContext<GrantrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportforeignschemastmtContext importforeignschemastmt() {
			return GetRuleContext<ImportforeignschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListenstmtContext listenstmt() {
			return GetRuleContext<ListenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadstmtContext loadstmt() {
			return GetRuleContext<LoadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockstmtContext lockstmt() {
			return GetRuleContext<LockstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparestmtContext preparestmt() {
			return GetRuleContext<PreparestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReassignownedstmtContext reassignownedstmt() {
			return GetRuleContext<ReassignownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReindexstmtContext reindexstmt() {
			return GetRuleContext<ReindexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveaggrstmtContext removeaggrstmt() {
			return GetRuleContext<RemoveaggrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovefuncstmtContext removefuncstmt() {
			return GetRuleContext<RemovefuncstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveoperstmtContext removeoperstmt() {
			return GetRuleContext<RemoveoperstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamestmtContext renamestmt() {
			return GetRuleContext<RenamestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokestmtContext revokestmt() {
			return GetRuleContext<RevokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokerolestmtContext revokerolestmt() {
			return GetRuleContext<RevokerolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulestmtContext rulestmt() {
			return GetRuleContext<RulestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeclabelstmtContext seclabelstmt() {
			return GetRuleContext<SeclabelstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionstmtContext transactionstmt() {
			return GetRuleContext<TransactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncatestmtContext truncatestmt() {
			return GetRuleContext<TruncatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlistenstmtContext unlistenstmt() {
			return GetRuleContext<UnlistenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VacuumstmtContext vacuumstmt() {
			return GetRuleContext<VacuumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesetstmtContext variablesetstmt() {
			return GetRuleContext<VariablesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableshowstmtContext variableshowstmt() {
			return GetRuleContext<VariableshowstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlconsolecommandContext plsqlconsolecommand() {
			return GetRuleContext<PlsqlconsolecommandContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 1719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1594;
				altereventtrigstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1595;
				altercollationstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1596;
				alterdatabasestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1597;
				alterdatabasesetstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1598;
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1599;
				alterdomainstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1600;
				alterenumstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1601;
				alterextensionstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1602;
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1603;
				alterfdwstmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1604;
				alterforeignserverstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1605;
				alterfunctionstmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1606;
				altergroupstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1607;
				alterobjectdependsstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1608;
				alterobjectschemastmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1609;
				alterownerstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1610;
				alteroperatorstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1611;
				altertypestmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1612;
				alterpolicystmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1613;
				alterseqstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1614;
				altersystemstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1615;
				altertablestmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1616;
				altertblspcstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1617;
				altercompositetypestmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1618;
				alterpublicationstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1619;
				alterrolesetstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1620;
				alterrolestmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1621;
				altersubscriptionstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1622;
				alterstatsstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1623;
				altertsconfigurationstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1624;
				altertsdictionarystmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1625;
				alterusermappingstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1626;
				analyzestmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1627;
				callstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1628;
				checkpointstmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1629;
				closeportalstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1630;
				clusterstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1631;
				commentstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1632;
				constraintssetstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1633;
				copystmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1634;
				createamstmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1635;
				createasstmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1636;
				createassertionstmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1637;
				createcaststmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1638;
				createconversionstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1639;
				createdomainstmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1640;
				createextensionstmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1641;
				createfdwstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1642;
				createforeignserverstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1643;
				createforeigntablestmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1644;
				createfunctionstmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1645;
				creategroupstmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1646;
				creatematviewstmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1647;
				createopclassstmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1648;
				createopfamilystmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1649;
				createpublicationstmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1650;
				alteropfamilystmt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1651;
				createpolicystmt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1652;
				createplangstmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1653;
				createschemastmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1654;
				createseqstmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1655;
				createstmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1656;
				createsubscriptionstmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1657;
				createstatsstmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1658;
				createtablespacestmt();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1659;
				createtransformstmt();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1660;
				createtrigstmt();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1661;
				createeventtrigstmt();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1662;
				createrolestmt();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1663;
				createuserstmt();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1664;
				createusermappingstmt();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1665;
				createdbstmt();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1666;
				deallocatestmt();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1667;
				declarecursorstmt();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1668;
				definestmt();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1669;
				deletestmt();
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1670;
				discardstmt();
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1671;
				dostmt();
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1672;
				dropcaststmt();
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1673;
				dropopclassstmt();
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1674;
				dropopfamilystmt();
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1675;
				dropownedstmt();
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1676;
				dropstmt();
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1677;
				dropsubscriptionstmt();
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1678;
				droptablespacestmt();
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1679;
				droptransformstmt();
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1680;
				droprolestmt();
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1681;
				dropusermappingstmt();
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1682;
				dropdbstmt();
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1683;
				executestmt();
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1684;
				explainstmt();
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1685;
				fetchstmt();
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1686;
				grantstmt();
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1687;
				grantrolestmt();
				}
				break;
			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1688;
				importforeignschemastmt();
				}
				break;
			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1689;
				indexstmt();
				}
				break;
			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1690;
				insertstmt();
				}
				break;
			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1691;
				listenstmt();
				}
				break;
			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1692;
				refreshmatviewstmt();
				}
				break;
			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1693;
				loadstmt();
				}
				break;
			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1694;
				lockstmt();
				}
				break;
			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1695;
				notifystmt();
				}
				break;
			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1696;
				preparestmt();
				}
				break;
			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1697;
				reassignownedstmt();
				}
				break;
			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1698;
				reindexstmt();
				}
				break;
			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1699;
				removeaggrstmt();
				}
				break;
			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1700;
				removefuncstmt();
				}
				break;
			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1701;
				removeoperstmt();
				}
				break;
			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1702;
				renamestmt();
				}
				break;
			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1703;
				revokestmt();
				}
				break;
			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1704;
				revokerolestmt();
				}
				break;
			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1705;
				rulestmt();
				}
				break;
			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1706;
				seclabelstmt();
				}
				break;
			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1707;
				selectstmt();
				}
				break;
			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1708;
				transactionstmt();
				}
				break;
			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1709;
				truncatestmt();
				}
				break;
			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1710;
				unlistenstmt();
				}
				break;
			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1711;
				updatestmt();
				}
				break;
			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1712;
				vacuumstmt();
				}
				break;
			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1713;
				variableresetstmt();
				}
				break;
			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1714;
				variablesetstmt();
				}
				break;
			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1715;
				variableshowstmt();
				}
				break;
			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1716;
				viewstmt();
				}
				break;
			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1717;
				plsqlconsolecommand();
				}
				break;
			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlconsolecommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MetaCommand() { return GetToken(PostgreSQLParser.MetaCommand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndMetaCommand() { return GetToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlconsolecommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlconsolecommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlconsolecommand(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlconsolecommandContext plsqlconsolecommand() {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			Match(MetaCommand);
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EndMetaCommand) {
				{
				State = 1722;
				Match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			Match(CALL);
			State = 1726;
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreaterolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreaterolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreaterolestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreaterolestmtContext createrolestmt() {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_createrolestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728;
			Match(CREATE);
			State = 1729;
			Match(ROLE);
			State = 1730;
			roleid();
			State = 1731;
			opt_with();
			State = 1732;
			optrolelist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with(this);
		}
	}

	[RuleVersion(0)]
	public Opt_withContext opt_with() {
		Opt_withContext _localctx = new Opt_withContext(Context, State);
		EnterRule(_localctx, 16, RULE_opt_with);
		try {
			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1734;
				Match(WITH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext createoptroleelem() {
			return GetRuleContext<CreateoptroleelemContext>(0);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public OptrolelistContext optrolelist() {
		return optrolelist(0);
	}

	private OptrolelistContext optrolelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OptrolelistContext _localctx = new OptrolelistContext(Context, _parentState);
		OptrolelistContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_optrolelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1743;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptrolelistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_optrolelist);
					State = 1739;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1740;
					createoptroleelem();
					}
					} 
				}
				State = 1745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AlteroptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptrolelistContext alteroptrolelist() {
			return GetRuleContext<AlteroptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem() {
			return GetRuleContext<AlteroptroleelemContext>(0);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptrolelistContext alteroptrolelist() {
		return alteroptrolelist(0);
	}

	private AlteroptrolelistContext alteroptrolelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(Context, _parentState);
		AlteroptrolelistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_alteroptrolelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1751;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AlteroptrolelistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alteroptrolelist);
					State = 1747;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1748;
					alteroptroleelem();
					}
					} 
				}
				State = 1753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AlteroptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptroleelemContext alteroptroleelem() {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(Context, State);
		EnterRule(_localctx, 22, RULE_alteroptroleelem);
		try {
			State = 1774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1754;
				Match(PASSWORD);
				State = 1755;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1756;
				Match(PASSWORD);
				State = 1757;
				Match(NULL_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1758;
				Match(ENCRYPTED);
				State = 1759;
				Match(PASSWORD);
				State = 1760;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1761;
				Match(UNENCRYPTED);
				State = 1762;
				Match(PASSWORD);
				State = 1763;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1764;
				Match(INHERIT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1765;
				Match(CONNECTION);
				State = 1766;
				Match(LIMIT);
				State = 1767;
				signediconst();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1768;
				Match(VALID);
				State = 1769;
				Match(UNTIL);
				State = 1770;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1771;
				Match(USER);
				State = 1772;
				role_list(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1773;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateoptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem() {
			return GetRuleContext<AlteroptroleelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createoptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateoptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateoptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public CreateoptroleelemContext createoptroleelem() {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(Context, State);
		EnterRule(_localctx, 24, RULE_createoptroleelem);
		try {
			State = 1789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1776;
				alteroptroleelem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1777;
				Match(SYSID);
				State = 1778;
				iconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1779;
				Match(ADMIN);
				State = 1780;
				role_list(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1781;
				Match(ROLE);
				State = 1782;
				role_list(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1783;
				Match(IN_P);
				State = 1784;
				Match(ROLE);
				State = 1785;
				role_list(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1786;
				Match(IN_P);
				State = 1787;
				Match(GROUP_P);
				State = 1788;
				role_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateuserstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createuserstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateuserstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateuserstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateuserstmtContext createuserstmt() {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_createuserstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1791;
			Match(CREATE);
			State = 1792;
			Match(USER);
			State = 1793;
			roleid();
			State = 1794;
			opt_with();
			State = 1795;
			optrolelist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptrolelistContext alteroptrolelist() {
			return GetRuleContext<AlteroptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolestmtContext alterrolestmt() {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterrolestmt);
		try {
			State = 1809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1797;
				Match(ALTER);
				State = 1798;
				Match(ROLE);
				State = 1799;
				rolespec();
				State = 1800;
				opt_with();
				State = 1801;
				alteroptrolelist(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1803;
				Match(ALTER);
				State = 1804;
				Match(USER);
				State = 1805;
				rolespec();
				State = 1806;
				opt_with();
				State = 1807;
				alteroptrolelist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_in_databaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_in_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_in_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_in_database(this);
		}
	}

	[RuleVersion(0)]
	public Opt_in_databaseContext opt_in_database() {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(Context, State);
		EnterRule(_localctx, 30, RULE_opt_in_database);
		try {
			State = 1815;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESET:
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1812;
				Match(IN_P);
				State = 1813;
				Match(DATABASE);
				State = 1814;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_in_databaseContext opt_in_database() {
			return GetRuleContext<Opt_in_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolesetstmtContext alterrolesetstmt() {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterrolesetstmt);
		try {
			State = 1841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1817;
				Match(ALTER);
				State = 1818;
				Match(ROLE);
				State = 1819;
				rolespec();
				State = 1820;
				opt_in_database();
				State = 1821;
				setresetclause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1823;
				Match(ALTER);
				State = 1824;
				Match(ROLE);
				State = 1825;
				Match(ALL);
				State = 1826;
				opt_in_database();
				State = 1827;
				setresetclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1829;
				Match(ALTER);
				State = 1830;
				Match(USER);
				State = 1831;
				rolespec();
				State = 1832;
				opt_in_database();
				State = 1833;
				setresetclause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1835;
				Match(ALTER);
				State = 1836;
				Match(USER);
				State = 1837;
				Match(ALL);
				State = 1838;
				opt_in_database();
				State = 1839;
				setresetclause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroprolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droprolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroprolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroprolestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroprolestmtContext droprolestmt() {
		DroprolestmtContext _localctx = new DroprolestmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_droprolestmt);
		try {
			State = 1867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1843;
				Match(DROP);
				State = 1844;
				Match(ROLE);
				State = 1845;
				role_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1846;
				Match(DROP);
				State = 1847;
				Match(ROLE);
				State = 1848;
				Match(IF_P);
				State = 1849;
				Match(EXISTS);
				State = 1850;
				role_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1851;
				Match(DROP);
				State = 1852;
				Match(USER);
				State = 1853;
				role_list(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1854;
				Match(DROP);
				State = 1855;
				Match(USER);
				State = 1856;
				Match(IF_P);
				State = 1857;
				Match(EXISTS);
				State = 1858;
				role_list(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1859;
				Match(DROP);
				State = 1860;
				Match(GROUP_P);
				State = 1861;
				role_list(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1862;
				Match(DROP);
				State = 1863;
				Match(GROUP_P);
				State = 1864;
				Match(IF_P);
				State = 1865;
				Match(EXISTS);
				State = 1866;
				role_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreategroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creategroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreategroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreategroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreategroupstmtContext creategroupstmt() {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869;
			Match(CREATE);
			State = 1870;
			Match(GROUP_P);
			State = 1871;
			roleid();
			State = 1872;
			opt_with();
			State = 1873;
			optrolelist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltergroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altergroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltergroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltergroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltergroupstmtContext altergroupstmt() {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875;
			Match(ALTER);
			State = 1876;
			Match(GROUP_P);
			State = 1877;
			rolespec();
			State = 1878;
			add_drop();
			State = 1879;
			Match(USER);
			State = 1880;
			role_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAdd_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAdd_drop(this);
		}
	}

	[RuleVersion(0)]
	public Add_dropContext add_drop() {
		Add_dropContext _localctx = new Add_dropContext(Context, State);
		EnterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptschemanameContext optschemaname() {
			return GetRuleContext<OptschemanameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptschemaeltlistContext optschemaeltlist() {
			return GetRuleContext<OptschemaeltlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateschemastmtContext createschemastmt() {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_createschemastmt);
		try {
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1884;
				Match(CREATE);
				State = 1885;
				Match(SCHEMA);
				State = 1886;
				optschemaname();
				State = 1887;
				Match(AUTHORIZATION);
				State = 1888;
				rolespec();
				State = 1889;
				optschemaeltlist(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1891;
				Match(CREATE);
				State = 1892;
				Match(SCHEMA);
				State = 1893;
				colid();
				State = 1894;
				optschemaeltlist(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1896;
				Match(CREATE);
				State = 1897;
				Match(SCHEMA);
				State = 1898;
				Match(IF_P);
				State = 1899;
				Match(NOT);
				State = 1900;
				Match(EXISTS);
				State = 1901;
				optschemaname();
				State = 1902;
				Match(AUTHORIZATION);
				State = 1903;
				rolespec();
				State = 1904;
				optschemaeltlist(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1906;
				Match(CREATE);
				State = 1907;
				Match(SCHEMA);
				State = 1908;
				Match(IF_P);
				State = 1909;
				Match(NOT);
				State = 1910;
				Match(EXISTS);
				State = 1911;
				colid();
				State = 1912;
				optschemaeltlist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemanameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaname(this);
		}
	}

	[RuleVersion(0)]
	public OptschemanameContext optschemaname() {
		OptschemanameContext _localctx = new OptschemanameContext(Context, State);
		EnterRule(_localctx, 44, RULE_optschemaname);
		try {
			State = 1918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1916;
				colid();
				}
				break;
			case AUTHORIZATION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemaeltlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptschemaeltlistContext optschemaeltlist() {
			return GetRuleContext<OptschemaeltlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext schema_stmt() {
			return GetRuleContext<Schema_stmtContext>(0);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaeltlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaeltlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaeltlist(this);
		}
	}

	[RuleVersion(0)]
	public OptschemaeltlistContext optschemaeltlist() {
		return optschemaeltlist(0);
	}

	private OptschemaeltlistContext optschemaeltlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(Context, _parentState);
		OptschemaeltlistContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_optschemaeltlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1925;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptschemaeltlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_optschemaeltlist);
					State = 1921;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1922;
					schema_stmt();
					}
					} 
				}
				State = 1927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Schema_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSchema_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSchema_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Schema_stmtContext schema_stmt() {
		Schema_stmtContext _localctx = new Schema_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_schema_stmt);
		try {
			State = 1934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1928;
				createstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1929;
				indexstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1930;
				createseqstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1931;
				createtrigstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1932;
				grantstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1933;
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariablesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariablesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariablesetstmtContext variablesetstmt() {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_variablesetstmt);
		try {
			State = 1944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1936;
				Match(SET);
				State = 1937;
				set_rest();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1938;
				Match(SET);
				State = 1939;
				Match(LOCAL);
				State = 1940;
				set_rest();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1941;
				Match(SET);
				State = 1942;
				Match(SESSION);
				State = 1943;
				set_rest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest(this);
		}
	}

	[RuleVersion(0)]
	public Set_restContext set_rest() {
		Set_restContext _localctx = new Set_restContext(Context, State);
		EnterRule(_localctx, 52, RULE_set_rest);
		try {
			State = 1954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1946;
				Match(TRANSACTION);
				State = 1947;
				transaction_mode_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1948;
				Match(SESSION);
				State = 1949;
				Match(CHARACTERISTICS);
				State = 1950;
				Match(AS);
				State = 1951;
				Match(TRANSACTION);
				State = 1952;
				transaction_mode_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1953;
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_set(this);
		}
	}

	[RuleVersion(0)]
	public Generic_setContext generic_set() {
		Generic_setContext _localctx = new Generic_setContext(Context, State);
		EnterRule(_localctx, 54, RULE_generic_set);
		try {
			State = 1972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1956;
				var_name(0);
				State = 1957;
				Match(TO);
				State = 1958;
				var_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1960;
				var_name(0);
				State = 1961;
				Match(EQUAL);
				State = 1962;
				var_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1964;
				var_name(0);
				State = 1965;
				Match(TO);
				State = 1966;
				Match(DEFAULT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1968;
				var_name(0);
				State = 1969;
				Match(EQUAL);
				State = 1970;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_rest_moreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Zone_valueContext zone_value() {
			return GetRuleContext<Zone_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_P() { return GetToken(PostgreSQLParser.CATALOG_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_encodingContext opt_encoding() {
			return GetRuleContext<Opt_encodingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest_more; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest_more(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest_more(this);
		}
	}

	[RuleVersion(0)]
	public Set_rest_moreContext set_rest_more() {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(Context, State);
		EnterRule(_localctx, 56, RULE_set_rest_more);
		try {
			State = 2002;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1974;
				generic_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1975;
				var_name(0);
				State = 1976;
				Match(FROM);
				State = 1977;
				Match(CURRENT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1979;
				Match(TIME);
				State = 1980;
				Match(ZONE);
				State = 1981;
				zone_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1982;
				Match(CATALOG_P);
				State = 1983;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1984;
				Match(SCHEMA);
				State = 1985;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1986;
				Match(NAMES);
				State = 1987;
				opt_encoding();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1988;
				Match(ROLE);
				State = 1989;
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1990;
				Match(SESSION);
				State = 1991;
				Match(AUTHORIZATION);
				State = 1992;
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1993;
				Match(SESSION);
				State = 1994;
				Match(AUTHORIZATION);
				State = 1995;
				Match(DEFAULT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1996;
				Match(XML_P);
				State = 1997;
				Match(OPTION);
				State = 1998;
				document_or_content();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1999;
				Match(TRANSACTION);
				State = 2000;
				Match(SNAPSHOT);
				State = 2001;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		return var_name(0);
	}

	private Var_nameContext var_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Var_nameContext _localctx = new Var_nameContext(Context, _parentState);
		Var_nameContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_var_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2005;
			colid();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2012;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_nameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_var_name);
					State = 2007;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2008;
					Match(DOT);
					State = 2009;
					colid();
					}
					} 
				}
				State = 2014;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext var_value() {
			return GetRuleContext<Var_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_list(this);
		}
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		return var_list(0);
	}

	private Var_listContext var_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Var_listContext _localctx = new Var_listContext(Context, _parentState);
		Var_listContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_var_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2016;
			var_value();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_var_list);
					State = 2018;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2019;
					Match(COMMA);
					State = 2020;
					var_value();
					}
					} 
				}
				State = 2025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Var_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_value(this);
		}
	}

	[RuleVersion(0)]
	public Var_valueContext var_value() {
		Var_valueContext _localctx = new Var_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_var_value);
		try {
			State = 2028;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2026;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2027;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iso_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iso_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIso_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIso_level(this);
		}
	}

	[RuleVersion(0)]
	public Iso_levelContext iso_level() {
		Iso_levelContext _localctx = new Iso_levelContext(Context, State);
		EnterRule(_localctx, 64, RULE_iso_level);
		try {
			State = 2037;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2030;
				Match(READ);
				State = 2031;
				Match(UNCOMMITTED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2032;
				Match(READ);
				State = 2033;
				Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2034;
				Match(REPEATABLE);
				State = 2035;
				Match(READ);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2036;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_boolean_or_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_boolean_or_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_boolean_or_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_boolean_or_string(this);
		}
	}

	[RuleVersion(0)]
	public Opt_boolean_or_stringContext opt_boolean_or_string() {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(Context, State);
		EnterRule(_localctx, 66, RULE_opt_boolean_or_string);
		try {
			State = 2043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2039;
				Match(TRUE_P);
				}
				break;
			case FALSE_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2040;
				Match(FALSE_P);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2041;
				Match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2042;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zone_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zone_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterZone_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitZone_value(this);
		}
	}

	[RuleVersion(0)]
	public Zone_valueContext zone_value() {
		Zone_valueContext _localctx = new Zone_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_zone_value);
		try {
			State = 2060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2045;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2046;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2047;
				constinterval();
				State = 2048;
				sconst();
				State = 2049;
				opt_interval();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2051;
				constinterval();
				State = 2052;
				Match(OPEN_PAREN);
				State = 2053;
				iconst();
				State = 2054;
				Match(CLOSE_PAREN);
				State = 2055;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2057;
				numericonly();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2058;
				Match(DEFAULT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2059;
				Match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_encodingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_encoding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_encoding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_encoding(this);
		}
	}

	[RuleVersion(0)]
	public Opt_encodingContext opt_encoding() {
		Opt_encodingContext _localctx = new Opt_encodingContext(Context, State);
		EnterRule(_localctx, 70, RULE_opt_encoding);
		try {
			State = 2065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2062;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2063;
				Match(DEFAULT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonreservedword_or_sconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword_or_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword_or_sconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword_or_sconst(this);
		}
	}

	[RuleVersion(0)]
	public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(Context, State);
		EnterRule(_localctx, 72, RULE_nonreservedword_or_sconst);
		try {
			State = 2069;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2067;
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2068;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableresetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reset_restContext reset_rest() {
			return GetRuleContext<Reset_restContext>(0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableresetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableresetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableresetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableresetstmtContext variableresetstmt() {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableresetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071;
			Match(RESET);
			State = 2072;
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reset_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_resetContext generic_reset() {
			return GetRuleContext<Generic_resetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reset_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReset_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReset_rest(this);
		}
	}

	[RuleVersion(0)]
	public Reset_restContext reset_rest() {
		Reset_restContext _localctx = new Reset_restContext(Context, State);
		EnterRule(_localctx, 76, RULE_reset_rest);
		try {
			State = 2082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2074;
				generic_reset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2075;
				Match(TIME);
				State = 2076;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2077;
				Match(TRANSACTION);
				State = 2078;
				Match(ISOLATION);
				State = 2079;
				Match(LEVEL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2080;
				Match(SESSION);
				State = 2081;
				Match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_reset(this);
		}
	}

	[RuleVersion(0)]
	public Generic_resetContext generic_reset() {
		Generic_resetContext _localctx = new Generic_resetContext(Context, State);
		EnterRule(_localctx, 78, RULE_generic_reset);
		try {
			State = 2086;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2084;
				var_name(0);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2085;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public SetresetclauseContext setresetclause() {
		SetresetclauseContext _localctx = new SetresetclauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_setresetclause);
		try {
			State = 2091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2088;
				Match(SET);
				State = 2089;
				set_rest();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2090;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionsetresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionsetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionsetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsetresetclauseContext functionsetresetclause() {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionsetresetclause);
		try {
			State = 2096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2093;
				Match(SET);
				State = 2094;
				set_rest_more();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2095;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableshowstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableshowstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableshowstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableshowstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableshowstmtContext variableshowstmt() {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_variableshowstmt);
		try {
			State = 2112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2098;
				Match(SHOW);
				State = 2099;
				var_name(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2100;
				Match(SHOW);
				State = 2101;
				Match(TIME);
				State = 2102;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2103;
				Match(SHOW);
				State = 2104;
				Match(TRANSACTION);
				State = 2105;
				Match(ISOLATION);
				State = 2106;
				Match(LEVEL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2107;
				Match(SHOW);
				State = 2108;
				Match(SESSION);
				State = 2109;
				Match(AUTHORIZATION);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2110;
				Match(SHOW);
				State = 2111;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintssetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_listContext constraints_set_list() {
			return GetRuleContext<Constraints_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_modeContext constraints_set_mode() {
			return GetRuleContext<Constraints_set_modeContext>(0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintssetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintssetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintssetstmt(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintssetstmtContext constraintssetstmt() {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_constraintssetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2114;
			Match(SET);
			State = 2115;
			Match(CONSTRAINTS);
			State = 2116;
			constraints_set_list();
			State = 2117;
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_listContext constraints_set_list() {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_constraints_set_list);
		try {
			State = 2121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2119;
				Match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2120;
				qualified_name_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_mode(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_modeContext constraints_set_mode() {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(Context, State);
		EnterRule(_localctx, 90, RULE_constraints_set_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckpointstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpointstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCheckpointstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCheckpointstmt(this);
		}
	}

	[RuleVersion(0)]
	public CheckpointstmtContext checkpointstmt() {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_checkpointstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2125;
			Match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardstmt(this);
		}
	}

	[RuleVersion(0)]
	public DiscardstmtContext discardstmt() {
		DiscardstmtContext _localctx = new DiscardstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_discardstmt);
		try {
			State = 2137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2127;
				Match(DISCARD);
				State = 2128;
				Match(ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2129;
				Match(DISCARD);
				State = 2130;
				Match(TEMP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2131;
				Match(DISCARD);
				State = 2132;
				Match(TEMPORARY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2133;
				Match(DISCARD);
				State = 2134;
				Match(PLANS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2135;
				Match(DISCARD);
				State = 2136;
				Match(SEQUENCES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdsContext alter_table_cmds() {
			return GetRuleContext<Alter_table_cmdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Partition_cmdContext partition_cmd() {
			return GetRuleContext<Partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLESPACE() { return GetTokens(PostgreSQLParser.TABLESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE(int i) {
			return GetToken(PostgreSQLParser.TABLESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowaitContext opt_nowait() {
			return GetRuleContext<Opt_nowaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_partition_cmdContext index_partition_cmd() {
			return GetRuleContext<Index_partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertablestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertablestmtContext altertablestmt() {
		AltertablestmtContext _localctx = new AltertablestmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_altertablestmt);
		try {
			State = 2309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2139;
				Match(ALTER);
				State = 2140;
				Match(TABLE);
				State = 2141;
				relation_expr();
				State = 2142;
				alter_table_cmds(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2144;
				Match(ALTER);
				State = 2145;
				Match(TABLE);
				State = 2146;
				Match(IF_P);
				State = 2147;
				Match(EXISTS);
				State = 2148;
				relation_expr();
				State = 2149;
				alter_table_cmds(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2151;
				Match(ALTER);
				State = 2152;
				Match(TABLE);
				State = 2153;
				relation_expr();
				State = 2154;
				partition_cmd();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2156;
				Match(ALTER);
				State = 2157;
				Match(TABLE);
				State = 2158;
				Match(IF_P);
				State = 2159;
				Match(EXISTS);
				State = 2160;
				relation_expr();
				State = 2161;
				partition_cmd();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2163;
				Match(ALTER);
				State = 2164;
				Match(TABLE);
				State = 2165;
				Match(ALL);
				State = 2166;
				Match(IN_P);
				State = 2167;
				Match(TABLESPACE);
				State = 2168;
				name();
				State = 2169;
				Match(SET);
				State = 2170;
				Match(TABLESPACE);
				State = 2171;
				name();
				State = 2172;
				opt_nowait();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2174;
				Match(ALTER);
				State = 2175;
				Match(TABLE);
				State = 2176;
				Match(ALL);
				State = 2177;
				Match(IN_P);
				State = 2178;
				Match(TABLESPACE);
				State = 2179;
				name();
				State = 2180;
				Match(OWNED);
				State = 2181;
				Match(BY);
				State = 2182;
				role_list(0);
				State = 2183;
				Match(SET);
				State = 2184;
				Match(TABLESPACE);
				State = 2185;
				name();
				State = 2186;
				opt_nowait();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2188;
				Match(ALTER);
				State = 2189;
				Match(INDEX);
				State = 2190;
				qualified_name();
				State = 2191;
				alter_table_cmds(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2193;
				Match(ALTER);
				State = 2194;
				Match(INDEX);
				State = 2195;
				Match(IF_P);
				State = 2196;
				Match(EXISTS);
				State = 2197;
				qualified_name();
				State = 2198;
				alter_table_cmds(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2200;
				Match(ALTER);
				State = 2201;
				Match(INDEX);
				State = 2202;
				qualified_name();
				State = 2203;
				index_partition_cmd();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2205;
				Match(ALTER);
				State = 2206;
				Match(INDEX);
				State = 2207;
				Match(ALL);
				State = 2208;
				Match(IN_P);
				State = 2209;
				Match(TABLESPACE);
				State = 2210;
				name();
				State = 2211;
				Match(SET);
				State = 2212;
				Match(TABLESPACE);
				State = 2213;
				name();
				State = 2214;
				opt_nowait();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2216;
				Match(ALTER);
				State = 2217;
				Match(INDEX);
				State = 2218;
				Match(ALL);
				State = 2219;
				Match(IN_P);
				State = 2220;
				Match(TABLESPACE);
				State = 2221;
				name();
				State = 2222;
				Match(OWNED);
				State = 2223;
				Match(BY);
				State = 2224;
				role_list(0);
				State = 2225;
				Match(SET);
				State = 2226;
				Match(TABLESPACE);
				State = 2227;
				name();
				State = 2228;
				opt_nowait();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2230;
				Match(ALTER);
				State = 2231;
				Match(SEQUENCE);
				State = 2232;
				qualified_name();
				State = 2233;
				alter_table_cmds(0);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2235;
				Match(ALTER);
				State = 2236;
				Match(SEQUENCE);
				State = 2237;
				Match(IF_P);
				State = 2238;
				Match(EXISTS);
				State = 2239;
				qualified_name();
				State = 2240;
				alter_table_cmds(0);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2242;
				Match(ALTER);
				State = 2243;
				Match(VIEW);
				State = 2244;
				qualified_name();
				State = 2245;
				alter_table_cmds(0);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2247;
				Match(ALTER);
				State = 2248;
				Match(VIEW);
				State = 2249;
				Match(IF_P);
				State = 2250;
				Match(EXISTS);
				State = 2251;
				qualified_name();
				State = 2252;
				alter_table_cmds(0);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2254;
				Match(ALTER);
				State = 2255;
				Match(MATERIALIZED);
				State = 2256;
				Match(VIEW);
				State = 2257;
				qualified_name();
				State = 2258;
				alter_table_cmds(0);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2260;
				Match(ALTER);
				State = 2261;
				Match(MATERIALIZED);
				State = 2262;
				Match(VIEW);
				State = 2263;
				Match(IF_P);
				State = 2264;
				Match(EXISTS);
				State = 2265;
				qualified_name();
				State = 2266;
				alter_table_cmds(0);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2268;
				Match(ALTER);
				State = 2269;
				Match(MATERIALIZED);
				State = 2270;
				Match(VIEW);
				State = 2271;
				Match(ALL);
				State = 2272;
				Match(IN_P);
				State = 2273;
				Match(TABLESPACE);
				State = 2274;
				name();
				State = 2275;
				Match(SET);
				State = 2276;
				Match(TABLESPACE);
				State = 2277;
				name();
				State = 2278;
				opt_nowait();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2280;
				Match(ALTER);
				State = 2281;
				Match(MATERIALIZED);
				State = 2282;
				Match(VIEW);
				State = 2283;
				Match(ALL);
				State = 2284;
				Match(IN_P);
				State = 2285;
				Match(TABLESPACE);
				State = 2286;
				name();
				State = 2287;
				Match(OWNED);
				State = 2288;
				Match(BY);
				State = 2289;
				role_list(0);
				State = 2290;
				Match(SET);
				State = 2291;
				Match(TABLESPACE);
				State = 2292;
				name();
				State = 2293;
				opt_nowait();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2295;
				Match(ALTER);
				State = 2296;
				Match(FOREIGN);
				State = 2297;
				Match(TABLE);
				State = 2298;
				relation_expr();
				State = 2299;
				alter_table_cmds(0);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2301;
				Match(ALTER);
				State = 2302;
				Match(FOREIGN);
				State = 2303;
				Match(TABLE);
				State = 2304;
				Match(IF_P);
				State = 2305;
				Match(EXISTS);
				State = 2306;
				relation_expr();
				State = 2307;
				alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext alter_table_cmd() {
			return GetRuleContext<Alter_table_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdsContext alter_table_cmds() {
			return GetRuleContext<Alter_table_cmdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdsContext alter_table_cmds() {
		return alter_table_cmds(0);
	}

	private Alter_table_cmdsContext alter_table_cmds(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(Context, _parentState);
		Alter_table_cmdsContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_alter_table_cmds, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2312;
			alter_table_cmd();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2319;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_cmdsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alter_table_cmds);
					State = 2314;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2315;
					Match(COMMA);
					State = 2316;
					alter_table_cmd();
					}
					} 
				}
				State = 2321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Partition_cmdContext partition_cmd() {
		Partition_cmdContext _localctx = new Partition_cmdContext(Context, State);
		EnterRule(_localctx, 100, RULE_partition_cmd);
		try {
			State = 2330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2322;
				Match(ATTACH);
				State = 2323;
				Match(PARTITION);
				State = 2324;
				qualified_name();
				State = 2325;
				partitionboundspec();
				}
				break;
			case DETACH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2327;
				Match(DETACH);
				State = 2328;
				Match(PARTITION);
				State = 2329;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_partition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_partition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Index_partition_cmdContext index_partition_cmd() {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(Context, State);
		EnterRule(_localctx, 102, RULE_index_partition_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2332;
			Match(ATTACH);
			State = 2333;
			Match(PARTITION);
			State = 2334;
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_columnContext opt_column() {
			return GetRuleContext<Opt_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return GetRuleContext<Alter_identity_column_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_dataContext opt_set_data() {
			return GetRuleContext<Opt_set_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_usingContext alter_using() {
			return GetRuleContext<Alter_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replica_identityContext replica_identity() {
			return GetRuleContext<Replica_identityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdContext alter_table_cmd() {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(Context, State);
		EnterRule(_localctx, 104, RULE_alter_table_cmd);
		try {
			State = 2588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2336;
				Match(ADD_P);
				State = 2337;
				columnDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2338;
				Match(ADD_P);
				State = 2339;
				Match(IF_P);
				State = 2340;
				Match(NOT);
				State = 2341;
				Match(EXISTS);
				State = 2342;
				columnDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2343;
				Match(ADD_P);
				State = 2344;
				Match(COLUMN);
				State = 2345;
				columnDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2346;
				Match(ADD_P);
				State = 2347;
				Match(COLUMN);
				State = 2348;
				Match(IF_P);
				State = 2349;
				Match(NOT);
				State = 2350;
				Match(EXISTS);
				State = 2351;
				columnDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2352;
				Match(ALTER);
				State = 2353;
				opt_column();
				State = 2354;
				colid();
				State = 2355;
				alter_column_default();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2357;
				Match(ALTER);
				State = 2358;
				opt_column();
				State = 2359;
				colid();
				State = 2360;
				Match(DROP);
				State = 2361;
				Match(NOT);
				State = 2362;
				Match(NULL_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2364;
				Match(ALTER);
				State = 2365;
				opt_column();
				State = 2366;
				colid();
				State = 2367;
				Match(SET);
				State = 2368;
				Match(NOT);
				State = 2369;
				Match(NULL_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2371;
				Match(ALTER);
				State = 2372;
				opt_column();
				State = 2373;
				colid();
				State = 2374;
				Match(DROP);
				State = 2375;
				Match(EXPRESSION);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2377;
				Match(ALTER);
				State = 2378;
				opt_column();
				State = 2379;
				colid();
				State = 2380;
				Match(DROP);
				State = 2381;
				Match(EXPRESSION);
				State = 2382;
				Match(IF_P);
				State = 2383;
				Match(EXISTS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2385;
				Match(ALTER);
				State = 2386;
				opt_column();
				State = 2387;
				colid();
				State = 2388;
				Match(SET);
				State = 2389;
				Match(STATISTICS);
				State = 2390;
				signediconst();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2392;
				Match(ALTER);
				State = 2393;
				opt_column();
				State = 2394;
				iconst();
				State = 2395;
				Match(SET);
				State = 2396;
				Match(STATISTICS);
				State = 2397;
				signediconst();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2399;
				Match(ALTER);
				State = 2400;
				opt_column();
				State = 2401;
				colid();
				State = 2402;
				Match(SET);
				State = 2403;
				reloptions();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2405;
				Match(ALTER);
				State = 2406;
				opt_column();
				State = 2407;
				colid();
				State = 2408;
				Match(RESET);
				State = 2409;
				reloptions();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2411;
				Match(ALTER);
				State = 2412;
				opt_column();
				State = 2413;
				colid();
				State = 2414;
				Match(SET);
				State = 2415;
				Match(STORAGE);
				State = 2416;
				colid();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2418;
				Match(ALTER);
				State = 2419;
				opt_column();
				State = 2420;
				colid();
				State = 2421;
				Match(ADD_P);
				State = 2422;
				Match(GENERATED);
				State = 2423;
				generated_when();
				State = 2424;
				Match(AS);
				State = 2425;
				Match(IDENTITY_P);
				State = 2426;
				optparenthesizedseqoptlist();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2428;
				Match(ALTER);
				State = 2429;
				opt_column();
				State = 2430;
				colid();
				State = 2431;
				alter_identity_column_option_list(0);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2433;
				Match(ALTER);
				State = 2434;
				opt_column();
				State = 2435;
				colid();
				State = 2436;
				Match(DROP);
				State = 2437;
				Match(IDENTITY_P);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2439;
				Match(ALTER);
				State = 2440;
				opt_column();
				State = 2441;
				colid();
				State = 2442;
				Match(DROP);
				State = 2443;
				Match(IDENTITY_P);
				State = 2444;
				Match(IF_P);
				State = 2445;
				Match(EXISTS);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2447;
				Match(DROP);
				State = 2448;
				opt_column();
				State = 2449;
				Match(IF_P);
				State = 2450;
				Match(EXISTS);
				State = 2451;
				colid();
				State = 2452;
				opt_drop_behavior();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2454;
				Match(DROP);
				State = 2455;
				opt_column();
				State = 2456;
				colid();
				State = 2457;
				opt_drop_behavior();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2459;
				Match(ALTER);
				State = 2460;
				opt_column();
				State = 2461;
				colid();
				State = 2462;
				opt_set_data();
				State = 2463;
				Match(TYPE_P);
				State = 2464;
				typename();
				State = 2465;
				opt_collate_clause();
				State = 2466;
				alter_using();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2468;
				Match(ALTER);
				State = 2469;
				opt_column();
				State = 2470;
				colid();
				State = 2471;
				alter_generic_options();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2473;
				Match(ADD_P);
				State = 2474;
				tableconstraint();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2475;
				Match(ALTER);
				State = 2476;
				Match(CONSTRAINT);
				State = 2477;
				name();
				State = 2478;
				constraintattributespec(0);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2480;
				Match(VALIDATE);
				State = 2481;
				Match(CONSTRAINT);
				State = 2482;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2483;
				Match(DROP);
				State = 2484;
				Match(CONSTRAINT);
				State = 2485;
				Match(IF_P);
				State = 2486;
				Match(EXISTS);
				State = 2487;
				name();
				State = 2488;
				opt_drop_behavior();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2490;
				Match(DROP);
				State = 2491;
				Match(CONSTRAINT);
				State = 2492;
				name();
				State = 2493;
				opt_drop_behavior();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2495;
				Match(SET);
				State = 2496;
				Match(WITHOUT);
				State = 2497;
				Match(OIDS);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2498;
				Match(CLUSTER);
				State = 2499;
				Match(ON);
				State = 2500;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2501;
				Match(SET);
				State = 2502;
				Match(WITHOUT);
				State = 2503;
				Match(CLUSTER);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2504;
				Match(SET);
				State = 2505;
				Match(LOGGED);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2506;
				Match(SET);
				State = 2507;
				Match(UNLOGGED);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2508;
				Match(ENABLE_P);
				State = 2509;
				Match(TRIGGER);
				State = 2510;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2511;
				Match(ENABLE_P);
				State = 2512;
				Match(ALWAYS);
				State = 2513;
				Match(TRIGGER);
				State = 2514;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2515;
				Match(ENABLE_P);
				State = 2516;
				Match(REPLICA);
				State = 2517;
				Match(TRIGGER);
				State = 2518;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2519;
				Match(ENABLE_P);
				State = 2520;
				Match(TRIGGER);
				State = 2521;
				Match(ALL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2522;
				Match(ENABLE_P);
				State = 2523;
				Match(TRIGGER);
				State = 2524;
				Match(USER);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2525;
				Match(DISABLE_P);
				State = 2526;
				Match(TRIGGER);
				State = 2527;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2528;
				Match(DISABLE_P);
				State = 2529;
				Match(TRIGGER);
				State = 2530;
				Match(ALL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2531;
				Match(DISABLE_P);
				State = 2532;
				Match(TRIGGER);
				State = 2533;
				Match(USER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2534;
				Match(ENABLE_P);
				State = 2535;
				Match(RULE);
				State = 2536;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2537;
				Match(ENABLE_P);
				State = 2538;
				Match(ALWAYS);
				State = 2539;
				Match(RULE);
				State = 2540;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2541;
				Match(ENABLE_P);
				State = 2542;
				Match(REPLICA);
				State = 2543;
				Match(RULE);
				State = 2544;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2545;
				Match(DISABLE_P);
				State = 2546;
				Match(RULE);
				State = 2547;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2548;
				Match(INHERIT);
				State = 2549;
				qualified_name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 2550;
				Match(NO);
				State = 2551;
				Match(INHERIT);
				State = 2552;
				qualified_name();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 2553;
				Match(OF);
				State = 2554;
				any_name();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 2555;
				Match(NOT);
				State = 2556;
				Match(OF);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 2557;
				Match(OWNER);
				State = 2558;
				Match(TO);
				State = 2559;
				rolespec();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 2560;
				Match(SET);
				State = 2561;
				Match(TABLESPACE);
				State = 2562;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 2563;
				Match(SET);
				State = 2564;
				reloptions();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 2565;
				Match(RESET);
				State = 2566;
				reloptions();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 2567;
				Match(REPLICA);
				State = 2568;
				Match(IDENTITY_P);
				State = 2569;
				replica_identity();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 2570;
				Match(ENABLE_P);
				State = 2571;
				Match(ROW);
				State = 2572;
				Match(LEVEL);
				State = 2573;
				Match(SECURITY);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 2574;
				Match(DISABLE_P);
				State = 2575;
				Match(ROW);
				State = 2576;
				Match(LEVEL);
				State = 2577;
				Match(SECURITY);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 2578;
				Match(FORCE);
				State = 2579;
				Match(ROW);
				State = 2580;
				Match(LEVEL);
				State = 2581;
				Match(SECURITY);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 2582;
				Match(NO);
				State = 2583;
				Match(FORCE);
				State = 2584;
				Match(ROW);
				State = 2585;
				Match(LEVEL);
				State = 2586;
				Match(SECURITY);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 2587;
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_default(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_defaultContext alter_column_default() {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(Context, State);
		EnterRule(_localctx, 106, RULE_alter_column_default);
		try {
			State = 2595;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2590;
				Match(SET);
				State = 2591;
				Match(DEFAULT);
				State = 2592;
				a_expr(0);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2593;
				Match(DROP);
				State = 2594;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_drop_behaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_drop_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_drop_behavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_drop_behavior(this);
		}
	}

	[RuleVersion(0)]
	public Opt_drop_behaviorContext opt_drop_behavior() {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(Context, State);
		EnterRule(_localctx, 108, RULE_opt_drop_behavior);
		try {
			State = 2600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2597;
				Match(CASCADE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2598;
				Match(RESTRICT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_collate_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_collate_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_collate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_collate_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_collate_clauseContext opt_collate_clause() {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_opt_collate_clause);
		try {
			State = 2605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2602;
				Match(COLLATE);
				State = 2603;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_using(this);
		}
	}

	[RuleVersion(0)]
	public Alter_usingContext alter_using() {
		Alter_usingContext _localctx = new Alter_usingContext(Context, State);
		EnterRule(_localctx, 112, RULE_alter_using);
		try {
			State = 2610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2607;
				Match(USING);
				State = 2608;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replica_identityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replica_identity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReplica_identity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReplica_identity(this);
		}
	}

	[RuleVersion(0)]
	public Replica_identityContext replica_identity() {
		Replica_identityContext _localctx = new Replica_identityContext(Context, State);
		EnterRule(_localctx, 114, RULE_replica_identity);
		try {
			State = 2618;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2612;
				Match(NOTHING);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2613;
				Match(FULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2614;
				Match(DEFAULT);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2615;
				Match(USING);
				State = 2616;
				Match(INDEX);
				State = 2617;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_listContext reloption_list() {
			return GetRuleContext<Reloption_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloptions(this);
		}
	}

	[RuleVersion(0)]
	public ReloptionsContext reloptions() {
		ReloptionsContext _localctx = new ReloptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_reloptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620;
			Match(OPEN_PAREN);
			State = 2621;
			reloption_list(0);
			State = 2622;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_reloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_reloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_reloptions(this);
		}
	}

	[RuleVersion(0)]
	public Opt_reloptionsContext opt_reloptions() {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(Context, State);
		EnterRule(_localctx, 118, RULE_opt_reloptions);
		try {
			State = 2627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2624;
				Match(WITH);
				State = 2625;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext reloption_elem() {
			return GetRuleContext<Reloption_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_listContext reloption_list() {
			return GetRuleContext<Reloption_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Reloption_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_list(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_listContext reloption_list() {
		return reloption_list(0);
	}

	private Reloption_listContext reloption_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Reloption_listContext _localctx = new Reloption_listContext(Context, _parentState);
		Reloption_listContext _prevctx = _localctx;
		int _startState = 120;
		EnterRecursionRule(_localctx, 120, RULE_reloption_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2630;
			reloption_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2637;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reloption_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reloption_list);
					State = 2632;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2633;
					Match(COMMA);
					State = 2634;
					reloption_elem();
					}
					} 
				}
				State = 2639;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Reloption_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext[] collabel() {
			return GetRuleContexts<CollabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel(int i) {
			return GetRuleContext<CollabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_elemContext reloption_elem() {
		Reloption_elemContext _localctx = new Reloption_elemContext(Context, State);
		EnterRule(_localctx, 122, RULE_reloption_elem);
		try {
			State = 2655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2640;
				collabel();
				State = 2641;
				Match(EQUAL);
				State = 2642;
				def_arg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2644;
				collabel();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2645;
				collabel();
				State = 2646;
				Match(DOT);
				State = 2647;
				collabel();
				State = 2648;
				Match(EQUAL);
				State = 2649;
				def_arg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2651;
				collabel();
				State = 2652;
				Match(DOT);
				State = 2653;
				collabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext alter_identity_column_option() {
			return GetRuleContext<Alter_identity_column_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return GetRuleContext<Alter_identity_column_option_listContext>(0);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_option_listContext alter_identity_column_option_list() {
		return alter_identity_column_option_list(0);
	}

	private Alter_identity_column_option_listContext alter_identity_column_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(Context, _parentState);
		Alter_identity_column_option_listContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_alter_identity_column_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2658;
			alter_identity_column_option();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_identity_column_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alter_identity_column_option_list);
					State = 2660;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2661;
					alter_identity_column_option();
					}
					} 
				}
				State = 2666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Alter_identity_column_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem() {
			return GetRuleContext<SeqoptelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_optionContext alter_identity_column_option() {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(Context, State);
		EnterRule(_localctx, 126, RULE_alter_identity_column_option);
		try {
			State = 2677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2667;
				Match(RESTART);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2668;
				Match(RESTART);
				State = 2669;
				opt_with();
				State = 2670;
				numericonly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2672;
				Match(SET);
				State = 2673;
				seqoptelem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2674;
				Match(SET);
				State = 2675;
				Match(GENERATED);
				State = 2676;
				generated_when();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionboundspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partboundContext hash_partbound() {
			return GetRuleContext<Hash_partboundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionboundspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionboundspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionboundspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionboundspecContext partitionboundspec() {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(Context, State);
		EnterRule(_localctx, 128, RULE_partitionboundspec);
		try {
			State = 2705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2679;
				Match(FOR);
				State = 2680;
				Match(VALUES);
				State = 2681;
				Match(WITH);
				State = 2682;
				Match(OPEN_PAREN);
				State = 2683;
				hash_partbound(0);
				State = 2684;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2686;
				Match(FOR);
				State = 2687;
				Match(VALUES);
				State = 2688;
				Match(IN_P);
				State = 2689;
				Match(OPEN_PAREN);
				State = 2690;
				expr_list(0);
				State = 2691;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2693;
				Match(FOR);
				State = 2694;
				Match(VALUES);
				State = 2695;
				Match(FROM);
				State = 2696;
				Match(OPEN_PAREN);
				State = 2697;
				expr_list(0);
				State = 2698;
				Match(CLOSE_PAREN);
				State = 2699;
				Match(TO);
				State = 2700;
				Match(OPEN_PAREN);
				State = 2701;
				expr_list(0);
				State = 2702;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2704;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partbound_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound_elem(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partbound_elemContext hash_partbound_elem() {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(Context, State);
		EnterRule(_localctx, 130, RULE_hash_partbound_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2707;
			nonreservedword();
			State = 2708;
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext hash_partbound_elem() {
			return GetRuleContext<Hash_partbound_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partboundContext hash_partbound() {
			return GetRuleContext<Hash_partboundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Hash_partboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partboundContext hash_partbound() {
		return hash_partbound(0);
	}

	private Hash_partboundContext hash_partbound(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Hash_partboundContext _localctx = new Hash_partboundContext(Context, _parentState);
		Hash_partboundContext _prevctx = _localctx;
		int _startState = 132;
		EnterRecursionRule(_localctx, 132, RULE_hash_partbound, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2711;
			hash_partbound_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2718;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Hash_partboundContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_hash_partbound);
					State = 2713;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2714;
					Match(COMMA);
					State = 2715;
					hash_partbound_elem();
					}
					} 
				}
				State = 2720;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AltercompositetypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdsContext alter_type_cmds() {
			return GetRuleContext<Alter_type_cmdsContext>(0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercompositetypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercompositetypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercompositetypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercompositetypestmtContext altercompositetypestmt() {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_altercompositetypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2721;
			Match(ALTER);
			State = 2722;
			Match(TYPE_P);
			State = 2723;
			any_name();
			State = 2724;
			alter_type_cmds(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext alter_type_cmd() {
			return GetRuleContext<Alter_type_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdsContext alter_type_cmds() {
			return GetRuleContext<Alter_type_cmdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdsContext alter_type_cmds() {
		return alter_type_cmds(0);
	}

	private Alter_type_cmdsContext alter_type_cmds(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(Context, _parentState);
		Alter_type_cmdsContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_alter_type_cmds, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2727;
			alter_type_cmd();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2734;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_type_cmdsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alter_type_cmds);
					State = 2729;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2730;
					Match(COMMA);
					State = 2731;
					alter_type_cmd();
					}
					} 
				}
				State = 2736;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Alter_type_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement() {
			return GetRuleContext<TablefuncelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_dataContext opt_set_data() {
			return GetRuleContext<Opt_set_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdContext alter_type_cmd() {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_type_cmd);
		try {
			State = 2763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2737;
				Match(ADD_P);
				State = 2738;
				Match(ATTRIBUTE);
				State = 2739;
				tablefuncelement();
				State = 2740;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2742;
				Match(DROP);
				State = 2743;
				Match(ATTRIBUTE);
				State = 2744;
				Match(IF_P);
				State = 2745;
				Match(EXISTS);
				State = 2746;
				colid();
				State = 2747;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2749;
				Match(DROP);
				State = 2750;
				Match(ATTRIBUTE);
				State = 2751;
				colid();
				State = 2752;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2754;
				Match(ALTER);
				State = 2755;
				Match(ATTRIBUTE);
				State = 2756;
				colid();
				State = 2757;
				opt_set_data();
				State = 2758;
				Match(TYPE_P);
				State = 2759;
				typename();
				State = 2760;
				opt_collate_clause();
				State = 2761;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseportalstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeportalstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCloseportalstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCloseportalstmt(this);
		}
	}

	[RuleVersion(0)]
	public CloseportalstmtContext closeportalstmt() {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_closeportalstmt);
		try {
			State = 2769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2765;
				Match(CLOSE);
				State = 2766;
				cursor_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2767;
				Match(CLOSE);
				State = 2768;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_binaryContext opt_binary() {
			return GetRuleContext<Opt_binaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_fromContext copy_from() {
			return GetRuleContext<Copy_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_programContext opt_program() {
			return GetRuleContext<Opt_programContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_file_nameContext copy_file_name() {
			return GetRuleContext<Copy_file_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_delimiterContext copy_delimiter() {
			return GetRuleContext<Copy_delimiterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_optionsContext copy_options() {
			return GetRuleContext<Copy_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopystmt(this);
		}
	}

	[RuleVersion(0)]
	public CopystmtContext copystmt() {
		CopystmtContext _localctx = new CopystmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_copystmt);
		try {
			State = 2793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2771;
				Match(COPY);
				State = 2772;
				opt_binary();
				State = 2773;
				qualified_name();
				State = 2774;
				opt_column_list();
				State = 2775;
				copy_from();
				State = 2776;
				opt_program();
				State = 2777;
				copy_file_name();
				State = 2778;
				copy_delimiter();
				State = 2779;
				opt_with();
				State = 2780;
				copy_options();
				State = 2781;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2783;
				Match(COPY);
				State = 2784;
				Match(OPEN_PAREN);
				State = 2785;
				preparablestmt();
				State = 2786;
				Match(CLOSE_PAREN);
				State = 2787;
				Match(TO);
				State = 2788;
				opt_program();
				State = 2789;
				copy_file_name();
				State = 2790;
				opt_with();
				State = 2791;
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_from(this);
		}
	}

	[RuleVersion(0)]
	public Copy_fromContext copy_from() {
		Copy_fromContext _localctx = new Copy_fromContext(Context, State);
		EnterRule(_localctx, 144, RULE_copy_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2795;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_program(this);
		}
	}

	[RuleVersion(0)]
	public Opt_programContext opt_program() {
		Opt_programContext _localctx = new Opt_programContext(Context, State);
		EnterRule(_localctx, 146, RULE_opt_program);
		try {
			State = 2799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2797;
				Match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_file_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_file_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Copy_file_nameContext copy_file_name() {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(Context, State);
		EnterRule(_localctx, 148, RULE_copy_file_name);
		try {
			State = 2804;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2801;
				sconst();
				}
				break;
			case STDIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2802;
				Match(STDIN);
				}
				break;
			case STDOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2803;
				Match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_listContext copy_opt_list() {
			return GetRuleContext<Copy_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_listContext copy_generic_opt_list() {
			return GetRuleContext<Copy_generic_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_options(this);
		}
	}

	[RuleVersion(0)]
	public Copy_optionsContext copy_options() {
		Copy_optionsContext _localctx = new Copy_optionsContext(Context, State);
		EnterRule(_localctx, 150, RULE_copy_options);
		try {
			State = 2811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2806;
				copy_opt_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2807;
				Match(OPEN_PAREN);
				State = 2808;
				copy_generic_opt_list(0);
				State = 2809;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_listContext copy_opt_list() {
			return GetRuleContext<Copy_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext copy_opt_item() {
			return GetRuleContext<Copy_opt_itemContext>(0);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_listContext copy_opt_list() {
		return copy_opt_list(0);
	}

	private Copy_opt_listContext copy_opt_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Copy_opt_listContext _localctx = new Copy_opt_listContext(Context, _parentState);
		Copy_opt_listContext _prevctx = _localctx;
		int _startState = 152;
		EnterRecursionRule(_localctx, 152, RULE_copy_opt_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2818;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_opt_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_copy_opt_list);
					State = 2814;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 2815;
					copy_opt_item();
					}
					} 
				}
				State = 2820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Copy_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_itemContext copy_opt_item() {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(Context, State);
		EnterRule(_localctx, 154, RULE_copy_opt_item);
		try {
			State = 2856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2821;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2822;
				Match(FREEZE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2823;
				Match(DELIMITER);
				State = 2824;
				opt_as();
				State = 2825;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2827;
				Match(NULL_P);
				State = 2828;
				opt_as();
				State = 2829;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2831;
				Match(CSV);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2832;
				Match(HEADER_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2833;
				Match(QUOTE);
				State = 2834;
				opt_as();
				State = 2835;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2837;
				Match(ESCAPE);
				State = 2838;
				opt_as();
				State = 2839;
				sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2841;
				Match(FORCE);
				State = 2842;
				Match(QUOTE);
				State = 2843;
				columnlist(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2844;
				Match(FORCE);
				State = 2845;
				Match(QUOTE);
				State = 2846;
				Match(STAR);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2847;
				Match(FORCE);
				State = 2848;
				Match(NOT);
				State = 2849;
				Match(NULL_P);
				State = 2850;
				columnlist(0);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2851;
				Match(FORCE);
				State = 2852;
				Match(NULL_P);
				State = 2853;
				columnlist(0);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2854;
				Match(ENCODING);
				State = 2855;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_binaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_binary(this);
		}
	}

	[RuleVersion(0)]
	public Opt_binaryContext opt_binary() {
		Opt_binaryContext _localctx = new Opt_binaryContext(Context, State);
		EnterRule(_localctx, 156, RULE_opt_binary);
		try {
			State = 2860;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2858;
				Match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_delimiterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_usingContext opt_using() {
			return GetRuleContext<Opt_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_delimiter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_delimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_delimiter(this);
		}
	}

	[RuleVersion(0)]
	public Copy_delimiterContext copy_delimiter() {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(Context, State);
		EnterRule(_localctx, 158, RULE_copy_delimiter);
		try {
			State = 2867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2862;
				opt_using();
				State = 2863;
				Match(DELIMITERS);
				State = 2864;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_usingContext opt_using() {
		Opt_usingContext _localctx = new Opt_usingContext(Context, State);
		EnterRule(_localctx, 160, RULE_opt_using);
		try {
			State = 2871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2869;
				Match(USING);
				}
				break;
			case DELIMITERS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext copy_generic_opt_elem() {
			return GetRuleContext<Copy_generic_opt_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_listContext copy_generic_opt_list() {
			return GetRuleContext<Copy_generic_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_listContext copy_generic_opt_list() {
		return copy_generic_opt_list(0);
	}

	private Copy_generic_opt_listContext copy_generic_opt_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(Context, _parentState);
		Copy_generic_opt_listContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_copy_generic_opt_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2874;
			copy_generic_opt_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2881;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_list);
					State = 2876;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2877;
					Match(COMMA);
					State = 2878;
					copy_generic_opt_elem();
					}
					} 
				}
				State = 2883;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return GetRuleContext<Copy_generic_opt_argContext>(0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_elemContext copy_generic_opt_elem() {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(Context, State);
		EnterRule(_localctx, 164, RULE_copy_generic_opt_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2884;
			collabel();
			State = 2885;
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return GetRuleContext<Copy_generic_opt_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_argContext copy_generic_opt_arg() {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(Context, State);
		EnterRule(_localctx, 166, RULE_copy_generic_opt_arg);
		try {
			State = 2895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2887;
				opt_boolean_or_string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2888;
				numericonly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2889;
				Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2890;
				Match(OPEN_PAREN);
				State = 2891;
				copy_generic_opt_arg_list(0);
				State = 2892;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
			return GetRuleContext<Copy_generic_opt_arg_list_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return GetRuleContext<Copy_generic_opt_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
		return copy_generic_opt_arg_list(0);
	}

	private Copy_generic_opt_arg_listContext copy_generic_opt_arg_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(Context, _parentState);
		Copy_generic_opt_arg_listContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_copy_generic_opt_arg_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2898;
			copy_generic_opt_arg_list_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2905;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_arg_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_arg_list);
					State = 2900;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2901;
					Match(COMMA);
					State = 2902;
					copy_generic_opt_arg_list_item();
					}
					} 
				}
				State = 2907;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(Context, State);
		EnterRule(_localctx, 170, RULE_copy_generic_opt_arg_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2908;
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptpartitionspecContext optpartitionspec() {
			return GetRuleContext<OptpartitionspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		public CreatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestmtContext createstmt() {
		CreatestmtContext _localctx = new CreatestmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_createstmt);
		try {
			State = 3003;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2910;
				Match(CREATE);
				State = 2911;
				opttemp();
				State = 2912;
				Match(TABLE);
				State = 2913;
				qualified_name();
				State = 2914;
				Match(OPEN_PAREN);
				State = 2915;
				opttableelementlist();
				State = 2916;
				Match(CLOSE_PAREN);
				State = 2917;
				optinherit();
				State = 2918;
				optpartitionspec();
				State = 2919;
				table_access_method_clause();
				State = 2920;
				optwith();
				State = 2921;
				oncommitoption();
				State = 2922;
				opttablespace();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2924;
				Match(CREATE);
				State = 2925;
				opttemp();
				State = 2926;
				Match(TABLE);
				State = 2927;
				Match(IF_P);
				State = 2928;
				Match(NOT);
				State = 2929;
				Match(EXISTS);
				State = 2930;
				qualified_name();
				State = 2931;
				Match(OPEN_PAREN);
				State = 2932;
				opttableelementlist();
				State = 2933;
				Match(CLOSE_PAREN);
				State = 2934;
				optinherit();
				State = 2935;
				optpartitionspec();
				State = 2936;
				table_access_method_clause();
				State = 2937;
				optwith();
				State = 2938;
				oncommitoption();
				State = 2939;
				opttablespace();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2941;
				Match(CREATE);
				State = 2942;
				opttemp();
				State = 2943;
				Match(TABLE);
				State = 2944;
				qualified_name();
				State = 2945;
				Match(OF);
				State = 2946;
				any_name();
				State = 2947;
				opttypedtableelementlist();
				State = 2948;
				optpartitionspec();
				State = 2949;
				table_access_method_clause();
				State = 2950;
				optwith();
				State = 2951;
				oncommitoption();
				State = 2952;
				opttablespace();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2954;
				Match(CREATE);
				State = 2955;
				opttemp();
				State = 2956;
				Match(TABLE);
				State = 2957;
				Match(IF_P);
				State = 2958;
				Match(NOT);
				State = 2959;
				Match(EXISTS);
				State = 2960;
				qualified_name();
				State = 2961;
				Match(OF);
				State = 2962;
				any_name();
				State = 2963;
				opttypedtableelementlist();
				State = 2964;
				optpartitionspec();
				State = 2965;
				table_access_method_clause();
				State = 2966;
				optwith();
				State = 2967;
				oncommitoption();
				State = 2968;
				opttablespace();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2970;
				Match(CREATE);
				State = 2971;
				opttemp();
				State = 2972;
				Match(TABLE);
				State = 2973;
				qualified_name();
				State = 2974;
				Match(PARTITION);
				State = 2975;
				Match(OF);
				State = 2976;
				qualified_name();
				State = 2977;
				opttypedtableelementlist();
				State = 2978;
				partitionboundspec();
				State = 2979;
				optpartitionspec();
				State = 2980;
				table_access_method_clause();
				State = 2981;
				optwith();
				State = 2982;
				oncommitoption();
				State = 2983;
				opttablespace();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2985;
				Match(CREATE);
				State = 2986;
				opttemp();
				State = 2987;
				Match(TABLE);
				State = 2988;
				Match(IF_P);
				State = 2989;
				Match(NOT);
				State = 2990;
				Match(EXISTS);
				State = 2991;
				qualified_name();
				State = 2992;
				Match(PARTITION);
				State = 2993;
				Match(OF);
				State = 2994;
				qualified_name();
				State = 2995;
				opttypedtableelementlist();
				State = 2996;
				partitionboundspec();
				State = 2997;
				optpartitionspec();
				State = 2998;
				table_access_method_clause();
				State = 2999;
				optwith();
				State = 3000;
				oncommitoption();
				State = 3001;
				opttablespace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttemp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttemp(this);
		}
	}

	[RuleVersion(0)]
	public OpttempContext opttemp() {
		OpttempContext _localctx = new OpttempContext(Context, State);
		EnterRule(_localctx, 174, RULE_opttemp);
		try {
			State = 3017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3005;
				Match(TEMPORARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3006;
				Match(TEMP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3007;
				Match(LOCAL);
				State = 3008;
				Match(TEMPORARY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3009;
				Match(LOCAL);
				State = 3010;
				Match(TEMP);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3011;
				Match(GLOBAL);
				State = 3012;
				Match(TEMPORARY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3013;
				Match(GLOBAL);
				State = 3014;
				Match(TEMP);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3015;
				Match(UNLOGGED);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementlistContext tableelementlist() {
			return GetRuleContext<TableelementlistContext>(0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttableelementlistContext opttableelementlist() {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(Context, State);
		EnterRule(_localctx, 176, RULE_opttableelementlist);
		try {
			State = 3021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LIKE:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3019;
				tableelementlist(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementlistContext typedtableelementlist() {
			return GetRuleContext<TypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttypedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttypedtableelementlistContext opttypedtableelementlist() {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 178, RULE_opttypedtableelementlist);
		try {
			State = 3028;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3023;
				Match(OPEN_PAREN);
				State = 3024;
				typedtableelementlist(0);
				State = 3025;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext tableelement() {
			return GetRuleContext<TableelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableelementlistContext tableelementlist() {
			return GetRuleContext<TableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public TableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TableelementlistContext tableelementlist() {
		return tableelementlist(0);
	}

	private TableelementlistContext tableelementlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TableelementlistContext _localctx = new TableelementlistContext(Context, _parentState);
		TableelementlistContext _prevctx = _localctx;
		int _startState = 180;
		EnterRecursionRule(_localctx, 180, RULE_tableelementlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3031;
			tableelement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3038;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableelementlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_tableelementlist);
					State = 3033;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3034;
					Match(COMMA);
					State = 3035;
					tableelement();
					}
					} 
				}
				State = 3040;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext typedtableelement() {
			return GetRuleContext<TypedtableelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementlistContext typedtableelementlist() {
			return GetRuleContext<TypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementlistContext typedtableelementlist() {
		return typedtableelementlist(0);
	}

	private TypedtableelementlistContext typedtableelementlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(Context, _parentState);
		TypedtableelementlistContext _prevctx = _localctx;
		int _startState = 182;
		EnterRecursionRule(_localctx, 182, RULE_typedtableelementlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3042;
			typedtableelement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3049;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypedtableelementlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typedtableelementlist);
					State = 3044;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3045;
					Match(COMMA);
					State = 3046;
					typedtableelement();
					}
					} 
				}
				State = 3051;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeclauseContext tablelikeclause() {
			return GetRuleContext<TablelikeclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelement(this);
		}
	}

	[RuleVersion(0)]
	public TableelementContext tableelement() {
		TableelementContext _localctx = new TableelementContext(Context, State);
		EnterRule(_localctx, 184, RULE_tableelement);
		try {
			State = 3055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3052;
				columnDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3053;
				tablelikeclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3054;
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnOptionsContext columnOptions() {
			return GetRuleContext<ColumnOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelement(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementContext typedtableelement() {
		TypedtableelementContext _localctx = new TypedtableelementContext(Context, State);
		EnterRule(_localctx, 186, RULE_typedtableelement);
		try {
			State = 3059;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3057;
				columnOptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3058;
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefContext columnDef() {
		ColumnDefContext _localctx = new ColumnDefContext(Context, State);
		EnterRule(_localctx, 188, RULE_columnDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3061;
			colid();
			State = 3062;
			typename();
			State = 3063;
			create_generic_options();
			State = 3064;
			colquallist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnOptions(this);
		}
	}

	[RuleVersion(0)]
	public ColumnOptionsContext columnOptions() {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(Context, State);
		EnterRule(_localctx, 190, RULE_columnOptions);
		try {
			State = 3074;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3066;
				colid();
				State = 3067;
				colquallist(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3069;
				colid();
				State = 3070;
				Match(WITH);
				State = 3071;
				Match(OPTIONS);
				State = 3072;
				colquallist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColquallistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext colconstraint() {
			return GetRuleContext<ColconstraintContext>(0);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colquallist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColquallist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColquallist(this);
		}
	}

	[RuleVersion(0)]
	public ColquallistContext colquallist() {
		return colquallist(0);
	}

	private ColquallistContext colquallist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ColquallistContext _localctx = new ColquallistContext(Context, _parentState);
		ColquallistContext _prevctx = _localctx;
		int _startState = 192;
		EnterRecursionRule(_localctx, 192, RULE_colquallist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3081;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColquallistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_colquallist);
					State = 3077;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 3078;
					colconstraint();
					}
					} 
				}
				State = 3083;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ColconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintelemContext colconstraintelem() {
			return GetRuleContext<ColconstraintelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattrContext constraintattr() {
			return GetRuleContext<ConstraintattrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraint(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintContext colconstraint() {
		ColconstraintContext _localctx = new ColconstraintContext(Context, State);
		EnterRule(_localctx, 194, RULE_colconstraint);
		try {
			State = 3092;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3084;
				Match(CONSTRAINT);
				State = 3085;
				name();
				State = 3086;
				colconstraintelem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3088;
				colconstraintelem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3089;
				constraintattr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3090;
				Match(COLLATE);
				State = 3091;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_no_inheritContext opt_no_inherit() {
			return GetRuleContext<Opt_no_inheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintelemContext colconstraintelem() {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(Context, State);
		EnterRule(_localctx, 196, RULE_colconstraintelem);
		try {
			State = 3134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3094;
				Match(NOT);
				State = 3095;
				Match(NULL_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3096;
				Match(NULL_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3097;
				Match(UNIQUE);
				State = 3098;
				opt_definition();
				State = 3099;
				optconstablespace();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3101;
				Match(PRIMARY);
				State = 3102;
				Match(KEY);
				State = 3103;
				opt_definition();
				State = 3104;
				optconstablespace();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3106;
				Match(CHECK);
				State = 3107;
				Match(OPEN_PAREN);
				State = 3108;
				a_expr(0);
				State = 3109;
				Match(CLOSE_PAREN);
				State = 3110;
				opt_no_inherit();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3112;
				Match(DEFAULT);
				State = 3113;
				b_expr(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3114;
				Match(GENERATED);
				State = 3115;
				generated_when();
				State = 3116;
				Match(AS);
				State = 3117;
				Match(IDENTITY_P);
				State = 3118;
				optparenthesizedseqoptlist();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3120;
				Match(GENERATED);
				State = 3121;
				generated_when();
				State = 3122;
				Match(AS);
				State = 3123;
				Match(OPEN_PAREN);
				State = 3124;
				a_expr(0);
				State = 3125;
				Match(CLOSE_PAREN);
				State = 3126;
				Match(STORED);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3128;
				Match(REFERENCES);
				State = 3129;
				qualified_name();
				State = 3130;
				opt_column_list();
				State = 3131;
				key_match();
				State = 3132;
				key_actions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generated_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generated_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerated_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerated_when(this);
		}
	}

	[RuleVersion(0)]
	public Generated_whenContext generated_when() {
		Generated_whenContext _localctx = new Generated_whenContext(Context, State);
		EnterRule(_localctx, 198, RULE_generated_when);
		try {
			State = 3139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALWAYS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3136;
				Match(ALWAYS);
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3137;
				Match(BY);
				State = 3138;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattr(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattrContext constraintattr() {
		ConstraintattrContext _localctx = new ConstraintattrContext(Context, State);
		EnterRule(_localctx, 200, RULE_constraintattr);
		try {
			State = 3148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3141;
				Match(DEFERRABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3142;
				Match(NOT);
				State = 3143;
				Match(DEFERRABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3144;
				Match(INITIALLY);
				State = 3145;
				Match(DEFERRED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3146;
				Match(INITIALLY);
				State = 3147;
				Match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionlistContext tablelikeoptionlist() {
			return GetRuleContext<TablelikeoptionlistContext>(0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeclause(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeclauseContext tablelikeclause() {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_tablelikeclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3150;
			Match(LIKE);
			State = 3151;
			qualified_name();
			State = 3152;
			tablelikeoptionlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionlistContext tablelikeoptionlist() {
			return GetRuleContext<TablelikeoptionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(PostgreSQLParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext tablelikeoption() {
			return GetRuleContext<TablelikeoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(PostgreSQLParser.EXCLUDING, 0); }
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoptionlist(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionlistContext tablelikeoptionlist() {
		return tablelikeoptionlist(0);
	}

	private TablelikeoptionlistContext tablelikeoptionlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(Context, _parentState);
		TablelikeoptionlistContext _prevctx = _localctx;
		int _startState = 204;
		EnterRecursionRule(_localctx, 204, RULE_tablelikeoptionlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 3161;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
					case 1:
						{
						_localctx = new TablelikeoptionlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_tablelikeoptionlist);
						State = 3155;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 3156;
						Match(INCLUDING);
						State = 3157;
						tablelikeoption();
						}
						break;
					case 2:
						{
						_localctx = new TablelikeoptionlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_tablelikeoptionlist);
						State = 3158;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 3159;
						Match(EXCLUDING);
						State = 3160;
						tablelikeoption();
						}
						break;
					}
					} 
				}
				State = 3165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TablelikeoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoption(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionContext tablelikeoption() {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(Context, State);
		EnterRule(_localctx, 206, RULE_tablelikeoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3166;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (COMMENTS - 160)) | (1L << (CONSTRAINTS - 160)) | (1L << (DEFAULTS - 160)) | (1L << (IDENTITY_P - 160)))) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintelemContext constraintelem() {
			return GetRuleContext<ConstraintelemContext>(0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableconstraint(this);
		}
	}

	[RuleVersion(0)]
	public TableconstraintContext tableconstraint() {
		TableconstraintContext _localctx = new TableconstraintContext(Context, State);
		EnterRule(_localctx, 208, RULE_tableconstraint);
		try {
			State = 3173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONSTRAINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3168;
				Match(CONSTRAINT);
				State = 3169;
				name();
				State = 3170;
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3172;
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_c_includeContext opt_c_include() {
			return GetRuleContext<Opt_c_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistingindexContext existingindex() {
			return GetRuleContext<ExistingindexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintlistContext exclusionconstraintlist() {
			return GetRuleContext<ExclusionconstraintlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionwhereclauseContext exclusionwhereclause() {
			return GetRuleContext<ExclusionwhereclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintelemContext constraintelem() {
		ConstraintelemContext _localctx = new ConstraintelemContext(Context, State);
		EnterRule(_localctx, 210, RULE_constraintelem);
		try {
			State = 3232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3175;
				Match(CHECK);
				State = 3176;
				Match(OPEN_PAREN);
				State = 3177;
				a_expr(0);
				State = 3178;
				Match(CLOSE_PAREN);
				State = 3179;
				constraintattributespec(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3181;
				Match(UNIQUE);
				State = 3182;
				Match(OPEN_PAREN);
				State = 3183;
				columnlist(0);
				State = 3184;
				Match(CLOSE_PAREN);
				State = 3185;
				opt_c_include();
				State = 3186;
				opt_definition();
				State = 3187;
				optconstablespace();
				State = 3188;
				constraintattributespec(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3190;
				Match(UNIQUE);
				State = 3191;
				existingindex();
				State = 3192;
				constraintattributespec(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3194;
				Match(PRIMARY);
				State = 3195;
				Match(KEY);
				State = 3196;
				Match(OPEN_PAREN);
				State = 3197;
				columnlist(0);
				State = 3198;
				Match(CLOSE_PAREN);
				State = 3199;
				opt_c_include();
				State = 3200;
				opt_definition();
				State = 3201;
				optconstablespace();
				State = 3202;
				constraintattributespec(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3204;
				Match(PRIMARY);
				State = 3205;
				Match(KEY);
				State = 3206;
				existingindex();
				State = 3207;
				constraintattributespec(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3209;
				Match(EXCLUDE);
				State = 3210;
				access_method_clause();
				State = 3211;
				Match(OPEN_PAREN);
				State = 3212;
				exclusionconstraintlist(0);
				State = 3213;
				Match(CLOSE_PAREN);
				State = 3214;
				opt_c_include();
				State = 3215;
				opt_definition();
				State = 3216;
				optconstablespace();
				State = 3217;
				exclusionwhereclause();
				State = 3218;
				constraintattributespec(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3220;
				Match(FOREIGN);
				State = 3221;
				Match(KEY);
				State = 3222;
				Match(OPEN_PAREN);
				State = 3223;
				columnlist(0);
				State = 3224;
				Match(CLOSE_PAREN);
				State = 3225;
				Match(REFERENCES);
				State = 3226;
				qualified_name();
				State = 3227;
				opt_column_list();
				State = 3228;
				key_match();
				State = 3229;
				key_actions();
				State = 3230;
				constraintattributespec(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_no_inheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_no_inherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_no_inherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_no_inherit(this);
		}
	}

	[RuleVersion(0)]
	public Opt_no_inheritContext opt_no_inherit() {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(Context, State);
		EnterRule(_localctx, 212, RULE_opt_no_inherit);
		try {
			State = 3237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3234;
				Match(NO);
				State = 3235;
				Match(INHERIT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_column_listContext opt_column_list() {
		Opt_column_listContext _localctx = new Opt_column_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_opt_column_list);
		try {
			State = 3244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3239;
				Match(OPEN_PAREN);
				State = 3240;
				columnlist(0);
				State = 3241;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext columnElem() {
			return GetRuleContext<ColumnElemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public ColumnlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnlist(this);
		}
	}

	[RuleVersion(0)]
	public ColumnlistContext columnlist() {
		return columnlist(0);
	}

	private ColumnlistContext columnlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ColumnlistContext _localctx = new ColumnlistContext(Context, _parentState);
		ColumnlistContext _prevctx = _localctx;
		int _startState = 216;
		EnterRecursionRule(_localctx, 216, RULE_columnlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3247;
			columnElem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColumnlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_columnlist);
					State = 3249;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3250;
					Match(COMMA);
					State = 3251;
					columnElem();
					}
					} 
				}
				State = 3256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ColumnElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnElem(this);
		}
	}

	[RuleVersion(0)]
	public ColumnElemContext columnElem() {
		ColumnElemContext _localctx = new ColumnElemContext(Context, State);
		EnterRule(_localctx, 218, RULE_columnElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_c_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_c_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_c_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_c_include(this);
		}
	}

	[RuleVersion(0)]
	public Opt_c_includeContext opt_c_include() {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(Context, State);
		EnterRule(_localctx, 220, RULE_opt_c_include);
		try {
			State = 3265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3259;
				Match(INCLUDE);
				State = 3260;
				Match(OPEN_PAREN);
				State = 3261;
				columnlist(0);
				State = 3262;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_match(this);
		}
	}

	[RuleVersion(0)]
	public Key_matchContext key_match() {
		Key_matchContext _localctx = new Key_matchContext(Context, State);
		EnterRule(_localctx, 222, RULE_key_match);
		try {
			State = 3274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3267;
				Match(MATCH);
				State = 3268;
				Match(FULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3269;
				Match(MATCH);
				State = 3270;
				Match(PARTIAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3271;
				Match(MATCH);
				State = 3272;
				Match(SIMPLE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext exclusionconstraintelem() {
			return GetRuleContext<ExclusionconstraintelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintlistContext exclusionconstraintlist() {
			return GetRuleContext<ExclusionconstraintlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintlist(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintlistContext exclusionconstraintlist() {
		return exclusionconstraintlist(0);
	}

	private ExclusionconstraintlistContext exclusionconstraintlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(Context, _parentState);
		ExclusionconstraintlistContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_exclusionconstraintlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3277;
			exclusionconstraintelem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusionconstraintlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusionconstraintlist);
					State = 3279;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3280;
					Match(COMMA);
					State = 3281;
					exclusionconstraintelem();
					}
					} 
				}
				State = 3286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusionconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem() {
			return GetRuleContext<Index_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintelemContext exclusionconstraintelem() {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(Context, State);
		EnterRule(_localctx, 226, RULE_exclusionconstraintelem);
		try {
			State = 3298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3287;
				index_elem();
				State = 3288;
				Match(WITH);
				State = 3289;
				any_operator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3291;
				index_elem();
				State = 3292;
				Match(WITH);
				State = 3293;
				Match(OPERATOR);
				State = 3294;
				Match(OPEN_PAREN);
				State = 3295;
				any_operator();
				State = 3296;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionwhereclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionwhereclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionwhereclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionwhereclause(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionwhereclauseContext exclusionwhereclause() {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(Context, State);
		EnterRule(_localctx, 228, RULE_exclusionwhereclause);
		try {
			State = 3306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3300;
				Match(WHERE);
				State = 3301;
				Match(OPEN_PAREN);
				State = 3302;
				a_expr(0);
				State = 3303;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_updateContext key_update() {
			return GetRuleContext<Key_updateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_deleteContext key_delete() {
			return GetRuleContext<Key_deleteContext>(0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_actions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_actions(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionsContext key_actions() {
		Key_actionsContext _localctx = new Key_actionsContext(Context, State);
		EnterRule(_localctx, 230, RULE_key_actions);
		try {
			State = 3317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3308;
				key_update();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3309;
				key_delete();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3310;
				key_update();
				State = 3311;
				key_delete();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3313;
				key_delete();
				State = 3314;
				key_update();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_updateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_update(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_update(this);
		}
	}

	[RuleVersion(0)]
	public Key_updateContext key_update() {
		Key_updateContext _localctx = new Key_updateContext(Context, State);
		EnterRule(_localctx, 232, RULE_key_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3319;
			Match(ON);
			State = 3320;
			Match(UPDATE);
			State = 3321;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_deleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_delete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_delete(this);
		}
	}

	[RuleVersion(0)]
	public Key_deleteContext key_delete() {
		Key_deleteContext _localctx = new Key_deleteContext(Context, State);
		EnterRule(_localctx, 234, RULE_key_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3323;
			Match(ON);
			State = 3324;
			Match(DELETE_P);
			State = 3325;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_action(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionContext key_action() {
		Key_actionContext _localctx = new Key_actionContext(Context, State);
		EnterRule(_localctx, 236, RULE_key_action);
		try {
			State = 3335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3327;
				Match(NO);
				State = 3328;
				Match(ACTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3329;
				Match(RESTRICT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3330;
				Match(CASCADE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3331;
				Match(SET);
				State = 3332;
				Match(NULL_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3333;
				Match(SET);
				State = 3334;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptinheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optinherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptinherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptinherit(this);
		}
	}

	[RuleVersion(0)]
	public OptinheritContext optinherit() {
		OptinheritContext _localctx = new OptinheritContext(Context, State);
		EnterRule(_localctx, 238, RULE_optinherit);
		try {
			State = 3343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3337;
				Match(INHERITS);
				State = 3338;
				Match(OPEN_PAREN);
				State = 3339;
				qualified_name_list(0);
				State = 3340;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptpartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionspecContext partitionspec() {
			return GetRuleContext<PartitionspecContext>(0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optpartitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptpartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptpartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public OptpartitionspecContext optpartitionspec() {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(Context, State);
		EnterRule(_localctx, 240, RULE_optpartitionspec);
		try {
			State = 3347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3345;
				partitionspec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Part_paramsContext part_params() {
			return GetRuleContext<Part_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionspecContext partitionspec() {
		PartitionspecContext _localctx = new PartitionspecContext(Context, State);
		EnterRule(_localctx, 242, RULE_partitionspec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3349;
			Match(PARTITION);
			State = 3350;
			Match(BY);
			State = 3351;
			colid();
			State = 3352;
			Match(OPEN_PAREN);
			State = 3353;
			part_params(0);
			State = 3354;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext part_elem() {
			return GetRuleContext<Part_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_paramsContext part_params() {
			return GetRuleContext<Part_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Part_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_params(this);
		}
	}

	[RuleVersion(0)]
	public Part_paramsContext part_params() {
		return part_params(0);
	}

	private Part_paramsContext part_params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Part_paramsContext _localctx = new Part_paramsContext(Context, _parentState);
		Part_paramsContext _prevctx = _localctx;
		int _startState = 244;
		EnterRecursionRule(_localctx, 244, RULE_part_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3357;
			part_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Part_paramsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_part_params);
					State = 3359;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3360;
					Match(COMMA);
					State = 3361;
					part_elem();
					}
					} 
				}
				State = 3366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Part_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collateContext opt_collate() {
			return GetRuleContext<Opt_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_classContext opt_class() {
			return GetRuleContext<Opt_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_elem(this);
		}
	}

	[RuleVersion(0)]
	public Part_elemContext part_elem() {
		Part_elemContext _localctx = new Part_elemContext(Context, State);
		EnterRule(_localctx, 246, RULE_part_elem);
		try {
			State = 3381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3367;
				colid();
				State = 3368;
				opt_collate();
				State = 3369;
				opt_class();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3371;
				func_expr_windowless();
				State = 3372;
				opt_collate();
				State = 3373;
				opt_class();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3375;
				Match(OPEN_PAREN);
				State = 3376;
				a_expr(0);
				State = 3377;
				Match(CLOSE_PAREN);
				State = 3378;
				opt_collate();
				State = 3379;
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_access_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_access_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Table_access_method_clauseContext table_access_method_clause() {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_table_access_method_clause);
		try {
			State = 3386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3383;
				Match(USING);
				State = 3384;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptwithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optwith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptwith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptwith(this);
		}
	}

	[RuleVersion(0)]
	public OptwithContext optwith() {
		OptwithContext _localctx = new OptwithContext(Context, State);
		EnterRule(_localctx, 250, RULE_optwith);
		try {
			State = 3393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3388;
				Match(WITH);
				State = 3389;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3390;
				Match(WITHOUT);
				State = 3391;
				Match(OIDS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OncommitoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oncommitoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOncommitoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOncommitoption(this);
		}
	}

	[RuleVersion(0)]
	public OncommitoptionContext oncommitoption() {
		OncommitoptionContext _localctx = new OncommitoptionContext(Context, State);
		EnterRule(_localctx, 252, RULE_oncommitoption);
		try {
			State = 3407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3395;
				Match(ON);
				State = 3396;
				Match(COMMIT);
				State = 3397;
				Match(DROP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3398;
				Match(ON);
				State = 3399;
				Match(COMMIT);
				State = 3400;
				Match(DELETE_P);
				State = 3401;
				Match(ROWS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3402;
				Match(ON);
				State = 3403;
				Match(COMMIT);
				State = 3404;
				Match(PRESERVE);
				State = 3405;
				Match(ROWS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespace(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceContext opttablespace() {
		OpttablespaceContext _localctx = new OpttablespaceContext(Context, State);
		EnterRule(_localctx, 254, RULE_opttablespace);
		try {
			State = 3412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3409;
				Match(TABLESPACE);
				State = 3410;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstablespace(this);
		}
	}

	[RuleVersion(0)]
	public OptconstablespaceContext optconstablespace() {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(Context, State);
		EnterRule(_localctx, 256, RULE_optconstablespace);
		try {
			State = 3419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3414;
				Match(USING);
				State = 3415;
				Match(INDEX);
				State = 3416;
				Match(TABLESPACE);
				State = 3417;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistingindexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existingindex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExistingindex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExistingindex(this);
		}
	}

	[RuleVersion(0)]
	public ExistingindexContext existingindex() {
		ExistingindexContext _localctx = new ExistingindexContext(Context, State);
		EnterRule(_localctx, 258, RULE_existingindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3421;
			Match(USING);
			State = 3422;
			Match(INDEX);
			State = 3423;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestatsstmtContext createstatsstmt() {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(Context, State);
		EnterRule(_localctx, 260, RULE_createstatsstmt);
		try {
			State = 3446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3425;
				Match(CREATE);
				State = 3426;
				Match(STATISTICS);
				State = 3427;
				any_name();
				State = 3428;
				opt_name_list();
				State = 3429;
				Match(ON);
				State = 3430;
				expr_list(0);
				State = 3431;
				Match(FROM);
				State = 3432;
				from_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3434;
				Match(CREATE);
				State = 3435;
				Match(STATISTICS);
				State = 3436;
				Match(IF_P);
				State = 3437;
				Match(NOT);
				State = 3438;
				Match(EXISTS);
				State = 3439;
				any_name();
				State = 3440;
				opt_name_list();
				State = 3441;
				Match(ON);
				State = 3442;
				expr_list(0);
				State = 3443;
				Match(FROM);
				State = 3444;
				from_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterstatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATISTICS() { return GetTokens(PostgreSQLParser.STATISTICS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS(int i) {
			return GetToken(PostgreSQLParser.STATISTICS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterstatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterstatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterstatsstmtContext alterstatsstmt() {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(Context, State);
		EnterRule(_localctx, 262, RULE_alterstatsstmt);
		try {
			State = 3464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3448;
				Match(ALTER);
				State = 3449;
				Match(STATISTICS);
				State = 3450;
				any_name();
				State = 3451;
				Match(SET);
				State = 3452;
				Match(STATISTICS);
				State = 3453;
				signediconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3455;
				Match(ALTER);
				State = 3456;
				Match(STATISTICS);
				State = 3457;
				Match(IF_P);
				State = 3458;
				Match(EXISTS);
				State = 3459;
				any_name();
				State = 3460;
				Match(SET);
				State = 3461;
				Match(STATISTICS);
				State = 3462;
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateasstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createasstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateasstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateasstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateasstmtContext createasstmt() {
		CreateasstmtContext _localctx = new CreateasstmtContext(Context, State);
		EnterRule(_localctx, 264, RULE_createasstmt);
		try {
			State = 3485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3466;
				Match(CREATE);
				State = 3467;
				opttemp();
				State = 3468;
				Match(TABLE);
				State = 3469;
				create_as_target();
				State = 3470;
				Match(AS);
				State = 3471;
				selectstmt();
				State = 3472;
				opt_with_data();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3474;
				Match(CREATE);
				State = 3475;
				opttemp();
				State = 3476;
				Match(TABLE);
				State = 3477;
				Match(IF_P);
				State = 3478;
				Match(NOT);
				State = 3479;
				Match(EXISTS);
				State = 3480;
				create_as_target();
				State = 3481;
				Match(AS);
				State = 3482;
				selectstmt();
				State = 3483;
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_as_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_as_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_as_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_as_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_as_targetContext create_as_target() {
		Create_as_targetContext _localctx = new Create_as_targetContext(Context, State);
		EnterRule(_localctx, 266, RULE_create_as_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3487;
			qualified_name();
			State = 3488;
			opt_column_list();
			State = 3489;
			table_access_method_clause();
			State = 3490;
			optwith();
			State = 3491;
			oncommitoption();
			State = 3492;
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_with_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with_data(this);
		}
	}

	[RuleVersion(0)]
	public Opt_with_dataContext opt_with_data() {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(Context, State);
		EnterRule(_localctx, 268, RULE_opt_with_data);
		try {
			State = 3500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3494;
				Match(WITH);
				State = 3495;
				Match(DATA_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3496;
				Match(WITH);
				State = 3497;
				Match(NO);
				State = 3498;
				Match(DATA_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatematviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptnologContext optnolog() {
			return GetRuleContext<OptnologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_mv_targetContext create_mv_target() {
			return GetRuleContext<Create_mv_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creatematviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatematviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatematviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatematviewstmtContext creatematviewstmt() {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(Context, State);
		EnterRule(_localctx, 270, RULE_creatematviewstmt);
		try {
			State = 3523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3502;
				Match(CREATE);
				State = 3503;
				optnolog();
				State = 3504;
				Match(MATERIALIZED);
				State = 3505;
				Match(VIEW);
				State = 3506;
				create_mv_target();
				State = 3507;
				Match(AS);
				State = 3508;
				selectstmt();
				State = 3509;
				opt_with_data();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3511;
				Match(CREATE);
				State = 3512;
				optnolog();
				State = 3513;
				Match(MATERIALIZED);
				State = 3514;
				Match(VIEW);
				State = 3515;
				Match(IF_P);
				State = 3516;
				Match(NOT);
				State = 3517;
				Match(EXISTS);
				State = 3518;
				create_mv_target();
				State = 3519;
				Match(AS);
				State = 3520;
				selectstmt();
				State = 3521;
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_mv_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_mv_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_mv_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_mv_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_mv_targetContext create_mv_target() {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(Context, State);
		EnterRule(_localctx, 272, RULE_create_mv_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3525;
			qualified_name();
			State = 3526;
			opt_column_list();
			State = 3527;
			table_access_method_clause();
			State = 3528;
			opt_reloptions();
			State = 3529;
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptnologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optnolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptnolog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptnolog(this);
		}
	}

	[RuleVersion(0)]
	public OptnologContext optnolog() {
		OptnologContext _localctx = new OptnologContext(Context, State);
		EnterRule(_localctx, 274, RULE_optnolog);
		try {
			State = 3533;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNLOGGED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3531;
				Match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefreshmatviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refreshmatviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRefreshmatviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRefreshmatviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public RefreshmatviewstmtContext refreshmatviewstmt() {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(Context, State);
		EnterRule(_localctx, 276, RULE_refreshmatviewstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3535;
			Match(REFRESH);
			State = 3536;
			Match(MATERIALIZED);
			State = 3537;
			Match(VIEW);
			State = 3538;
			opt_concurrently();
			State = 3539;
			qualified_name();
			State = 3540;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptseqoptlistContext optseqoptlist() {
			return GetRuleContext<OptseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateseqstmtContext createseqstmt() {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(Context, State);
		EnterRule(_localctx, 278, RULE_createseqstmt);
		try {
			State = 3557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3542;
				Match(CREATE);
				State = 3543;
				opttemp();
				State = 3544;
				Match(SEQUENCE);
				State = 3545;
				qualified_name();
				State = 3546;
				optseqoptlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3548;
				Match(CREATE);
				State = 3549;
				opttemp();
				State = 3550;
				Match(SEQUENCE);
				State = 3551;
				Match(IF_P);
				State = 3552;
				Match(NOT);
				State = 3553;
				Match(EXISTS);
				State = 3554;
				qualified_name();
				State = 3555;
				optseqoptlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterseqstmtContext alterseqstmt() {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(Context, State);
		EnterRule(_localctx, 280, RULE_alterseqstmt);
		try {
			State = 3571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3559;
				Match(ALTER);
				State = 3560;
				Match(SEQUENCE);
				State = 3561;
				qualified_name();
				State = 3562;
				seqoptlist(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3564;
				Match(ALTER);
				State = 3565;
				Match(SEQUENCE);
				State = 3566;
				Match(IF_P);
				State = 3567;
				Match(EXISTS);
				State = 3568;
				qualified_name();
				State = 3569;
				seqoptlist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptseqoptlistContext optseqoptlist() {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(Context, State);
		EnterRule(_localctx, 282, RULE_optseqoptlist);
		try {
			State = 3575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3573;
				seqoptlist(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptparenthesizedseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optparenthesizedseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptparenthesizedseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptparenthesizedseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(Context, State);
		EnterRule(_localctx, 284, RULE_optparenthesizedseqoptlist);
		try {
			State = 3582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3577;
				Match(OPEN_PAREN);
				State = 3578;
				seqoptlist(0);
				State = 3579;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem() {
			return GetRuleContext<SeqoptelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptlistContext seqoptlist() {
		return seqoptlist(0);
	}

	private SeqoptlistContext seqoptlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SeqoptlistContext _localctx = new SeqoptlistContext(Context, _parentState);
		SeqoptlistContext _prevctx = _localctx;
		int _startState = 286;
		EnterRecursionRule(_localctx, 286, RULE_seqoptlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3585;
			seqoptelem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3591;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SeqoptlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_seqoptlist);
					State = 3587;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3588;
					seqoptelem();
					}
					} 
				}
				State = 3593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SeqoptelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_byContext opt_by() {
			return GetRuleContext<Opt_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptelem(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptelemContext seqoptelem() {
		SeqoptelemContext _localctx = new SeqoptelemContext(Context, State);
		EnterRule(_localctx, 288, RULE_seqoptelem);
		try {
			State = 3628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3594;
				Match(AS);
				State = 3595;
				simpletypename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3596;
				Match(CACHE);
				State = 3597;
				numericonly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3598;
				Match(CYCLE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3599;
				Match(NO);
				State = 3600;
				Match(CYCLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3601;
				Match(INCREMENT);
				State = 3602;
				opt_by();
				State = 3603;
				numericonly();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3605;
				Match(MAXVALUE);
				State = 3606;
				numericonly();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3607;
				Match(MINVALUE);
				State = 3608;
				numericonly();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3609;
				Match(NO);
				State = 3610;
				Match(MAXVALUE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3611;
				Match(NO);
				State = 3612;
				Match(MINVALUE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3613;
				Match(OWNED);
				State = 3614;
				Match(BY);
				State = 3615;
				any_name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3616;
				Match(SEQUENCE);
				State = 3617;
				Match(NAME_P);
				State = 3618;
				any_name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3619;
				Match(START);
				State = 3620;
				opt_with();
				State = 3621;
				numericonly();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3623;
				Match(RESTART);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3624;
				Match(RESTART);
				State = 3625;
				opt_with();
				State = 3626;
				numericonly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_by(this);
		}
	}

	[RuleVersion(0)]
	public Opt_byContext opt_by() {
		Opt_byContext _localctx = new Opt_byContext(Context, State);
		EnterRule(_localctx, 290, RULE_opt_by);
		try {
			State = 3632;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3630;
				Match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericonlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly(this);
		}
	}

	[RuleVersion(0)]
	public NumericonlyContext numericonly() {
		NumericonlyContext _localctx = new NumericonlyContext(Context, State);
		EnterRule(_localctx, 292, RULE_numericonly);
		try {
			State = 3640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3634;
				fconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3635;
				Match(PLUS);
				State = 3636;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3637;
				Match(MINUS);
				State = 3638;
				fconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3639;
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numericonly_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numericonly_listContext numericonly_list() {
			return GetRuleContext<Numericonly_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Numericonly_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly_list(this);
		}
	}

	[RuleVersion(0)]
	public Numericonly_listContext numericonly_list() {
		return numericonly_list(0);
	}

	private Numericonly_listContext numericonly_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Numericonly_listContext _localctx = new Numericonly_listContext(Context, _parentState);
		Numericonly_listContext _prevctx = _localctx;
		int _startState = 294;
		EnterRecursionRule(_localctx, 294, RULE_numericonly_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3643;
			numericonly();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Numericonly_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_numericonly_list);
					State = 3645;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3646;
					Match(COMMA);
					State = 3647;
					numericonly();
					}
					} 
				}
				State = 3652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CreateplangstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_trustedContext opt_trusted() {
			return GetRuleContext<Opt_trustedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_inline_handlerContext opt_inline_handler() {
			return GetRuleContext<Opt_inline_handlerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_validatorContext opt_validator() {
			return GetRuleContext<Opt_validatorContext>(0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createplangstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateplangstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateplangstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateplangstmtContext createplangstmt() {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(Context, State);
		EnterRule(_localctx, 296, RULE_createplangstmt);
		try {
			State = 3671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3653;
				Match(CREATE);
				State = 3654;
				opt_or_replace();
				State = 3655;
				opt_trusted();
				State = 3656;
				opt_procedural();
				State = 3657;
				Match(LANGUAGE);
				State = 3658;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3660;
				Match(CREATE);
				State = 3661;
				opt_or_replace();
				State = 3662;
				opt_trusted();
				State = 3663;
				opt_procedural();
				State = 3664;
				Match(LANGUAGE);
				State = 3665;
				name();
				State = 3666;
				Match(HANDLER);
				State = 3667;
				handler_name();
				State = 3668;
				opt_inline_handler();
				State = 3669;
				opt_validator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_trustedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_trusted; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_trusted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_trusted(this);
		}
	}

	[RuleVersion(0)]
	public Opt_trustedContext opt_trusted() {
		Opt_trustedContext _localctx = new Opt_trustedContext(Context, State);
		EnterRule(_localctx, 298, RULE_opt_trusted);
		try {
			State = 3675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUSTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3673;
				Match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Handler_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHandler_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHandler_name(this);
		}
	}

	[RuleVersion(0)]
	public Handler_nameContext handler_name() {
		Handler_nameContext _localctx = new Handler_nameContext(Context, State);
		EnterRule(_localctx, 300, RULE_handler_name);
		try {
			State = 3681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3677;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3678;
				name();
				State = 3679;
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_inline_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_inline_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_inline_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_inline_handler(this);
		}
	}

	[RuleVersion(0)]
	public Opt_inline_handlerContext opt_inline_handler() {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(Context, State);
		EnterRule(_localctx, 302, RULE_opt_inline_handler);
		try {
			State = 3686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INLINE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3683;
				Match(INLINE_P);
				State = 3684;
				handler_name();
				}
				break;
			case SEMI:
			case INTO:
			case NO:
			case VALIDATOR:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Validator_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValidator_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValidator_clause(this);
		}
	}

	[RuleVersion(0)]
	public Validator_clauseContext validator_clause() {
		Validator_clauseContext _localctx = new Validator_clauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_validator_clause);
		try {
			State = 3692;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3688;
				Match(VALIDATOR);
				State = 3689;
				handler_name();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3690;
				Match(NO);
				State = 3691;
				Match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_validatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Validator_clauseContext validator_clause() {
			return GetRuleContext<Validator_clauseContext>(0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_validator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_validator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_validator(this);
		}
	}

	[RuleVersion(0)]
	public Opt_validatorContext opt_validator() {
		Opt_validatorContext _localctx = new Opt_validatorContext(Context, State);
		EnterRule(_localctx, 306, RULE_opt_validator);
		try {
			State = 3696;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3694;
				validator_clause();
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_proceduralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_procedural; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_procedural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_procedural(this);
		}
	}

	[RuleVersion(0)]
	public Opt_proceduralContext opt_procedural() {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(Context, State);
		EnterRule(_localctx, 308, RULE_opt_procedural);
		try {
			State = 3700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3698;
				Match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceownerContext opttablespaceowner() {
			return GetRuleContext<OpttablespaceownerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetablespacestmtContext createtablespacestmt() {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(Context, State);
		EnterRule(_localctx, 310, RULE_createtablespacestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3702;
			Match(CREATE);
			State = 3703;
			Match(TABLESPACE);
			State = 3704;
			name();
			State = 3705;
			opttablespaceowner();
			State = 3706;
			Match(LOCATION);
			State = 3707;
			sconst();
			State = 3708;
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceownerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespaceowner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespaceowner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespaceowner(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceownerContext opttablespaceowner() {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(Context, State);
		EnterRule(_localctx, 312, RULE_opttablespaceowner);
		try {
			State = 3713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OWNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3710;
				Match(OWNER);
				State = 3711;
				rolespec();
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptablespacestmtContext droptablespacestmt() {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(Context, State);
		EnterRule(_localctx, 314, RULE_droptablespacestmt);
		try {
			State = 3723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3715;
				Match(DROP);
				State = 3716;
				Match(TABLESPACE);
				State = 3717;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3718;
				Match(DROP);
				State = 3719;
				Match(TABLESPACE);
				State = 3720;
				Match(IF_P);
				State = 3721;
				Match(EXISTS);
				State = 3722;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_listContext create_extension_opt_list() {
			return GetRuleContext<Create_extension_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateextensionstmtContext createextensionstmt() {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(Context, State);
		EnterRule(_localctx, 316, RULE_createextensionstmt);
		try {
			State = 3740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3725;
				Match(CREATE);
				State = 3726;
				Match(EXTENSION);
				State = 3727;
				name();
				State = 3728;
				opt_with();
				State = 3729;
				create_extension_opt_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3731;
				Match(CREATE);
				State = 3732;
				Match(EXTENSION);
				State = 3733;
				Match(IF_P);
				State = 3734;
				Match(NOT);
				State = 3735;
				Match(EXISTS);
				State = 3736;
				name();
				State = 3737;
				opt_with();
				State = 3738;
				create_extension_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_listContext create_extension_opt_list() {
			return GetRuleContext<Create_extension_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext create_extension_opt_item() {
			return GetRuleContext<Create_extension_opt_itemContext>(0);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_listContext create_extension_opt_list() {
		return create_extension_opt_list(0);
	}

	private Create_extension_opt_listContext create_extension_opt_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(Context, _parentState);
		Create_extension_opt_listContext _prevctx = _localctx;
		int _startState = 318;
		EnterRecursionRule(_localctx, 318, RULE_create_extension_opt_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3747;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Create_extension_opt_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_create_extension_opt_list);
					State = 3743;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 3744;
					create_extension_opt_item();
					}
					} 
				}
				State = 3749;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Create_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_itemContext create_extension_opt_item() {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 320, RULE_create_extension_opt_item);
		try {
			State = 3757;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCHEMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3750;
				Match(SCHEMA);
				State = 3751;
				name();
				}
				break;
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3752;
				Match(VERSION_P);
				State = 3753;
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3754;
				Match(FROM);
				State = 3755;
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3756;
				Match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_listContext alter_extension_opt_list() {
			return GetRuleContext<Alter_extension_opt_listContext>(0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensionstmtContext alterextensionstmt() {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(Context, State);
		EnterRule(_localctx, 322, RULE_alterextensionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3759;
			Match(ALTER);
			State = 3760;
			Match(EXTENSION);
			State = 3761;
			name();
			State = 3762;
			Match(UPDATE);
			State = 3763;
			alter_extension_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_listContext alter_extension_opt_list() {
			return GetRuleContext<Alter_extension_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext alter_extension_opt_item() {
			return GetRuleContext<Alter_extension_opt_itemContext>(0);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_listContext alter_extension_opt_list() {
		return alter_extension_opt_list(0);
	}

	private Alter_extension_opt_listContext alter_extension_opt_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(Context, _parentState);
		Alter_extension_opt_listContext _prevctx = _localctx;
		int _startState = 324;
		EnterRecursionRule(_localctx, 324, RULE_alter_extension_opt_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3770;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_extension_opt_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alter_extension_opt_list);
					State = 3766;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 3767;
					alter_extension_opt_item();
					}
					} 
				}
				State = 3772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_itemContext alter_extension_opt_item() {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 326, RULE_alter_extension_opt_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3773;
			Match(TO);
			State = 3774;
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensioncontentsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensioncontentsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensioncontentsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensioncontentsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(Context, State);
		EnterRule(_localctx, 328, RULE_alterextensioncontentsstmt);
		try {
			State = 3880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3776;
				Match(ALTER);
				State = 3777;
				Match(EXTENSION);
				State = 3778;
				name();
				State = 3779;
				add_drop();
				State = 3780;
				object_type_name();
				State = 3781;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3783;
				Match(ALTER);
				State = 3784;
				Match(EXTENSION);
				State = 3785;
				name();
				State = 3786;
				add_drop();
				State = 3787;
				object_type_any_name();
				State = 3788;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3790;
				Match(ALTER);
				State = 3791;
				Match(EXTENSION);
				State = 3792;
				name();
				State = 3793;
				add_drop();
				State = 3794;
				Match(AGGREGATE);
				State = 3795;
				aggregate_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3797;
				Match(ALTER);
				State = 3798;
				Match(EXTENSION);
				State = 3799;
				name();
				State = 3800;
				add_drop();
				State = 3801;
				Match(CAST);
				State = 3802;
				Match(OPEN_PAREN);
				State = 3803;
				typename();
				State = 3804;
				Match(AS);
				State = 3805;
				typename();
				State = 3806;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3808;
				Match(ALTER);
				State = 3809;
				Match(EXTENSION);
				State = 3810;
				name();
				State = 3811;
				add_drop();
				State = 3812;
				Match(DOMAIN_P);
				State = 3813;
				typename();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3815;
				Match(ALTER);
				State = 3816;
				Match(EXTENSION);
				State = 3817;
				name();
				State = 3818;
				add_drop();
				State = 3819;
				Match(FUNCTION);
				State = 3820;
				function_with_argtypes();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3822;
				Match(ALTER);
				State = 3823;
				Match(EXTENSION);
				State = 3824;
				name();
				State = 3825;
				add_drop();
				State = 3826;
				Match(OPERATOR);
				State = 3827;
				operator_with_argtypes();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3829;
				Match(ALTER);
				State = 3830;
				Match(EXTENSION);
				State = 3831;
				name();
				State = 3832;
				add_drop();
				State = 3833;
				Match(OPERATOR);
				State = 3834;
				Match(CLASS);
				State = 3835;
				any_name();
				State = 3836;
				Match(USING);
				State = 3837;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3839;
				Match(ALTER);
				State = 3840;
				Match(EXTENSION);
				State = 3841;
				name();
				State = 3842;
				add_drop();
				State = 3843;
				Match(OPERATOR);
				State = 3844;
				Match(FAMILY);
				State = 3845;
				any_name();
				State = 3846;
				Match(USING);
				State = 3847;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3849;
				Match(ALTER);
				State = 3850;
				Match(EXTENSION);
				State = 3851;
				name();
				State = 3852;
				add_drop();
				State = 3853;
				Match(PROCEDURE);
				State = 3854;
				function_with_argtypes();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3856;
				Match(ALTER);
				State = 3857;
				Match(EXTENSION);
				State = 3858;
				name();
				State = 3859;
				add_drop();
				State = 3860;
				Match(ROUTINE);
				State = 3861;
				function_with_argtypes();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3863;
				Match(ALTER);
				State = 3864;
				Match(EXTENSION);
				State = 3865;
				name();
				State = 3866;
				add_drop();
				State = 3867;
				Match(TRANSFORM);
				State = 3868;
				Match(FOR);
				State = 3869;
				typename();
				State = 3870;
				Match(LANGUAGE);
				State = 3871;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3873;
				Match(ALTER);
				State = 3874;
				Match(EXTENSION);
				State = 3875;
				name();
				State = 3876;
				add_drop();
				State = 3877;
				Match(TYPE_P);
				State = 3878;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fdw_optionsContext opt_fdw_options() {
			return GetRuleContext<Opt_fdw_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefdwstmtContext createfdwstmt() {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(Context, State);
		EnterRule(_localctx, 330, RULE_createfdwstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3882;
			Match(CREATE);
			State = 3883;
			Match(FOREIGN);
			State = 3884;
			Match(DATA_P);
			State = 3885;
			Match(WRAPPER);
			State = 3886;
			name();
			State = 3887;
			opt_fdw_options();
			State = 3888;
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_option(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionContext fdw_option() {
		Fdw_optionContext _localctx = new Fdw_optionContext(Context, State);
		EnterRule(_localctx, 332, RULE_fdw_option);
		try {
			State = 3898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3890;
				Match(HANDLER);
				State = 3891;
				handler_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3892;
				Match(NO);
				State = 3893;
				Match(HANDLER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3894;
				Match(VALIDATOR);
				State = 3895;
				handler_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3896;
				Match(NO);
				State = 3897;
				Match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext fdw_option() {
			return GetRuleContext<Fdw_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionsContext fdw_options() {
		return fdw_options(0);
	}

	private Fdw_optionsContext fdw_options(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Fdw_optionsContext _localctx = new Fdw_optionsContext(Context, _parentState);
		Fdw_optionsContext _prevctx = _localctx;
		int _startState = 334;
		EnterRecursionRule(_localctx, 334, RULE_fdw_options, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3901;
			fdw_option();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3907;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fdw_optionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_fdw_options);
					State = 3903;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3904;
					fdw_option();
					}
					} 
				}
				State = 3909;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_fdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_fdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fdw_optionsContext opt_fdw_options() {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(Context, State);
		EnterRule(_localctx, 336, RULE_opt_fdw_options);
		try {
			State = 3912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3910;
				fdw_options(0);
				}
				break;
			case SEMI:
			case INTO:
			case OPTIONS:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fdw_optionsContext opt_fdw_options() {
			return GetRuleContext<Opt_fdw_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfdwstmtContext alterfdwstmt() {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(Context, State);
		EnterRule(_localctx, 338, RULE_alterfdwstmt);
		try {
			State = 3929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3914;
				Match(ALTER);
				State = 3915;
				Match(FOREIGN);
				State = 3916;
				Match(DATA_P);
				State = 3917;
				Match(WRAPPER);
				State = 3918;
				name();
				State = 3919;
				opt_fdw_options();
				State = 3920;
				alter_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3922;
				Match(ALTER);
				State = 3923;
				Match(FOREIGN);
				State = 3924;
				Match(DATA_P);
				State = 3925;
				Match(WRAPPER);
				State = 3926;
				name();
				State = 3927;
				fdw_options(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_listContext generic_option_list() {
			return GetRuleContext<Generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_generic_optionsContext create_generic_options() {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(Context, State);
		EnterRule(_localctx, 340, RULE_create_generic_options);
		try {
			State = 3937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3931;
				Match(OPTIONS);
				State = 3932;
				Match(OPEN_PAREN);
				State = 3933;
				generic_option_list(0);
				State = 3934;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem() {
			return GetRuleContext<Generic_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_listContext generic_option_list() {
			return GetRuleContext<Generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_listContext generic_option_list() {
		return generic_option_list(0);
	}

	private Generic_option_listContext generic_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Generic_option_listContext _localctx = new Generic_option_listContext(Context, _parentState);
		Generic_option_listContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_generic_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3940;
			generic_option_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3947;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_generic_option_list);
					State = 3942;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3943;
					Match(COMMA);
					State = 3944;
					generic_option_elem();
					}
					} 
				}
				State = 3949;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Alter_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_listContext alter_generic_option_list() {
			return GetRuleContext<Alter_generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_optionsContext alter_generic_options() {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(Context, State);
		EnterRule(_localctx, 344, RULE_alter_generic_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3950;
			Match(OPTIONS);
			State = 3951;
			Match(OPEN_PAREN);
			State = 3952;
			alter_generic_option_list(0);
			State = 3953;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext alter_generic_option_elem() {
			return GetRuleContext<Alter_generic_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_listContext alter_generic_option_list() {
			return GetRuleContext<Alter_generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_listContext alter_generic_option_list() {
		return alter_generic_option_list(0);
	}

	private Alter_generic_option_listContext alter_generic_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(Context, _parentState);
		Alter_generic_option_listContext _prevctx = _localctx;
		int _startState = 346;
		EnterRecursionRule(_localctx, 346, RULE_alter_generic_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3956;
			alter_generic_option_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3963;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,139,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_generic_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alter_generic_option_list);
					State = 3958;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3959;
					Match(COMMA);
					State = 3960;
					alter_generic_option_elem();
					}
					} 
				}
				State = 3965;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,139,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Alter_generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem() {
			return GetRuleContext<Generic_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_elemContext alter_generic_option_elem() {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(Context, State);
		EnterRule(_localctx, 348, RULE_alter_generic_option_elem);
		try {
			State = 3973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3966;
				generic_option_elem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3967;
				Match(SET);
				State = 3968;
				generic_option_elem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3969;
				Match(ADD_P);
				State = 3970;
				generic_option_elem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3971;
				Match(DROP);
				State = 3972;
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_argContext generic_option_arg() {
			return GetRuleContext<Generic_option_argContext>(0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_elemContext generic_option_elem() {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(Context, State);
		EnterRule(_localctx, 350, RULE_generic_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3975;
			generic_option_name();
			State = 3976;
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_nameContext generic_option_name() {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(Context, State);
		EnterRule(_localctx, 352, RULE_generic_option_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3978;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_argContext generic_option_arg() {
		Generic_option_argContext _localctx = new Generic_option_argContext(Context, State);
		EnterRule(_localctx, 354, RULE_generic_option_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3980;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_typeContext opt_type() {
			return GetRuleContext<Opt_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return GetRuleContext<Opt_foreign_server_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeignserverstmtContext createforeignserverstmt() {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 356, RULE_createforeignserverstmt);
		try {
			State = 4007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3982;
				Match(CREATE);
				State = 3983;
				Match(SERVER);
				State = 3984;
				name();
				State = 3985;
				opt_type();
				State = 3986;
				opt_foreign_server_version();
				State = 3987;
				Match(FOREIGN);
				State = 3988;
				Match(DATA_P);
				State = 3989;
				Match(WRAPPER);
				State = 3990;
				name();
				State = 3991;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3993;
				Match(CREATE);
				State = 3994;
				Match(SERVER);
				State = 3995;
				Match(IF_P);
				State = 3996;
				Match(NOT);
				State = 3997;
				Match(EXISTS);
				State = 3998;
				name();
				State = 3999;
				opt_type();
				State = 4000;
				opt_foreign_server_version();
				State = 4001;
				Match(FOREIGN);
				State = 4002;
				Match(DATA_P);
				State = 4003;
				Match(WRAPPER);
				State = 4004;
				name();
				State = 4005;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_type(this);
		}
	}

	[RuleVersion(0)]
	public Opt_typeContext opt_type() {
		Opt_typeContext _localctx = new Opt_typeContext(Context, State);
		EnterRule(_localctx, 358, RULE_opt_type);
		try {
			State = 4012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4009;
				Match(TYPE_P);
				State = 4010;
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_server_versionContext foreign_server_version() {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 360, RULE_foreign_server_version);
		try {
			State = 4018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4014;
				Match(VERSION_P);
				State = 4015;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4016;
				Match(VERSION_P);
				State = 4017;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_foreign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_foreign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Opt_foreign_server_versionContext opt_foreign_server_version() {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 362, RULE_opt_foreign_server_version);
		try {
			State = 4022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERSION_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4020;
				foreign_server_version();
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterforeignserverstmtContext alterforeignserverstmt() {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 364, RULE_alterforeignserverstmt);
		try {
			State = 4040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4024;
				Match(ALTER);
				State = 4025;
				Match(SERVER);
				State = 4026;
				name();
				State = 4027;
				foreign_server_version();
				State = 4028;
				alter_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4030;
				Match(ALTER);
				State = 4031;
				Match(SERVER);
				State = 4032;
				name();
				State = 4033;
				foreign_server_version();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4035;
				Match(ALTER);
				State = 4036;
				Match(SERVER);
				State = 4037;
				name();
				State = 4038;
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeigntablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeigntablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeigntablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeigntablestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeigntablestmtContext createforeigntablestmt() {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(Context, State);
		EnterRule(_localctx, 366, RULE_createforeigntablestmt);
		try {
			State = 4098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4042;
				Match(CREATE);
				State = 4043;
				Match(FOREIGN);
				State = 4044;
				Match(TABLE);
				State = 4045;
				qualified_name();
				State = 4046;
				Match(OPEN_PAREN);
				State = 4047;
				opttableelementlist();
				State = 4048;
				Match(CLOSE_PAREN);
				State = 4049;
				optinherit();
				State = 4050;
				Match(SERVER);
				State = 4051;
				name();
				State = 4052;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4054;
				Match(CREATE);
				State = 4055;
				Match(FOREIGN);
				State = 4056;
				Match(TABLE);
				State = 4057;
				Match(IF_P);
				State = 4058;
				Match(NOT);
				State = 4059;
				Match(EXISTS);
				State = 4060;
				qualified_name();
				State = 4061;
				Match(OPEN_PAREN);
				State = 4062;
				opttableelementlist();
				State = 4063;
				Match(CLOSE_PAREN);
				State = 4064;
				optinherit();
				State = 4065;
				Match(SERVER);
				State = 4066;
				name();
				State = 4067;
				create_generic_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4069;
				Match(CREATE);
				State = 4070;
				Match(FOREIGN);
				State = 4071;
				Match(TABLE);
				State = 4072;
				qualified_name();
				State = 4073;
				Match(PARTITION);
				State = 4074;
				Match(OF);
				State = 4075;
				qualified_name();
				State = 4076;
				opttypedtableelementlist();
				State = 4077;
				partitionboundspec();
				State = 4078;
				Match(SERVER);
				State = 4079;
				name();
				State = 4080;
				create_generic_options();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4082;
				Match(CREATE);
				State = 4083;
				Match(FOREIGN);
				State = 4084;
				Match(TABLE);
				State = 4085;
				Match(IF_P);
				State = 4086;
				Match(NOT);
				State = 4087;
				Match(EXISTS);
				State = 4088;
				qualified_name();
				State = 4089;
				Match(PARTITION);
				State = 4090;
				Match(OF);
				State = 4091;
				qualified_name();
				State = 4092;
				opttypedtableelementlist();
				State = 4093;
				partitionboundspec();
				State = 4094;
				Match(SERVER);
				State = 4095;
				name();
				State = 4096;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportforeignschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualificationContext import_qualification() {
			return GetRuleContext<Import_qualificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importforeignschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImportforeignschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImportforeignschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public ImportforeignschemastmtContext importforeignschemastmt() {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_importforeignschemastmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4100;
			Match(IMPORT_P);
			State = 4101;
			Match(FOREIGN);
			State = 4102;
			Match(SCHEMA);
			State = 4103;
			name();
			State = 4104;
			import_qualification();
			State = 4105;
			Match(FROM);
			State = 4106;
			Match(SERVER);
			State = 4107;
			name();
			State = 4108;
			Match(INTO);
			State = 4109;
			name();
			State = 4110;
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualification_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification_type(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualification_typeContext import_qualification_type() {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(Context, State);
		EnterRule(_localctx, 370, RULE_import_qualification_type);
		try {
			State = 4115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4112;
				Match(LIMIT);
				State = 4113;
				Match(TO);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4114;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualification_typeContext import_qualification_type() {
			return GetRuleContext<Import_qualification_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualificationContext import_qualification() {
		Import_qualificationContext _localctx = new Import_qualificationContext(Context, State);
		EnterRule(_localctx, 372, RULE_import_qualification);
		try {
			State = 4123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCEPT:
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4117;
				import_qualification_type();
				State = 4118;
				Match(OPEN_PAREN);
				State = 4119;
				relation_expr_list(0);
				State = 4120;
				Match(CLOSE_PAREN);
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateusermappingstmtContext createusermappingstmt() {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(Context, State);
		EnterRule(_localctx, 374, RULE_createusermappingstmt);
		try {
			State = 4146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4125;
				Match(CREATE);
				State = 4126;
				Match(USER);
				State = 4127;
				Match(MAPPING);
				State = 4128;
				Match(FOR);
				State = 4129;
				auth_ident();
				State = 4130;
				Match(SERVER);
				State = 4131;
				name();
				State = 4132;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4134;
				Match(CREATE);
				State = 4135;
				Match(USER);
				State = 4136;
				Match(MAPPING);
				State = 4137;
				Match(IF_P);
				State = 4138;
				Match(NOT);
				State = 4139;
				Match(EXISTS);
				State = 4140;
				Match(FOR);
				State = 4141;
				auth_ident();
				State = 4142;
				Match(SERVER);
				State = 4143;
				name();
				State = 4144;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auth_identContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auth_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAuth_ident(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAuth_ident(this);
		}
	}

	[RuleVersion(0)]
	public Auth_identContext auth_ident() {
		Auth_identContext _localctx = new Auth_identContext(Context, State);
		EnterRule(_localctx, 376, RULE_auth_ident);
		try {
			State = 4150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4148;
				rolespec();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4149;
				Match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropusermappingstmtContext dropusermappingstmt() {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_dropusermappingstmt);
		try {
			State = 4170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4152;
				Match(DROP);
				State = 4153;
				Match(USER);
				State = 4154;
				Match(MAPPING);
				State = 4155;
				Match(FOR);
				State = 4156;
				auth_ident();
				State = 4157;
				Match(SERVER);
				State = 4158;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4160;
				Match(DROP);
				State = 4161;
				Match(USER);
				State = 4162;
				Match(MAPPING);
				State = 4163;
				Match(IF_P);
				State = 4164;
				Match(EXISTS);
				State = 4165;
				Match(FOR);
				State = 4166;
				auth_ident();
				State = 4167;
				Match(SERVER);
				State = 4168;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterusermappingstmtContext alterusermappingstmt() {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_alterusermappingstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4172;
			Match(ALTER);
			State = 4173;
			Match(USER);
			State = 4174;
			Match(MAPPING);
			State = 4175;
			Match(FOR);
			State = 4176;
			auth_ident();
			State = 4177;
			Match(SERVER);
			State = 4178;
			name();
			State = 4179;
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return GetRuleContext<RowsecuritydefaultpermissiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return GetRuleContext<RowsecuritydefaultforcmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return GetRuleContext<RowsecuritydefaulttoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepolicystmtContext createpolicystmt() {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(Context, State);
		EnterRule(_localctx, 382, RULE_createpolicystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4181;
			Match(CREATE);
			State = 4182;
			Match(POLICY);
			State = 4183;
			name();
			State = 4184;
			Match(ON);
			State = 4185;
			qualified_name();
			State = 4186;
			rowsecuritydefaultpermissive();
			State = 4187;
			rowsecuritydefaultforcmd();
			State = 4188;
			rowsecuritydefaulttorole();
			State = 4189;
			rowsecurityoptionalexpr();
			State = 4190;
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return GetRuleContext<RowsecurityoptionaltoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpolicystmtContext alterpolicystmt() {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(Context, State);
		EnterRule(_localctx, 384, RULE_alterpolicystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4192;
			Match(ALTER);
			State = 4193;
			Match(POLICY);
			State = 4194;
			name();
			State = 4195;
			Match(ON);
			State = 4196;
			qualified_name();
			State = 4197;
			rowsecurityoptionaltorole();
			State = 4198;
			rowsecurityoptionalexpr();
			State = 4199;
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalexpr(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(Context, State);
		EnterRule(_localctx, 386, RULE_rowsecurityoptionalexpr);
		try {
			State = 4207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4201;
				Match(USING);
				State = 4202;
				Match(OPEN_PAREN);
				State = 4203;
				a_expr(0);
				State = 4204;
				Match(CLOSE_PAREN);
				}
				break;
			case SEMI:
			case INTO:
			case WITH:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalwithcheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalwithcheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalwithcheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalwithcheck(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(Context, State);
		EnterRule(_localctx, 388, RULE_rowsecurityoptionalwithcheck);
		try {
			State = 4216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4209;
				Match(WITH);
				State = 4210;
				Match(CHECK);
				State = 4211;
				Match(OPEN_PAREN);
				State = 4212;
				a_expr(0);
				State = 4213;
				Match(CLOSE_PAREN);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaulttoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaulttorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaulttorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaulttorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(Context, State);
		EnterRule(_localctx, 390, RULE_rowsecuritydefaulttorole);
		try {
			State = 4221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4218;
				Match(TO);
				State = 4219;
				role_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case USING:
			case WITH:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionaltoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionaltorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionaltorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionaltorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(Context, State);
		EnterRule(_localctx, 392, RULE_rowsecurityoptionaltorole);
		try {
			State = 4226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4223;
				Match(TO);
				State = 4224;
				role_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case USING:
			case WITH:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultpermissiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultpermissive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultpermissive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultpermissive(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(Context, State);
		EnterRule(_localctx, 394, RULE_rowsecuritydefaultpermissive);
		try {
			State = 4231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4228;
				Match(AS);
				State = 4229;
				identifier();
				}
				break;
			case SEMI:
			case FOR:
			case INTO:
			case TO:
			case USING:
			case WITH:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultforcmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_security_cmdContext row_security_cmd() {
			return GetRuleContext<Row_security_cmdContext>(0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultforcmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultforcmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultforcmd(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(Context, State);
		EnterRule(_localctx, 396, RULE_rowsecuritydefaultforcmd);
		try {
			State = 4236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4233;
				Match(FOR);
				State = 4234;
				row_security_cmd();
				}
				break;
			case SEMI:
			case INTO:
			case TO:
			case USING:
			case WITH:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_security_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_security_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_security_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_security_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Row_security_cmdContext row_security_cmd() {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(Context, State);
		EnterRule(_localctx, 398, RULE_row_security_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4238;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateamstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Am_typeContext am_type() {
			return GetRuleContext<Am_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createamstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateamstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateamstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateamstmtContext createamstmt() {
		CreateamstmtContext _localctx = new CreateamstmtContext(Context, State);
		EnterRule(_localctx, 400, RULE_createamstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4240;
			Match(CREATE);
			State = 4241;
			Match(ACCESS);
			State = 4242;
			Match(METHOD);
			State = 4243;
			name();
			State = 4244;
			Match(TYPE_P);
			State = 4245;
			am_type();
			State = 4246;
			Match(HANDLER);
			State = 4247;
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Am_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_am_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAm_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAm_type(this);
		}
	}

	[RuleVersion(0)]
	public Am_typeContext am_type() {
		Am_typeContext _localctx = new Am_typeContext(Context, State);
		EnterRule(_localctx, 402, RULE_am_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4249;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeractiontimeContext triggeractiontime() {
			return GetRuleContext<TriggeractiontimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggereventsContext triggerevents() {
			return GetRuleContext<TriggereventsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerreferencingContext triggerreferencing() {
			return GetRuleContext<TriggerreferencingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforspecContext triggerforspec() {
			return GetRuleContext<TriggerforspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerwhenContext triggerwhen() {
			return GetRuleContext<TriggerwhenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargsContext triggerfuncargs() {
			return GetRuleContext<TriggerfuncargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptconstrfromtableContext optconstrfromtable() {
			return GetRuleContext<OptconstrfromtableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetrigstmtContext createtrigstmt() {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(Context, State);
		EnterRule(_localctx, 404, RULE_createtrigstmt);
		try {
			State = 4289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4251;
				Match(CREATE);
				State = 4252;
				Match(TRIGGER);
				State = 4253;
				name();
				State = 4254;
				triggeractiontime();
				State = 4255;
				triggerevents(0);
				State = 4256;
				Match(ON);
				State = 4257;
				qualified_name();
				State = 4258;
				triggerreferencing();
				State = 4259;
				triggerforspec();
				State = 4260;
				triggerwhen();
				State = 4261;
				Match(EXECUTE);
				State = 4262;
				function_or_procedure();
				State = 4263;
				func_name();
				State = 4264;
				Match(OPEN_PAREN);
				State = 4265;
				triggerfuncargs(0);
				State = 4266;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4268;
				Match(CREATE);
				State = 4269;
				Match(CONSTRAINT);
				State = 4270;
				Match(TRIGGER);
				State = 4271;
				name();
				State = 4272;
				Match(AFTER);
				State = 4273;
				triggerevents(0);
				State = 4274;
				Match(ON);
				State = 4275;
				qualified_name();
				State = 4276;
				optconstrfromtable();
				State = 4277;
				constraintattributespec(0);
				State = 4278;
				Match(FOR);
				State = 4279;
				Match(EACH);
				State = 4280;
				Match(ROW);
				State = 4281;
				triggerwhen();
				State = 4282;
				Match(EXECUTE);
				State = 4283;
				function_or_procedure();
				State = 4284;
				func_name();
				State = 4285;
				Match(OPEN_PAREN);
				State = 4286;
				triggerfuncargs(0);
				State = 4287;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeractiontimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeractiontime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeractiontime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeractiontime(this);
		}
	}

	[RuleVersion(0)]
	public TriggeractiontimeContext triggeractiontime() {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(Context, State);
		EnterRule(_localctx, 406, RULE_triggeractiontime);
		try {
			State = 4295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4291;
				Match(BEFORE);
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4292;
				Match(AFTER);
				}
				break;
			case INSTEAD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4293;
				Match(INSTEAD);
				State = 4294;
				Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggereventsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext triggeroneevent() {
			return GetRuleContext<TriggeroneeventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggereventsContext triggerevents() {
			return GetRuleContext<TriggereventsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		public TriggereventsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerevents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerevents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerevents(this);
		}
	}

	[RuleVersion(0)]
	public TriggereventsContext triggerevents() {
		return triggerevents(0);
	}

	private TriggereventsContext triggerevents(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TriggereventsContext _localctx = new TriggereventsContext(Context, _parentState);
		TriggereventsContext _prevctx = _localctx;
		int _startState = 408;
		EnterRecursionRule(_localctx, 408, RULE_triggerevents, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4298;
			triggeroneevent();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggereventsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_triggerevents);
					State = 4300;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4301;
					Match(OR);
					State = 4302;
					triggeroneevent();
					}
					} 
				}
				State = 4307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TriggeroneeventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeroneevent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeroneevent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeroneevent(this);
		}
	}

	[RuleVersion(0)]
	public TriggeroneeventContext triggeroneevent() {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(Context, State);
		EnterRule(_localctx, 410, RULE_triggeroneevent);
		try {
			State = 4315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4308;
				Match(INSERT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4309;
				Match(DELETE_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4310;
				Match(UPDATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4311;
				Match(UPDATE);
				State = 4312;
				Match(OF);
				State = 4313;
				columnlist(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4314;
				Match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerreferencingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionsContext triggertransitions() {
			return GetRuleContext<TriggertransitionsContext>(0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerreferencing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerreferencing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerreferencing(this);
		}
	}

	[RuleVersion(0)]
	public TriggerreferencingContext triggerreferencing() {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(Context, State);
		EnterRule(_localctx, 412, RULE_triggerreferencing);
		try {
			State = 4320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REFERENCING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4317;
				Match(REFERENCING);
				State = 4318;
				triggertransitions(0);
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext triggertransition() {
			return GetRuleContext<TriggertransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionsContext triggertransitions() {
			return GetRuleContext<TriggertransitionsContext>(0);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransitions(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionsContext triggertransitions() {
		return triggertransitions(0);
	}

	private TriggertransitionsContext triggertransitions(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TriggertransitionsContext _localctx = new TriggertransitionsContext(Context, _parentState);
		TriggertransitionsContext _prevctx = _localctx;
		int _startState = 414;
		EnterRecursionRule(_localctx, 414, RULE_triggertransitions, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4323;
			triggertransition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggertransitionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_triggertransitions);
					State = 4325;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4326;
					triggertransition();
					}
					} 
				}
				State = 4331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TriggertransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionoldornewContext transitionoldornew() {
			return GetRuleContext<TransitionoldornewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrowortableContext transitionrowortable() {
			return GetRuleContext<TransitionrowortableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrelnameContext transitionrelname() {
			return GetRuleContext<TransitionrelnameContext>(0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransition(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionContext triggertransition() {
		TriggertransitionContext _localctx = new TriggertransitionContext(Context, State);
		EnterRule(_localctx, 416, RULE_triggertransition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4332;
			transitionoldornew();
			State = 4333;
			transitionrowortable();
			State = 4334;
			opt_as();
			State = 4335;
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionoldornewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionoldornew; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionoldornew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionoldornew(this);
		}
	}

	[RuleVersion(0)]
	public TransitionoldornewContext transitionoldornew() {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(Context, State);
		EnterRule(_localctx, 418, RULE_transitionoldornew);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4337;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrowortableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrowortable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrowortable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrowortable(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrowortableContext transitionrowortable() {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(Context, State);
		EnterRule(_localctx, 420, RULE_transitionrowortable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4339;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrelnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrelname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrelname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrelname(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrelnameContext transitionrelname() {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(Context, State);
		EnterRule(_localctx, 422, RULE_transitionrelname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4341;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforopteachContext triggerforopteach() {
			return GetRuleContext<TriggerforopteachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfortypeContext triggerfortype() {
			return GetRuleContext<TriggerfortypeContext>(0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforspec(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforspecContext triggerforspec() {
		TriggerforspecContext _localctx = new TriggerforspecContext(Context, State);
		EnterRule(_localctx, 424, RULE_triggerforspec);
		try {
			State = 4348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4343;
				Match(FOR);
				State = 4344;
				triggerforopteach();
				State = 4345;
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforopteachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforopteach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforopteach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforopteach(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforopteachContext triggerforopteach() {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(Context, State);
		EnterRule(_localctx, 426, RULE_triggerforopteach);
		try {
			State = 4352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4350;
				Match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfortypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfortype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfortype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfortype(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfortypeContext triggerfortype() {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(Context, State);
		EnterRule(_localctx, 428, RULE_triggerfortype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4354;
			_la = TokenStream.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerwhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerwhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerwhen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerwhen(this);
		}
	}

	[RuleVersion(0)]
	public TriggerwhenContext triggerwhen() {
		TriggerwhenContext _localctx = new TriggerwhenContext(Context, State);
		EnterRule(_localctx, 430, RULE_triggerwhen);
		try {
			State = 4362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4356;
				Match(WHEN);
				State = 4357;
				Match(OPEN_PAREN);
				State = 4358;
				a_expr(0);
				State = 4359;
				Match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_or_procedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_or_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_or_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_or_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Function_or_procedureContext function_or_procedure() {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(Context, State);
		EnterRule(_localctx, 432, RULE_function_or_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4364;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext triggerfuncarg() {
			return GetRuleContext<TriggerfuncargContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargsContext triggerfuncargs() {
			return GetRuleContext<TriggerfuncargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncargs(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargsContext triggerfuncargs() {
		return triggerfuncargs(0);
	}

	private TriggerfuncargsContext triggerfuncargs(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(Context, _parentState);
		TriggerfuncargsContext _prevctx = _localctx;
		int _startState = 434;
		EnterRecursionRule(_localctx, 434, RULE_triggerfuncargs, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				State = 4367;
				triggerfuncarg();
				}
				break;
			case 2:
				{
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerfuncargsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_triggerfuncargs);
					State = 4371;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 4372;
					Match(COMMA);
					State = 4373;
					triggerfuncarg();
					}
					} 
				}
				State = 4378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TriggerfuncargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncarg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncarg(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargContext triggerfuncarg() {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(Context, State);
		EnterRule(_localctx, 436, RULE_triggerfuncarg);
		try {
			State = 4383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4379;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4380;
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4381;
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4382;
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstrfromtableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstrfromtable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstrfromtable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstrfromtable(this);
		}
	}

	[RuleVersion(0)]
	public OptconstrfromtableContext optconstrfromtable() {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(Context, State);
		EnterRule(_localctx, 438, RULE_optconstrfromtable);
		try {
			State = 4388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4385;
				Match(FROM);
				State = 4386;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext constraintattributeElem() {
			return GetRuleContext<ConstraintattributeElemContext>(0);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributespec(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributespecContext constraintattributespec() {
		return constraintattributespec(0);
	}

	private ConstraintattributespecContext constraintattributespec(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(Context, _parentState);
		ConstraintattributespecContext _prevctx = _localctx;
		int _startState = 440;
		EnterRecursionRule(_localctx, 440, RULE_constraintattributespec, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstraintattributespecContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_constraintattributespec);
					State = 4391;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4392;
					constraintattributeElem();
					}
					} 
				}
				State = 4397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstraintattributeElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributeElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributeElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributeElem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributeElemContext constraintattributeElem() {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(Context, State);
		EnterRule(_localctx, 442, RULE_constraintattributeElem);
		try {
			State = 4409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4398;
				Match(NOT);
				State = 4399;
				Match(DEFERRABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4400;
				Match(DEFERRABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4401;
				Match(INITIALLY);
				State = 4402;
				Match(IMMEDIATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4403;
				Match(INITIALLY);
				State = 4404;
				Match(DEFERRED);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4405;
				Match(NOT);
				State = 4406;
				Match(VALID);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4407;
				Match(NO);
				State = 4408;
				Match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateeventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_listContext event_trigger_when_list() {
			return GetRuleContext<Event_trigger_when_listContext>(0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createeventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateeventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateeventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateeventtrigstmtContext createeventtrigstmt() {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(Context, State);
		EnterRule(_localctx, 444, RULE_createeventtrigstmt);
		try {
			State = 4437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4411;
				Match(CREATE);
				State = 4412;
				Match(EVENT);
				State = 4413;
				Match(TRIGGER);
				State = 4414;
				name();
				State = 4415;
				Match(ON);
				State = 4416;
				collabel();
				State = 4417;
				Match(EXECUTE);
				State = 4418;
				function_or_procedure();
				State = 4419;
				func_name();
				State = 4420;
				Match(OPEN_PAREN);
				State = 4421;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4423;
				Match(CREATE);
				State = 4424;
				Match(EVENT);
				State = 4425;
				Match(TRIGGER);
				State = 4426;
				name();
				State = 4427;
				Match(ON);
				State = 4428;
				collabel();
				State = 4429;
				Match(WHEN);
				State = 4430;
				event_trigger_when_list(0);
				State = 4431;
				Match(EXECUTE);
				State = 4432;
				function_or_procedure();
				State = 4433;
				func_name();
				State = 4434;
				Match(OPEN_PAREN);
				State = 4435;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext event_trigger_when_item() {
			return GetRuleContext<Event_trigger_when_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_listContext event_trigger_when_list() {
			return GetRuleContext<Event_trigger_when_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_listContext event_trigger_when_list() {
		return event_trigger_when_list(0);
	}

	private Event_trigger_when_listContext event_trigger_when_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(Context, _parentState);
		Event_trigger_when_listContext _prevctx = _localctx;
		int _startState = 446;
		EnterRecursionRule(_localctx, 446, RULE_event_trigger_when_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4440;
			event_trigger_when_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Event_trigger_when_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_event_trigger_when_list);
					State = 4442;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4443;
					Match(AND);
					State = 4444;
					event_trigger_when_item();
					}
					} 
				}
				State = 4449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Event_trigger_when_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_value_listContext event_trigger_value_list() {
			return GetRuleContext<Event_trigger_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_item(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_itemContext event_trigger_when_item() {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(Context, State);
		EnterRule(_localctx, 448, RULE_event_trigger_when_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4450;
			colid();
			State = 4451;
			Match(IN_P);
			State = 4452;
			Match(OPEN_PAREN);
			State = 4453;
			event_trigger_value_list(0);
			State = 4454;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_value_listContext event_trigger_value_list() {
			return GetRuleContext<Event_trigger_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_value_listContext event_trigger_value_list() {
		return event_trigger_value_list(0);
	}

	private Event_trigger_value_listContext event_trigger_value_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(Context, _parentState);
		Event_trigger_value_listContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_event_trigger_value_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4457;
			sconst();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4464;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Event_trigger_value_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_event_trigger_value_list);
					State = 4459;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4460;
					Match(COMMA);
					State = 4461;
					sconst();
					}
					} 
				}
				State = 4466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AltereventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altereventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltereventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltereventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltereventtrigstmtContext altereventtrigstmt() {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(Context, State);
		EnterRule(_localctx, 452, RULE_altereventtrigstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4467;
			Match(ALTER);
			State = 4468;
			Match(EVENT);
			State = 4469;
			Match(TRIGGER);
			State = 4470;
			name();
			State = 4471;
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(Context, State);
		EnterRule(_localctx, 454, RULE_enable_trigger);
		try {
			State = 4479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4473;
				Match(ENABLE_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4474;
				Match(ENABLE_P);
				State = 4475;
				Match(REPLICA);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4476;
				Match(ENABLE_P);
				State = 4477;
				Match(ALWAYS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4478;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateassertionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createassertionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateassertionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateassertionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateassertionstmtContext createassertionstmt() {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(Context, State);
		EnterRule(_localctx, 456, RULE_createassertionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4481;
			Match(CREATE);
			State = 4482;
			Match(ASSERTION);
			State = 4483;
			any_name();
			State = 4484;
			Match(CHECK);
			State = 4485;
			Match(OPEN_PAREN);
			State = 4486;
			a_expr(0);
			State = 4487;
			Match(CLOSE_PAREN);
			State = 4488;
			constraintattributespec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_definitionContext old_aggr_definition() {
			return GetRuleContext<Old_aggr_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttablefuncelementlistContext opttablefuncelementlist() {
			return GetRuleContext<OpttablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_enum_val_listContext opt_enum_val_list() {
			return GetRuleContext<Opt_enum_val_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinestmt(this);
		}
	}

	[RuleVersion(0)]
	public DefinestmtContext definestmt() {
		DefinestmtContext _localctx = new DefinestmtContext(Context, State);
		EnterRule(_localctx, 458, RULE_definestmt);
		try {
			State = 4596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4490;
				Match(CREATE);
				State = 4491;
				opt_or_replace();
				State = 4492;
				Match(AGGREGATE);
				State = 4493;
				func_name();
				State = 4494;
				aggr_args();
				State = 4495;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4497;
				Match(CREATE);
				State = 4498;
				opt_or_replace();
				State = 4499;
				Match(AGGREGATE);
				State = 4500;
				func_name();
				State = 4501;
				old_aggr_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4503;
				Match(CREATE);
				State = 4504;
				Match(OPERATOR);
				State = 4505;
				any_operator();
				State = 4506;
				definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4508;
				Match(CREATE);
				State = 4509;
				Match(TYPE_P);
				State = 4510;
				any_name();
				State = 4511;
				definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4513;
				Match(CREATE);
				State = 4514;
				Match(TYPE_P);
				State = 4515;
				any_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4516;
				Match(CREATE);
				State = 4517;
				Match(TYPE_P);
				State = 4518;
				any_name();
				State = 4519;
				Match(AS);
				State = 4520;
				Match(OPEN_PAREN);
				State = 4521;
				opttablefuncelementlist();
				State = 4522;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4524;
				Match(CREATE);
				State = 4525;
				Match(TYPE_P);
				State = 4526;
				any_name();
				State = 4527;
				Match(AS);
				State = 4528;
				Match(ENUM_P);
				State = 4529;
				Match(OPEN_PAREN);
				State = 4530;
				opt_enum_val_list();
				State = 4531;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4533;
				Match(CREATE);
				State = 4534;
				Match(TYPE_P);
				State = 4535;
				any_name();
				State = 4536;
				Match(AS);
				State = 4537;
				Match(RANGE);
				State = 4538;
				definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4540;
				Match(CREATE);
				State = 4541;
				Match(TEXT_P);
				State = 4542;
				Match(SEARCH);
				State = 4543;
				Match(PARSER);
				State = 4544;
				any_name();
				State = 4545;
				definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4547;
				Match(CREATE);
				State = 4548;
				Match(TEXT_P);
				State = 4549;
				Match(SEARCH);
				State = 4550;
				Match(DICTIONARY);
				State = 4551;
				any_name();
				State = 4552;
				definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4554;
				Match(CREATE);
				State = 4555;
				Match(TEXT_P);
				State = 4556;
				Match(SEARCH);
				State = 4557;
				Match(TEMPLATE);
				State = 4558;
				any_name();
				State = 4559;
				definition();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4561;
				Match(CREATE);
				State = 4562;
				Match(TEXT_P);
				State = 4563;
				Match(SEARCH);
				State = 4564;
				Match(CONFIGURATION);
				State = 4565;
				any_name();
				State = 4566;
				definition();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4568;
				Match(CREATE);
				State = 4569;
				Match(COLLATION);
				State = 4570;
				any_name();
				State = 4571;
				definition();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4573;
				Match(CREATE);
				State = 4574;
				Match(COLLATION);
				State = 4575;
				Match(IF_P);
				State = 4576;
				Match(NOT);
				State = 4577;
				Match(EXISTS);
				State = 4578;
				any_name();
				State = 4579;
				definition();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4581;
				Match(CREATE);
				State = 4582;
				Match(COLLATION);
				State = 4583;
				any_name();
				State = 4584;
				Match(FROM);
				State = 4585;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4587;
				Match(CREATE);
				State = 4588;
				Match(COLLATION);
				State = 4589;
				Match(IF_P);
				State = 4590;
				Match(NOT);
				State = 4591;
				Match(EXISTS);
				State = 4592;
				any_name();
				State = 4593;
				Match(FROM);
				State = 4594;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_listContext def_list() {
			return GetRuleContext<Def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 460, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4598;
			Match(OPEN_PAREN);
			State = 4599;
			def_list(0);
			State = 4600;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext def_elem() {
			return GetRuleContext<Def_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_listContext def_list() {
			return GetRuleContext<Def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_list(this);
		}
	}

	[RuleVersion(0)]
	public Def_listContext def_list() {
		return def_list(0);
	}

	private Def_listContext def_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Def_listContext _localctx = new Def_listContext(Context, _parentState);
		Def_listContext _prevctx = _localctx;
		int _startState = 462;
		EnterRecursionRule(_localctx, 462, RULE_def_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4603;
			def_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Def_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_def_list);
					State = 4605;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4606;
					Match(COMMA);
					State = 4607;
					def_elem();
					}
					} 
				}
				State = 4612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_elem(this);
		}
	}

	[RuleVersion(0)]
	public Def_elemContext def_elem() {
		Def_elemContext _localctx = new Def_elemContext(Context, State);
		EnterRule(_localctx, 464, RULE_def_elem);
		try {
			State = 4618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4613;
				collabel();
				State = 4614;
				Match(EQUAL);
				State = 4615;
				def_arg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4617;
				collabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_arg(this);
		}
	}

	[RuleVersion(0)]
	public Def_argContext def_arg() {
		Def_argContext _localctx = new Def_argContext(Context, State);
		EnterRule(_localctx, 466, RULE_def_arg);
		try {
			State = 4626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4620;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4621;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4622;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4623;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4624;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4625;
				Match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_listContext old_aggr_list() {
			return GetRuleContext<Old_aggr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_definition(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_definitionContext old_aggr_definition() {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(Context, State);
		EnterRule(_localctx, 468, RULE_old_aggr_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4628;
			Match(OPEN_PAREN);
			State = 4629;
			old_aggr_list(0);
			State = 4630;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext old_aggr_elem() {
			return GetRuleContext<Old_aggr_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_listContext old_aggr_list() {
			return GetRuleContext<Old_aggr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_list(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_listContext old_aggr_list() {
		return old_aggr_list(0);
	}

	private Old_aggr_listContext old_aggr_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Old_aggr_listContext _localctx = new Old_aggr_listContext(Context, _parentState);
		Old_aggr_listContext _prevctx = _localctx;
		int _startState = 470;
		EnterRecursionRule(_localctx, 470, RULE_old_aggr_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4633;
			old_aggr_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4640;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Old_aggr_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_old_aggr_list);
					State = 4635;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4636;
					Match(COMMA);
					State = 4637;
					old_aggr_elem();
					}
					} 
				}
				State = 4642;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Old_aggr_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_elem(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_elemContext old_aggr_elem() {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(Context, State);
		EnterRule(_localctx, 472, RULE_old_aggr_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4643;
			identifier();
			State = 4644;
			Match(EQUAL);
			State = 4645;
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_val_listContext enum_val_list() {
			return GetRuleContext<Enum_val_listContext>(0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_enum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_enum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_enum_val_listContext opt_enum_val_list() {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(Context, State);
		EnterRule(_localctx, 474, RULE_opt_enum_val_list);
		try {
			State = 4649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4647;
				enum_val_list(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_val_listContext enum_val_list() {
			return GetRuleContext<Enum_val_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Enum_val_listContext enum_val_list() {
		return enum_val_list(0);
	}

	private Enum_val_listContext enum_val_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Enum_val_listContext _localctx = new Enum_val_listContext(Context, _parentState);
		Enum_val_listContext _prevctx = _localctx;
		int _startState = 476;
		EnterRecursionRule(_localctx, 476, RULE_enum_val_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4652;
			sconst();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4659;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Enum_val_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enum_val_list);
					State = 4654;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4655;
					Match(COMMA);
					State = 4656;
					sconst();
					}
					} 
				}
				State = 4661;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AlterenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_not_existsContext opt_if_not_exists() {
			return GetRuleContext<Opt_if_not_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterenumstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterenumstmtContext alterenumstmt() {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(Context, State);
		EnterRule(_localctx, 478, RULE_alterenumstmt);
		try {
			State = 4699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4662;
				Match(ALTER);
				State = 4663;
				Match(TYPE_P);
				State = 4664;
				any_name();
				State = 4665;
				Match(ADD_P);
				State = 4666;
				Match(VALUE_P);
				State = 4667;
				opt_if_not_exists();
				State = 4668;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4670;
				Match(ALTER);
				State = 4671;
				Match(TYPE_P);
				State = 4672;
				any_name();
				State = 4673;
				Match(ADD_P);
				State = 4674;
				Match(VALUE_P);
				State = 4675;
				opt_if_not_exists();
				State = 4676;
				sconst();
				State = 4677;
				Match(BEFORE);
				State = 4678;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4680;
				Match(ALTER);
				State = 4681;
				Match(TYPE_P);
				State = 4682;
				any_name();
				State = 4683;
				Match(ADD_P);
				State = 4684;
				Match(VALUE_P);
				State = 4685;
				opt_if_not_exists();
				State = 4686;
				sconst();
				State = 4687;
				Match(AFTER);
				State = 4688;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4690;
				Match(ALTER);
				State = 4691;
				Match(TYPE_P);
				State = 4692;
				any_name();
				State = 4693;
				Match(RENAME);
				State = 4694;
				Match(VALUE_P);
				State = 4695;
				sconst();
				State = 4696;
				Match(TO);
				State = 4697;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_if_not_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_if_not_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_if_not_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_if_not_exists(this);
		}
	}

	[RuleVersion(0)]
	public Opt_if_not_existsContext opt_if_not_exists() {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(Context, State);
		EnterRule(_localctx, 480, RULE_opt_if_not_exists);
		try {
			State = 4705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4701;
				Match(IF_P);
				State = 4702;
				Match(NOT);
				State = 4703;
				Match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_defaultContext opt_default() {
			return GetRuleContext<Opt_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_opfamilyContext opt_opfamily() {
			return GetRuleContext<Opt_opfamilyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopclassstmtContext createopclassstmt() {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(Context, State);
		EnterRule(_localctx, 482, RULE_createopclassstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4707;
			Match(CREATE);
			State = 4708;
			Match(OPERATOR);
			State = 4709;
			Match(CLASS);
			State = 4710;
			any_name();
			State = 4711;
			opt_default();
			State = 4712;
			Match(FOR);
			State = 4713;
			Match(TYPE_P);
			State = 4714;
			typename();
			State = 4715;
			Match(USING);
			State = 4716;
			name();
			State = 4717;
			opt_opfamily();
			State = 4718;
			Match(AS);
			State = 4719;
			opclass_item_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext opclass_item() {
			return GetRuleContext<Opclass_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_item_listContext opclass_item_list() {
		return opclass_item_list(0);
	}

	private Opclass_item_listContext opclass_item_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opclass_item_listContext _localctx = new Opclass_item_listContext(Context, _parentState);
		Opclass_item_listContext _prevctx = _localctx;
		int _startState = 484;
		EnterRecursionRule(_localctx, 484, RULE_opclass_item_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4722;
			opclass_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4729;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_item_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_opclass_item_list);
					State = 4724;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4725;
					Match(COMMA);
					State = 4726;
					opclass_item();
					}
					} 
				}
				State = 4731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opclass_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_purposeContext opclass_purpose() {
			return GetRuleContext<Opclass_purposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_recheckContext opt_recheck() {
			return GetRuleContext<Opt_recheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_itemContext opclass_item() {
		Opclass_itemContext _localctx = new Opclass_itemContext(Context, State);
		EnterRule(_localctx, 486, RULE_opclass_item);
		try {
			State = 4757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4732;
				Match(OPERATOR);
				State = 4733;
				iconst();
				State = 4734;
				any_operator();
				State = 4735;
				opclass_purpose();
				State = 4736;
				opt_recheck();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4738;
				Match(OPERATOR);
				State = 4739;
				iconst();
				State = 4740;
				operator_with_argtypes();
				State = 4741;
				opclass_purpose();
				State = 4742;
				opt_recheck();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4744;
				Match(FUNCTION);
				State = 4745;
				iconst();
				State = 4746;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4748;
				Match(FUNCTION);
				State = 4749;
				iconst();
				State = 4750;
				Match(OPEN_PAREN);
				State = 4751;
				type_list(0);
				State = 4752;
				Match(CLOSE_PAREN);
				State = 4753;
				function_with_argtypes();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4755;
				Match(STORAGE);
				State = 4756;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_default(this);
		}
	}

	[RuleVersion(0)]
	public Opt_defaultContext opt_default() {
		Opt_defaultContext _localctx = new Opt_defaultContext(Context, State);
		EnterRule(_localctx, 488, RULE_opt_default);
		try {
			State = 4761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4759;
				Match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_opfamilyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_opfamily; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_opfamily(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_opfamily(this);
		}
	}

	[RuleVersion(0)]
	public Opt_opfamilyContext opt_opfamily() {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(Context, State);
		EnterRule(_localctx, 490, RULE_opt_opfamily);
		try {
			State = 4766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FAMILY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4763;
				Match(FAMILY);
				State = 4764;
				any_name();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_purposeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_purpose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_purpose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_purpose(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_purposeContext opclass_purpose() {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(Context, State);
		EnterRule(_localctx, 492, RULE_opclass_purpose);
		try {
			State = 4775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4768;
				Match(FOR);
				State = 4769;
				Match(SEARCH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4770;
				Match(FOR);
				State = 4771;
				Match(ORDER);
				State = 4772;
				Match(BY);
				State = 4773;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_recheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_recheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_recheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_recheck(this);
		}
	}

	[RuleVersion(0)]
	public Opt_recheckContext opt_recheck() {
		Opt_recheckContext _localctx = new Opt_recheckContext(Context, State);
		EnterRule(_localctx, 494, RULE_opt_recheck);
		try {
			State = 4779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4777;
				Match(RECHECK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopfamilystmtContext createopfamilystmt() {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(Context, State);
		EnterRule(_localctx, 496, RULE_createopfamilystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4781;
			Match(CREATE);
			State = 4782;
			Match(OPERATOR);
			State = 4783;
			Match(FAMILY);
			State = 4784;
			any_name();
			State = 4785;
			Match(USING);
			State = 4786;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteropfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_drop_listContext opclass_drop_list() {
			return GetRuleContext<Opclass_drop_listContext>(0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteropfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteropfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteropfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteropfamilystmtContext alteropfamilystmt() {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(Context, State);
		EnterRule(_localctx, 498, RULE_alteropfamilystmt);
		try {
			State = 4806;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4788;
				Match(ALTER);
				State = 4789;
				Match(OPERATOR);
				State = 4790;
				Match(FAMILY);
				State = 4791;
				any_name();
				State = 4792;
				Match(USING);
				State = 4793;
				name();
				State = 4794;
				Match(ADD_P);
				State = 4795;
				opclass_item_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4797;
				Match(ALTER);
				State = 4798;
				Match(OPERATOR);
				State = 4799;
				Match(FAMILY);
				State = 4800;
				any_name();
				State = 4801;
				Match(USING);
				State = 4802;
				name();
				State = 4803;
				Match(DROP);
				State = 4804;
				opclass_drop_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_drop_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext opclass_drop() {
			return GetRuleContext<Opclass_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_drop_listContext opclass_drop_list() {
			return GetRuleContext<Opclass_drop_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_drop_listContext opclass_drop_list() {
		return opclass_drop_list(0);
	}

	private Opclass_drop_listContext opclass_drop_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(Context, _parentState);
		Opclass_drop_listContext _prevctx = _localctx;
		int _startState = 500;
		EnterRecursionRule(_localctx, 500, RULE_opclass_drop_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4809;
			opclass_drop();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4816;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_drop_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_opclass_drop_list);
					State = 4811;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 4812;
					Match(COMMA);
					State = 4813;
					opclass_drop();
					}
					} 
				}
				State = 4818;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opclass_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_dropContext opclass_drop() {
		Opclass_dropContext _localctx = new Opclass_dropContext(Context, State);
		EnterRule(_localctx, 502, RULE_opclass_drop);
		try {
			State = 4831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPERATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4819;
				Match(OPERATOR);
				State = 4820;
				iconst();
				State = 4821;
				Match(OPEN_PAREN);
				State = 4822;
				type_list(0);
				State = 4823;
				Match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4825;
				Match(FUNCTION);
				State = 4826;
				iconst();
				State = 4827;
				Match(OPEN_PAREN);
				State = 4828;
				type_list(0);
				State = 4829;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopclassstmtContext dropopclassstmt() {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(Context, State);
		EnterRule(_localctx, 504, RULE_dropopclassstmt);
		try {
			State = 4851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4833;
				Match(DROP);
				State = 4834;
				Match(OPERATOR);
				State = 4835;
				Match(CLASS);
				State = 4836;
				any_name();
				State = 4837;
				Match(USING);
				State = 4838;
				name();
				State = 4839;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4841;
				Match(DROP);
				State = 4842;
				Match(OPERATOR);
				State = 4843;
				Match(CLASS);
				State = 4844;
				Match(IF_P);
				State = 4845;
				Match(EXISTS);
				State = 4846;
				any_name();
				State = 4847;
				Match(USING);
				State = 4848;
				name();
				State = 4849;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopfamilystmtContext dropopfamilystmt() {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(Context, State);
		EnterRule(_localctx, 506, RULE_dropopfamilystmt);
		try {
			State = 4871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4853;
				Match(DROP);
				State = 4854;
				Match(OPERATOR);
				State = 4855;
				Match(FAMILY);
				State = 4856;
				any_name();
				State = 4857;
				Match(USING);
				State = 4858;
				name();
				State = 4859;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4861;
				Match(DROP);
				State = 4862;
				Match(OPERATOR);
				State = 4863;
				Match(FAMILY);
				State = 4864;
				Match(IF_P);
				State = 4865;
				Match(EXISTS);
				State = 4866;
				any_name();
				State = 4867;
				Match(USING);
				State = 4868;
				name();
				State = 4869;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropownedstmtContext dropownedstmt() {
		DropownedstmtContext _localctx = new DropownedstmtContext(Context, State);
		EnterRule(_localctx, 508, RULE_dropownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4873;
			Match(DROP);
			State = 4874;
			Match(OWNED);
			State = 4875;
			Match(BY);
			State = 4876;
			role_list(0);
			State = 4877;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReassignownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reassignownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReassignownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReassignownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReassignownedstmtContext reassignownedstmt() {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(Context, State);
		EnterRule(_localctx, 510, RULE_reassignownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4879;
			Match(REASSIGN);
			State = 4880;
			Match(OWNED);
			State = 4881;
			Match(BY);
			State = 4882;
			role_list(0);
			State = 4883;
			Match(TO);
			State = 4884;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropstmtContext dropstmt() {
		DropstmtContext _localctx = new DropstmtContext(Context, State);
		EnterRule(_localctx, 512, RULE_dropstmt);
		try {
			State = 4964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4886;
				Match(DROP);
				State = 4887;
				object_type_any_name();
				State = 4888;
				Match(IF_P);
				State = 4889;
				Match(EXISTS);
				State = 4890;
				any_name_list(0);
				State = 4891;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4893;
				Match(DROP);
				State = 4894;
				object_type_any_name();
				State = 4895;
				any_name_list(0);
				State = 4896;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4898;
				Match(DROP);
				State = 4899;
				drop_type_name();
				State = 4900;
				Match(IF_P);
				State = 4901;
				Match(EXISTS);
				State = 4902;
				name_list(0);
				State = 4903;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4905;
				Match(DROP);
				State = 4906;
				drop_type_name();
				State = 4907;
				name_list(0);
				State = 4908;
				opt_drop_behavior();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4910;
				Match(DROP);
				State = 4911;
				object_type_name_on_any_name();
				State = 4912;
				name();
				State = 4913;
				Match(ON);
				State = 4914;
				any_name();
				State = 4915;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4917;
				Match(DROP);
				State = 4918;
				object_type_name_on_any_name();
				State = 4919;
				Match(IF_P);
				State = 4920;
				Match(EXISTS);
				State = 4921;
				name();
				State = 4922;
				Match(ON);
				State = 4923;
				any_name();
				State = 4924;
				opt_drop_behavior();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4926;
				Match(DROP);
				State = 4927;
				Match(TYPE_P);
				State = 4928;
				type_name_list(0);
				State = 4929;
				opt_drop_behavior();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4931;
				Match(DROP);
				State = 4932;
				Match(TYPE_P);
				State = 4933;
				Match(IF_P);
				State = 4934;
				Match(EXISTS);
				State = 4935;
				type_name_list(0);
				State = 4936;
				opt_drop_behavior();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4938;
				Match(DROP);
				State = 4939;
				Match(DOMAIN_P);
				State = 4940;
				type_name_list(0);
				State = 4941;
				opt_drop_behavior();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4943;
				Match(DROP);
				State = 4944;
				Match(DOMAIN_P);
				State = 4945;
				Match(IF_P);
				State = 4946;
				Match(EXISTS);
				State = 4947;
				type_name_list(0);
				State = 4948;
				opt_drop_behavior();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4950;
				Match(DROP);
				State = 4951;
				Match(INDEX);
				State = 4952;
				Match(CONCURRENTLY);
				State = 4953;
				any_name_list(0);
				State = 4954;
				opt_drop_behavior();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4956;
				Match(DROP);
				State = 4957;
				Match(INDEX);
				State = 4958;
				Match(CONCURRENTLY);
				State = 4959;
				Match(IF_P);
				State = 4960;
				Match(EXISTS);
				State = 4961;
				any_name_list(0);
				State = 4962;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_any_nameContext object_type_any_name() {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(Context, State);
		EnterRule(_localctx, 514, RULE_object_type_any_name);
		try {
			State = 4989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4966;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4967;
				Match(SEQUENCE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4968;
				Match(VIEW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4969;
				Match(MATERIALIZED);
				State = 4970;
				Match(VIEW);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4971;
				Match(INDEX);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4972;
				Match(FOREIGN);
				State = 4973;
				Match(TABLE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4974;
				Match(COLLATION);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4975;
				Match(CONVERSION_P);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4976;
				Match(STATISTICS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4977;
				Match(TEXT_P);
				State = 4978;
				Match(SEARCH);
				State = 4979;
				Match(PARSER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4980;
				Match(TEXT_P);
				State = 4981;
				Match(SEARCH);
				State = 4982;
				Match(DICTIONARY);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4983;
				Match(TEXT_P);
				State = 4984;
				Match(SEARCH);
				State = 4985;
				Match(TEMPLATE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4986;
				Match(TEXT_P);
				State = 4987;
				Match(SEARCH);
				State = 4988;
				Match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_nameContext object_type_name() {
		Object_type_nameContext _localctx = new Object_type_nameContext(Context, State);
		EnterRule(_localctx, 516, RULE_object_type_name);
		try {
			State = 4996;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4991;
				drop_type_name();
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4992;
				Match(DATABASE);
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4993;
				Match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4994;
				Match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4995;
				Match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Drop_type_nameContext drop_type_name() {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(Context, State);
		EnterRule(_localctx, 518, RULE_drop_type_name);
		try {
			State = 5012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4998;
				Match(ACCESS);
				State = 4999;
				Match(METHOD);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5000;
				Match(EVENT);
				State = 5001;
				Match(TRIGGER);
				}
				break;
			case EXTENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5002;
				Match(EXTENSION);
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5003;
				Match(FOREIGN);
				State = 5004;
				Match(DATA_P);
				State = 5005;
				Match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5006;
				opt_procedural();
				State = 5007;
				Match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5009;
				Match(PUBLICATION);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5010;
				Match(SCHEMA);
				}
				break;
			case SERVER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5011;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_name_on_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name_on_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name_on_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name_on_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(Context, State);
		EnterRule(_localctx, 520, RULE_object_type_name_on_any_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5014;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Any_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Any_name_listContext any_name_list() {
		return any_name_list(0);
	}

	private Any_name_listContext any_name_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_name_listContext _localctx = new Any_name_listContext(Context, _parentState);
		Any_name_listContext _prevctx = _localctx;
		int _startState = 522;
		EnterRecursionRule(_localctx, 522, RULE_any_name_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5017;
			any_name();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5024;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Any_name_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_any_name_list);
					State = 5019;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5020;
					Match(COMMA);
					State = 5021;
					any_name();
					}
					} 
				}
				State = 5026;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 524, RULE_any_name);
		try {
			State = 5031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5027;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5028;
				colid();
				State = 5029;
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name() {
			return GetRuleContext<Attr_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttrs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttrs(this);
		}
	}

	[RuleVersion(0)]
	public AttrsContext attrs() {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttrsContext _localctx = new AttrsContext(Context, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 526;
		EnterRecursionRule(_localctx, 526, RULE_attrs, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5034;
			Match(DOT);
			State = 5035;
			attr_name();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5042;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attrs);
					State = 5037;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5038;
					Match(DOT);
					State = 5039;
					attr_name();
					}
					} 
				}
				State = 5044;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		return type_name_list(0);
	}

	private Type_name_listContext type_name_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_name_listContext _localctx = new Type_name_listContext(Context, _parentState);
		Type_name_listContext _prevctx = _localctx;
		int _startState = 528;
		EnterRecursionRule(_localctx, 528, RULE_type_name_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5046;
			typename();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5053;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_name_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type_name_list);
					State = 5048;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5049;
					Match(COMMA);
					State = 5050;
					typename();
					}
					} 
				}
				State = 5055;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TruncatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_restart_seqsContext opt_restart_seqs() {
			return GetRuleContext<Opt_restart_seqsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTruncatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTruncatestmt(this);
		}
	}

	[RuleVersion(0)]
	public TruncatestmtContext truncatestmt() {
		TruncatestmtContext _localctx = new TruncatestmtContext(Context, State);
		EnterRule(_localctx, 530, RULE_truncatestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5056;
			Match(TRUNCATE);
			State = 5057;
			opt_table();
			State = 5058;
			relation_expr_list(0);
			State = 5059;
			opt_restart_seqs();
			State = 5060;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_restart_seqsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_restart_seqs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_restart_seqs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_restart_seqs(this);
		}
	}

	[RuleVersion(0)]
	public Opt_restart_seqsContext opt_restart_seqs() {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(Context, State);
		EnterRule(_localctx, 532, RULE_opt_restart_seqs);
		try {
			State = 5067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5062;
				Match(CONTINUE_P);
				State = 5063;
				Match(IDENTITY_P);
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5064;
				Match(RESTART);
				State = 5065;
				Match(IDENTITY_P);
				}
				break;
			case SEMI:
			case INTO:
			case CASCADE:
			case RESTRICT:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comment_textContext comment_text() {
			return GetRuleContext<Comment_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommentstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommentstmt(this);
		}
	}

	[RuleVersion(0)]
	public CommentstmtContext commentstmt() {
		CommentstmtContext _localctx = new CommentstmtContext(Context, State);
		EnterRule(_localctx, 534, RULE_commentstmt);
		try {
			State = 5216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5069;
				Match(COMMENT);
				State = 5070;
				Match(ON);
				State = 5071;
				object_type_any_name();
				State = 5072;
				any_name();
				State = 5073;
				Match(IS);
				State = 5074;
				comment_text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5076;
				Match(COMMENT);
				State = 5077;
				Match(ON);
				State = 5078;
				Match(COLUMN);
				State = 5079;
				any_name();
				State = 5080;
				Match(IS);
				State = 5081;
				comment_text();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5083;
				Match(COMMENT);
				State = 5084;
				Match(ON);
				State = 5085;
				object_type_name();
				State = 5086;
				name();
				State = 5087;
				Match(IS);
				State = 5088;
				comment_text();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5090;
				Match(COMMENT);
				State = 5091;
				Match(ON);
				State = 5092;
				Match(TYPE_P);
				State = 5093;
				typename();
				State = 5094;
				Match(IS);
				State = 5095;
				comment_text();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5097;
				Match(COMMENT);
				State = 5098;
				Match(ON);
				State = 5099;
				Match(DOMAIN_P);
				State = 5100;
				typename();
				State = 5101;
				Match(IS);
				State = 5102;
				comment_text();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5104;
				Match(COMMENT);
				State = 5105;
				Match(ON);
				State = 5106;
				Match(AGGREGATE);
				State = 5107;
				aggregate_with_argtypes();
				State = 5108;
				Match(IS);
				State = 5109;
				comment_text();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5111;
				Match(COMMENT);
				State = 5112;
				Match(ON);
				State = 5113;
				Match(FUNCTION);
				State = 5114;
				function_with_argtypes();
				State = 5115;
				Match(IS);
				State = 5116;
				comment_text();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5118;
				Match(COMMENT);
				State = 5119;
				Match(ON);
				State = 5120;
				Match(OPERATOR);
				State = 5121;
				operator_with_argtypes();
				State = 5122;
				Match(IS);
				State = 5123;
				comment_text();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5125;
				Match(COMMENT);
				State = 5126;
				Match(ON);
				State = 5127;
				Match(CONSTRAINT);
				State = 5128;
				name();
				State = 5129;
				Match(ON);
				State = 5130;
				any_name();
				State = 5131;
				Match(IS);
				State = 5132;
				comment_text();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5134;
				Match(COMMENT);
				State = 5135;
				Match(ON);
				State = 5136;
				Match(CONSTRAINT);
				State = 5137;
				name();
				State = 5138;
				Match(ON);
				State = 5139;
				Match(DOMAIN_P);
				State = 5140;
				any_name();
				State = 5141;
				Match(IS);
				State = 5142;
				comment_text();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5144;
				Match(COMMENT);
				State = 5145;
				Match(ON);
				State = 5146;
				object_type_name_on_any_name();
				State = 5147;
				name();
				State = 5148;
				Match(ON);
				State = 5149;
				any_name();
				State = 5150;
				Match(IS);
				State = 5151;
				comment_text();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5153;
				Match(COMMENT);
				State = 5154;
				Match(ON);
				State = 5155;
				Match(PROCEDURE);
				State = 5156;
				function_with_argtypes();
				State = 5157;
				Match(IS);
				State = 5158;
				comment_text();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5160;
				Match(COMMENT);
				State = 5161;
				Match(ON);
				State = 5162;
				Match(ROUTINE);
				State = 5163;
				function_with_argtypes();
				State = 5164;
				Match(IS);
				State = 5165;
				comment_text();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5167;
				Match(COMMENT);
				State = 5168;
				Match(ON);
				State = 5169;
				Match(TRANSFORM);
				State = 5170;
				Match(FOR);
				State = 5171;
				typename();
				State = 5172;
				Match(LANGUAGE);
				State = 5173;
				name();
				State = 5174;
				Match(IS);
				State = 5175;
				comment_text();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5177;
				Match(COMMENT);
				State = 5178;
				Match(ON);
				State = 5179;
				Match(OPERATOR);
				State = 5180;
				Match(CLASS);
				State = 5181;
				any_name();
				State = 5182;
				Match(USING);
				State = 5183;
				name();
				State = 5184;
				Match(IS);
				State = 5185;
				comment_text();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5187;
				Match(COMMENT);
				State = 5188;
				Match(ON);
				State = 5189;
				Match(OPERATOR);
				State = 5190;
				Match(FAMILY);
				State = 5191;
				any_name();
				State = 5192;
				Match(USING);
				State = 5193;
				name();
				State = 5194;
				Match(IS);
				State = 5195;
				comment_text();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5197;
				Match(COMMENT);
				State = 5198;
				Match(ON);
				State = 5199;
				Match(LARGE_P);
				State = 5200;
				Match(OBJECT_P);
				State = 5201;
				numericonly();
				State = 5202;
				Match(IS);
				State = 5203;
				comment_text();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5205;
				Match(COMMENT);
				State = 5206;
				Match(ON);
				State = 5207;
				Match(CAST);
				State = 5208;
				Match(OPEN_PAREN);
				State = 5209;
				typename();
				State = 5210;
				Match(AS);
				State = 5211;
				typename();
				State = 5212;
				Match(CLOSE_PAREN);
				State = 5213;
				Match(IS);
				State = 5214;
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComment_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComment_text(this);
		}
	}

	[RuleVersion(0)]
	public Comment_textContext comment_text() {
		Comment_textContext _localctx = new Comment_textContext(Context, State);
		EnterRule(_localctx, 536, RULE_comment_text);
		try {
			State = 5220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5218;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5219;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeclabelstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_providerContext opt_provider() {
			return GetRuleContext<Opt_providerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Security_labelContext security_label() {
			return GetRuleContext<Security_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seclabelstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeclabelstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeclabelstmt(this);
		}
	}

	[RuleVersion(0)]
	public SeclabelstmtContext seclabelstmt() {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(Context, State);
		EnterRule(_localctx, 538, RULE_seclabelstmt);
		try {
			State = 5313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5222;
				Match(SECURITY);
				State = 5223;
				Match(LABEL);
				State = 5224;
				opt_provider();
				State = 5225;
				Match(ON);
				State = 5226;
				object_type_any_name();
				State = 5227;
				any_name();
				State = 5228;
				Match(IS);
				State = 5229;
				security_label();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5231;
				Match(SECURITY);
				State = 5232;
				Match(LABEL);
				State = 5233;
				opt_provider();
				State = 5234;
				Match(ON);
				State = 5235;
				Match(COLUMN);
				State = 5236;
				any_name();
				State = 5237;
				Match(IS);
				State = 5238;
				security_label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5240;
				Match(SECURITY);
				State = 5241;
				Match(LABEL);
				State = 5242;
				opt_provider();
				State = 5243;
				Match(ON);
				State = 5244;
				object_type_name();
				State = 5245;
				name();
				State = 5246;
				Match(IS);
				State = 5247;
				security_label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5249;
				Match(SECURITY);
				State = 5250;
				Match(LABEL);
				State = 5251;
				opt_provider();
				State = 5252;
				Match(ON);
				State = 5253;
				Match(TYPE_P);
				State = 5254;
				typename();
				State = 5255;
				Match(IS);
				State = 5256;
				security_label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5258;
				Match(SECURITY);
				State = 5259;
				Match(LABEL);
				State = 5260;
				opt_provider();
				State = 5261;
				Match(ON);
				State = 5262;
				Match(DOMAIN_P);
				State = 5263;
				typename();
				State = 5264;
				Match(IS);
				State = 5265;
				security_label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5267;
				Match(SECURITY);
				State = 5268;
				Match(LABEL);
				State = 5269;
				opt_provider();
				State = 5270;
				Match(ON);
				State = 5271;
				Match(AGGREGATE);
				State = 5272;
				aggregate_with_argtypes();
				State = 5273;
				Match(IS);
				State = 5274;
				security_label();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5276;
				Match(SECURITY);
				State = 5277;
				Match(LABEL);
				State = 5278;
				opt_provider();
				State = 5279;
				Match(ON);
				State = 5280;
				Match(FUNCTION);
				State = 5281;
				function_with_argtypes();
				State = 5282;
				Match(IS);
				State = 5283;
				security_label();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5285;
				Match(SECURITY);
				State = 5286;
				Match(LABEL);
				State = 5287;
				opt_provider();
				State = 5288;
				Match(ON);
				State = 5289;
				Match(LARGE_P);
				State = 5290;
				Match(OBJECT_P);
				State = 5291;
				numericonly();
				State = 5292;
				Match(IS);
				State = 5293;
				security_label();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5295;
				Match(SECURITY);
				State = 5296;
				Match(LABEL);
				State = 5297;
				opt_provider();
				State = 5298;
				Match(ON);
				State = 5299;
				Match(PROCEDURE);
				State = 5300;
				function_with_argtypes();
				State = 5301;
				Match(IS);
				State = 5302;
				security_label();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5304;
				Match(SECURITY);
				State = 5305;
				Match(LABEL);
				State = 5306;
				opt_provider();
				State = 5307;
				Match(ON);
				State = 5308;
				Match(ROUTINE);
				State = 5309;
				function_with_argtypes();
				State = 5310;
				Match(IS);
				State = 5311;
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_providerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_provider; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_provider(this);
		}
	}

	[RuleVersion(0)]
	public Opt_providerContext opt_provider() {
		Opt_providerContext _localctx = new Opt_providerContext(Context, State);
		EnterRule(_localctx, 540, RULE_opt_provider);
		try {
			State = 5318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5315;
				Match(FOR);
				State = 5316;
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSecurity_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSecurity_label(this);
		}
	}

	[RuleVersion(0)]
	public Security_labelContext security_label() {
		Security_labelContext _localctx = new Security_labelContext(Context, State);
		EnterRule(_localctx, 542, RULE_security_label);
		try {
			State = 5322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5320;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5321;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FetchstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_argsContext fetch_args() {
			return GetRuleContext<Fetch_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetchstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetchstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetchstmt(this);
		}
	}

	[RuleVersion(0)]
	public FetchstmtContext fetchstmt() {
		FetchstmtContext _localctx = new FetchstmtContext(Context, State);
		EnterRule(_localctx, 544, RULE_fetchstmt);
		try {
			State = 5328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5324;
				Match(FETCH);
				State = 5325;
				fetch_args();
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5326;
				Match(MOVE);
				State = 5327;
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_from_inContext opt_from_in() {
			return GetRuleContext<Opt_from_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetch_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetch_args(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_argsContext fetch_args() {
		Fetch_argsContext _localctx = new Fetch_argsContext(Context, State);
		EnterRule(_localctx, 546, RULE_fetch_args);
		try {
			State = 5396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5330;
				cursor_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5331;
				from_in();
				State = 5332;
				cursor_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5334;
				Match(NEXT);
				State = 5335;
				opt_from_in();
				State = 5336;
				cursor_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5338;
				Match(PRIOR);
				State = 5339;
				opt_from_in();
				State = 5340;
				cursor_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5342;
				Match(FIRST_P);
				State = 5343;
				opt_from_in();
				State = 5344;
				cursor_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5346;
				Match(LAST_P);
				State = 5347;
				opt_from_in();
				State = 5348;
				cursor_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5350;
				Match(ABSOLUTE_P);
				State = 5351;
				signediconst();
				State = 5352;
				opt_from_in();
				State = 5353;
				cursor_name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5355;
				Match(RELATIVE_P);
				State = 5356;
				signediconst();
				State = 5357;
				opt_from_in();
				State = 5358;
				cursor_name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5360;
				signediconst();
				State = 5361;
				opt_from_in();
				State = 5362;
				cursor_name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5364;
				Match(ALL);
				State = 5365;
				opt_from_in();
				State = 5366;
				cursor_name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5368;
				Match(FORWARD);
				State = 5369;
				opt_from_in();
				State = 5370;
				cursor_name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5372;
				Match(FORWARD);
				State = 5373;
				signediconst();
				State = 5374;
				opt_from_in();
				State = 5375;
				cursor_name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5377;
				Match(FORWARD);
				State = 5378;
				Match(ALL);
				State = 5379;
				opt_from_in();
				State = 5380;
				cursor_name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5382;
				Match(BACKWARD);
				State = 5383;
				opt_from_in();
				State = 5384;
				cursor_name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5386;
				Match(BACKWARD);
				State = 5387;
				signediconst();
				State = 5388;
				opt_from_in();
				State = 5389;
				cursor_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5391;
				Match(BACKWARD);
				State = 5392;
				Match(ALL);
				State = 5393;
				opt_from_in();
				State = 5394;
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_in(this);
		}
	}

	[RuleVersion(0)]
	public From_inContext from_in() {
		From_inContext _localctx = new From_inContext(Context, State);
		EnterRule(_localctx, 548, RULE_from_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5398;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_from_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_from_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_from_in(this);
		}
	}

	[RuleVersion(0)]
	public Opt_from_inContext opt_from_in() {
		Opt_from_inContext _localctx = new Opt_from_inContext(Context, State);
		EnterRule(_localctx, 550, RULE_opt_from_in);
		try {
			State = 5402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5400;
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return GetRuleContext<Opt_grant_grant_optionContext>(0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantstmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantstmtContext grantstmt() {
		GrantstmtContext _localctx = new GrantstmtContext(Context, State);
		EnterRule(_localctx, 552, RULE_grantstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5404;
			Match(GRANT);
			State = 5405;
			privileges();
			State = 5406;
			Match(ON);
			State = 5407;
			privilege_target();
			State = 5408;
			Match(TO);
			State = 5409;
			grantee_list(0);
			State = 5410;
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokestmtContext revokestmt() {
		RevokestmtContext _localctx = new RevokestmtContext(Context, State);
		EnterRule(_localctx, 554, RULE_revokestmt);
		try {
			State = 5431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5412;
				Match(REVOKE);
				State = 5413;
				privileges();
				State = 5414;
				Match(ON);
				State = 5415;
				privilege_target();
				State = 5416;
				Match(FROM);
				State = 5417;
				grantee_list(0);
				State = 5418;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5420;
				Match(REVOKE);
				State = 5421;
				Match(GRANT);
				State = 5422;
				Match(OPTION);
				State = 5423;
				Match(FOR);
				State = 5424;
				privileges();
				State = 5425;
				Match(ON);
				State = 5426;
				privilege_target();
				State = 5427;
				Match(FROM);
				State = 5428;
				grantee_list(0);
				State = 5429;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privileges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivileges(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesContext privileges() {
		PrivilegesContext _localctx = new PrivilegesContext(Context, State);
		EnterRule(_localctx, 556, RULE_privileges);
		try {
			State = 5448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5433;
				privilege_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5434;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5435;
				Match(ALL);
				State = 5436;
				Match(PRIVILEGES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5437;
				Match(ALL);
				State = 5438;
				Match(OPEN_PAREN);
				State = 5439;
				columnlist(0);
				State = 5440;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5442;
				Match(ALL);
				State = 5443;
				Match(PRIVILEGES);
				State = 5444;
				Match(OPEN_PAREN);
				State = 5445;
				columnlist(0);
				State = 5446;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Privilege_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_list(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_listContext privilege_list() {
		return privilege_list(0);
	}

	private Privilege_listContext privilege_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Privilege_listContext _localctx = new Privilege_listContext(Context, _parentState);
		Privilege_listContext _prevctx = _localctx;
		int _startState = 558;
		EnterRecursionRule(_localctx, 558, RULE_privilege_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5451;
			privilege();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5458;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Privilege_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_privilege_list);
					State = 5453;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5454;
					Match(COMMA);
					State = 5455;
					privilege();
					}
					} 
				}
				State = 5460;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 560, RULE_privilege);
		try {
			State = 5470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5461;
				Match(SELECT);
				State = 5462;
				opt_column_list();
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5463;
				Match(REFERENCES);
				State = 5464;
				opt_column_list();
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5465;
				Match(CREATE);
				State = 5466;
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5467;
				colid();
				State = 5468;
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numericonly_listContext numericonly_list() {
			return GetRuleContext<Numericonly_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_targetContext privilege_target() {
		Privilege_targetContext _localctx = new Privilege_targetContext(Context, State);
		EnterRule(_localctx, 562, RULE_privilege_target);
		try {
			State = 5530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5472;
				qualified_name_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5473;
				Match(TABLE);
				State = 5474;
				qualified_name_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5475;
				Match(SEQUENCE);
				State = 5476;
				qualified_name_list(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5477;
				Match(FOREIGN);
				State = 5478;
				Match(DATA_P);
				State = 5479;
				Match(WRAPPER);
				State = 5480;
				name_list(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5481;
				Match(FOREIGN);
				State = 5482;
				Match(SERVER);
				State = 5483;
				name_list(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5484;
				Match(FUNCTION);
				State = 5485;
				function_with_argtypes_list(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5486;
				Match(PROCEDURE);
				State = 5487;
				function_with_argtypes_list(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5488;
				Match(ROUTINE);
				State = 5489;
				function_with_argtypes_list(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5490;
				Match(DATABASE);
				State = 5491;
				name_list(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5492;
				Match(DOMAIN_P);
				State = 5493;
				any_name_list(0);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5494;
				Match(LANGUAGE);
				State = 5495;
				name_list(0);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5496;
				Match(LARGE_P);
				State = 5497;
				Match(OBJECT_P);
				State = 5498;
				numericonly_list(0);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5499;
				Match(SCHEMA);
				State = 5500;
				name_list(0);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5501;
				Match(TABLESPACE);
				State = 5502;
				name_list(0);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5503;
				Match(TYPE_P);
				State = 5504;
				any_name_list(0);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5505;
				Match(ALL);
				State = 5506;
				Match(TABLES);
				State = 5507;
				Match(IN_P);
				State = 5508;
				Match(SCHEMA);
				State = 5509;
				name_list(0);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5510;
				Match(ALL);
				State = 5511;
				Match(SEQUENCES);
				State = 5512;
				Match(IN_P);
				State = 5513;
				Match(SCHEMA);
				State = 5514;
				name_list(0);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5515;
				Match(ALL);
				State = 5516;
				Match(FUNCTIONS);
				State = 5517;
				Match(IN_P);
				State = 5518;
				Match(SCHEMA);
				State = 5519;
				name_list(0);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5520;
				Match(ALL);
				State = 5521;
				Match(PROCEDURES);
				State = 5522;
				Match(IN_P);
				State = 5523;
				Match(SCHEMA);
				State = 5524;
				name_list(0);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5525;
				Match(ALL);
				State = 5526;
				Match(ROUTINES);
				State = 5527;
				Match(IN_P);
				State = 5528;
				Match(SCHEMA);
				State = 5529;
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext grantee() {
			return GetRuleContext<GranteeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Grantee_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee_list(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_listContext grantee_list() {
		return grantee_list(0);
	}

	private Grantee_listContext grantee_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Grantee_listContext _localctx = new Grantee_listContext(Context, _parentState);
		Grantee_listContext _prevctx = _localctx;
		int _startState = 564;
		EnterRecursionRule(_localctx, 564, RULE_grantee_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5533;
			grantee();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5540;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Grantee_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_grantee_list);
					State = 5535;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5536;
					Match(COMMA);
					State = 5537;
					grantee();
					}
					} 
				}
				State = 5542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GranteeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee(this);
		}
	}

	[RuleVersion(0)]
	public GranteeContext grantee() {
		GranteeContext _localctx = new GranteeContext(Context, State);
		EnterRule(_localctx, 566, RULE_grantee);
		try {
			State = 5546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5543;
				rolespec();
				}
				break;
			case GROUP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5544;
				Match(GROUP_P);
				State = 5545;
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_grant_grant_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_grant_grant_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_grant_grant_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_grant_grant_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_grant_grant_optionContext opt_grant_grant_option() {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(Context, State);
		EnterRule(_localctx, 568, RULE_opt_grant_grant_option);
		try {
			State = 5552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5548;
				Match(WITH);
				State = 5549;
				Match(GRANT);
				State = 5550;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return GetRuleContext<Opt_grant_admin_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_granted_byContext opt_granted_by() {
			return GetRuleContext<Opt_granted_byContext>(0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantrolestmtContext grantrolestmt() {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_grantrolestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5554;
			Match(GRANT);
			State = 5555;
			privilege_list(0);
			State = 5556;
			Match(TO);
			State = 5557;
			role_list(0);
			State = 5558;
			opt_grant_admin_option();
			State = 5559;
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokerolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_granted_byContext opt_granted_by() {
			return GetRuleContext<Opt_granted_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokerolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokerolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokerolestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokerolestmtContext revokerolestmt() {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_revokerolestmt);
		try {
			State = 5578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5561;
				Match(REVOKE);
				State = 5562;
				privilege_list(0);
				State = 5563;
				Match(FROM);
				State = 5564;
				role_list(0);
				State = 5565;
				opt_granted_by();
				State = 5566;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5568;
				Match(REVOKE);
				State = 5569;
				Match(ADMIN);
				State = 5570;
				Match(OPTION);
				State = 5571;
				Match(FOR);
				State = 5572;
				privilege_list(0);
				State = 5573;
				Match(FROM);
				State = 5574;
				role_list(0);
				State = 5575;
				opt_granted_by();
				State = 5576;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_grant_admin_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_grant_admin_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_grant_admin_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_grant_admin_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_grant_admin_optionContext opt_grant_admin_option() {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(Context, State);
		EnterRule(_localctx, 574, RULE_opt_grant_admin_option);
		try {
			State = 5584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5580;
				Match(WITH);
				State = 5581;
				Match(ADMIN);
				State = 5582;
				Match(OPTION);
				}
				break;
			case SEMI:
			case INTO:
			case GRANTED:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_granted_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_granted_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_granted_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_granted_by(this);
		}
	}

	[RuleVersion(0)]
	public Opt_granted_byContext opt_granted_by() {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(Context, State);
		EnterRule(_localctx, 576, RULE_opt_granted_by);
		try {
			State = 5590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5586;
				Match(GRANTED);
				State = 5587;
				Match(BY);
				State = 5588;
				rolespec();
				}
				break;
			case SEMI:
			case INTO:
			case CASCADE:
			case RESTRICT:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdefaultprivilegesstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionlistContext defacloptionlist() {
			return GetRuleContext<DefacloptionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaclactionContext defaclaction() {
			return GetRuleContext<DefaclactionContext>(0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdefaultprivilegesstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdefaultprivilegesstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdefaultprivilegesstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(Context, State);
		EnterRule(_localctx, 578, RULE_alterdefaultprivilegesstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5592;
			Match(ALTER);
			State = 5593;
			Match(DEFAULT);
			State = 5594;
			Match(PRIVILEGES);
			State = 5595;
			defacloptionlist(0);
			State = 5596;
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionlistContext defacloptionlist() {
			return GetRuleContext<DefacloptionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext defacloption() {
			return GetRuleContext<DefacloptionContext>(0);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloptionlist(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionlistContext defacloptionlist() {
		return defacloptionlist(0);
	}

	private DefacloptionlistContext defacloptionlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DefacloptionlistContext _localctx = new DefacloptionlistContext(Context, _parentState);
		DefacloptionlistContext _prevctx = _localctx;
		int _startState = 580;
		EnterRecursionRule(_localctx, 580, RULE_defacloptionlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefacloptionlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_defacloptionlist);
					State = 5599;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 5600;
					defacloption();
					}
					} 
				}
				State = 5605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DefacloptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloption(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionContext defacloption() {
		DefacloptionContext _localctx = new DefacloptionContext(Context, State);
		EnterRule(_localctx, 582, RULE_defacloption);
		try {
			State = 5615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5606;
				Match(IN_P);
				State = 5607;
				Match(SCHEMA);
				State = 5608;
				name_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5609;
				Match(FOR);
				State = 5610;
				Match(ROLE);
				State = 5611;
				role_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5612;
				Match(FOR);
				State = 5613;
				Match(USER);
				State = 5614;
				role_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaclactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defacl_privilege_targetContext defacl_privilege_target() {
			return GetRuleContext<Defacl_privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return GetRuleContext<Opt_grant_grant_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaclaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefaclaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefaclaction(this);
		}
	}

	[RuleVersion(0)]
	public DefaclactionContext defaclaction() {
		DefaclactionContext _localctx = new DefaclactionContext(Context, State);
		EnterRule(_localctx, 584, RULE_defaclaction);
		try {
			State = 5644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5617;
				Match(GRANT);
				State = 5618;
				privileges();
				State = 5619;
				Match(ON);
				State = 5620;
				defacl_privilege_target();
				State = 5621;
				Match(TO);
				State = 5622;
				grantee_list(0);
				State = 5623;
				opt_grant_grant_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5625;
				Match(REVOKE);
				State = 5626;
				privileges();
				State = 5627;
				Match(ON);
				State = 5628;
				defacl_privilege_target();
				State = 5629;
				Match(FROM);
				State = 5630;
				grantee_list(0);
				State = 5631;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5633;
				Match(REVOKE);
				State = 5634;
				Match(GRANT);
				State = 5635;
				Match(OPTION);
				State = 5636;
				Match(FOR);
				State = 5637;
				privileges();
				State = 5638;
				Match(ON);
				State = 5639;
				defacl_privilege_target();
				State = 5640;
				Match(FROM);
				State = 5641;
				grantee_list(0);
				State = 5642;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defacl_privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacl_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacl_privilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacl_privilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Defacl_privilege_targetContext defacl_privilege_target() {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(Context, State);
		EnterRule(_localctx, 586, RULE_defacl_privilege_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5646;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SEQUENCES - 320)) | (1L << (TABLES - 320)) | (1L << (TYPES_P - 320)))) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uniqueContext opt_unique() {
			return GetRuleContext<Opt_uniqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_index_nameContext opt_index_name() {
			return GetRuleContext<Opt_index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_includeContext opt_include() {
			return GetRuleContext<Opt_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndexstmt(this);
		}
	}

	[RuleVersion(0)]
	public IndexstmtContext indexstmt() {
		IndexstmtContext _localctx = new IndexstmtContext(Context, State);
		EnterRule(_localctx, 588, RULE_indexstmt);
		try {
			State = 5683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5648;
				Match(CREATE);
				State = 5649;
				opt_unique();
				State = 5650;
				Match(INDEX);
				State = 5651;
				opt_concurrently();
				State = 5652;
				opt_index_name();
				State = 5653;
				Match(ON);
				State = 5654;
				relation_expr();
				State = 5655;
				access_method_clause();
				State = 5656;
				Match(OPEN_PAREN);
				State = 5657;
				index_params(0);
				State = 5658;
				Match(CLOSE_PAREN);
				State = 5659;
				opt_include();
				State = 5660;
				opt_reloptions();
				State = 5661;
				opttablespace();
				State = 5662;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5664;
				Match(CREATE);
				State = 5665;
				opt_unique();
				State = 5666;
				Match(INDEX);
				State = 5667;
				opt_concurrently();
				State = 5668;
				Match(IF_P);
				State = 5669;
				Match(NOT);
				State = 5670;
				Match(EXISTS);
				State = 5671;
				name();
				State = 5672;
				Match(ON);
				State = 5673;
				relation_expr();
				State = 5674;
				access_method_clause();
				State = 5675;
				Match(OPEN_PAREN);
				State = 5676;
				index_params(0);
				State = 5677;
				Match(CLOSE_PAREN);
				State = 5678;
				opt_include();
				State = 5679;
				opt_reloptions();
				State = 5680;
				opttablespace();
				State = 5681;
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_uniqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_unique; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_unique(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_unique(this);
		}
	}

	[RuleVersion(0)]
	public Opt_uniqueContext opt_unique() {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(Context, State);
		EnterRule(_localctx, 590, RULE_opt_unique);
		try {
			State = 5687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5685;
				Match(UNIQUE);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_concurrentlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_concurrently; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_concurrently(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_concurrently(this);
		}
	}

	[RuleVersion(0)]
	public Opt_concurrentlyContext opt_concurrently() {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(Context, State);
		EnterRule(_localctx, 592, RULE_opt_concurrently);
		try {
			State = 5691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONCURRENTLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5689;
				Match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_index_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_index_name(this);
		}
	}

	[RuleVersion(0)]
	public Opt_index_nameContext opt_index_name() {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(Context, State);
		EnterRule(_localctx, 594, RULE_opt_index_name);
		try {
			State = 5695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5693;
				name();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAccess_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAccess_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Access_method_clauseContext access_method_clause() {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(Context, State);
		EnterRule(_localctx, 596, RULE_access_method_clause);
		try {
			State = 5700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5697;
				Match(USING);
				State = 5698;
				name();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem() {
			return GetRuleContext<Index_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Index_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_paramsContext index_params() {
		return index_params(0);
	}

	private Index_paramsContext index_params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Index_paramsContext _localctx = new Index_paramsContext(Context, _parentState);
		Index_paramsContext _prevctx = _localctx;
		int _startState = 598;
		EnterRecursionRule(_localctx, 598, RULE_index_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5703;
			index_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5710;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_paramsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_index_params);
					State = 5705;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5706;
					Match(COMMA);
					State = 5707;
					index_elem();
					}
					} 
				}
				State = 5712;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Index_elem_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collateContext opt_collate() {
			return GetRuleContext<Opt_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_classContext opt_class() {
			return GetRuleContext<Opt_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asc_descContext opt_asc_desc() {
			return GetRuleContext<Opt_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nulls_orderContext opt_nulls_order() {
			return GetRuleContext<Opt_nulls_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_elem_optionsContext index_elem_options() {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(Context, State);
		EnterRule(_localctx, 600, RULE_index_elem_options);
		try {
			State = 5724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5713;
				opt_collate();
				State = 5714;
				opt_class();
				State = 5715;
				opt_asc_desc();
				State = 5716;
				opt_nulls_order();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5718;
				opt_collate();
				State = 5719;
				any_name();
				State = 5720;
				reloptions();
				State = 5721;
				opt_asc_desc();
				State = 5722;
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elem_optionsContext index_elem_options() {
			return GetRuleContext<Index_elem_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem(this);
		}
	}

	[RuleVersion(0)]
	public Index_elemContext index_elem() {
		Index_elemContext _localctx = new Index_elemContext(Context, State);
		EnterRule(_localctx, 602, RULE_index_elem);
		try {
			State = 5737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5726;
				colid();
				State = 5727;
				index_elem_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5729;
				func_expr_windowless();
				State = 5730;
				index_elem_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5732;
				Match(OPEN_PAREN);
				State = 5733;
				a_expr(0);
				State = 5734;
				Match(CLOSE_PAREN);
				State = 5735;
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_including_paramsContext index_including_params() {
			return GetRuleContext<Index_including_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_include(this);
		}
	}

	[RuleVersion(0)]
	public Opt_includeContext opt_include() {
		Opt_includeContext _localctx = new Opt_includeContext(Context, State);
		EnterRule(_localctx, 604, RULE_opt_include);
		try {
			State = 5745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5739;
				Match(INCLUDE);
				State = 5740;
				Match(OPEN_PAREN);
				State = 5741;
				index_including_params(0);
				State = 5742;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_including_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem() {
			return GetRuleContext<Index_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_including_paramsContext index_including_params() {
			return GetRuleContext<Index_including_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_including_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_including_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_including_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_including_paramsContext index_including_params() {
		return index_including_params(0);
	}

	private Index_including_paramsContext index_including_params(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Index_including_paramsContext _localctx = new Index_including_paramsContext(Context, _parentState);
		Index_including_paramsContext _prevctx = _localctx;
		int _startState = 606;
		EnterRecursionRule(_localctx, 606, RULE_index_including_params, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5748;
			index_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5755;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_including_paramsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_index_including_params);
					State = 5750;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5751;
					Match(COMMA);
					State = 5752;
					index_elem();
					}
					} 
				}
				State = 5757;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_collate(this);
		}
	}

	[RuleVersion(0)]
	public Opt_collateContext opt_collate() {
		Opt_collateContext _localctx = new Opt_collateContext(Context, State);
		EnterRule(_localctx, 608, RULE_opt_collate);
		try {
			State = 5761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5758;
				Match(COLLATE);
				State = 5759;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_class(this);
		}
	}

	[RuleVersion(0)]
	public Opt_classContext opt_class() {
		Opt_classContext _localctx = new Opt_classContext(Context, State);
		EnterRule(_localctx, 610, RULE_opt_class);
		try {
			State = 5765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5763;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_asc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asc_descContext opt_asc_desc() {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(Context, State);
		EnterRule(_localctx, 612, RULE_opt_asc_desc);
		try {
			State = 5770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5767;
				Match(ASC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5768;
				Match(DESC);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nulls_orderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nulls_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nulls_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nulls_order(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nulls_orderContext opt_nulls_order() {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(Context, State);
		EnterRule(_localctx, 614, RULE_opt_nulls_order);
		try {
			State = 5777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5772;
				Match(NULLS_P);
				State = 5773;
				Match(FIRST_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5774;
				Match(NULLS_P);
				State = 5775;
				Match(LAST_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaultsContext func_args_with_defaults() {
			return GetRuleContext<Func_args_with_defaultsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_listContext createfunc_opt_list() {
			return GetRuleContext<Createfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_column_listContext table_func_column_list() {
			return GetRuleContext<Table_func_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefunctionstmtContext createfunctionstmt() {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(Context, State);
		EnterRule(_localctx, 616, RULE_createfunctionstmt);
		try {
			State = 5814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5779;
				Match(CREATE);
				State = 5780;
				opt_or_replace();
				State = 5781;
				Match(FUNCTION);
				State = 5782;
				func_name();
				State = 5783;
				func_args_with_defaults();
				State = 5784;
				Match(RETURNS);
				State = 5785;
				func_return();
				State = 5786;
				createfunc_opt_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5788;
				Match(CREATE);
				State = 5789;
				opt_or_replace();
				State = 5790;
				Match(FUNCTION);
				State = 5791;
				func_name();
				State = 5792;
				func_args_with_defaults();
				State = 5793;
				Match(RETURNS);
				State = 5794;
				Match(TABLE);
				State = 5795;
				Match(OPEN_PAREN);
				State = 5796;
				table_func_column_list(0);
				State = 5797;
				Match(CLOSE_PAREN);
				State = 5798;
				createfunc_opt_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5800;
				Match(CREATE);
				State = 5801;
				opt_or_replace();
				State = 5802;
				Match(FUNCTION);
				State = 5803;
				func_name();
				State = 5804;
				func_args_with_defaults();
				State = 5805;
				createfunc_opt_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5807;
				Match(CREATE);
				State = 5808;
				opt_or_replace();
				State = 5809;
				Match(PROCEDURE);
				State = 5810;
				func_name();
				State = 5811;
				func_args_with_defaults();
				State = 5812;
				createfunc_opt_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_or_replaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_or_replace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_or_replace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_or_replace(this);
		}
	}

	[RuleVersion(0)]
	public Opt_or_replaceContext opt_or_replace() {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(Context, State);
		EnterRule(_localctx, 618, RULE_opt_or_replace);
		try {
			State = 5819;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5816;
				Match(OR);
				State = 5817;
				Match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRUSTED:
			case TRANSFORM:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_listContext func_args_list() {
			return GetRuleContext<Func_args_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args(this);
		}
	}

	[RuleVersion(0)]
	public Func_argsContext func_args() {
		Func_argsContext _localctx = new Func_argsContext(Context, State);
		EnterRule(_localctx, 620, RULE_func_args);
		try {
			State = 5827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5821;
				Match(OPEN_PAREN);
				State = 5822;
				func_args_list(0);
				State = 5823;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5825;
				Match(OPEN_PAREN);
				State = 5826;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_listContext func_args_list() {
			return GetRuleContext<Func_args_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_listContext func_args_list() {
		return func_args_list(0);
	}

	private Func_args_listContext func_args_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Func_args_listContext _localctx = new Func_args_listContext(Context, _parentState);
		Func_args_listContext _prevctx = _localctx;
		int _startState = 622;
		EnterRecursionRule(_localctx, 622, RULE_func_args_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5830;
			func_arg();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5837;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_func_args_list);
					State = 5832;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5833;
					Match(COMMA);
					State = 5834;
					func_arg();
					}
					} 
				}
				State = 5839;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypes_listContext function_with_argtypes_list() {
		return function_with_argtypes_list(0);
	}

	private Function_with_argtypes_listContext function_with_argtypes_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(Context, _parentState);
		Function_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 624;
		EnterRecursionRule(_localctx, 624, RULE_function_with_argtypes_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5841;
			function_with_argtypes();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5848;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_with_argtypes_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_function_with_argtypes_list);
					State = 5843;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5844;
					Match(COMMA);
					State = 5845;
					function_with_argtypes();
					}
					} 
				}
				State = 5850;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argsContext func_args() {
			return GetRuleContext<Func_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypesContext function_with_argtypes() {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(Context, State);
		EnterRule(_localctx, 626, RULE_function_with_argtypes);
		try {
			State = 5859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5851;
				func_name();
				State = 5852;
				func_args();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5854;
				type_func_name_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5855;
				colid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5856;
				colid();
				State = 5857;
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return GetRuleContext<Func_args_with_defaults_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaultsContext func_args_with_defaults() {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(Context, State);
		EnterRule(_localctx, 628, RULE_func_args_with_defaults);
		try {
			State = 5867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5861;
				Match(OPEN_PAREN);
				State = 5862;
				func_args_with_defaults_list(0);
				State = 5863;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5865;
				Match(OPEN_PAREN);
				State = 5866;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaults_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext func_arg_with_default() {
			return GetRuleContext<Func_arg_with_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return GetRuleContext<Func_args_with_defaults_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaults_listContext func_args_with_defaults_list() {
		return func_args_with_defaults_list(0);
	}

	private Func_args_with_defaults_listContext func_args_with_defaults_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(Context, _parentState);
		Func_args_with_defaults_listContext _prevctx = _localctx;
		int _startState = 630;
		EnterRecursionRule(_localctx, 630, RULE_func_args_with_defaults_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5870;
			func_arg_with_default();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5877;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_with_defaults_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_func_args_with_defaults_list);
					State = 5872;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5873;
					Match(COMMA);
					State = 5874;
					func_arg_with_default();
					}
					} 
				}
				State = 5879;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Func_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_classContext arg_class() {
			return GetRuleContext<Arg_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg(this);
		}
	}

	[RuleVersion(0)]
	public Func_argContext func_arg() {
		Func_argContext _localctx = new Func_argContext(Context, State);
		EnterRule(_localctx, 632, RULE_func_arg);
		try {
			State = 5895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5880;
				arg_class();
				State = 5881;
				param_name();
				State = 5882;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5884;
				param_name();
				State = 5885;
				arg_class();
				State = 5886;
				func_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5888;
				param_name();
				State = 5889;
				func_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5891;
				arg_class();
				State = 5892;
				func_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5894;
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArg_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArg_class(this);
		}
	}

	[RuleVersion(0)]
	public Arg_classContext arg_class() {
		Arg_classContext _localctx = new Arg_classContext(Context, State);
		EnterRule(_localctx, 634, RULE_arg_class);
		try {
			State = 5903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5897;
				Match(IN_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5898;
				Match(OUT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5899;
				Match(INOUT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5900;
				Match(IN_P);
				State = 5901;
				Match(OUT_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5902;
				Match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 636, RULE_param_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5905;
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_return(this);
		}
	}

	[RuleVersion(0)]
	public Func_returnContext func_return() {
		Func_returnContext _localctx = new Func_returnContext(Context, State);
		EnterRule(_localctx, 638, RULE_func_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5907;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_type(this);
		}
	}

	[RuleVersion(0)]
	public Func_typeContext func_type() {
		Func_typeContext _localctx = new Func_typeContext(Context, State);
		EnterRule(_localctx, 640, RULE_func_type);
		try {
			State = 5921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5909;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5910;
				type_function_name();
				State = 5911;
				attrs(0);
				State = 5912;
				Match(PERCENT);
				State = 5913;
				Match(TYPE_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5915;
				Match(SETOF);
				State = 5916;
				type_function_name();
				State = 5917;
				attrs(0);
				State = 5918;
				Match(PERCENT);
				State = 5919;
				Match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_with_default(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_with_defaultContext func_arg_with_default() {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(Context, State);
		EnterRule(_localctx, 642, RULE_func_arg_with_default);
		try {
			State = 5932;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5923;
				func_arg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5924;
				func_arg();
				State = 5925;
				Match(DEFAULT);
				State = 5926;
				a_expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5928;
				func_arg();
				State = 5929;
				Match(EQUAL);
				State = 5930;
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_arg(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argContext aggr_arg() {
		Aggr_argContext _localctx = new Aggr_argContext(Context, State);
		EnterRule(_localctx, 644, RULE_aggr_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5934;
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext[] aggr_args_list() {
			return GetRuleContexts<Aggr_args_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext aggr_args_list(int i) {
			return GetRuleContext<Aggr_args_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argsContext aggr_args() {
		Aggr_argsContext _localctx = new Aggr_argsContext(Context, State);
		EnterRule(_localctx, 646, RULE_aggr_args);
		try {
			State = 5956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5936;
				Match(OPEN_PAREN);
				State = 5937;
				Match(STAR);
				State = 5938;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5939;
				Match(OPEN_PAREN);
				State = 5940;
				aggr_args_list(0);
				State = 5941;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5943;
				Match(OPEN_PAREN);
				State = 5944;
				Match(ORDER);
				State = 5945;
				Match(BY);
				State = 5946;
				aggr_args_list(0);
				State = 5947;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5949;
				Match(OPEN_PAREN);
				State = 5950;
				aggr_args_list(0);
				State = 5951;
				Match(ORDER);
				State = 5952;
				Match(BY);
				State = 5953;
				aggr_args_list(0);
				State = 5954;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext aggr_arg() {
			return GetRuleContext<Aggr_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext aggr_args_list() {
			return GetRuleContext<Aggr_args_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_args_listContext aggr_args_list() {
		return aggr_args_list(0);
	}

	private Aggr_args_listContext aggr_args_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Aggr_args_listContext _localctx = new Aggr_args_listContext(Context, _parentState);
		Aggr_args_listContext _prevctx = _localctx;
		int _startState = 648;
		EnterRecursionRule(_localctx, 648, RULE_aggr_args_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5959;
			aggr_arg();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5966;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,255,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Aggr_args_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_aggr_args_list);
					State = 5961;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5962;
					Match(COMMA);
					State = 5963;
					aggr_arg();
					}
					} 
				}
				State = 5968;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,255,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypesContext aggregate_with_argtypes() {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(Context, State);
		EnterRule(_localctx, 650, RULE_aggregate_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5969;
			func_name();
			State = 5970;
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return GetRuleContext<Aggregate_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
		return aggregate_with_argtypes_list(0);
	}

	private Aggregate_with_argtypes_listContext aggregate_with_argtypes_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(Context, _parentState);
		Aggregate_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 652;
		EnterRecursionRule(_localctx, 652, RULE_aggregate_with_argtypes_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5973;
			aggregate_with_argtypes();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5980;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Aggregate_with_argtypes_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_aggregate_with_argtypes_list);
					State = 5975;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 5976;
					Match(COMMA);
					State = 5977;
					aggregate_with_argtypes();
					}
					} 
				}
				State = 5982;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Createfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext[] createfunc_opt_item() {
			return GetRuleContexts<Createfunc_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return GetRuleContext<Createfunc_opt_itemContext>(i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_listContext createfunc_opt_list() {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 654, RULE_createfunc_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5983;
				createfunc_opt_item();
				}
				}
				State = 5986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AS || _la==NOT || _la==WINDOW || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (CALLED - 149)) | (1L << (COST - 149)) | (1L << (EXTERNAL - 149)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (IMMUTABLE - 222)) | (1L << (LANGUAGE - 222)) | (1L << (LEAKPROOF - 222)))) != 0) || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (RESET - 304)) | (1L << (RETURNS - 304)) | (1L << (ROWS - 304)) | (1L << (SECURITY - 304)) | (1L << (SET - 304)) | (1L << (STABLE - 304)) | (1L << (STRICT_P - 304)))) != 0) || _la==VOLATILE || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (TRANSFORM - 435)) | (1L << (SUPPORT - 435)) | (1L << (PARALLEL - 435)))) != 0) );

			                ParseRoutineBody(_localctx);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_func_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_P() { return GetTokens(PostgreSQLParser.NULL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P(int i) {
			return GetToken(PostgreSQLParser.NULL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsetresetclauseContext functionsetresetclause() {
			return GetRuleContext<FunctionsetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_func_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_func_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_func_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Common_func_opt_itemContext common_func_opt_item() {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(Context, State);
		EnterRule(_localctx, 656, RULE_common_func_opt_item);
		try {
			State = 6025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5990;
				Match(CALLED);
				State = 5991;
				Match(ON);
				State = 5992;
				Match(NULL_P);
				State = 5993;
				Match(INPUT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5994;
				Match(RETURNS);
				State = 5995;
				Match(NULL_P);
				State = 5996;
				Match(ON);
				State = 5997;
				Match(NULL_P);
				State = 5998;
				Match(INPUT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5999;
				Match(STRICT_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6000;
				Match(IMMUTABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6001;
				Match(STABLE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6002;
				Match(VOLATILE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6003;
				Match(EXTERNAL);
				State = 6004;
				Match(SECURITY);
				State = 6005;
				Match(DEFINER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6006;
				Match(EXTERNAL);
				State = 6007;
				Match(SECURITY);
				State = 6008;
				Match(INVOKER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6009;
				Match(SECURITY);
				State = 6010;
				Match(DEFINER);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6011;
				Match(SECURITY);
				State = 6012;
				Match(INVOKER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6013;
				Match(LEAKPROOF);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6014;
				Match(NOT);
				State = 6015;
				Match(LEAKPROOF);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6016;
				Match(COST);
				State = 6017;
				numericonly();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6018;
				Match(ROWS);
				State = 6019;
				numericonly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6020;
				Match(SUPPORT);
				State = 6021;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6022;
				functionsetresetclause();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6023;
				Match(PARALLEL);
				State = 6024;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_asContext func_as() {
			return GetRuleContext<Func_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_type_listContext transform_type_list() {
			return GetRuleContext<Transform_type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item() {
			return GetRuleContext<Common_func_opt_itemContext>(0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_itemContext createfunc_opt_item() {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(Context, State);
		EnterRule(_localctx, 658, RULE_createfunc_opt_item);
		try {
			State = 6035;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6027;
				Match(AS);
				State = 6028;
				func_as();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6029;
				Match(LANGUAGE);
				State = 6030;
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6031;
				Match(TRANSFORM);
				State = 6032;
				transform_type_list(0);
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6033;
				Match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6034;
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_asContext : ParserRuleContext {
		public IParseTree Definition;
		public SconstContext def;
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_as(this);
		}
	}

	[RuleVersion(0)]
	public Func_asContext func_as() {
		Func_asContext _localctx = new Func_asContext(Context, State);
		EnterRule(_localctx, 660, RULE_func_as);
		try {
			State = 6044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6037;
				_localctx.def = sconst();

				/*				                        var txt =  GetString(_localctx.sconst(0));
								                        var ph = getPostgreSQLParser(txt);
								                        _localctx.Definition = ph.plsqlroot();
								                        foreach (var err in ph.ParseErrors)
								                        {
								                            ParseErrors.Add(err);
								                        }
				*/
				                    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6040;
				sconst();
				State = 6041;
				Match(COMMA);
				State = 6042;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_type_listContext transform_type_list() {
			return GetRuleContext<Transform_type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Transform_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_type_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_type_listContext transform_type_list() {
		return transform_type_list(0);
	}

	private Transform_type_listContext transform_type_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Transform_type_listContext _localctx = new Transform_type_listContext(Context, _parentState);
		Transform_type_listContext _prevctx = _localctx;
		int _startState = 662;
		EnterRecursionRule(_localctx, 662, RULE_transform_type_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6047;
			Match(FOR);
			State = 6048;
			Match(TYPE_P);
			State = 6049;
			typename();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6058;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,261,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Transform_type_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_transform_type_list);
					State = 6051;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 6052;
					Match(COMMA);
					State = 6053;
					Match(FOR);
					State = 6054;
					Match(TYPE_P);
					State = 6055;
					typename();
					}
					} 
				}
				State = 6060;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,261,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_definition(this);
		}
	}

	[RuleVersion(0)]
	public Opt_definitionContext opt_definition() {
		Opt_definitionContext _localctx = new Opt_definitionContext(Context, State);
		EnterRule(_localctx, 664, RULE_opt_definition);
		try {
			State = 6064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6061;
				Match(WITH);
				State = 6062;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_columnContext table_func_column() {
		Table_func_columnContext _localctx = new Table_func_columnContext(Context, State);
		EnterRule(_localctx, 666, RULE_table_func_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6066;
			param_name();
			State = 6067;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext table_func_column() {
			return GetRuleContext<Table_func_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_column_listContext table_func_column_list() {
			return GetRuleContext<Table_func_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_column_listContext table_func_column_list() {
		return table_func_column_list(0);
	}

	private Table_func_column_listContext table_func_column_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Table_func_column_listContext _localctx = new Table_func_column_listContext(Context, _parentState);
		Table_func_column_listContext _prevctx = _localctx;
		int _startState = 668;
		EnterRecursionRule(_localctx, 668, RULE_table_func_column_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6070;
			table_func_column();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6077;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Table_func_column_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_table_func_column_list);
					State = 6072;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 6073;
					Match(COMMA);
					State = 6074;
					table_func_column();
					}
					} 
				}
				State = 6079;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AlterfunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alterfunc_opt_listContext alterfunc_opt_list() {
			return GetRuleContext<Alterfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_restrictContext opt_restrict() {
			return GetRuleContext<Opt_restrictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfunctionstmtContext alterfunctionstmt() {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(Context, State);
		EnterRule(_localctx, 670, RULE_alterfunctionstmt);
		try {
			State = 6098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6080;
				Match(ALTER);
				State = 6081;
				Match(FUNCTION);
				State = 6082;
				function_with_argtypes();
				State = 6083;
				alterfunc_opt_list(0);
				State = 6084;
				opt_restrict();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6086;
				Match(ALTER);
				State = 6087;
				Match(PROCEDURE);
				State = 6088;
				function_with_argtypes();
				State = 6089;
				alterfunc_opt_list(0);
				State = 6090;
				opt_restrict();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6092;
				Match(ALTER);
				State = 6093;
				Match(ROUTINE);
				State = 6094;
				function_with_argtypes();
				State = 6095;
				alterfunc_opt_list(0);
				State = 6096;
				opt_restrict();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alterfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item() {
			return GetRuleContext<Common_func_opt_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alterfunc_opt_listContext alterfunc_opt_list() {
			return GetRuleContext<Alterfunc_opt_listContext>(0);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alterfunc_opt_listContext alterfunc_opt_list() {
		return alterfunc_opt_list(0);
	}

	private Alterfunc_opt_listContext alterfunc_opt_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(Context, _parentState);
		Alterfunc_opt_listContext _prevctx = _localctx;
		int _startState = 672;
		EnterRecursionRule(_localctx, 672, RULE_alterfunc_opt_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6101;
			common_func_opt_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterfunc_opt_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_alterfunc_opt_list);
					State = 6103;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 6104;
					common_func_opt_item();
					}
					} 
				}
				State = 6109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_restrictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_restrict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_restrict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_restrict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_restrictContext opt_restrict() {
		Opt_restrictContext _localctx = new Opt_restrictContext(Context, State);
		EnterRule(_localctx, 674, RULE_opt_restrict);
		try {
			State = 6112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6110;
				Match(RESTRICT);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovefuncstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removefuncstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemovefuncstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemovefuncstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemovefuncstmtContext removefuncstmt() {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(Context, State);
		EnterRule(_localctx, 676, RULE_removefuncstmt);
		try {
			State = 6150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6114;
				Match(DROP);
				State = 6115;
				Match(FUNCTION);
				State = 6116;
				function_with_argtypes_list(0);
				State = 6117;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6119;
				Match(DROP);
				State = 6120;
				Match(FUNCTION);
				State = 6121;
				Match(IF_P);
				State = 6122;
				Match(EXISTS);
				State = 6123;
				function_with_argtypes_list(0);
				State = 6124;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6126;
				Match(DROP);
				State = 6127;
				Match(PROCEDURE);
				State = 6128;
				function_with_argtypes_list(0);
				State = 6129;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6131;
				Match(DROP);
				State = 6132;
				Match(PROCEDURE);
				State = 6133;
				Match(IF_P);
				State = 6134;
				Match(EXISTS);
				State = 6135;
				function_with_argtypes_list(0);
				State = 6136;
				opt_drop_behavior();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6138;
				Match(DROP);
				State = 6139;
				Match(ROUTINE);
				State = 6140;
				function_with_argtypes_list(0);
				State = 6141;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6143;
				Match(DROP);
				State = 6144;
				Match(ROUTINE);
				State = 6145;
				Match(IF_P);
				State = 6146;
				Match(EXISTS);
				State = 6147;
				function_with_argtypes_list(0);
				State = 6148;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveaggrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return GetRuleContext<Aggregate_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaggrstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveaggrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveaggrstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveaggrstmtContext removeaggrstmt() {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(Context, State);
		EnterRule(_localctx, 678, RULE_removeaggrstmt);
		try {
			State = 6164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6152;
				Match(DROP);
				State = 6153;
				Match(AGGREGATE);
				State = 6154;
				aggregate_with_argtypes_list(0);
				State = 6155;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6157;
				Match(DROP);
				State = 6158;
				Match(AGGREGATE);
				State = 6159;
				Match(IF_P);
				State = 6160;
				Match(EXISTS);
				State = 6161;
				aggregate_with_argtypes_list(0);
				State = 6162;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveoperstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return GetRuleContext<Operator_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeoperstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveoperstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveoperstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveoperstmtContext removeoperstmt() {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(Context, State);
		EnterRule(_localctx, 680, RULE_removeoperstmt);
		try {
			State = 6178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6166;
				Match(DROP);
				State = 6167;
				Match(OPERATOR);
				State = 6168;
				operator_with_argtypes_list(0);
				State = 6169;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6171;
				Match(DROP);
				State = 6172;
				Match(OPERATOR);
				State = 6173;
				Match(IF_P);
				State = 6174;
				Match(EXISTS);
				State = 6175;
				operator_with_argtypes_list(0);
				State = 6176;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Oper_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oper_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOper_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOper_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Oper_argtypesContext oper_argtypes() {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(Context, State);
		EnterRule(_localctx, 682, RULE_oper_argtypes);
		try {
			State = 6202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6180;
				Match(OPEN_PAREN);
				State = 6181;
				typename();
				State = 6182;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6184;
				Match(OPEN_PAREN);
				State = 6185;
				typename();
				State = 6186;
				Match(COMMA);
				State = 6187;
				typename();
				State = 6188;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6190;
				Match(OPEN_PAREN);
				State = 6191;
				Match(NONE);
				State = 6192;
				Match(COMMA);
				State = 6193;
				typename();
				State = 6194;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6196;
				Match(OPEN_PAREN);
				State = 6197;
				typename();
				State = 6198;
				Match(COMMA);
				State = 6199;
				Match(NONE);
				State = 6200;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_operator(this);
		}
	}

	[RuleVersion(0)]
	public Any_operatorContext any_operator() {
		Any_operatorContext _localctx = new Any_operatorContext(Context, State);
		EnterRule(_localctx, 684, RULE_any_operator);
		try {
			State = 6209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6204;
				all_op();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6205;
				colid();
				State = 6206;
				Match(DOT);
				State = 6207;
				any_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return GetRuleContext<Operator_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypes_listContext operator_with_argtypes_list() {
		return operator_with_argtypes_list(0);
	}

	private Operator_with_argtypes_listContext operator_with_argtypes_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(Context, _parentState);
		Operator_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 686;
		EnterRecursionRule(_localctx, 686, RULE_operator_with_argtypes_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6212;
			operator_with_argtypes();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,272,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Operator_with_argtypes_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_operator_with_argtypes_list);
					State = 6214;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 6215;
					Match(COMMA);
					State = 6216;
					operator_with_argtypes();
					}
					} 
				}
				State = 6221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,272,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Operator_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Oper_argtypesContext oper_argtypes() {
			return GetRuleContext<Oper_argtypesContext>(0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypesContext operator_with_argtypes() {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(Context, State);
		EnterRule(_localctx, 688, RULE_operator_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6222;
			any_operator();
			State = 6223;
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_listContext dostmt_opt_list() {
			return GetRuleContext<Dostmt_opt_listContext>(0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt(this);
		}
	}

	[RuleVersion(0)]
	public DostmtContext dostmt() {
		DostmtContext _localctx = new DostmtContext(Context, State);
		EnterRule(_localctx, 690, RULE_dostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6225;
			Match(DO);
			State = 6226;
			dostmt_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext dostmt_opt_item() {
			return GetRuleContext<Dostmt_opt_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_listContext dostmt_opt_list() {
			return GetRuleContext<Dostmt_opt_listContext>(0);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_listContext dostmt_opt_list() {
		return dostmt_opt_list(0);
	}

	private Dostmt_opt_listContext dostmt_opt_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(Context, _parentState);
		Dostmt_opt_listContext _prevctx = _localctx;
		int _startState = 692;
		EnterRecursionRule(_localctx, 692, RULE_dostmt_opt_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6229;
			dostmt_opt_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dostmt_opt_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_dostmt_opt_list);
					State = 6231;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 6232;
					dostmt_opt_item();
					}
					} 
				}
				State = 6237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dostmt_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_itemContext dostmt_opt_item() {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(Context, State);
		EnterRule(_localctx, 694, RULE_dostmt_opt_item);
		try {
			State = 6241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6238;
				sconst();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6239;
				Match(LANGUAGE);
				State = 6240;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatecaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_contextContext cast_context() {
			return GetRuleContext<Cast_contextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatecaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatecaststmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatecaststmtContext createcaststmt() {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(Context, State);
		EnterRule(_localctx, 696, RULE_createcaststmt);
		try {
			State = 6277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6243;
				Match(CREATE);
				State = 6244;
				Match(CAST);
				State = 6245;
				Match(OPEN_PAREN);
				State = 6246;
				typename();
				State = 6247;
				Match(AS);
				State = 6248;
				typename();
				State = 6249;
				Match(CLOSE_PAREN);
				State = 6250;
				Match(WITH);
				State = 6251;
				Match(FUNCTION);
				State = 6252;
				function_with_argtypes();
				State = 6253;
				cast_context();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6255;
				Match(CREATE);
				State = 6256;
				Match(CAST);
				State = 6257;
				Match(OPEN_PAREN);
				State = 6258;
				typename();
				State = 6259;
				Match(AS);
				State = 6260;
				typename();
				State = 6261;
				Match(CLOSE_PAREN);
				State = 6262;
				Match(WITHOUT);
				State = 6263;
				Match(FUNCTION);
				State = 6264;
				cast_context();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6266;
				Match(CREATE);
				State = 6267;
				Match(CAST);
				State = 6268;
				Match(OPEN_PAREN);
				State = 6269;
				typename();
				State = 6270;
				Match(AS);
				State = 6271;
				typename();
				State = 6272;
				Match(CLOSE_PAREN);
				State = 6273;
				Match(WITH);
				State = 6274;
				Match(INOUT);
				State = 6275;
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_contextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_context; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCast_context(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCast_context(this);
		}
	}

	[RuleVersion(0)]
	public Cast_contextContext cast_context() {
		Cast_contextContext _localctx = new Cast_contextContext(Context, State);
		EnterRule(_localctx, 698, RULE_cast_context);
		try {
			State = 6284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6279;
				Match(AS);
				State = 6280;
				Match(IMPLICIT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6281;
				Match(AS);
				State = 6282;
				Match(ASSIGNMENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropcaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_existsContext opt_if_exists() {
			return GetRuleContext<Opt_if_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropcaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropcaststmt(this);
		}
	}

	[RuleVersion(0)]
	public DropcaststmtContext dropcaststmt() {
		DropcaststmtContext _localctx = new DropcaststmtContext(Context, State);
		EnterRule(_localctx, 700, RULE_dropcaststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6286;
			Match(DROP);
			State = 6287;
			Match(CAST);
			State = 6288;
			opt_if_exists();
			State = 6289;
			Match(OPEN_PAREN);
			State = 6290;
			typename();
			State = 6291;
			Match(AS);
			State = 6292;
			typename();
			State = 6293;
			Match(CLOSE_PAREN);
			State = 6294;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_if_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_if_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_if_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_if_exists(this);
		}
	}

	[RuleVersion(0)]
	public Opt_if_existsContext opt_if_exists() {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(Context, State);
		EnterRule(_localctx, 702, RULE_opt_if_exists);
		try {
			State = 6299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6296;
				Match(IF_P);
				State = 6297;
				Match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_element_listContext transform_element_list() {
			return GetRuleContext<Transform_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetransformstmtContext createtransformstmt() {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(Context, State);
		EnterRule(_localctx, 704, RULE_createtransformstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6301;
			Match(CREATE);
			State = 6302;
			opt_or_replace();
			State = 6303;
			Match(TRANSFORM);
			State = 6304;
			Match(FOR);
			State = 6305;
			typename();
			State = 6306;
			Match(LANGUAGE);
			State = 6307;
			name();
			State = 6308;
			Match(OPEN_PAREN);
			State = 6309;
			transform_element_list();
			State = 6310;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQL_P() { return GetTokens(PostgreSQLParser.SQL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P(int i) {
			return GetToken(PostgreSQLParser.SQL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(PostgreSQLParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(PostgreSQLParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(PostgreSQLParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(PostgreSQLParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_element_listContext transform_element_list() {
		Transform_element_listContext _localctx = new Transform_element_listContext(Context, State);
		EnterRule(_localctx, 706, RULE_transform_element_list);
		try {
			State = 6346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6312;
				Match(FROM);
				State = 6313;
				Match(SQL_P);
				State = 6314;
				Match(WITH);
				State = 6315;
				Match(FUNCTION);
				State = 6316;
				function_with_argtypes();
				State = 6317;
				Match(COMMA);
				State = 6318;
				Match(TO);
				State = 6319;
				Match(SQL_P);
				State = 6320;
				Match(WITH);
				State = 6321;
				Match(FUNCTION);
				State = 6322;
				function_with_argtypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6324;
				Match(TO);
				State = 6325;
				Match(SQL_P);
				State = 6326;
				Match(WITH);
				State = 6327;
				Match(FUNCTION);
				State = 6328;
				function_with_argtypes();
				State = 6329;
				Match(COMMA);
				State = 6330;
				Match(FROM);
				State = 6331;
				Match(SQL_P);
				State = 6332;
				Match(WITH);
				State = 6333;
				Match(FUNCTION);
				State = 6334;
				function_with_argtypes();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6336;
				Match(FROM);
				State = 6337;
				Match(SQL_P);
				State = 6338;
				Match(WITH);
				State = 6339;
				Match(FUNCTION);
				State = 6340;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6341;
				Match(TO);
				State = 6342;
				Match(SQL_P);
				State = 6343;
				Match(WITH);
				State = 6344;
				Match(FUNCTION);
				State = 6345;
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_existsContext opt_if_exists() {
			return GetRuleContext<Opt_if_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptransformstmtContext droptransformstmt() {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(Context, State);
		EnterRule(_localctx, 708, RULE_droptransformstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6348;
			Match(DROP);
			State = 6349;
			Match(TRANSFORM);
			State = 6350;
			opt_if_exists();
			State = 6351;
			Match(FOR);
			State = 6352;
			typename();
			State = 6353;
			Match(LANGUAGE);
			State = 6354;
			name();
			State = 6355;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReindexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_typeContext reindex_target_type() {
			return GetRuleContext<Reindex_target_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_multitableContext reindex_target_multitable() {
			return GetRuleContext<Reindex_target_multitableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_listContext reindex_option_list() {
			return GetRuleContext<Reindex_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindexstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReindexstmtContext reindexstmt() {
		ReindexstmtContext _localctx = new ReindexstmtContext(Context, State);
		EnterRule(_localctx, 710, RULE_reindexstmt);
		try {
			State = 6383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6357;
				Match(REINDEX);
				State = 6358;
				reindex_target_type();
				State = 6359;
				opt_concurrently();
				State = 6360;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6362;
				Match(REINDEX);
				State = 6363;
				reindex_target_multitable();
				State = 6364;
				opt_concurrently();
				State = 6365;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6367;
				Match(REINDEX);
				State = 6368;
				Match(OPEN_PAREN);
				State = 6369;
				reindex_option_list(0);
				State = 6370;
				Match(CLOSE_PAREN);
				State = 6371;
				reindex_target_type();
				State = 6372;
				opt_concurrently();
				State = 6373;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6375;
				Match(REINDEX);
				State = 6376;
				Match(OPEN_PAREN);
				State = 6377;
				reindex_option_list(0);
				State = 6378;
				Match(CLOSE_PAREN);
				State = 6379;
				reindex_target_multitable();
				State = 6380;
				opt_concurrently();
				State = 6381;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_type(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_typeContext reindex_target_type() {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(Context, State);
		EnterRule(_localctx, 712, RULE_reindex_target_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6385;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_multitableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_multitable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_multitable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_multitable(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_multitableContext reindex_target_multitable() {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(Context, State);
		EnterRule(_localctx, 714, RULE_reindex_target_multitable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6387;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_elemContext reindex_option_elem() {
			return GetRuleContext<Reindex_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_listContext reindex_option_list() {
			return GetRuleContext<Reindex_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_listContext reindex_option_list() {
		return reindex_option_list(0);
	}

	private Reindex_option_listContext reindex_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Reindex_option_listContext _localctx = new Reindex_option_listContext(Context, _parentState);
		Reindex_option_listContext _prevctx = _localctx;
		int _startState = 716;
		EnterRecursionRule(_localctx, 716, RULE_reindex_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6390;
			reindex_option_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reindex_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reindex_option_list);
					State = 6392;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 6393;
					Match(COMMA);
					State = 6394;
					reindex_option_elem();
					}
					} 
				}
				State = 6399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Reindex_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_elemContext reindex_option_elem() {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(Context, State);
		EnterRule(_localctx, 718, RULE_reindex_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6400;
			Match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertblspcstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertblspcstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertblspcstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertblspcstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertblspcstmtContext altertblspcstmt() {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(Context, State);
		EnterRule(_localctx, 720, RULE_altertblspcstmt);
		try {
			State = 6414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6402;
				Match(ALTER);
				State = 6403;
				Match(TABLESPACE);
				State = 6404;
				name();
				State = 6405;
				Match(SET);
				State = 6406;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6408;
				Match(ALTER);
				State = 6409;
				Match(TABLESPACE);
				State = 6410;
				name();
				State = 6411;
				Match(RESET);
				State = 6412;
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext[] roleid() {
			return GetRuleContexts<RoleidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid(int i) {
			return GetRuleContext<RoleidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_columnContext opt_column() {
			return GetRuleContext<Opt_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRenamestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRenamestmt(this);
		}
	}

	[RuleVersion(0)]
	public RenamestmtContext renamestmt() {
		RenamestmtContext _localctx = new RenamestmtContext(Context, State);
		EnterRule(_localctx, 722, RULE_renamestmt);
		try {
			State = 6884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6416;
				Match(ALTER);
				State = 6417;
				Match(AGGREGATE);
				State = 6418;
				aggregate_with_argtypes();
				State = 6419;
				Match(RENAME);
				State = 6420;
				Match(TO);
				State = 6421;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6423;
				Match(ALTER);
				State = 6424;
				Match(COLLATION);
				State = 6425;
				any_name();
				State = 6426;
				Match(RENAME);
				State = 6427;
				Match(TO);
				State = 6428;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6430;
				Match(ALTER);
				State = 6431;
				Match(CONVERSION_P);
				State = 6432;
				any_name();
				State = 6433;
				Match(RENAME);
				State = 6434;
				Match(TO);
				State = 6435;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6437;
				Match(ALTER);
				State = 6438;
				Match(DATABASE);
				State = 6439;
				name();
				State = 6440;
				Match(RENAME);
				State = 6441;
				Match(TO);
				State = 6442;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6444;
				Match(ALTER);
				State = 6445;
				Match(DOMAIN_P);
				State = 6446;
				any_name();
				State = 6447;
				Match(RENAME);
				State = 6448;
				Match(TO);
				State = 6449;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6451;
				Match(ALTER);
				State = 6452;
				Match(DOMAIN_P);
				State = 6453;
				any_name();
				State = 6454;
				Match(RENAME);
				State = 6455;
				Match(CONSTRAINT);
				State = 6456;
				name();
				State = 6457;
				Match(TO);
				State = 6458;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6460;
				Match(ALTER);
				State = 6461;
				Match(FOREIGN);
				State = 6462;
				Match(DATA_P);
				State = 6463;
				Match(WRAPPER);
				State = 6464;
				name();
				State = 6465;
				Match(RENAME);
				State = 6466;
				Match(TO);
				State = 6467;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6469;
				Match(ALTER);
				State = 6470;
				Match(FUNCTION);
				State = 6471;
				function_with_argtypes();
				State = 6472;
				Match(RENAME);
				State = 6473;
				Match(TO);
				State = 6474;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6476;
				Match(ALTER);
				State = 6477;
				Match(GROUP_P);
				State = 6478;
				roleid();
				State = 6479;
				Match(RENAME);
				State = 6480;
				Match(TO);
				State = 6481;
				roleid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6483;
				Match(ALTER);
				State = 6484;
				opt_procedural();
				State = 6485;
				Match(LANGUAGE);
				State = 6486;
				name();
				State = 6487;
				Match(RENAME);
				State = 6488;
				Match(TO);
				State = 6489;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6491;
				Match(ALTER);
				State = 6492;
				Match(OPERATOR);
				State = 6493;
				Match(CLASS);
				State = 6494;
				any_name();
				State = 6495;
				Match(USING);
				State = 6496;
				name();
				State = 6497;
				Match(RENAME);
				State = 6498;
				Match(TO);
				State = 6499;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6501;
				Match(ALTER);
				State = 6502;
				Match(OPERATOR);
				State = 6503;
				Match(FAMILY);
				State = 6504;
				any_name();
				State = 6505;
				Match(USING);
				State = 6506;
				name();
				State = 6507;
				Match(RENAME);
				State = 6508;
				Match(TO);
				State = 6509;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6511;
				Match(ALTER);
				State = 6512;
				Match(POLICY);
				State = 6513;
				name();
				State = 6514;
				Match(ON);
				State = 6515;
				qualified_name();
				State = 6516;
				Match(RENAME);
				State = 6517;
				Match(TO);
				State = 6518;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6520;
				Match(ALTER);
				State = 6521;
				Match(POLICY);
				State = 6522;
				Match(IF_P);
				State = 6523;
				Match(EXISTS);
				State = 6524;
				name();
				State = 6525;
				Match(ON);
				State = 6526;
				qualified_name();
				State = 6527;
				Match(RENAME);
				State = 6528;
				Match(TO);
				State = 6529;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6531;
				Match(ALTER);
				State = 6532;
				Match(PROCEDURE);
				State = 6533;
				function_with_argtypes();
				State = 6534;
				Match(RENAME);
				State = 6535;
				Match(TO);
				State = 6536;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6538;
				Match(ALTER);
				State = 6539;
				Match(PUBLICATION);
				State = 6540;
				name();
				State = 6541;
				Match(RENAME);
				State = 6542;
				Match(TO);
				State = 6543;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6545;
				Match(ALTER);
				State = 6546;
				Match(ROUTINE);
				State = 6547;
				function_with_argtypes();
				State = 6548;
				Match(RENAME);
				State = 6549;
				Match(TO);
				State = 6550;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6552;
				Match(ALTER);
				State = 6553;
				Match(SCHEMA);
				State = 6554;
				name();
				State = 6555;
				Match(RENAME);
				State = 6556;
				Match(TO);
				State = 6557;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6559;
				Match(ALTER);
				State = 6560;
				Match(SERVER);
				State = 6561;
				name();
				State = 6562;
				Match(RENAME);
				State = 6563;
				Match(TO);
				State = 6564;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6566;
				Match(ALTER);
				State = 6567;
				Match(SUBSCRIPTION);
				State = 6568;
				name();
				State = 6569;
				Match(RENAME);
				State = 6570;
				Match(TO);
				State = 6571;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6573;
				Match(ALTER);
				State = 6574;
				Match(TABLE);
				State = 6575;
				relation_expr();
				State = 6576;
				Match(RENAME);
				State = 6577;
				Match(TO);
				State = 6578;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6580;
				Match(ALTER);
				State = 6581;
				Match(TABLE);
				State = 6582;
				Match(IF_P);
				State = 6583;
				Match(EXISTS);
				State = 6584;
				relation_expr();
				State = 6585;
				Match(RENAME);
				State = 6586;
				Match(TO);
				State = 6587;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6589;
				Match(ALTER);
				State = 6590;
				Match(SEQUENCE);
				State = 6591;
				qualified_name();
				State = 6592;
				Match(RENAME);
				State = 6593;
				Match(TO);
				State = 6594;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6596;
				Match(ALTER);
				State = 6597;
				Match(SEQUENCE);
				State = 6598;
				Match(IF_P);
				State = 6599;
				Match(EXISTS);
				State = 6600;
				qualified_name();
				State = 6601;
				Match(RENAME);
				State = 6602;
				Match(TO);
				State = 6603;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6605;
				Match(ALTER);
				State = 6606;
				Match(VIEW);
				State = 6607;
				qualified_name();
				State = 6608;
				Match(RENAME);
				State = 6609;
				Match(TO);
				State = 6610;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6612;
				Match(ALTER);
				State = 6613;
				Match(VIEW);
				State = 6614;
				Match(IF_P);
				State = 6615;
				Match(EXISTS);
				State = 6616;
				qualified_name();
				State = 6617;
				Match(RENAME);
				State = 6618;
				Match(TO);
				State = 6619;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6621;
				Match(ALTER);
				State = 6622;
				Match(MATERIALIZED);
				State = 6623;
				Match(VIEW);
				State = 6624;
				qualified_name();
				State = 6625;
				Match(RENAME);
				State = 6626;
				Match(TO);
				State = 6627;
				name();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6629;
				Match(ALTER);
				State = 6630;
				Match(MATERIALIZED);
				State = 6631;
				Match(VIEW);
				State = 6632;
				Match(IF_P);
				State = 6633;
				Match(EXISTS);
				State = 6634;
				qualified_name();
				State = 6635;
				Match(RENAME);
				State = 6636;
				Match(TO);
				State = 6637;
				name();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6639;
				Match(ALTER);
				State = 6640;
				Match(INDEX);
				State = 6641;
				qualified_name();
				State = 6642;
				Match(RENAME);
				State = 6643;
				Match(TO);
				State = 6644;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6646;
				Match(ALTER);
				State = 6647;
				Match(INDEX);
				State = 6648;
				Match(IF_P);
				State = 6649;
				Match(EXISTS);
				State = 6650;
				qualified_name();
				State = 6651;
				Match(RENAME);
				State = 6652;
				Match(TO);
				State = 6653;
				name();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6655;
				Match(ALTER);
				State = 6656;
				Match(FOREIGN);
				State = 6657;
				Match(TABLE);
				State = 6658;
				relation_expr();
				State = 6659;
				Match(RENAME);
				State = 6660;
				Match(TO);
				State = 6661;
				name();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6663;
				Match(ALTER);
				State = 6664;
				Match(FOREIGN);
				State = 6665;
				Match(TABLE);
				State = 6666;
				Match(IF_P);
				State = 6667;
				Match(EXISTS);
				State = 6668;
				relation_expr();
				State = 6669;
				Match(RENAME);
				State = 6670;
				Match(TO);
				State = 6671;
				name();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6673;
				Match(ALTER);
				State = 6674;
				Match(TABLE);
				State = 6675;
				relation_expr();
				State = 6676;
				Match(RENAME);
				State = 6677;
				opt_column();
				State = 6678;
				name();
				State = 6679;
				Match(TO);
				State = 6680;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6682;
				Match(ALTER);
				State = 6683;
				Match(TABLE);
				State = 6684;
				Match(IF_P);
				State = 6685;
				Match(EXISTS);
				State = 6686;
				relation_expr();
				State = 6687;
				Match(RENAME);
				State = 6688;
				opt_column();
				State = 6689;
				name();
				State = 6690;
				Match(TO);
				State = 6691;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6693;
				Match(ALTER);
				State = 6694;
				Match(VIEW);
				State = 6695;
				qualified_name();
				State = 6696;
				Match(RENAME);
				State = 6697;
				opt_column();
				State = 6698;
				name();
				State = 6699;
				Match(TO);
				State = 6700;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6702;
				Match(ALTER);
				State = 6703;
				Match(VIEW);
				State = 6704;
				Match(IF_P);
				State = 6705;
				Match(EXISTS);
				State = 6706;
				qualified_name();
				State = 6707;
				Match(RENAME);
				State = 6708;
				opt_column();
				State = 6709;
				name();
				State = 6710;
				Match(TO);
				State = 6711;
				name();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6713;
				Match(ALTER);
				State = 6714;
				Match(MATERIALIZED);
				State = 6715;
				Match(VIEW);
				State = 6716;
				qualified_name();
				State = 6717;
				Match(RENAME);
				State = 6718;
				opt_column();
				State = 6719;
				name();
				State = 6720;
				Match(TO);
				State = 6721;
				name();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6723;
				Match(ALTER);
				State = 6724;
				Match(MATERIALIZED);
				State = 6725;
				Match(VIEW);
				State = 6726;
				Match(IF_P);
				State = 6727;
				Match(EXISTS);
				State = 6728;
				qualified_name();
				State = 6729;
				Match(RENAME);
				State = 6730;
				opt_column();
				State = 6731;
				name();
				State = 6732;
				Match(TO);
				State = 6733;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6735;
				Match(ALTER);
				State = 6736;
				Match(TABLE);
				State = 6737;
				relation_expr();
				State = 6738;
				Match(RENAME);
				State = 6739;
				Match(CONSTRAINT);
				State = 6740;
				name();
				State = 6741;
				Match(TO);
				State = 6742;
				name();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6744;
				Match(ALTER);
				State = 6745;
				Match(TABLE);
				State = 6746;
				Match(IF_P);
				State = 6747;
				Match(EXISTS);
				State = 6748;
				relation_expr();
				State = 6749;
				Match(RENAME);
				State = 6750;
				Match(CONSTRAINT);
				State = 6751;
				name();
				State = 6752;
				Match(TO);
				State = 6753;
				name();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6755;
				Match(ALTER);
				State = 6756;
				Match(FOREIGN);
				State = 6757;
				Match(TABLE);
				State = 6758;
				relation_expr();
				State = 6759;
				Match(RENAME);
				State = 6760;
				opt_column();
				State = 6761;
				name();
				State = 6762;
				Match(TO);
				State = 6763;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6765;
				Match(ALTER);
				State = 6766;
				Match(FOREIGN);
				State = 6767;
				Match(TABLE);
				State = 6768;
				Match(IF_P);
				State = 6769;
				Match(EXISTS);
				State = 6770;
				relation_expr();
				State = 6771;
				Match(RENAME);
				State = 6772;
				opt_column();
				State = 6773;
				name();
				State = 6774;
				Match(TO);
				State = 6775;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6777;
				Match(ALTER);
				State = 6778;
				Match(RULE);
				State = 6779;
				name();
				State = 6780;
				Match(ON);
				State = 6781;
				qualified_name();
				State = 6782;
				Match(RENAME);
				State = 6783;
				Match(TO);
				State = 6784;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6786;
				Match(ALTER);
				State = 6787;
				Match(TRIGGER);
				State = 6788;
				name();
				State = 6789;
				Match(ON);
				State = 6790;
				qualified_name();
				State = 6791;
				Match(RENAME);
				State = 6792;
				Match(TO);
				State = 6793;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6795;
				Match(ALTER);
				State = 6796;
				Match(EVENT);
				State = 6797;
				Match(TRIGGER);
				State = 6798;
				name();
				State = 6799;
				Match(RENAME);
				State = 6800;
				Match(TO);
				State = 6801;
				name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6803;
				Match(ALTER);
				State = 6804;
				Match(ROLE);
				State = 6805;
				roleid();
				State = 6806;
				Match(RENAME);
				State = 6807;
				Match(TO);
				State = 6808;
				roleid();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6810;
				Match(ALTER);
				State = 6811;
				Match(USER);
				State = 6812;
				roleid();
				State = 6813;
				Match(RENAME);
				State = 6814;
				Match(TO);
				State = 6815;
				roleid();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6817;
				Match(ALTER);
				State = 6818;
				Match(TABLESPACE);
				State = 6819;
				name();
				State = 6820;
				Match(RENAME);
				State = 6821;
				Match(TO);
				State = 6822;
				name();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6824;
				Match(ALTER);
				State = 6825;
				Match(STATISTICS);
				State = 6826;
				any_name();
				State = 6827;
				Match(RENAME);
				State = 6828;
				Match(TO);
				State = 6829;
				name();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6831;
				Match(ALTER);
				State = 6832;
				Match(TEXT_P);
				State = 6833;
				Match(SEARCH);
				State = 6834;
				Match(PARSER);
				State = 6835;
				any_name();
				State = 6836;
				Match(RENAME);
				State = 6837;
				Match(TO);
				State = 6838;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6840;
				Match(ALTER);
				State = 6841;
				Match(TEXT_P);
				State = 6842;
				Match(SEARCH);
				State = 6843;
				Match(DICTIONARY);
				State = 6844;
				any_name();
				State = 6845;
				Match(RENAME);
				State = 6846;
				Match(TO);
				State = 6847;
				name();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6849;
				Match(ALTER);
				State = 6850;
				Match(TEXT_P);
				State = 6851;
				Match(SEARCH);
				State = 6852;
				Match(TEMPLATE);
				State = 6853;
				any_name();
				State = 6854;
				Match(RENAME);
				State = 6855;
				Match(TO);
				State = 6856;
				name();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6858;
				Match(ALTER);
				State = 6859;
				Match(TEXT_P);
				State = 6860;
				Match(SEARCH);
				State = 6861;
				Match(CONFIGURATION);
				State = 6862;
				any_name();
				State = 6863;
				Match(RENAME);
				State = 6864;
				Match(TO);
				State = 6865;
				name();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6867;
				Match(ALTER);
				State = 6868;
				Match(TYPE_P);
				State = 6869;
				any_name();
				State = 6870;
				Match(RENAME);
				State = 6871;
				Match(TO);
				State = 6872;
				name();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 6874;
				Match(ALTER);
				State = 6875;
				Match(TYPE_P);
				State = 6876;
				any_name();
				State = 6877;
				Match(RENAME);
				State = 6878;
				Match(ATTRIBUTE);
				State = 6879;
				name();
				State = 6880;
				Match(TO);
				State = 6881;
				name();
				State = 6882;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_column(this);
		}
	}

	[RuleVersion(0)]
	public Opt_columnContext opt_column() {
		Opt_columnContext _localctx = new Opt_columnContext(Context, State);
		EnterRule(_localctx, 724, RULE_opt_column);
		try {
			State = 6888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6886;
				Match(COLUMN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_set_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_set_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_set_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_set_data(this);
		}
	}

	[RuleVersion(0)]
	public Opt_set_dataContext opt_set_data() {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(Context, State);
		EnterRule(_localctx, 726, RULE_opt_set_data);
		try {
			State = 6893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6890;
				Match(SET);
				State = 6891;
				Match(DATA_P);
				}
				break;
			case TYPE_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectdependsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_noContext opt_no() {
			return GetRuleContext<Opt_noContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectdependsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectdependsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectdependsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectdependsstmtContext alterobjectdependsstmt() {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(Context, State);
		EnterRule(_localctx, 728, RULE_alterobjectdependsstmt);
		try {
			State = 6952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6895;
				Match(ALTER);
				State = 6896;
				Match(FUNCTION);
				State = 6897;
				function_with_argtypes();
				State = 6898;
				opt_no();
				State = 6899;
				Match(DEPENDS);
				State = 6900;
				Match(ON);
				State = 6901;
				Match(EXTENSION);
				State = 6902;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6904;
				Match(ALTER);
				State = 6905;
				Match(PROCEDURE);
				State = 6906;
				function_with_argtypes();
				State = 6907;
				opt_no();
				State = 6908;
				Match(DEPENDS);
				State = 6909;
				Match(ON);
				State = 6910;
				Match(EXTENSION);
				State = 6911;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6913;
				Match(ALTER);
				State = 6914;
				Match(ROUTINE);
				State = 6915;
				function_with_argtypes();
				State = 6916;
				opt_no();
				State = 6917;
				Match(DEPENDS);
				State = 6918;
				Match(ON);
				State = 6919;
				Match(EXTENSION);
				State = 6920;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6922;
				Match(ALTER);
				State = 6923;
				Match(TRIGGER);
				State = 6924;
				name();
				State = 6925;
				Match(ON);
				State = 6926;
				qualified_name();
				State = 6927;
				opt_no();
				State = 6928;
				Match(DEPENDS);
				State = 6929;
				Match(ON);
				State = 6930;
				Match(EXTENSION);
				State = 6931;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6933;
				Match(ALTER);
				State = 6934;
				Match(MATERIALIZED);
				State = 6935;
				Match(VIEW);
				State = 6936;
				qualified_name();
				State = 6937;
				opt_no();
				State = 6938;
				Match(DEPENDS);
				State = 6939;
				Match(ON);
				State = 6940;
				Match(EXTENSION);
				State = 6941;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6943;
				Match(ALTER);
				State = 6944;
				Match(INDEX);
				State = 6945;
				qualified_name();
				State = 6946;
				opt_no();
				State = 6947;
				Match(DEPENDS);
				State = 6948;
				Match(ON);
				State = 6949;
				Match(EXTENSION);
				State = 6950;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_noContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_no; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_no(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_no(this);
		}
	}

	[RuleVersion(0)]
	public Opt_noContext opt_no() {
		Opt_noContext _localctx = new Opt_noContext(Context, State);
		EnterRule(_localctx, 730, RULE_opt_no);
		try {
			State = 6956;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6954;
				Match(NO);
				}
				break;
			case DEPENDS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectschemastmtContext alterobjectschemastmt() {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(Context, State);
		EnterRule(_localctx, 732, RULE_alterobjectschemastmt);
		try {
			State = 7175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6958;
				Match(ALTER);
				State = 6959;
				Match(AGGREGATE);
				State = 6960;
				aggregate_with_argtypes();
				State = 6961;
				Match(SET);
				State = 6962;
				Match(SCHEMA);
				State = 6963;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6965;
				Match(ALTER);
				State = 6966;
				Match(COLLATION);
				State = 6967;
				any_name();
				State = 6968;
				Match(SET);
				State = 6969;
				Match(SCHEMA);
				State = 6970;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6972;
				Match(ALTER);
				State = 6973;
				Match(CONVERSION_P);
				State = 6974;
				any_name();
				State = 6975;
				Match(SET);
				State = 6976;
				Match(SCHEMA);
				State = 6977;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6979;
				Match(ALTER);
				State = 6980;
				Match(DOMAIN_P);
				State = 6981;
				any_name();
				State = 6982;
				Match(SET);
				State = 6983;
				Match(SCHEMA);
				State = 6984;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6986;
				Match(ALTER);
				State = 6987;
				Match(EXTENSION);
				State = 6988;
				name();
				State = 6989;
				Match(SET);
				State = 6990;
				Match(SCHEMA);
				State = 6991;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6993;
				Match(ALTER);
				State = 6994;
				Match(FUNCTION);
				State = 6995;
				function_with_argtypes();
				State = 6996;
				Match(SET);
				State = 6997;
				Match(SCHEMA);
				State = 6998;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7000;
				Match(ALTER);
				State = 7001;
				Match(OPERATOR);
				State = 7002;
				operator_with_argtypes();
				State = 7003;
				Match(SET);
				State = 7004;
				Match(SCHEMA);
				State = 7005;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7007;
				Match(ALTER);
				State = 7008;
				Match(OPERATOR);
				State = 7009;
				Match(CLASS);
				State = 7010;
				any_name();
				State = 7011;
				Match(USING);
				State = 7012;
				name();
				State = 7013;
				Match(SET);
				State = 7014;
				Match(SCHEMA);
				State = 7015;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7017;
				Match(ALTER);
				State = 7018;
				Match(OPERATOR);
				State = 7019;
				Match(FAMILY);
				State = 7020;
				any_name();
				State = 7021;
				Match(USING);
				State = 7022;
				name();
				State = 7023;
				Match(SET);
				State = 7024;
				Match(SCHEMA);
				State = 7025;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7027;
				Match(ALTER);
				State = 7028;
				Match(PROCEDURE);
				State = 7029;
				function_with_argtypes();
				State = 7030;
				Match(SET);
				State = 7031;
				Match(SCHEMA);
				State = 7032;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7034;
				Match(ALTER);
				State = 7035;
				Match(ROUTINE);
				State = 7036;
				function_with_argtypes();
				State = 7037;
				Match(SET);
				State = 7038;
				Match(SCHEMA);
				State = 7039;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7041;
				Match(ALTER);
				State = 7042;
				Match(TABLE);
				State = 7043;
				relation_expr();
				State = 7044;
				Match(SET);
				State = 7045;
				Match(SCHEMA);
				State = 7046;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7048;
				Match(ALTER);
				State = 7049;
				Match(TABLE);
				State = 7050;
				Match(IF_P);
				State = 7051;
				Match(EXISTS);
				State = 7052;
				relation_expr();
				State = 7053;
				Match(SET);
				State = 7054;
				Match(SCHEMA);
				State = 7055;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7057;
				Match(ALTER);
				State = 7058;
				Match(STATISTICS);
				State = 7059;
				any_name();
				State = 7060;
				Match(SET);
				State = 7061;
				Match(SCHEMA);
				State = 7062;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7064;
				Match(ALTER);
				State = 7065;
				Match(TEXT_P);
				State = 7066;
				Match(SEARCH);
				State = 7067;
				Match(PARSER);
				State = 7068;
				any_name();
				State = 7069;
				Match(SET);
				State = 7070;
				Match(SCHEMA);
				State = 7071;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7073;
				Match(ALTER);
				State = 7074;
				Match(TEXT_P);
				State = 7075;
				Match(SEARCH);
				State = 7076;
				Match(DICTIONARY);
				State = 7077;
				any_name();
				State = 7078;
				Match(SET);
				State = 7079;
				Match(SCHEMA);
				State = 7080;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7082;
				Match(ALTER);
				State = 7083;
				Match(TEXT_P);
				State = 7084;
				Match(SEARCH);
				State = 7085;
				Match(TEMPLATE);
				State = 7086;
				any_name();
				State = 7087;
				Match(SET);
				State = 7088;
				Match(SCHEMA);
				State = 7089;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7091;
				Match(ALTER);
				State = 7092;
				Match(TEXT_P);
				State = 7093;
				Match(SEARCH);
				State = 7094;
				Match(CONFIGURATION);
				State = 7095;
				any_name();
				State = 7096;
				Match(SET);
				State = 7097;
				Match(SCHEMA);
				State = 7098;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7100;
				Match(ALTER);
				State = 7101;
				Match(SEQUENCE);
				State = 7102;
				qualified_name();
				State = 7103;
				Match(SET);
				State = 7104;
				Match(SCHEMA);
				State = 7105;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7107;
				Match(ALTER);
				State = 7108;
				Match(SEQUENCE);
				State = 7109;
				Match(IF_P);
				State = 7110;
				Match(EXISTS);
				State = 7111;
				qualified_name();
				State = 7112;
				Match(SET);
				State = 7113;
				Match(SCHEMA);
				State = 7114;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7116;
				Match(ALTER);
				State = 7117;
				Match(VIEW);
				State = 7118;
				qualified_name();
				State = 7119;
				Match(SET);
				State = 7120;
				Match(SCHEMA);
				State = 7121;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7123;
				Match(ALTER);
				State = 7124;
				Match(VIEW);
				State = 7125;
				Match(IF_P);
				State = 7126;
				Match(EXISTS);
				State = 7127;
				qualified_name();
				State = 7128;
				Match(SET);
				State = 7129;
				Match(SCHEMA);
				State = 7130;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7132;
				Match(ALTER);
				State = 7133;
				Match(MATERIALIZED);
				State = 7134;
				Match(VIEW);
				State = 7135;
				qualified_name();
				State = 7136;
				Match(SET);
				State = 7137;
				Match(SCHEMA);
				State = 7138;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7140;
				Match(ALTER);
				State = 7141;
				Match(MATERIALIZED);
				State = 7142;
				Match(VIEW);
				State = 7143;
				Match(IF_P);
				State = 7144;
				Match(EXISTS);
				State = 7145;
				qualified_name();
				State = 7146;
				Match(SET);
				State = 7147;
				Match(SCHEMA);
				State = 7148;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7150;
				Match(ALTER);
				State = 7151;
				Match(FOREIGN);
				State = 7152;
				Match(TABLE);
				State = 7153;
				relation_expr();
				State = 7154;
				Match(SET);
				State = 7155;
				Match(SCHEMA);
				State = 7156;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 7158;
				Match(ALTER);
				State = 7159;
				Match(FOREIGN);
				State = 7160;
				Match(TABLE);
				State = 7161;
				Match(IF_P);
				State = 7162;
				Match(EXISTS);
				State = 7163;
				relation_expr();
				State = 7164;
				Match(SET);
				State = 7165;
				Match(SCHEMA);
				State = 7166;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 7168;
				Match(ALTER);
				State = 7169;
				Match(TYPE_P);
				State = 7170;
				any_name();
				State = 7171;
				Match(SET);
				State = 7172;
				Match(SCHEMA);
				State = 7173;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroperatorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroperatorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroperatorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroperatorstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteroperatorstmtContext alteroperatorstmt() {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(Context, State);
		EnterRule(_localctx, 734, RULE_alteroperatorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7177;
			Match(ALTER);
			State = 7178;
			Match(OPERATOR);
			State = 7179;
			operator_with_argtypes();
			State = 7180;
			Match(SET);
			State = 7181;
			Match(OPEN_PAREN);
			State = 7182;
			operator_def_list(0);
			State = 7183;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext operator_def_elem() {
			return GetRuleContext<Operator_def_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Operator_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_listContext operator_def_list() {
		return operator_def_list(0);
	}

	private Operator_def_listContext operator_def_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Operator_def_listContext _localctx = new Operator_def_listContext(Context, _parentState);
		Operator_def_listContext _prevctx = _localctx;
		int _startState = 736;
		EnterRecursionRule(_localctx, 736, RULE_operator_def_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 7186;
			operator_def_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Operator_def_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_operator_def_list);
					State = 7188;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 7189;
					Match(COMMA);
					State = 7190;
					operator_def_elem();
					}
					} 
				}
				State = 7195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Operator_def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_argContext operator_def_arg() {
			return GetRuleContext<Operator_def_argContext>(0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_elem(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_elemContext operator_def_elem() {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(Context, State);
		EnterRule(_localctx, 738, RULE_operator_def_elem);
		try {
			State = 7204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7196;
				collabel();
				State = 7197;
				Match(EQUAL);
				State = 7198;
				Match(NONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7200;
				collabel();
				State = 7201;
				Match(EQUAL);
				State = 7202;
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_arg(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_argContext operator_def_arg() {
		Operator_def_argContext _localctx = new Operator_def_argContext(Context, State);
		EnterRule(_localctx, 740, RULE_operator_def_arg);
		try {
			State = 7211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7206;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7207;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7208;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7209;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7210;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertypestmtContext altertypestmt() {
		AltertypestmtContext _localctx = new AltertypestmtContext(Context, State);
		EnterRule(_localctx, 742, RULE_altertypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7213;
			Match(ALTER);
			State = 7214;
			Match(TYPE_P);
			State = 7215;
			any_name();
			State = 7216;
			Match(SET);
			State = 7217;
			Match(OPEN_PAREN);
			State = 7218;
			operator_def_list(0);
			State = 7219;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterownerstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterownerstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterownerstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterownerstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterownerstmtContext alterownerstmt() {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(Context, State);
		EnterRule(_localctx, 744, RULE_alterownerstmt);
		try {
			State = 7404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7221;
				Match(ALTER);
				State = 7222;
				Match(AGGREGATE);
				State = 7223;
				aggregate_with_argtypes();
				State = 7224;
				Match(OWNER);
				State = 7225;
				Match(TO);
				State = 7226;
				rolespec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7228;
				Match(ALTER);
				State = 7229;
				Match(COLLATION);
				State = 7230;
				any_name();
				State = 7231;
				Match(OWNER);
				State = 7232;
				Match(TO);
				State = 7233;
				rolespec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7235;
				Match(ALTER);
				State = 7236;
				Match(CONVERSION_P);
				State = 7237;
				any_name();
				State = 7238;
				Match(OWNER);
				State = 7239;
				Match(TO);
				State = 7240;
				rolespec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7242;
				Match(ALTER);
				State = 7243;
				Match(DATABASE);
				State = 7244;
				name();
				State = 7245;
				Match(OWNER);
				State = 7246;
				Match(TO);
				State = 7247;
				rolespec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7249;
				Match(ALTER);
				State = 7250;
				Match(DOMAIN_P);
				State = 7251;
				any_name();
				State = 7252;
				Match(OWNER);
				State = 7253;
				Match(TO);
				State = 7254;
				rolespec();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7256;
				Match(ALTER);
				State = 7257;
				Match(FUNCTION);
				State = 7258;
				function_with_argtypes();
				State = 7259;
				Match(OWNER);
				State = 7260;
				Match(TO);
				State = 7261;
				rolespec();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7263;
				Match(ALTER);
				State = 7264;
				opt_procedural();
				State = 7265;
				Match(LANGUAGE);
				State = 7266;
				name();
				State = 7267;
				Match(OWNER);
				State = 7268;
				Match(TO);
				State = 7269;
				rolespec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7271;
				Match(ALTER);
				State = 7272;
				Match(LARGE_P);
				State = 7273;
				Match(OBJECT_P);
				State = 7274;
				numericonly();
				State = 7275;
				Match(OWNER);
				State = 7276;
				Match(TO);
				State = 7277;
				rolespec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7279;
				Match(ALTER);
				State = 7280;
				Match(OPERATOR);
				State = 7281;
				operator_with_argtypes();
				State = 7282;
				Match(OWNER);
				State = 7283;
				Match(TO);
				State = 7284;
				rolespec();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7286;
				Match(ALTER);
				State = 7287;
				Match(OPERATOR);
				State = 7288;
				Match(CLASS);
				State = 7289;
				any_name();
				State = 7290;
				Match(USING);
				State = 7291;
				name();
				State = 7292;
				Match(OWNER);
				State = 7293;
				Match(TO);
				State = 7294;
				rolespec();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7296;
				Match(ALTER);
				State = 7297;
				Match(OPERATOR);
				State = 7298;
				Match(FAMILY);
				State = 7299;
				any_name();
				State = 7300;
				Match(USING);
				State = 7301;
				name();
				State = 7302;
				Match(OWNER);
				State = 7303;
				Match(TO);
				State = 7304;
				rolespec();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7306;
				Match(ALTER);
				State = 7307;
				Match(PROCEDURE);
				State = 7308;
				function_with_argtypes();
				State = 7309;
				Match(OWNER);
				State = 7310;
				Match(TO);
				State = 7311;
				rolespec();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7313;
				Match(ALTER);
				State = 7314;
				Match(ROUTINE);
				State = 7315;
				function_with_argtypes();
				State = 7316;
				Match(OWNER);
				State = 7317;
				Match(TO);
				State = 7318;
				rolespec();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7320;
				Match(ALTER);
				State = 7321;
				Match(SCHEMA);
				State = 7322;
				name();
				State = 7323;
				Match(OWNER);
				State = 7324;
				Match(TO);
				State = 7325;
				rolespec();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7327;
				Match(ALTER);
				State = 7328;
				Match(TYPE_P);
				State = 7329;
				any_name();
				State = 7330;
				Match(OWNER);
				State = 7331;
				Match(TO);
				State = 7332;
				rolespec();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7334;
				Match(ALTER);
				State = 7335;
				Match(TABLESPACE);
				State = 7336;
				name();
				State = 7337;
				Match(OWNER);
				State = 7338;
				Match(TO);
				State = 7339;
				rolespec();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7341;
				Match(ALTER);
				State = 7342;
				Match(STATISTICS);
				State = 7343;
				any_name();
				State = 7344;
				Match(OWNER);
				State = 7345;
				Match(TO);
				State = 7346;
				rolespec();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7348;
				Match(ALTER);
				State = 7349;
				Match(TEXT_P);
				State = 7350;
				Match(SEARCH);
				State = 7351;
				Match(DICTIONARY);
				State = 7352;
				any_name();
				State = 7353;
				Match(OWNER);
				State = 7354;
				Match(TO);
				State = 7355;
				rolespec();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7357;
				Match(ALTER);
				State = 7358;
				Match(TEXT_P);
				State = 7359;
				Match(SEARCH);
				State = 7360;
				Match(CONFIGURATION);
				State = 7361;
				any_name();
				State = 7362;
				Match(OWNER);
				State = 7363;
				Match(TO);
				State = 7364;
				rolespec();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7366;
				Match(ALTER);
				State = 7367;
				Match(FOREIGN);
				State = 7368;
				Match(DATA_P);
				State = 7369;
				Match(WRAPPER);
				State = 7370;
				name();
				State = 7371;
				Match(OWNER);
				State = 7372;
				Match(TO);
				State = 7373;
				rolespec();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7375;
				Match(ALTER);
				State = 7376;
				Match(SERVER);
				State = 7377;
				name();
				State = 7378;
				Match(OWNER);
				State = 7379;
				Match(TO);
				State = 7380;
				rolespec();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7382;
				Match(ALTER);
				State = 7383;
				Match(EVENT);
				State = 7384;
				Match(TRIGGER);
				State = 7385;
				name();
				State = 7386;
				Match(OWNER);
				State = 7387;
				Match(TO);
				State = 7388;
				rolespec();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7390;
				Match(ALTER);
				State = 7391;
				Match(PUBLICATION);
				State = 7392;
				name();
				State = 7393;
				Match(OWNER);
				State = 7394;
				Match(TO);
				State = 7395;
				rolespec();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7397;
				Match(ALTER);
				State = 7398;
				Match(SUBSCRIPTION);
				State = 7399;
				name();
				State = 7400;
				Match(OWNER);
				State = 7401;
				Match(TO);
				State = 7402;
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return GetRuleContext<Opt_publication_for_tablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepublicationstmtContext createpublicationstmt() {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(Context, State);
		EnterRule(_localctx, 746, RULE_createpublicationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7406;
			Match(CREATE);
			State = 7407;
			Match(PUBLICATION);
			State = 7408;
			name();
			State = 7409;
			opt_publication_for_tables();
			State = 7410;
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_for_tablesContext publication_for_tables() {
			return GetRuleContext<Publication_for_tablesContext>(0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_publication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_publication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Opt_publication_for_tablesContext opt_publication_for_tables() {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 748, RULE_opt_publication_for_tables);
		try {
			State = 7414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7412;
				publication_for_tables();
				}
				break;
			case SEMI:
			case INTO:
			case WITH:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Publication_for_tablesContext publication_for_tables() {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 750, RULE_publication_for_tables);
		try {
			State = 7422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7416;
				Match(FOR);
				State = 7417;
				Match(TABLE);
				State = 7418;
				relation_expr_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7419;
				Match(FOR);
				State = 7420;
				Match(ALL);
				State = 7421;
				Match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpublicationstmtContext alterpublicationstmt() {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(Context, State);
		EnterRule(_localctx, 752, RULE_alterpublicationstmt);
		try {
			State = 7451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7424;
				Match(ALTER);
				State = 7425;
				Match(PUBLICATION);
				State = 7426;
				name();
				State = 7427;
				Match(SET);
				State = 7428;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7430;
				Match(ALTER);
				State = 7431;
				Match(PUBLICATION);
				State = 7432;
				name();
				State = 7433;
				Match(ADD_P);
				State = 7434;
				Match(TABLE);
				State = 7435;
				relation_expr_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7437;
				Match(ALTER);
				State = 7438;
				Match(PUBLICATION);
				State = 7439;
				name();
				State = 7440;
				Match(SET);
				State = 7441;
				Match(TABLE);
				State = 7442;
				relation_expr_list(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7444;
				Match(ALTER);
				State = 7445;
				Match(PUBLICATION);
				State = 7446;
				name();
				State = 7447;
				Match(DROP);
				State = 7448;
				Match(TABLE);
				State = 7449;
				relation_expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatesubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatesubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatesubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatesubscriptionstmtContext createsubscriptionstmt() {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 754, RULE_createsubscriptionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7453;
			Match(CREATE);
			State = 7454;
			Match(SUBSCRIPTION);
			State = 7455;
			name();
			State = 7456;
			Match(CONNECTION);
			State = 7457;
			sconst();
			State = 7458;
			Match(PUBLICATION);
			State = 7459;
			publication_name_list(0);
			State = 7460;
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext publication_name_item() {
			return GetRuleContext<Publication_name_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Publication_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_listContext publication_name_list() {
		return publication_name_list(0);
	}

	private Publication_name_listContext publication_name_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Publication_name_listContext _localctx = new Publication_name_listContext(Context, _parentState);
		Publication_name_listContext _prevctx = _localctx;
		int _startState = 756;
		EnterRecursionRule(_localctx, 756, RULE_publication_name_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 7463;
			publication_name_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7470;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Publication_name_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_publication_name_list);
					State = 7465;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 7466;
					Match(COMMA);
					State = 7467;
					publication_name_item();
					}
					} 
				}
				State = 7472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Publication_name_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_item(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_itemContext publication_name_item() {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(Context, State);
		EnterRule(_localctx, 758, RULE_publication_name_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7473;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersubscriptionstmtContext altersubscriptionstmt() {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 760, RULE_altersubscriptionstmt);
		try {
			State = 7512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7475;
				Match(ALTER);
				State = 7476;
				Match(SUBSCRIPTION);
				State = 7477;
				name();
				State = 7478;
				Match(SET);
				State = 7479;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7481;
				Match(ALTER);
				State = 7482;
				Match(SUBSCRIPTION);
				State = 7483;
				name();
				State = 7484;
				Match(CONNECTION);
				State = 7485;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7487;
				Match(ALTER);
				State = 7488;
				Match(SUBSCRIPTION);
				State = 7489;
				name();
				State = 7490;
				Match(REFRESH);
				State = 7491;
				Match(PUBLICATION);
				State = 7492;
				opt_definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7494;
				Match(ALTER);
				State = 7495;
				Match(SUBSCRIPTION);
				State = 7496;
				name();
				State = 7497;
				Match(SET);
				State = 7498;
				Match(PUBLICATION);
				State = 7499;
				publication_name_list(0);
				State = 7500;
				opt_definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7502;
				Match(ALTER);
				State = 7503;
				Match(SUBSCRIPTION);
				State = 7504;
				name();
				State = 7505;
				Match(ENABLE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7507;
				Match(ALTER);
				State = 7508;
				Match(SUBSCRIPTION);
				State = 7509;
				name();
				State = 7510;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropsubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropsubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropsubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropsubscriptionstmtContext dropsubscriptionstmt() {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 762, RULE_dropsubscriptionstmt);
		try {
			State = 7526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7514;
				Match(DROP);
				State = 7515;
				Match(SUBSCRIPTION);
				State = 7516;
				name();
				State = 7517;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7519;
				Match(DROP);
				State = 7520;
				Match(SUBSCRIPTION);
				State = 7521;
				Match(IF_P);
				State = 7522;
				Match(EXISTS);
				State = 7523;
				name();
				State = 7524;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_insteadContext opt_instead() {
			return GetRuleContext<Opt_insteadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionlistContext ruleactionlist() {
			return GetRuleContext<RuleactionlistContext>(0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRulestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRulestmt(this);
		}
	}

	[RuleVersion(0)]
	public RulestmtContext rulestmt() {
		RulestmtContext _localctx = new RulestmtContext(Context, State);
		EnterRule(_localctx, 764, RULE_rulestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7528;
			Match(CREATE);
			State = 7529;
			opt_or_replace();
			State = 7530;
			Match(RULE);
			State = 7531;
			name();
			State = 7532;
			Match(AS);
			State = 7533;
			Match(ON);
			State = 7534;
			@event();
			State = 7535;
			Match(TO);
			State = 7536;
			qualified_name();
			State = 7537;
			where_clause();
			State = 7538;
			Match(DO);
			State = 7539;
			opt_instead();
			State = 7540;
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionmultiContext ruleactionmulti() {
			return GetRuleContext<RuleactionmultiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionlist(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionlistContext ruleactionlist() {
		RuleactionlistContext _localctx = new RuleactionlistContext(Context, State);
		EnterRule(_localctx, 766, RULE_ruleactionlist);
		try {
			State = 7548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7542;
				Match(NOTHING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7543;
				ruleactionstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7544;
				Match(OPEN_PAREN);
				State = 7545;
				ruleactionmulti(0);
				State = 7546;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() {
			return GetRuleContext<RuleactionstmtOrEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionmultiContext ruleactionmulti() {
			return GetRuleContext<RuleactionmultiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionmulti(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionmultiContext ruleactionmulti() {
		return ruleactionmulti(0);
	}

	private RuleactionmultiContext ruleactionmulti(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RuleactionmultiContext _localctx = new RuleactionmultiContext(Context, _parentState);
		RuleactionmultiContext _prevctx = _localctx;
		int _startState = 768;
		EnterRecursionRule(_localctx, 768, RULE_ruleactionmulti, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 7551;
			ruleactionstmtOrEmpty();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RuleactionmultiContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ruleactionmulti);
					State = 7553;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 7554;
					Match(SEMI);
					State = 7555;
					ruleactionstmtOrEmpty();
					}
					} 
				}
				State = 7560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RuleactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtContext ruleactionstmt() {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(Context, State);
		EnterRule(_localctx, 770, RULE_ruleactionstmt);
		try {
			State = 7566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7561;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7562;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7563;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7564;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7565;
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtOrEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmtOrEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmtOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmtOrEmpty(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(Context, State);
		EnterRule(_localctx, 772, RULE_ruleactionstmtOrEmpty);
		try {
			State = 7570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7568;
				ruleactionstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 774, RULE_event);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7572;
			_la = TokenStream.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_insteadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_instead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_instead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_instead(this);
		}
	}

	[RuleVersion(0)]
	public Opt_insteadContext opt_instead() {
		Opt_insteadContext _localctx = new Opt_insteadContext(Context, State);
		EnterRule(_localctx, 776, RULE_opt_instead);
		try {
			State = 7577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSTEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7574;
				Match(INSTEAD);
				}
				break;
			case ALSO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7575;
				Match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotifystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notify_payloadContext notify_payload() {
			return GetRuleContext<Notify_payloadContext>(0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notifystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotifystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotifystmt(this);
		}
	}

	[RuleVersion(0)]
	public NotifystmtContext notifystmt() {
		NotifystmtContext _localctx = new NotifystmtContext(Context, State);
		EnterRule(_localctx, 778, RULE_notifystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7579;
			Match(NOTIFY);
			State = 7580;
			colid();
			State = 7581;
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notify_payloadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notify_payload; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotify_payload(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotify_payload(this);
		}
	}

	[RuleVersion(0)]
	public Notify_payloadContext notify_payload() {
		Notify_payloadContext _localctx = new Notify_payloadContext(Context, State);
		EnterRule(_localctx, 780, RULE_notify_payload);
		try {
			State = 7586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7583;
				Match(COMMA);
				State = 7584;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterListenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitListenstmt(this);
		}
	}

	[RuleVersion(0)]
	public ListenstmtContext listenstmt() {
		ListenstmtContext _localctx = new ListenstmtContext(Context, State);
		EnterRule(_localctx, 782, RULE_listenstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7588;
			Match(LISTEN);
			State = 7589;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlistenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlistenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnlistenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnlistenstmt(this);
		}
	}

	[RuleVersion(0)]
	public UnlistenstmtContext unlistenstmt() {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(Context, State);
		EnterRule(_localctx, 784, RULE_unlistenstmt);
		try {
			State = 7595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7591;
				Match(UNLISTEN);
				State = 7592;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7593;
				Match(UNLISTEN);
				State = 7594;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_transactionContext opt_transaction() {
			return GetRuleContext<Opt_transactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_transaction_chainContext opt_transaction_chain() {
			return GetRuleContext<Opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return GetRuleContext<Transaction_mode_list_or_emptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public TransactionstmtContext transactionstmt() {
		TransactionstmtContext _localctx = new TransactionstmtContext(Context, State);
		EnterRule(_localctx, 786, RULE_transactionstmt);
		try {
			State = 7647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7597;
				Match(ABORT_P);
				State = 7598;
				opt_transaction();
				State = 7599;
				opt_transaction_chain();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7601;
				Match(BEGIN_P);
				State = 7602;
				opt_transaction();
				State = 7603;
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7605;
				Match(START);
				State = 7606;
				Match(TRANSACTION);
				State = 7607;
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7608;
				Match(COMMIT);
				State = 7609;
				opt_transaction();
				State = 7610;
				opt_transaction_chain();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7612;
				Match(END_P);
				State = 7613;
				opt_transaction();
				State = 7614;
				opt_transaction_chain();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7616;
				Match(ROLLBACK);
				State = 7617;
				opt_transaction();
				State = 7618;
				opt_transaction_chain();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7620;
				Match(SAVEPOINT);
				State = 7621;
				colid();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7622;
				Match(RELEASE);
				State = 7623;
				Match(SAVEPOINT);
				State = 7624;
				colid();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7625;
				Match(RELEASE);
				State = 7626;
				colid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7627;
				Match(ROLLBACK);
				State = 7628;
				opt_transaction();
				State = 7629;
				Match(TO);
				State = 7630;
				Match(SAVEPOINT);
				State = 7631;
				colid();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7633;
				Match(ROLLBACK);
				State = 7634;
				opt_transaction();
				State = 7635;
				Match(TO);
				State = 7636;
				colid();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7638;
				Match(PREPARE);
				State = 7639;
				Match(TRANSACTION);
				State = 7640;
				sconst();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7641;
				Match(COMMIT);
				State = 7642;
				Match(PREPARED);
				State = 7643;
				sconst();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7644;
				Match(ROLLBACK);
				State = 7645;
				Match(PREPARED);
				State = 7646;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_transactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_transaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_transaction(this);
		}
	}

	[RuleVersion(0)]
	public Opt_transactionContext opt_transaction() {
		Opt_transactionContext _localctx = new Opt_transactionContext(Context, State);
		EnterRule(_localctx, 788, RULE_opt_transaction);
		try {
			State = 7652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7649;
				Match(WORK);
				}
				break;
			case TRANSACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7650;
				Match(TRANSACTION);
				}
				break;
			case SEMI:
			case AND:
			case DEFERRABLE:
			case INTO:
			case NOT:
			case TO:
			case ISOLATION:
			case READ:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iso_levelContext iso_level() {
			return GetRuleContext<Iso_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_item(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_itemContext transaction_mode_item() {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(Context, State);
		EnterRule(_localctx, 790, RULE_transaction_mode_item);
		try {
			State = 7664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7654;
				Match(ISOLATION);
				State = 7655;
				Match(LEVEL);
				State = 7656;
				iso_level();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7657;
				Match(READ);
				State = 7658;
				Match(ONLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7659;
				Match(READ);
				State = 7660;
				Match(WRITE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7661;
				Match(DEFERRABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7662;
				Match(NOT);
				State = 7663;
				Match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext transaction_mode_item() {
			return GetRuleContext<Transaction_mode_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_listContext transaction_mode_list() {
		return transaction_mode_list(0);
	}

	private Transaction_mode_listContext transaction_mode_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(Context, _parentState);
		Transaction_mode_listContext _prevctx = _localctx;
		int _startState = 792;
		EnterRecursionRule(_localctx, 792, RULE_transaction_mode_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 7667;
			transaction_mode_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7674;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
					case 1:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						State = 7669;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 7670;
						Match(COMMA);
						State = 7671;
						transaction_mode_item();
						}
						break;
					case 2:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						State = 7672;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 7673;
						transaction_mode_item();
						}
						break;
					}
					} 
				}
				State = 7678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Transaction_mode_list_or_emptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list_or_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list_or_empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list_or_empty(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(Context, State);
		EnterRule(_localctx, 794, RULE_transaction_mode_list_or_empty);
		try {
			State = 7681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7679;
				transaction_mode_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_transaction_chainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_transaction_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_transaction_chain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_transaction_chain(this);
		}
	}

	[RuleVersion(0)]
	public Opt_transaction_chainContext opt_transaction_chain() {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(Context, State);
		EnterRule(_localctx, 796, RULE_opt_transaction_chain);
		try {
			State = 7689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7683;
				Match(AND);
				State = 7684;
				Match(CHAIN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7685;
				Match(AND);
				State = 7686;
				Match(NO);
				State = 7687;
				Match(CHAIN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_check_optionContext opt_check_option() {
			return GetRuleContext<Opt_check_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterViewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitViewstmt(this);
		}
	}

	[RuleVersion(0)]
	public ViewstmtContext viewstmt() {
		ViewstmtContext _localctx = new ViewstmtContext(Context, State);
		EnterRule(_localctx, 798, RULE_viewstmt);
		try {
			State = 7741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7691;
				Match(CREATE);
				State = 7692;
				opttemp();
				State = 7693;
				Match(VIEW);
				State = 7694;
				qualified_name();
				State = 7695;
				opt_column_list();
				State = 7696;
				opt_reloptions();
				State = 7697;
				Match(AS);
				State = 7698;
				selectstmt();
				State = 7699;
				opt_check_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7701;
				Match(CREATE);
				State = 7702;
				Match(OR);
				State = 7703;
				Match(REPLACE);
				State = 7704;
				opttemp();
				State = 7705;
				Match(VIEW);
				State = 7706;
				qualified_name();
				State = 7707;
				opt_column_list();
				State = 7708;
				opt_reloptions();
				State = 7709;
				Match(AS);
				State = 7710;
				selectstmt();
				State = 7711;
				opt_check_option();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7713;
				Match(CREATE);
				State = 7714;
				opttemp();
				State = 7715;
				Match(RECURSIVE);
				State = 7716;
				Match(VIEW);
				State = 7717;
				qualified_name();
				State = 7718;
				Match(OPEN_PAREN);
				State = 7719;
				columnlist(0);
				State = 7720;
				Match(CLOSE_PAREN);
				State = 7721;
				opt_reloptions();
				State = 7722;
				Match(AS);
				State = 7723;
				selectstmt();
				State = 7724;
				opt_check_option();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7726;
				Match(CREATE);
				State = 7727;
				Match(OR);
				State = 7728;
				Match(REPLACE);
				State = 7729;
				opttemp();
				State = 7730;
				Match(RECURSIVE);
				State = 7731;
				Match(VIEW);
				State = 7732;
				qualified_name();
				State = 7733;
				Match(OPEN_PAREN);
				State = 7734;
				columnlist(0);
				State = 7735;
				Match(CLOSE_PAREN);
				State = 7736;
				opt_reloptions();
				State = 7737;
				Match(AS);
				State = 7738;
				selectstmt();
				State = 7739;
				opt_check_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_check_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_check_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_check_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_check_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_check_optionContext opt_check_option() {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(Context, State);
		EnterRule(_localctx, 800, RULE_opt_check_option);
		try {
			State = 7755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7743;
				Match(WITH);
				State = 7744;
				Match(CHECK);
				State = 7745;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7746;
				Match(WITH);
				State = 7747;
				Match(CASCADED);
				State = 7748;
				Match(CHECK);
				State = 7749;
				Match(OPTION);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7750;
				Match(WITH);
				State = 7751;
				Match(LOCAL);
				State = 7752;
				Match(CHECK);
				State = 7753;
				Match(OPTION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_nameContext file_name() {
			return GetRuleContext<File_nameContext>(0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoadstmt(this);
		}
	}

	[RuleVersion(0)]
	public LoadstmtContext loadstmt() {
		LoadstmtContext _localctx = new LoadstmtContext(Context, State);
		EnterRule(_localctx, 802, RULE_loadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7757;
			Match(LOAD);
			State = 7758;
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedbstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedbstmtContext createdbstmt() {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(Context, State);
		EnterRule(_localctx, 804, RULE_createdbstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7760;
			Match(CREATE);
			State = 7761;
			Match(DATABASE);
			State = 7762;
			name();
			State = 7763;
			opt_with();
			State = 7764;
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemsContext createdb_opt_items() {
			return GetRuleContext<Createdb_opt_itemsContext>(0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_listContext createdb_opt_list() {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(Context, State);
		EnterRule(_localctx, 806, RULE_createdb_opt_list);
		try {
			State = 7768;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCODING:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case LOCATION:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case OWNER:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TABLESPACE:
			case TEMPLATE:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7766;
				createdb_opt_items(0);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext createdb_opt_item() {
			return GetRuleContext<Createdb_opt_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemsContext createdb_opt_items() {
			return GetRuleContext<Createdb_opt_itemsContext>(0);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_items(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemsContext createdb_opt_items() {
		return createdb_opt_items(0);
	}

	private Createdb_opt_itemsContext createdb_opt_items(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(Context, _parentState);
		Createdb_opt_itemsContext _prevctx = _localctx;
		int _startState = 808;
		EnterRecursionRule(_localctx, 808, RULE_createdb_opt_items, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 7771;
			createdb_opt_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7777;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,315,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createdb_opt_itemsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_createdb_opt_items);
					State = 7773;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 7774;
					createdb_opt_item();
					}
					} 
				}
				State = 7779;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,315,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_nameContext createdb_opt_name() {
			return GetRuleContext<Createdb_opt_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_equalContext opt_equal() {
			return GetRuleContext<Opt_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemContext createdb_opt_item() {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(Context, State);
		EnterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			State = 7792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7780;
				createdb_opt_name();
				State = 7781;
				opt_equal();
				State = 7782;
				signediconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7784;
				createdb_opt_name();
				State = 7785;
				opt_equal();
				State = 7786;
				opt_boolean_or_string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7788;
				createdb_opt_name();
				State = 7789;
				opt_equal();
				State = 7790;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_name(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_nameContext createdb_opt_name() {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(Context, State);
		EnterRule(_localctx, 812, RULE_createdb_opt_name);
		try {
			State = 7802;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7794;
				identifier();
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7795;
				Match(CONNECTION);
				State = 7796;
				Match(LIMIT);
				}
				break;
			case ENCODING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7797;
				Match(ENCODING);
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7798;
				Match(LOCATION);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7799;
				Match(OWNER);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7800;
				Match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7801;
				Match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_equalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_equal(this);
		}
	}

	[RuleVersion(0)]
	public Opt_equalContext opt_equal() {
		Opt_equalContext _localctx = new Opt_equalContext(Context, State);
		EnterRule(_localctx, 814, RULE_opt_equal);
		try {
			State = 7806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7804;
				Match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasestmtContext alterdatabasestmt() {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(Context, State);
		EnterRule(_localctx, 816, RULE_alterdatabasestmt);
		try {
			State = 7826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7808;
				Match(ALTER);
				State = 7809;
				Match(DATABASE);
				State = 7810;
				name();
				State = 7811;
				Match(WITH);
				State = 7812;
				createdb_opt_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7814;
				Match(ALTER);
				State = 7815;
				Match(DATABASE);
				State = 7816;
				name();
				State = 7817;
				createdb_opt_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7819;
				Match(ALTER);
				State = 7820;
				Match(DATABASE);
				State = 7821;
				name();
				State = 7822;
				Match(SET);
				State = 7823;
				Match(TABLESPACE);
				State = 7824;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasesetstmtContext alterdatabasesetstmt() {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(Context, State);
		EnterRule(_localctx, 818, RULE_alterdatabasesetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7828;
			Match(ALTER);
			State = 7829;
			Match(DATABASE);
			State = 7830;
			name();
			State = 7831;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropdbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_option_listContext drop_option_list() {
			return GetRuleContext<Drop_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropdbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropdbstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropdbstmtContext dropdbstmt() {
		DropdbstmtContext _localctx = new DropdbstmtContext(Context, State);
		EnterRule(_localctx, 820, RULE_dropdbstmt);
		try {
			State = 7859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7833;
				Match(DROP);
				State = 7834;
				Match(DATABASE);
				State = 7835;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7836;
				Match(DROP);
				State = 7837;
				Match(DATABASE);
				State = 7838;
				Match(IF_P);
				State = 7839;
				Match(EXISTS);
				State = 7840;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7841;
				Match(DROP);
				State = 7842;
				Match(DATABASE);
				State = 7843;
				name();
				State = 7844;
				opt_with();
				State = 7845;
				Match(OPEN_PAREN);
				State = 7846;
				drop_option_list(0);
				State = 7847;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7849;
				Match(DROP);
				State = 7850;
				Match(DATABASE);
				State = 7851;
				Match(IF_P);
				State = 7852;
				Match(EXISTS);
				State = 7853;
				name();
				State = 7854;
				opt_with();
				State = 7855;
				Match(OPEN_PAREN);
				State = 7856;
				drop_option_list(0);
				State = 7857;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext drop_option() {
			return GetRuleContext<Drop_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_option_listContext drop_option_list() {
			return GetRuleContext<Drop_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Drop_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_option_listContext drop_option_list() {
		return drop_option_list(0);
	}

	private Drop_option_listContext drop_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Drop_option_listContext _localctx = new Drop_option_listContext(Context, _parentState);
		Drop_option_listContext _prevctx = _localctx;
		int _startState = 822;
		EnterRecursionRule(_localctx, 822, RULE_drop_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 7862;
			drop_option();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7869;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Drop_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_drop_option_list);
					State = 7864;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 7865;
					Match(COMMA);
					State = 7866;
					drop_option();
					}
					} 
				}
				State = 7871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Drop_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option(this);
		}
	}

	[RuleVersion(0)]
	public Drop_optionContext drop_option() {
		Drop_optionContext _localctx = new Drop_optionContext(Context, State);
		EnterRule(_localctx, 824, RULE_drop_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7872;
			Match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercollationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercollationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercollationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercollationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercollationstmtContext altercollationstmt() {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(Context, State);
		EnterRule(_localctx, 826, RULE_altercollationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7874;
			Match(ALTER);
			State = 7875;
			Match(COLLATION);
			State = 7876;
			any_name();
			State = 7877;
			Match(REFRESH);
			State = 7878;
			Match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersystemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_resetContext generic_reset() {
			return GetRuleContext<Generic_resetContext>(0);
		}
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersystemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersystemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersystemstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersystemstmtContext altersystemstmt() {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(Context, State);
		EnterRule(_localctx, 828, RULE_altersystemstmt);
		try {
			State = 7888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7880;
				Match(ALTER);
				State = 7881;
				Match(SYSTEM_P);
				State = 7882;
				Match(SET);
				State = 7883;
				generic_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7884;
				Match(ALTER);
				State = 7885;
				Match(SYSTEM_P);
				State = 7886;
				Match(RESET);
				State = 7887;
				generic_reset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedomainstmtContext createdomainstmt() {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(Context, State);
		EnterRule(_localctx, 830, RULE_createdomainstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7890;
			Match(CREATE);
			State = 7891;
			Match(DOMAIN_P);
			State = 7892;
			any_name();
			State = 7893;
			opt_as();
			State = 7894;
			typename();
			State = 7895;
			colquallist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdomainstmtContext alterdomainstmt() {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(Context, State);
		EnterRule(_localctx, 832, RULE_alterdomainstmt);
		try {
			State = 7947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,323,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7897;
				Match(ALTER);
				State = 7898;
				Match(DOMAIN_P);
				State = 7899;
				any_name();
				State = 7900;
				alter_column_default();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7902;
				Match(ALTER);
				State = 7903;
				Match(DOMAIN_P);
				State = 7904;
				any_name();
				State = 7905;
				Match(DROP);
				State = 7906;
				Match(NOT);
				State = 7907;
				Match(NULL_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7909;
				Match(ALTER);
				State = 7910;
				Match(DOMAIN_P);
				State = 7911;
				any_name();
				State = 7912;
				Match(SET);
				State = 7913;
				Match(NOT);
				State = 7914;
				Match(NULL_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7916;
				Match(ALTER);
				State = 7917;
				Match(DOMAIN_P);
				State = 7918;
				any_name();
				State = 7919;
				Match(ADD_P);
				State = 7920;
				tableconstraint();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7922;
				Match(ALTER);
				State = 7923;
				Match(DOMAIN_P);
				State = 7924;
				any_name();
				State = 7925;
				Match(DROP);
				State = 7926;
				Match(CONSTRAINT);
				State = 7927;
				name();
				State = 7928;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7930;
				Match(ALTER);
				State = 7931;
				Match(DOMAIN_P);
				State = 7932;
				any_name();
				State = 7933;
				Match(DROP);
				State = 7934;
				Match(CONSTRAINT);
				State = 7935;
				Match(IF_P);
				State = 7936;
				Match(EXISTS);
				State = 7937;
				name();
				State = 7938;
				opt_drop_behavior();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7940;
				Match(ALTER);
				State = 7941;
				Match(DOMAIN_P);
				State = 7942;
				any_name();
				State = 7943;
				Match(VALIDATE);
				State = 7944;
				Match(CONSTRAINT);
				State = 7945;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_asContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_as(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asContext opt_as() {
		Opt_asContext _localctx = new Opt_asContext(Context, State);
		EnterRule(_localctx, 834, RULE_opt_as);
		try {
			State = 7951;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7949;
				Match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsdictionarystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsdictionarystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsdictionarystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsdictionarystmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsdictionarystmtContext altertsdictionarystmt() {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(Context, State);
		EnterRule(_localctx, 836, RULE_altertsdictionarystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7953;
			Match(ALTER);
			State = 7954;
			Match(TEXT_P);
			State = 7955;
			Match(SEARCH);
			State = 7956;
			Match(DICTIONARY);
			State = 7957;
			any_name();
			State = 7958;
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsconfigurationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(PostgreSQLParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(PostgreSQLParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_withContext any_with() {
			return GetRuleContext<Any_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsconfigurationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsconfigurationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsconfigurationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsconfigurationstmtContext altertsconfigurationstmt() {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(Context, State);
		EnterRule(_localctx, 838, RULE_altertsconfigurationstmt);
		try {
			State = 8032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7960;
				Match(ALTER);
				State = 7961;
				Match(TEXT_P);
				State = 7962;
				Match(SEARCH);
				State = 7963;
				Match(CONFIGURATION);
				State = 7964;
				any_name();
				State = 7965;
				Match(ADD_P);
				State = 7966;
				Match(MAPPING);
				State = 7967;
				Match(FOR);
				State = 7968;
				name_list(0);
				State = 7969;
				any_with();
				State = 7970;
				any_name_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7972;
				Match(ALTER);
				State = 7973;
				Match(TEXT_P);
				State = 7974;
				Match(SEARCH);
				State = 7975;
				Match(CONFIGURATION);
				State = 7976;
				any_name();
				State = 7977;
				Match(ALTER);
				State = 7978;
				Match(MAPPING);
				State = 7979;
				Match(FOR);
				State = 7980;
				name_list(0);
				State = 7981;
				any_with();
				State = 7982;
				any_name_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7984;
				Match(ALTER);
				State = 7985;
				Match(TEXT_P);
				State = 7986;
				Match(SEARCH);
				State = 7987;
				Match(CONFIGURATION);
				State = 7988;
				any_name();
				State = 7989;
				Match(ALTER);
				State = 7990;
				Match(MAPPING);
				State = 7991;
				Match(REPLACE);
				State = 7992;
				any_name();
				State = 7993;
				any_with();
				State = 7994;
				any_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7996;
				Match(ALTER);
				State = 7997;
				Match(TEXT_P);
				State = 7998;
				Match(SEARCH);
				State = 7999;
				Match(CONFIGURATION);
				State = 8000;
				any_name();
				State = 8001;
				Match(ALTER);
				State = 8002;
				Match(MAPPING);
				State = 8003;
				Match(FOR);
				State = 8004;
				name_list(0);
				State = 8005;
				Match(REPLACE);
				State = 8006;
				any_name();
				State = 8007;
				any_with();
				State = 8008;
				any_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8010;
				Match(ALTER);
				State = 8011;
				Match(TEXT_P);
				State = 8012;
				Match(SEARCH);
				State = 8013;
				Match(CONFIGURATION);
				State = 8014;
				any_name();
				State = 8015;
				Match(DROP);
				State = 8016;
				Match(MAPPING);
				State = 8017;
				Match(FOR);
				State = 8018;
				name_list(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8020;
				Match(ALTER);
				State = 8021;
				Match(TEXT_P);
				State = 8022;
				Match(SEARCH);
				State = 8023;
				Match(CONFIGURATION);
				State = 8024;
				any_name();
				State = 8025;
				Match(DROP);
				State = 8026;
				Match(MAPPING);
				State = 8027;
				Match(IF_P);
				State = 8028;
				Match(EXISTS);
				State = 8029;
				Match(FOR);
				State = 8030;
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_with(this);
		}
	}

	[RuleVersion(0)]
	public Any_withContext any_with() {
		Any_withContext _localctx = new Any_withContext(Context, State);
		EnterRule(_localctx, 840, RULE_any_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8034;
			Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateconversionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_defaultContext opt_default() {
			return GetRuleContext<Opt_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createconversionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateconversionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateconversionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateconversionstmtContext createconversionstmt() {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(Context, State);
		EnterRule(_localctx, 842, RULE_createconversionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8036;
			Match(CREATE);
			State = 8037;
			opt_default();
			State = 8038;
			Match(CONVERSION_P);
			State = 8039;
			any_name();
			State = 8040;
			Match(FOR);
			State = 8041;
			sconst();
			State = 8042;
			Match(TO);
			State = 8043;
			sconst();
			State = 8044;
			Match(FROM);
			State = 8045;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_index_specificationContext cluster_index_specification() {
			return GetRuleContext<Cluster_index_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterClusterstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitClusterstmt(this);
		}
	}

	[RuleVersion(0)]
	public ClusterstmtContext clusterstmt() {
		ClusterstmtContext _localctx = new ClusterstmtContext(Context, State);
		EnterRule(_localctx, 844, RULE_clusterstmt);
		try {
			State = 8060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8047;
				Match(CLUSTER);
				State = 8048;
				opt_verbose();
				State = 8049;
				qualified_name();
				State = 8050;
				cluster_index_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8052;
				Match(CLUSTER);
				State = 8053;
				opt_verbose();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8054;
				Match(CLUSTER);
				State = 8055;
				opt_verbose();
				State = 8056;
				name();
				State = 8057;
				Match(ON);
				State = 8058;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_index_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_index_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCluster_index_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCluster_index_specification(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_index_specificationContext cluster_index_specification() {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(Context, State);
		EnterRule(_localctx, 846, RULE_cluster_index_specification);
		try {
			State = 8065;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8062;
				Match(USING);
				State = 8063;
				name();
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VacuumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fullContext opt_full() {
			return GetRuleContext<Opt_fullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_freezeContext opt_freeze() {
			return GetRuleContext<Opt_freezeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_analyzeContext opt_analyze() {
			return GetRuleContext<Opt_analyzeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return GetRuleContext<Opt_vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuumstmt(this);
		}
	}

	[RuleVersion(0)]
	public VacuumstmtContext vacuumstmt() {
		VacuumstmtContext _localctx = new VacuumstmtContext(Context, State);
		EnterRule(_localctx, 848, RULE_vacuumstmt);
		try {
			State = 8080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8067;
				Match(VACUUM);
				State = 8068;
				opt_full();
				State = 8069;
				opt_freeze();
				State = 8070;
				opt_verbose();
				State = 8071;
				opt_analyze();
				State = 8072;
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8074;
				Match(VACUUM);
				State = 8075;
				Match(OPEN_PAREN);
				State = 8076;
				vac_analyze_option_list(0);
				State = 8077;
				Match(CLOSE_PAREN);
				State = 8078;
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return GetRuleContext<Opt_vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyzestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyzestmt(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzestmtContext analyzestmt() {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(Context, State);
		EnterRule(_localctx, 850, RULE_analyzestmt);
		try {
			State = 8092;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8082;
				analyze_keyword();
				State = 8083;
				opt_verbose();
				State = 8084;
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8086;
				analyze_keyword();
				State = 8087;
				Match(OPEN_PAREN);
				State = 8088;
				vac_analyze_option_list(0);
				State = 8089;
				Match(CLOSE_PAREN);
				State = 8090;
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext vac_analyze_option_elem() {
			return GetRuleContext<Vac_analyze_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_listContext vac_analyze_option_list() {
		return vac_analyze_option_list(0);
	}

	private Vac_analyze_option_listContext vac_analyze_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(Context, _parentState);
		Vac_analyze_option_listContext _prevctx = _localctx;
		int _startState = 852;
		EnterRecursionRule(_localctx, 852, RULE_vac_analyze_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8095;
			vac_analyze_option_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vac_analyze_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_vac_analyze_option_list);
					State = 8097;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8098;
					Match(COMMA);
					State = 8099;
					vac_analyze_option_elem();
					}
					} 
				}
				State = 8104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Analyze_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_keywordContext analyze_keyword() {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(Context, State);
		EnterRule(_localctx, 854, RULE_analyze_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8105;
			_la = TokenStream.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return GetRuleContext<Vac_analyze_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return GetRuleContext<Vac_analyze_option_argContext>(0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_elemContext vac_analyze_option_elem() {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(Context, State);
		EnterRule(_localctx, 856, RULE_vac_analyze_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8107;
			vac_analyze_option_name();
			State = 8108;
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_nameContext vac_analyze_option_name() {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(Context, State);
		EnterRule(_localctx, 858, RULE_vac_analyze_option_name);
		try {
			State = 8112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8110;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8111;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_argContext vac_analyze_option_arg() {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(Context, State);
		EnterRule(_localctx, 860, RULE_vac_analyze_option_arg);
		try {
			State = 8117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8114;
				opt_boolean_or_string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8115;
				numericonly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_analyzeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_analyze; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_analyze(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_analyze(this);
		}
	}

	[RuleVersion(0)]
	public Opt_analyzeContext opt_analyze() {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(Context, State);
		EnterRule(_localctx, 862, RULE_opt_analyze);
		try {
			State = 8121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8119;
				analyze_keyword();
				}
				break;
			case SEMI:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_verboseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_verbose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_verbose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_verbose(this);
		}
	}

	[RuleVersion(0)]
	public Opt_verboseContext opt_verbose() {
		Opt_verboseContext _localctx = new Opt_verboseContext(Context, State);
		EnterRule(_localctx, 864, RULE_opt_verbose);
		try {
			State = 8125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERBOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8123;
				Match(VERBOSE);
				}
				break;
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_full; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_full(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fullContext opt_full() {
		Opt_fullContext _localctx = new Opt_fullContext(Context, State);
		EnterRule(_localctx, 866, RULE_opt_full);
		try {
			State = 8129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8127;
				Match(FULL);
				}
				break;
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case TABLE:
			case FREEZE:
			case IS:
			case OUTER_P:
			case OVER:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_freezeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_freeze; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_freeze(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_freeze(this);
		}
	}

	[RuleVersion(0)]
	public Opt_freezeContext opt_freeze() {
		Opt_freezeContext _localctx = new Opt_freezeContext(Context, State);
		EnterRule(_localctx, 868, RULE_opt_freeze);
		try {
			State = 8133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FREEZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8131;
				Match(FREEZE);
				}
				break;
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case INTO:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_name_listContext opt_name_list() {
		Opt_name_listContext _localctx = new Opt_name_listContext(Context, State);
		EnterRule(_localctx, 870, RULE_opt_name_list);
		try {
			State = 8140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8135;
				Match(OPEN_PAREN);
				State = 8136;
				name_list(0);
				State = 8137;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relationContext vacuum_relation() {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(Context, State);
		EnterRule(_localctx, 872, RULE_vacuum_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8142;
			qualified_name();
			State = 8143;
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext vacuum_relation() {
			return GetRuleContext<Vacuum_relationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_listContext vacuum_relation_list() {
			return GetRuleContext<Vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relation_listContext vacuum_relation_list() {
		return vacuum_relation_list(0);
	}

	private Vacuum_relation_listContext vacuum_relation_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(Context, _parentState);
		Vacuum_relation_listContext _prevctx = _localctx;
		int _startState = 874;
		EnterRecursionRule(_localctx, 874, RULE_vacuum_relation_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8146;
			vacuum_relation();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacuum_relation_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_vacuum_relation_list);
					State = 8148;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8149;
					Match(COMMA);
					State = 8150;
					vacuum_relation();
					}
					} 
				}
				State = 8155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_listContext vacuum_relation_list() {
			return GetRuleContext<Vacuum_relation_listContext>(0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_vacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_vacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(Context, State);
		EnterRule(_localctx, 876, RULE_opt_vacuum_relation_list);
		try {
			State = 8158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8156;
				vacuum_relation_list(0);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainablestmtContext explainablestmt() {
			return GetRuleContext<ExplainablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_listContext explain_option_list() {
			return GetRuleContext<Explain_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainstmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainstmtContext explainstmt() {
		ExplainstmtContext _localctx = new ExplainstmtContext(Context, State);
		EnterRule(_localctx, 878, RULE_explainstmt);
		try {
			State = 8176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8160;
				Match(EXPLAIN);
				State = 8161;
				explainablestmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8162;
				Match(EXPLAIN);
				State = 8163;
				analyze_keyword();
				State = 8164;
				opt_verbose();
				State = 8165;
				explainablestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8167;
				Match(EXPLAIN);
				State = 8168;
				Match(VERBOSE);
				State = 8169;
				explainablestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8170;
				Match(EXPLAIN);
				State = 8171;
				Match(OPEN_PAREN);
				State = 8172;
				explain_option_list(0);
				State = 8173;
				Match(CLOSE_PAREN);
				State = 8174;
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainablestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainablestmtContext explainablestmt() {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(Context, State);
		EnterRule(_localctx, 880, RULE_explainablestmt);
		try {
			State = 8187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8178;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8179;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8180;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8181;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8182;
				declarecursorstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8183;
				createasstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8184;
				creatematviewstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8185;
				refreshmatviewstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8186;
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext explain_option_elem() {
			return GetRuleContext<Explain_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_listContext explain_option_list() {
			return GetRuleContext<Explain_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Explain_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_listContext explain_option_list() {
		return explain_option_list(0);
	}

	private Explain_option_listContext explain_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Explain_option_listContext _localctx = new Explain_option_listContext(Context, _parentState);
		Explain_option_listContext _prevctx = _localctx;
		int _startState = 882;
		EnterRecursionRule(_localctx, 882, RULE_explain_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8190;
			explain_option_elem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Explain_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_explain_option_list);
					State = 8192;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8193;
					Match(COMMA);
					State = 8194;
					explain_option_elem();
					}
					} 
				}
				State = 8199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Explain_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_nameContext explain_option_name() {
			return GetRuleContext<Explain_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_argContext explain_option_arg() {
			return GetRuleContext<Explain_option_argContext>(0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_elemContext explain_option_elem() {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(Context, State);
		EnterRule(_localctx, 884, RULE_explain_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8200;
			explain_option_name();
			State = 8201;
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_nameContext explain_option_name() {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(Context, State);
		EnterRule(_localctx, 886, RULE_explain_option_name);
		try {
			State = 8205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8203;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8204;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_argContext explain_option_arg() {
		Explain_option_argContext _localctx = new Explain_option_argContext(Context, State);
		EnterRule(_localctx, 888, RULE_explain_option_arg);
		try {
			State = 8210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8207;
				opt_boolean_or_string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8208;
				numericonly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prep_type_clauseContext prep_type_clause() {
			return GetRuleContext<Prep_type_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparestmtContext preparestmt() {
		PreparestmtContext _localctx = new PreparestmtContext(Context, State);
		EnterRule(_localctx, 890, RULE_preparestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8212;
			Match(PREPARE);
			State = 8213;
			name();
			State = 8214;
			prep_type_clause();
			State = 8215;
			Match(AS);
			State = 8216;
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prep_type_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prep_type_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrep_type_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrep_type_clause(this);
		}
	}

	[RuleVersion(0)]
	public Prep_type_clauseContext prep_type_clause() {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(Context, State);
		EnterRule(_localctx, 892, RULE_prep_type_clause);
		try {
			State = 8223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8218;
				Match(OPEN_PAREN);
				State = 8219;
				type_list(0);
				State = 8220;
				Match(CLOSE_PAREN);
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparablestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparablestmtContext preparablestmt() {
		PreparablestmtContext _localctx = new PreparablestmtContext(Context, State);
		EnterRule(_localctx, 894, RULE_preparablestmt);
		try {
			State = 8229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8225;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8226;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8227;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8228;
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_param_clauseContext execute_param_clause() {
			return GetRuleContext<Execute_param_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecutestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecutestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExecutestmtContext executestmt() {
		ExecutestmtContext _localctx = new ExecutestmtContext(Context, State);
		EnterRule(_localctx, 896, RULE_executestmt);
		try {
			State = 8258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8231;
				Match(EXECUTE);
				State = 8232;
				name();
				State = 8233;
				execute_param_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8235;
				Match(CREATE);
				State = 8236;
				opttemp();
				State = 8237;
				Match(TABLE);
				State = 8238;
				create_as_target();
				State = 8239;
				Match(AS);
				State = 8240;
				Match(EXECUTE);
				State = 8241;
				name();
				State = 8242;
				execute_param_clause();
				State = 8243;
				opt_with_data();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8245;
				Match(CREATE);
				State = 8246;
				opttemp();
				State = 8247;
				Match(TABLE);
				State = 8248;
				Match(IF_P);
				State = 8249;
				Match(NOT);
				State = 8250;
				Match(EXISTS);
				State = 8251;
				create_as_target();
				State = 8252;
				Match(AS);
				State = 8253;
				Match(EXECUTE);
				State = 8254;
				name();
				State = 8255;
				execute_param_clause();
				State = 8256;
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_param_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_param_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecute_param_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecute_param_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_param_clauseContext execute_param_clause() {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(Context, State);
		EnterRule(_localctx, 898, RULE_execute_param_clause);
		try {
			State = 8265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8260;
				Match(OPEN_PAREN);
				State = 8261;
				expr_list(0);
				State = 8262;
				Match(CLOSE_PAREN);
				}
				break;
			case SEMI:
			case INTO:
			case WITH:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeallocatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeallocatestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatestmtContext deallocatestmt() {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(Context, State);
		EnterRule(_localctx, 900, RULE_deallocatestmt);
		try {
			State = 8277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8267;
				Match(DEALLOCATE);
				State = 8268;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8269;
				Match(DEALLOCATE);
				State = 8270;
				Match(PREPARE);
				State = 8271;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8272;
				Match(DEALLOCATE);
				State = 8273;
				Match(ALL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8274;
				Match(DEALLOCATE);
				State = 8275;
				Match(PREPARE);
				State = 8276;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_targetContext insert_target() {
			return GetRuleContext<Insert_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_restContext insert_rest() {
			return GetRuleContext<Insert_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_on_conflictContext opt_on_conflict() {
			return GetRuleContext<Opt_on_conflictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsertstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsertstmt(this);
		}
	}

	[RuleVersion(0)]
	public InsertstmtContext insertstmt() {
		InsertstmtContext _localctx = new InsertstmtContext(Context, State);
		EnterRule(_localctx, 902, RULE_insertstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8279;
			opt_with_clause();
			State = 8280;
			Match(INSERT);
			State = 8281;
			Match(INTO);
			State = 8282;
			insert_target();
			State = 8283;
			insert_rest();
			State = 8284;
			opt_on_conflict();
			State = 8285;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_target(this);
		}
	}

	[RuleVersion(0)]
	public Insert_targetContext insert_target() {
		Insert_targetContext _localctx = new Insert_targetContext(Context, State);
		EnterRule(_localctx, 904, RULE_insert_target);
		try {
			State = 8292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8287;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8288;
				qualified_name();
				State = 8289;
				Match(AS);
				State = 8290;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Override_kindContext override_kind() {
			return GetRuleContext<Override_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_rest(this);
		}
	}

	[RuleVersion(0)]
	public Insert_restContext insert_rest() {
		Insert_restContext _localctx = new Insert_restContext(Context, State);
		EnterRule(_localctx, 906, RULE_insert_rest);
		try {
			State = 8315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8294;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8295;
				Match(OVERRIDING);
				State = 8296;
				override_kind();
				State = 8297;
				Match(VALUE_P);
				State = 8298;
				selectstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8300;
				Match(OPEN_PAREN);
				State = 8301;
				insert_column_list(0);
				State = 8302;
				Match(CLOSE_PAREN);
				State = 8303;
				selectstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8305;
				Match(OPEN_PAREN);
				State = 8306;
				insert_column_list(0);
				State = 8307;
				Match(CLOSE_PAREN);
				State = 8308;
				Match(OVERRIDING);
				State = 8309;
				override_kind();
				State = 8310;
				Match(VALUE_P);
				State = 8311;
				selectstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8313;
				Match(DEFAULT);
				State = 8314;
				Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Override_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_override_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverride_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverride_kind(this);
		}
	}

	[RuleVersion(0)]
	public Override_kindContext override_kind() {
		Override_kindContext _localctx = new Override_kindContext(Context, State);
		EnterRule(_localctx, 908, RULE_override_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8317;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext insert_column_item() {
			return GetRuleContext<Insert_column_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Insert_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_listContext insert_column_list() {
		return insert_column_list(0);
	}

	private Insert_column_listContext insert_column_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Insert_column_listContext _localctx = new Insert_column_listContext(Context, _parentState);
		Insert_column_listContext _prevctx = _localctx;
		int _startState = 910;
		EnterRecursionRule(_localctx, 910, RULE_insert_column_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8320;
			insert_column_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,352,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_column_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_insert_column_list);
					State = 8322;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8323;
					Match(COMMA);
					State = 8324;
					insert_column_item();
					}
					} 
				}
				State = 8329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,352,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Insert_column_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_item(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_itemContext insert_column_item() {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(Context, State);
		EnterRule(_localctx, 912, RULE_insert_column_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8330;
			colid();
			State = 8331;
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_on_conflictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_conf_exprContext opt_conf_expr() {
			return GetRuleContext<Opt_conf_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_on_conflict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_on_conflict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_on_conflict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_on_conflictContext opt_on_conflict() {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(Context, State);
		EnterRule(_localctx, 914, RULE_opt_on_conflict);
		try {
			State = 8349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8333;
				Match(ON);
				State = 8334;
				Match(CONFLICT);
				State = 8335;
				opt_conf_expr();
				State = 8336;
				Match(DO);
				State = 8337;
				Match(UPDATE);
				State = 8338;
				Match(SET);
				State = 8339;
				set_clause_list(0);
				State = 8340;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8342;
				Match(ON);
				State = 8343;
				Match(CONFLICT);
				State = 8344;
				opt_conf_expr();
				State = 8345;
				Match(DO);
				State = 8346;
				Match(NOTHING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_conf_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_conf_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_conf_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_conf_expr(this);
		}
	}

	[RuleVersion(0)]
	public Opt_conf_exprContext opt_conf_expr() {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(Context, State);
		EnterRule(_localctx, 916, RULE_opt_conf_expr);
		try {
			State = 8360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8351;
				Match(OPEN_PAREN);
				State = 8352;
				index_params(0);
				State = 8353;
				Match(CLOSE_PAREN);
				State = 8354;
				where_clause();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8356;
				Match(ON);
				State = 8357;
				Match(CONSTRAINT);
				State = 8358;
				name();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReturning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReturning_clause(this);
		}
	}

	[RuleVersion(0)]
	public Returning_clauseContext returning_clause() {
		Returning_clauseContext _localctx = new Returning_clauseContext(Context, State);
		EnterRule(_localctx, 918, RULE_returning_clause);
		try {
			State = 8365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8362;
				Match(RETURNING);
				State = 8363;
				target_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeletestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeletestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeletestmtContext deletestmt() {
		DeletestmtContext _localctx = new DeletestmtContext(Context, State);
		EnterRule(_localctx, 920, RULE_deletestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8367;
			opt_with_clause();
			State = 8368;
			Match(DELETE_P);
			State = 8369;
			Match(FROM);
			State = 8370;
			relation_expr_opt_alias();
			State = 8371;
			using_clause();
			State = 8372;
			where_or_current_clause();
			State = 8373;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 922, RULE_using_clause);
		try {
			State = 8378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8375;
				Match(USING);
				State = 8376;
				from_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_lockContext opt_lock() {
			return GetRuleContext<Opt_lockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowaitContext opt_nowait() {
			return GetRuleContext<Opt_nowaitContext>(0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLockstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLockstmt(this);
		}
	}

	[RuleVersion(0)]
	public LockstmtContext lockstmt() {
		LockstmtContext _localctx = new LockstmtContext(Context, State);
		EnterRule(_localctx, 924, RULE_lockstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8380;
			Match(LOCK_P);
			State = 8381;
			opt_table();
			State = 8382;
			relation_expr_list(0);
			State = 8383;
			opt_lock();
			State = 8384;
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_lockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_typeContext lock_type() {
			return GetRuleContext<Lock_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_lock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_lock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_lock(this);
		}
	}

	[RuleVersion(0)]
	public Opt_lockContext opt_lock() {
		Opt_lockContext _localctx = new Opt_lockContext(Context, State);
		EnterRule(_localctx, 926, RULE_opt_lock);
		try {
			State = 8391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8386;
				Match(IN_P);
				State = 8387;
				lock_type();
				State = 8388;
				Match(MODE);
				}
				break;
			case SEMI:
			case INTO:
			case NOWAIT:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLock_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLock_type(this);
		}
	}

	[RuleVersion(0)]
	public Lock_typeContext lock_type() {
		Lock_typeContext _localctx = new Lock_typeContext(Context, State);
		EnterRule(_localctx, 928, RULE_lock_type);
		try {
			State = 8409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8393;
				Match(ACCESS);
				State = 8394;
				Match(SHARE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8395;
				Match(ROW);
				State = 8396;
				Match(SHARE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8397;
				Match(ROW);
				State = 8398;
				Match(EXCLUSIVE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8399;
				Match(SHARE);
				State = 8400;
				Match(UPDATE);
				State = 8401;
				Match(EXCLUSIVE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8402;
				Match(SHARE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8403;
				Match(SHARE);
				State = 8404;
				Match(ROW);
				State = 8405;
				Match(EXCLUSIVE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8406;
				Match(EXCLUSIVE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8407;
				Match(ACCESS);
				State = 8408;
				Match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nowaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nowait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nowait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nowait(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nowaitContext opt_nowait() {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(Context, State);
		EnterRule(_localctx, 930, RULE_opt_nowait);
		try {
			State = 8413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8411;
				Match(NOWAIT);
				}
				break;
			case SEMI:
			case INTO:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nowait_or_skipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nowait_or_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nowait_or_skip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nowait_or_skip(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nowait_or_skipContext opt_nowait_or_skip() {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(Context, State);
		EnterRule(_localctx, 932, RULE_opt_nowait_or_skip);
		try {
			State = 8419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8415;
				Match(NOWAIT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8416;
				Match(SKIP_P);
				State = 8417;
				Match(LOCKED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUpdatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUpdatestmt(this);
		}
	}

	[RuleVersion(0)]
	public UpdatestmtContext updatestmt() {
		UpdatestmtContext _localctx = new UpdatestmtContext(Context, State);
		EnterRule(_localctx, 934, RULE_updatestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8421;
			opt_with_clause();
			State = 8422;
			Match(UPDATE);
			State = 8423;
			relation_expr_opt_alias();
			State = 8424;
			Match(SET);
			State = 8425;
			set_clause_list(0);
			State = 8426;
			from_clause();
			State = 8427;
			where_or_current_clause();
			State = 8428;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext set_clause() {
			return GetRuleContext<Set_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Set_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_listContext set_clause_list() {
		return set_clause_list(0);
	}

	private Set_clause_listContext set_clause_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Set_clause_listContext _localctx = new Set_clause_listContext(Context, _parentState);
		Set_clause_listContext _prevctx = _localctx;
		int _startState = 936;
		EnterRecursionRule(_localctx, 936, RULE_set_clause_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8431;
			set_clause();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,361,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_clause_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_set_clause_list);
					State = 8433;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8434;
					Match(COMMA);
					State = 8435;
					set_clause();
					}
					} 
				}
				State = 8440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,361,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(Context, State);
		EnterRule(_localctx, 938, RULE_set_clause);
		try {
			State = 8451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8441;
				set_target();
				State = 8442;
				Match(EQUAL);
				State = 8443;
				a_expr(0);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8445;
				Match(OPEN_PAREN);
				State = 8446;
				set_target_list(0);
				State = 8447;
				Match(CLOSE_PAREN);
				State = 8448;
				Match(EQUAL);
				State = 8449;
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target(this);
		}
	}

	[RuleVersion(0)]
	public Set_targetContext set_target() {
		Set_targetContext _localctx = new Set_targetContext(Context, State);
		EnterRule(_localctx, 940, RULE_set_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8453;
			colid();
			State = 8454;
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Set_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_target_listContext set_target_list() {
		return set_target_list(0);
	}

	private Set_target_listContext set_target_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Set_target_listContext _localctx = new Set_target_listContext(Context, _parentState);
		Set_target_listContext _prevctx = _localctx;
		int _startState = 942;
		EnterRecursionRule(_localctx, 942, RULE_set_target_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8457;
			set_target();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8464;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,363,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_target_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_set_target_list);
					State = 8459;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8460;
					Match(COMMA);
					State = 8461;
					set_target();
					}
					} 
				}
				State = 8466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,363,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarecursorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionsContext cursor_options() {
			return GetRuleContext<Cursor_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_holdContext opt_hold() {
			return GetRuleContext<Opt_holdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarecursorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeclarecursorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeclarecursorstmt(this);
		}
	}

	[RuleVersion(0)]
	public DeclarecursorstmtContext declarecursorstmt() {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(Context, State);
		EnterRule(_localctx, 944, RULE_declarecursorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8467;
			Match(DECLARE);
			State = 8468;
			cursor_name();
			State = 8469;
			cursor_options(0);
			State = 8470;
			Match(CURSOR);
			State = 8471;
			opt_hold();
			State = 8472;
			Match(FOR);
			State = 8473;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 946, RULE_cursor_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8475;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionsContext cursor_options() {
			return GetRuleContext<Cursor_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(PostgreSQLParser.INSENSITIVE, 0); }
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_options(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionsContext cursor_options() {
		return cursor_options(0);
	}

	private Cursor_optionsContext cursor_options(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cursor_optionsContext _localctx = new Cursor_optionsContext(Context, _parentState);
		Cursor_optionsContext _prevctx = _localctx;
		int _startState = 948;
		EnterRecursionRule(_localctx, 948, RULE_cursor_options, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8489;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,365,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 8487;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
					case 1:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						State = 8478;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 8479;
						Match(NO);
						State = 8480;
						Match(SCROLL);
						}
						break;
					case 2:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						State = 8481;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 8482;
						Match(SCROLL);
						}
						break;
					case 3:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						State = 8483;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 8484;
						Match(BINARY);
						}
						break;
					case 4:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						State = 8485;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 8486;
						Match(INSENSITIVE);
						}
						break;
					}
					} 
				}
				State = 8491;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,365,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_holdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_hold; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_hold(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_hold(this);
		}
	}

	[RuleVersion(0)]
	public Opt_holdContext opt_hold() {
		Opt_holdContext _localctx = new Opt_holdContext(Context, State);
		EnterRule(_localctx, 950, RULE_opt_hold);
		try {
			State = 8497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8493;
				Match(WITH);
				State = 8494;
				Match(HOLD);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8495;
				Match(WITHOUT);
				State = 8496;
				Match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelectstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelectstmt(this);
		}
	}

	[RuleVersion(0)]
	public SelectstmtContext selectstmt() {
		SelectstmtContext _localctx = new SelectstmtContext(Context, State);
		EnterRule(_localctx, 952, RULE_selectstmt);
		try {
			State = 8501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8499;
				select_no_parens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8500;
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_with_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_with_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_with_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_with_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_with_parensContext select_with_parens() {
		Select_with_parensContext _localctx = new Select_with_parensContext(Context, State);
		EnterRule(_localctx, 954, RULE_select_with_parens);
		try {
			State = 8511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8503;
				Match(OPEN_PAREN);
				State = 8504;
				select_no_parens();
				State = 8505;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8507;
				Match(OPEN_PAREN);
				State = 8508;
				select_with_parens();
				State = 8509;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_no_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_selectContext simple_select() {
			return GetRuleContext<Simple_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_select_limitContext opt_select_limit() {
			return GetRuleContext<Opt_select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return GetRuleContext<Opt_for_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_no_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_no_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_no_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_no_parensContext select_no_parens() {
		Select_no_parensContext _localctx = new Select_no_parensContext(Context, State);
		EnterRule(_localctx, 956, RULE_select_no_parens);
		try {
			State = 8546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8513;
				simple_select(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8514;
				select_clause();
				State = 8515;
				sort_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8517;
				select_clause();
				State = 8518;
				opt_sort_clause();
				State = 8519;
				for_locking_clause();
				State = 8520;
				opt_select_limit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8522;
				select_clause();
				State = 8523;
				opt_sort_clause();
				State = 8524;
				select_limit();
				State = 8525;
				opt_for_locking_clause();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8527;
				with_clause();
				State = 8528;
				select_clause();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8530;
				with_clause();
				State = 8531;
				select_clause();
				State = 8532;
				sort_clause();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8534;
				with_clause();
				State = 8535;
				select_clause();
				State = 8536;
				opt_sort_clause();
				State = 8537;
				for_locking_clause();
				State = 8538;
				opt_select_limit();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8540;
				with_clause();
				State = 8541;
				select_clause();
				State = 8542;
				opt_sort_clause();
				State = 8543;
				select_limit();
				State = 8544;
				opt_for_locking_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_selectContext simple_select() {
			return GetRuleContext<Simple_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 958, RULE_select_clause);
		try {
			State = 8550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8548;
				simple_select(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8549;
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_selectContext : ParserRuleContext {
		public Simple_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select; } }
	 
		public Simple_selectContext() { }
		public virtual void CopyFrom(Simple_selectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Simple_select_valuesContext : Simple_selectContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Simple_select_valuesContext(Simple_selectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_values(this);
		}
	}
	public partial class Simple_select_selectContext : Simple_selectContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_all_clauseContext opt_all_clause() {
			return GetRuleContext<Opt_all_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext[] into_clause() {
			return GetRuleContexts<Into_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause(int i) {
			return GetRuleContext<Into_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_target_listContext opt_target_list() {
			return GetRuleContext<Opt_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_clauseContext distinct_clause() {
			return GetRuleContext<Distinct_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Simple_select_selectContext(Simple_selectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_select(this);
		}
	}
	public partial class Simple_select_tableContext : Simple_selectContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		public Simple_select_tableContext(Simple_selectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_table(this);
		}
	}
	public partial class Simple_select_union_except_intersectContext : Simple_selectContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext[] select_with_parens() {
			return GetRuleContexts<Select_with_parensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens(int i) {
			return GetRuleContext<Select_with_parensContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() {
			return GetRuleContext<Set_operator_with_all_or_distinctContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_selectContext[] simple_select() {
			return GetRuleContexts<Simple_selectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_selectContext simple_select(int i) {
			return GetRuleContext<Simple_selectContext>(i);
		}
		public Simple_select_union_except_intersectContext(Simple_selectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_union_except_intersect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_union_except_intersect(this);
		}
	}

	[RuleVersion(0)]
	public Simple_selectContext simple_select() {
		return simple_select(0);
	}

	private Simple_selectContext simple_select(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Simple_selectContext _localctx = new Simple_selectContext(Context, _parentState);
		Simple_selectContext _prevctx = _localctx;
		int _startState = 960;
		EnterRecursionRule(_localctx, 960, RULE_simple_select, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				_localctx = new Simple_select_selectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 8553;
				Match(SELECT);
				State = 8554;
				opt_all_clause();
				State = 8555;
				into_clause();
				State = 8556;
				opt_target_list();
				State = 8557;
				into_clause();
				State = 8558;
				from_clause();
				State = 8559;
				where_clause();
				State = 8560;
				group_clause();
				State = 8561;
				having_clause();
				State = 8562;
				window_clause();
				}
				break;
			case 2:
				{
				_localctx = new Simple_select_selectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8564;
				Match(SELECT);
				State = 8565;
				distinct_clause();
				State = 8566;
				target_list();
				State = 8567;
				into_clause();
				State = 8568;
				from_clause();
				State = 8569;
				where_clause();
				State = 8570;
				group_clause();
				State = 8571;
				having_clause();
				State = 8572;
				window_clause();
				}
				break;
			case 3:
				{
				_localctx = new Simple_select_valuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8574;
				values_clause(0);
				}
				break;
			case 4:
				{
				_localctx = new Simple_select_tableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8575;
				Match(TABLE);
				State = 8576;
				relation_expr();
				}
				break;
			case 5:
				{
				_localctx = new Simple_select_union_except_intersectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8577;
				select_with_parens();
				State = 8578;
				set_operator_with_all_or_distinct();
				State = 8581;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
				case 1:
					{
					State = 8579;
					simple_select(0);
					}
					break;
				case 2:
					{
					State = 8580;
					select_with_parens();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Simple_select_union_except_intersectContext(new Simple_selectContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_simple_select);
					State = 8585;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 8586;
					set_operator_with_all_or_distinct();
					State = 8589;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
					case 1:
						{
						State = 8587;
						simple_select(0);
						}
						break;
					case 2:
						{
						State = 8588;
						select_with_parens();
						}
						break;
					}
					}
					} 
				}
				State = 8595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Set_operatorContext : ParserRuleContext {
		public Set_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator; } }
	 
		public Set_operatorContext() { }
		public virtual void CopyFrom(Set_operatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntersectContext : Set_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(PostgreSQLParser.INTERSECT, 0); }
		public IntersectContext(Set_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIntersect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIntersect(this);
		}
	}
	public partial class ExceptContext : Set_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		public ExceptContext(Set_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExcept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExcept(this);
		}
	}
	public partial class UnionContext : Set_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(PostgreSQLParser.UNION, 0); }
		public UnionContext(Set_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
	}

	[RuleVersion(0)]
	public Set_operatorContext set_operator() {
		Set_operatorContext _localctx = new Set_operatorContext(Context, State);
		EnterRule(_localctx, 962, RULE_set_operator);
		try {
			State = 8599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				_localctx = new UnionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 8596;
				Match(UNION);
				}
				break;
			case INTERSECT:
				_localctx = new IntersectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 8597;
				Match(INTERSECT);
				}
				break;
			case EXCEPT:
				_localctx = new ExceptContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 8598;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_operator_with_all_or_distinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_operatorContext set_operator() {
			return GetRuleContext<Set_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct() {
			return GetRuleContext<All_or_distinctContext>(0);
		}
		public Set_operator_with_all_or_distinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_with_all_or_distinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_operator_with_all_or_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_operator_with_all_or_distinct(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() {
		Set_operator_with_all_or_distinctContext _localctx = new Set_operator_with_all_or_distinctContext(Context, State);
		EnterRule(_localctx, 964, RULE_set_operator_with_all_or_distinct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8601;
			set_operator();
			State = 8602;
			all_or_distinct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cte_listContext cte_list() {
			return GetRuleContext<Cte_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 966, RULE_with_clause);
		try {
			State = 8609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8604;
				Match(WITH);
				State = 8605;
				cte_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8606;
				Match(WITH);
				State = 8607;
				Match(RECURSIVE);
				State = 8608;
				cte_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext common_table_expr() {
			return GetRuleContext<Common_table_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cte_listContext cte_list() {
			return GetRuleContext<Cte_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Cte_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCte_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCte_list(this);
		}
	}

	[RuleVersion(0)]
	public Cte_listContext cte_list() {
		return cte_list(0);
	}

	private Cte_listContext cte_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cte_listContext _localctx = new Cte_listContext(Context, _parentState);
		Cte_listContext _prevctx = _localctx;
		int _startState = 968;
		EnterRecursionRule(_localctx, 968, RULE_cte_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8612;
			common_table_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,377,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cte_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_cte_list);
					State = 8614;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8615;
					Match(COMMA);
					State = 8616;
					common_table_expr();
					}
					} 
				}
				State = 8621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,377,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Common_table_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_materializedContext opt_materialized() {
			return GetRuleContext<Opt_materializedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expr(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_exprContext common_table_expr() {
		Common_table_exprContext _localctx = new Common_table_exprContext(Context, State);
		EnterRule(_localctx, 970, RULE_common_table_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8622;
			name();
			State = 8623;
			opt_name_list();
			State = 8624;
			Match(AS);
			State = 8625;
			opt_materialized();
			State = 8626;
			Match(OPEN_PAREN);
			State = 8627;
			preparablestmt();
			State = 8628;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_materializedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_materialized; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_materialized(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_materialized(this);
		}
	}

	[RuleVersion(0)]
	public Opt_materializedContext opt_materialized() {
		Opt_materializedContext _localctx = new Opt_materializedContext(Context, State);
		EnterRule(_localctx, 972, RULE_opt_materialized);
		try {
			State = 8634;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8630;
				Match(MATERIALIZED);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8631;
				Match(NOT);
				State = 8632;
				Match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_with_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_with_clauseContext opt_with_clause() {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(Context, State);
		EnterRule(_localctx, 974, RULE_opt_with_clause);
		try {
			State = 8638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8636;
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_strictContext opt_strict() {
			return GetRuleContext<Opt_strictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttempTableNameContext opttempTableName() {
			return GetRuleContext<OpttempTableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_clause(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 976, RULE_into_clause);
		try {
			State = 8647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8640;
				Match(INTO);
				State = 8641;
				opt_strict();
				State = 8642;
				opttempTableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8644;
				Match(INTO);
				State = 8645;
				into_target();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_strictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_strict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_strict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_strict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_strictContext opt_strict() {
		Opt_strictContext _localctx = new Opt_strictContext(Context, State);
		EnterRule(_localctx, 978, RULE_opt_strict);
		try {
			State = 8651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8650;
				Match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempTableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttempTableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttempTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttempTableName(this);
		}
	}

	[RuleVersion(0)]
	public OpttempTableNameContext opttempTableName() {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(Context, State);
		EnterRule(_localctx, 980, RULE_opttempTableName);
		try {
			State = 8688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8653;
				Match(TEMPORARY);
				State = 8654;
				opt_table();
				State = 8655;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8657;
				Match(TEMP);
				State = 8658;
				opt_table();
				State = 8659;
				qualified_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8661;
				Match(LOCAL);
				State = 8662;
				Match(TEMPORARY);
				State = 8663;
				opt_table();
				State = 8664;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8666;
				Match(LOCAL);
				State = 8667;
				Match(TEMP);
				State = 8668;
				opt_table();
				State = 8669;
				qualified_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8671;
				Match(GLOBAL);
				State = 8672;
				Match(TEMPORARY);
				State = 8673;
				opt_table();
				State = 8674;
				qualified_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8676;
				Match(GLOBAL);
				State = 8677;
				Match(TEMP);
				State = 8678;
				opt_table();
				State = 8679;
				qualified_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8681;
				Match(UNLOGGED);
				State = 8682;
				opt_table();
				State = 8683;
				qualified_name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8685;
				Match(TABLE);
				State = 8686;
				qualified_name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8687;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_table(this);
		}
	}

	[RuleVersion(0)]
	public Opt_tableContext opt_table() {
		Opt_tableContext _localctx = new Opt_tableContext(Context, State);
		EnterRule(_localctx, 982, RULE_opt_table);
		try {
			State = 8692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,383,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8690;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_or_distinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_or_distinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_or_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_or_distinct(this);
		}
	}

	[RuleVersion(0)]
	public All_or_distinctContext all_or_distinct() {
		All_or_distinctContext _localctx = new All_or_distinctContext(Context, State);
		EnterRule(_localctx, 984, RULE_all_or_distinct);
		try {
			State = 8697;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8694;
				Match(ALL);
				}
				break;
			case DISTINCT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8695;
				Match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distinct_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinct_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDistinct_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDistinct_clause(this);
		}
	}

	[RuleVersion(0)]
	public Distinct_clauseContext distinct_clause() {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(Context, State);
		EnterRule(_localctx, 986, RULE_distinct_clause);
		try {
			State = 8706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8699;
				Match(DISTINCT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8700;
				Match(DISTINCT);
				State = 8701;
				Match(ON);
				State = 8702;
				Match(OPEN_PAREN);
				State = 8703;
				expr_list(0);
				State = 8704;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_all_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_all_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_all_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_all_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_all_clauseContext opt_all_clause() {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(Context, State);
		EnterRule(_localctx, 988, RULE_opt_all_clause);
		try {
			State = 8710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8708;
				Match(ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_sort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_sort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_sort_clauseContext opt_sort_clause() {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(Context, State);
		EnterRule(_localctx, 990, RULE_opt_sort_clause);
		try {
			State = 8714;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8712;
				sort_clause();
				}
				break;
			case CLOSE_PAREN:
			case FETCH:
			case FOR:
			case LIMIT:
			case OFFSET:
			case RANGE:
			case ROWS:
			case GROUPS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sortby_listContext sortby_list() {
			return GetRuleContext<Sortby_listContext>(0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sort_clauseContext sort_clause() {
		Sort_clauseContext _localctx = new Sort_clauseContext(Context, State);
		EnterRule(_localctx, 992, RULE_sort_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8716;
			Match(ORDER);
			State = 8717;
			Match(BY);
			State = 8718;
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sortby_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext[] sortby() {
			return GetRuleContexts<SortbyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext sortby(int i) {
			return GetRuleContext<SortbyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby_list(this);
		}
	}

	[RuleVersion(0)]
	public Sortby_listContext sortby_list() {
		Sortby_listContext _localctx = new Sortby_listContext(Context, State);
		EnterRule(_localctx, 994, RULE_sortby_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8720;
			sortby();
			State = 8725;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8721;
					Match(COMMA);
					State = 8722;
					sortby();
					}
					} 
				}
				State = 8727;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nulls_orderContext opt_nulls_order() {
			return GetRuleContext<Opt_nulls_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asc_descContext opt_asc_desc() {
			return GetRuleContext<Opt_asc_descContext>(0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby(this);
		}
	}

	[RuleVersion(0)]
	public SortbyContext sortby() {
		SortbyContext _localctx = new SortbyContext(Context, State);
		EnterRule(_localctx, 996, RULE_sortby);
		try {
			State = 8737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,389,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8728;
				a_expr(0);
				State = 8729;
				Match(USING);
				State = 8730;
				qual_all_op();
				State = 8731;
				opt_nulls_order();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8733;
				a_expr(0);
				State = 8734;
				opt_asc_desc();
				State = 8735;
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Offset_clauseContext offset_clause() {
			return GetRuleContext<Offset_clauseContext>(0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit(this);
		}
	}

	[RuleVersion(0)]
	public Select_limitContext select_limit() {
		Select_limitContext _localctx = new Select_limitContext(Context, State);
		EnterRule(_localctx, 998, RULE_select_limit);
		try {
			State = 8747;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8739;
				limit_clause();
				State = 8740;
				offset_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8742;
				offset_clause();
				State = 8743;
				limit_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8745;
				limit_clause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8746;
				offset_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_select_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_select_limit(this);
		}
	}

	[RuleVersion(0)]
	public Opt_select_limitContext opt_select_limit() {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(Context, State);
		EnterRule(_localctx, 1000, RULE_opt_select_limit);
		try {
			State = 8751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8749;
				select_limit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_limit_valueContext select_limit_value() {
			return GetRuleContext<Select_limit_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public First_or_nextContext first_or_next() {
			return GetRuleContext<First_or_nextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 1002, RULE_limit_clause);
		try {
			State = 8784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8753;
				Match(LIMIT);
				State = 8754;
				select_limit_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8755;
				Match(LIMIT);
				State = 8756;
				select_limit_value();
				State = 8757;
				Match(COMMA);
				State = 8758;
				select_offset_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8760;
				Match(FETCH);
				State = 8761;
				first_or_next();
				State = 8762;
				select_fetch_first_value();
				State = 8763;
				row_or_rows();
				State = 8764;
				Match(ONLY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8766;
				Match(FETCH);
				State = 8767;
				first_or_next();
				State = 8768;
				select_fetch_first_value();
				State = 8769;
				row_or_rows();
				State = 8770;
				Match(WITH);
				State = 8771;
				Match(TIES);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8773;
				Match(FETCH);
				State = 8774;
				first_or_next();
				State = 8775;
				row_or_rows();
				State = 8776;
				Match(ONLY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8778;
				Match(FETCH);
				State = 8779;
				first_or_next();
				State = 8780;
				row_or_rows();
				State = 8781;
				Match(WITH);
				State = 8782;
				Match(TIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOffset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOffset_clause(this);
		}
	}

	[RuleVersion(0)]
	public Offset_clauseContext offset_clause() {
		Offset_clauseContext _localctx = new Offset_clauseContext(Context, State);
		EnterRule(_localctx, 1004, RULE_offset_clause);
		try {
			State = 8792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8786;
				Match(OFFSET);
				State = 8787;
				select_offset_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8788;
				Match(OFFSET);
				State = 8789;
				select_fetch_first_value();
				State = 8790;
				row_or_rows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limit_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_limit_valueContext select_limit_value() {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(Context, State);
		EnterRule(_localctx, 1006, RULE_select_limit_value);
		try {
			State = 8796;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8794;
				a_expr(0);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8795;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_offset_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_offset_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_offset_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_offset_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_offset_valueContext select_offset_value() {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(Context, State);
		EnterRule(_localctx, 1008, RULE_select_offset_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8798;
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_fetch_first_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public I_or_f_constContext i_or_f_const() {
			return GetRuleContext<I_or_f_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_fetch_first_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_fetch_first_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_fetch_first_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_fetch_first_valueContext select_fetch_first_value() {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(Context, State);
		EnterRule(_localctx, 1010, RULE_select_fetch_first_value);
		try {
			State = 8805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8800;
				c_expr();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8801;
				Match(PLUS);
				State = 8802;
				i_or_f_const();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8803;
				Match(MINUS);
				State = 8804;
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I_or_f_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i_or_f_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterI_or_f_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitI_or_f_const(this);
		}
	}

	[RuleVersion(0)]
	public I_or_f_constContext i_or_f_const() {
		I_or_f_constContext _localctx = new I_or_f_constContext(Context, State);
		EnterRule(_localctx, 1012, RULE_i_or_f_const);
		try {
			State = 8809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8807;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8808;
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_rowsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_rows; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_or_rows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_or_rows(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_rowsContext row_or_rows() {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(Context, State);
		EnterRule(_localctx, 1014, RULE_row_or_rows);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8811;
			_la = TokenStream.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_or_nextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_or_next; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFirst_or_next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFirst_or_next(this);
		}
	}

	[RuleVersion(0)]
	public First_or_nextContext first_or_next() {
		First_or_nextContext _localctx = new First_or_nextContext(Context, State);
		EnterRule(_localctx, 1016, RULE_first_or_next);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8813;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(Context, State);
		EnterRule(_localctx, 1018, RULE_group_clause);
		try {
			State = 8819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8815;
				Match(GROUP_P);
				State = 8816;
				Match(BY);
				State = 8817;
				group_by_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item() {
			return GetRuleContext<Group_by_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Group_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_listContext group_by_list() {
		return group_by_list(0);
	}

	private Group_by_listContext group_by_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Group_by_listContext _localctx = new Group_by_listContext(Context, _parentState);
		Group_by_listContext _prevctx = _localctx;
		int _startState = 1020;
		EnterRecursionRule(_localctx, 1020, RULE_group_by_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8822;
			group_by_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8829;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,398,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Group_by_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_group_by_list);
					State = 8824;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8825;
					Match(COMMA);
					State = 8826;
					group_by_item();
					}
					} 
				}
				State = 8831;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,398,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_grouping_setContext empty_grouping_set() {
			return GetRuleContext<Empty_grouping_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_clauseContext cube_clause() {
			return GetRuleContext<Cube_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_clauseContext rollup_clause() {
			return GetRuleContext<Rollup_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 1022, RULE_group_by_item);
		try {
			State = 8837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8832;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8833;
				empty_grouping_set();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8834;
				cube_clause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8835;
				rollup_clause();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8836;
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEmpty_grouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEmpty_grouping_set(this);
		}
	}

	[RuleVersion(0)]
	public Empty_grouping_setContext empty_grouping_set() {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(Context, State);
		EnterRule(_localctx, 1024, RULE_empty_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8839;
			Match(OPEN_PAREN);
			State = 8840;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRollup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRollup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_clauseContext rollup_clause() {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(Context, State);
		EnterRule(_localctx, 1026, RULE_rollup_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8842;
			Match(ROLLUP);
			State = 8843;
			Match(OPEN_PAREN);
			State = 8844;
			expr_list(0);
			State = 8845;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCube_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCube_clause(this);
		}
	}

	[RuleVersion(0)]
	public Cube_clauseContext cube_clause() {
		Cube_clauseContext _localctx = new Cube_clauseContext(Context, State);
		EnterRule(_localctx, 1028, RULE_cube_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8847;
			Match(CUBE);
			State = 8848;
			Match(OPEN_PAREN);
			State = 8849;
			expr_list(0);
			State = 8850;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_clause(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 1030, RULE_grouping_sets_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8852;
			Match(GROUPING);
			State = 8853;
			Match(SETS);
			State = 8854;
			Match(OPEN_PAREN);
			State = 8855;
			group_by_list(0);
			State = 8856;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 1032, RULE_having_clause);
		try {
			State = 8861;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8858;
				Match(HAVING);
				State = 8859;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemsContext for_locking_items() {
			return GetRuleContext<For_locking_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_clauseContext for_locking_clause() {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1034, RULE_for_locking_clause);
		try {
			State = 8867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,401,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8863;
				for_locking_items(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8864;
				Match(FOR);
				State = 8865;
				Match(READ);
				State = 8866;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_for_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_for_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_for_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_for_locking_clauseContext opt_for_locking_clause() {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1036, RULE_opt_for_locking_clause);
		try {
			State = 8871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,402,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8869;
				for_locking_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext for_locking_item() {
			return GetRuleContext<For_locking_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemsContext for_locking_items() {
			return GetRuleContext<For_locking_itemsContext>(0);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_items(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemsContext for_locking_items() {
		return for_locking_items(0);
	}

	private For_locking_itemsContext for_locking_items(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		For_locking_itemsContext _localctx = new For_locking_itemsContext(Context, _parentState);
		For_locking_itemsContext _prevctx = _localctx;
		int _startState = 1038;
		EnterRecursionRule(_localctx, 1038, RULE_for_locking_items, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8874;
			for_locking_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8880;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,403,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_locking_itemsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_for_locking_items);
					State = 8876;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8877;
					for_locking_item();
					}
					} 
				}
				State = 8882;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,403,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class For_locking_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_strengthContext for_locking_strength() {
			return GetRuleContext<For_locking_strengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Locked_rels_listContext locked_rels_list() {
			return GetRuleContext<Locked_rels_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return GetRuleContext<Opt_nowait_or_skipContext>(0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_item(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemContext for_locking_item() {
		For_locking_itemContext _localctx = new For_locking_itemContext(Context, State);
		EnterRule(_localctx, 1040, RULE_for_locking_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8883;
			for_locking_strength();
			State = 8884;
			locked_rels_list();
			State = 8885;
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_strengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_strength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_strength(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_strengthContext for_locking_strength() {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(Context, State);
		EnterRule(_localctx, 1042, RULE_for_locking_strength);
		try {
			State = 8898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8887;
				Match(FOR);
				State = 8888;
				Match(UPDATE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8889;
				Match(FOR);
				State = 8890;
				Match(NO);
				State = 8891;
				Match(KEY);
				State = 8892;
				Match(UPDATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8893;
				Match(FOR);
				State = 8894;
				Match(SHARE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8895;
				Match(FOR);
				State = 8896;
				Match(KEY);
				State = 8897;
				Match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Locked_rels_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locked_rels_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLocked_rels_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLocked_rels_list(this);
		}
	}

	[RuleVersion(0)]
	public Locked_rels_listContext locked_rels_list() {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(Context, State);
		EnterRule(_localctx, 1044, RULE_locked_rels_list);
		try {
			State = 8903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,405,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8900;
				Match(OF);
				State = 8901;
				qualified_name_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValues_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValues_clause(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		return values_clause(0);
	}

	private Values_clauseContext values_clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Values_clauseContext _localctx = new Values_clauseContext(Context, _parentState);
		Values_clauseContext _prevctx = _localctx;
		int _startState = 1046;
		EnterRecursionRule(_localctx, 1046, RULE_values_clause, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 8906;
			Match(VALUES);
			State = 8907;
			Match(OPEN_PAREN);
			State = 8908;
			expr_list(0);
			State = 8909;
			Match(CLOSE_PAREN);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8919;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,406,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Values_clauseContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_values_clause);
					State = 8911;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 8912;
					Match(COMMA);
					State = 8913;
					Match(OPEN_PAREN);
					State = 8914;
					expr_list(0);
					State = 8915;
					Match(CLOSE_PAREN);
					}
					} 
				}
				State = 8921;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,406,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 1048, RULE_from_clause);
		try {
			State = 8925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8922;
				Match(FROM);
				State = 8923;
				from_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_list(this);
		}
	}

	[RuleVersion(0)]
	public From_listContext from_list() {
		From_listContext _localctx = new From_listContext(Context, State);
		EnterRule(_localctx, 1050, RULE_from_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8927;
			table_ref(0);
			State = 8932;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,408,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8928;
					Match(COMMA);
					State = 8929;
					table_ref(0);
					}
					} 
				}
				State = 8934;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,408,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
	 
		public Table_refContext() { }
		public virtual void CopyFrom(Table_refContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Table_ref_simpleContext : Table_refContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_alias_clauseContext opt_alias_clause() {
			return GetRuleContext<Opt_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_tableContext func_table() {
			return GetRuleContext<Func_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_alias_clauseContext func_alias_clause() {
			return GetRuleContext<Func_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XmltableContext xmltable() {
			return GetRuleContext<XmltableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref() {
			return GetRuleContext<Table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Table_ref_simpleContext(Table_refContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_ref_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_ref_simple(this);
		}
	}
	public partial class Table_ref_joined_tablesContext : Table_refContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_alias_clauseContext opt_alias_clause() {
			return GetRuleContext<Opt_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(PostgreSQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(PostgreSQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext join_type() {
			return GetRuleContext<Join_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext join_qual() {
			return GetRuleContext<Join_qualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(PostgreSQLParser.NATURAL, 0); }
		public Table_ref_joined_tablesContext(Table_refContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_ref_joined_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_ref_joined_tables(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		return table_ref(0);
	}

	private Table_refContext table_ref(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Table_refContext _localctx = new Table_refContext(Context, _parentState);
		Table_refContext _prevctx = _localctx;
		int _startState = 1052;
		EnterRecursionRule(_localctx, 1052, RULE_table_ref, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9002;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
			case 1:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 8936;
				relation_expr();
				State = 8937;
				opt_alias_clause();
				}
				break;
			case 2:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8939;
				relation_expr();
				State = 8940;
				opt_alias_clause();
				State = 8941;
				tablesample_clause();
				}
				break;
			case 3:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8943;
				func_table();
				State = 8944;
				func_alias_clause();
				}
				break;
			case 4:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8946;
				Match(LATERAL_P);
				State = 8947;
				func_table();
				State = 8948;
				func_alias_clause();
				}
				break;
			case 5:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8950;
				xmltable();
				State = 8951;
				opt_alias_clause();
				}
				break;
			case 6:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8953;
				Match(LATERAL_P);
				State = 8954;
				xmltable();
				State = 8955;
				opt_alias_clause();
				}
				break;
			case 7:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8957;
				select_with_parens();
				State = 8958;
				opt_alias_clause();
				}
				break;
			case 8:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8960;
				Match(LATERAL_P);
				State = 8961;
				select_with_parens();
				State = 8962;
				opt_alias_clause();
				}
				break;
			case 9:
				{
				_localctx = new Table_ref_simpleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8964;
				Match(OPEN_PAREN);
				State = 8965;
				table_ref(0);
				State = 8966;
				Match(CLOSE_PAREN);
				State = 8967;
				opt_alias_clause();
				}
				break;
			case 10:
				{
				_localctx = new Table_ref_joined_tablesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8969;
				Match(OPEN_PAREN);
				State = 8997;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,409,Context) ) {
				case 1:
					{
					State = 8970;
					table_ref(0);
					State = 8971;
					Match(CROSS);
					State = 8972;
					Match(JOIN);
					State = 8973;
					table_ref(0);
					}
					break;
				case 2:
					{
					State = 8975;
					table_ref(0);
					State = 8976;
					join_type();
					State = 8977;
					Match(JOIN);
					State = 8978;
					table_ref(0);
					State = 8979;
					join_qual();
					}
					break;
				case 3:
					{
					State = 8981;
					table_ref(0);
					State = 8982;
					Match(JOIN);
					State = 8983;
					table_ref(0);
					State = 8984;
					join_qual();
					}
					break;
				case 4:
					{
					State = 8986;
					table_ref(0);
					State = 8987;
					Match(NATURAL);
					State = 8988;
					join_type();
					State = 8989;
					Match(JOIN);
					State = 8990;
					table_ref(0);
					}
					break;
				case 5:
					{
					State = 8992;
					table_ref(0);
					State = 8993;
					Match(NATURAL);
					State = 8994;
					Match(JOIN);
					State = 8995;
					table_ref(0);
					}
					break;
				}
				State = 8999;
				Match(CLOSE_PAREN);
				State = 9000;
				opt_alias_clause();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9031;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,412,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9029;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,411,Context) ) {
					case 1:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						State = 9004;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 9005;
						Match(CROSS);
						State = 9006;
						Match(JOIN);
						State = 9007;
						table_ref(8);
						}
						break;
					case 2:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						State = 9008;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 9009;
						Match(NATURAL);
						State = 9010;
						join_type();
						State = 9011;
						Match(JOIN);
						State = 9012;
						table_ref(5);
						}
						break;
					case 3:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						State = 9014;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 9015;
						Match(NATURAL);
						State = 9016;
						Match(JOIN);
						State = 9017;
						table_ref(4);
						}
						break;
					case 4:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						State = 9018;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 9019;
						join_type();
						State = 9020;
						Match(JOIN);
						State = 9021;
						table_ref(0);
						State = 9022;
						join_qual();
						}
						break;
					case 5:
						{
						_localctx = new Table_ref_joined_tablesContext(new Table_refContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_table_ref);
						State = 9024;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 9025;
						Match(JOIN);
						State = 9026;
						table_ref(0);
						State = 9027;
						join_qual();
						}
						break;
					}
					} 
				}
				State = 9033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,412,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alias_clauseContext alias_clause() {
		Alias_clauseContext _localctx = new Alias_clauseContext(Context, State);
		EnterRule(_localctx, 1054, RULE_alias_clause);
		try {
			State = 9048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,413,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9034;
				Match(AS);
				State = 9035;
				colid();
				State = 9036;
				Match(OPEN_PAREN);
				State = 9037;
				name_list(0);
				State = 9038;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9040;
				Match(AS);
				State = 9041;
				colid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9042;
				colid();
				State = 9043;
				Match(OPEN_PAREN);
				State = 9044;
				name_list(0);
				State = 9045;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9047;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause() {
			return GetRuleContext<Alias_clauseContext>(0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_alias_clauseContext opt_alias_clause() {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1056, RULE_opt_alias_clause);
		try {
			State = 9052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9050;
				alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause() {
			return GetRuleContext<Alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Func_alias_clauseContext func_alias_clause() {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1058, RULE_func_alias_clause);
		try {
			State = 9072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9054;
				alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9055;
				Match(AS);
				State = 9056;
				Match(OPEN_PAREN);
				State = 9057;
				tablefuncelementlist(0);
				State = 9058;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9060;
				Match(AS);
				State = 9061;
				colid();
				State = 9062;
				Match(OPEN_PAREN);
				State = 9063;
				tablefuncelementlist(0);
				State = 9064;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9066;
				colid();
				State = 9067;
				Match(OPEN_PAREN);
				State = 9068;
				tablefuncelementlist(0);
				State = 9069;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_outerContext join_outer() {
			return GetRuleContext<Join_outerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_type(this);
		}
	}

	[RuleVersion(0)]
	public Join_typeContext join_type() {
		Join_typeContext _localctx = new Join_typeContext(Context, State);
		EnterRule(_localctx, 1060, RULE_join_type);
		try {
			State = 9081;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9074;
				Match(FULL);
				State = 9075;
				join_outer();
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9076;
				Match(LEFT);
				State = 9077;
				join_outer();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9078;
				Match(RIGHT);
				State = 9079;
				join_outer();
				}
				break;
			case INNER_P:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9080;
				Match(INNER_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_outerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_outerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_outer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_outer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_outer(this);
		}
	}

	[RuleVersion(0)]
	public Join_outerContext join_outer() {
		Join_outerContext _localctx = new Join_outerContext(Context, State);
		EnterRule(_localctx, 1062, RULE_join_outer);
		try {
			State = 9085;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OUTER_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9083;
				Match(OUTER_P);
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_qual(this);
		}
	}

	[RuleVersion(0)]
	public Join_qualContext join_qual() {
		Join_qualContext _localctx = new Join_qualContext(Context, State);
		EnterRule(_localctx, 1064, RULE_join_qual);
		try {
			State = 9094;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9087;
				Match(USING);
				State = 9088;
				Match(OPEN_PAREN);
				State = 9089;
				name_list(0);
				State = 9090;
				Match(CLOSE_PAREN);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9092;
				Match(ON);
				State = 9093;
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr(this);
		}
	}

	[RuleVersion(0)]
	public Relation_exprContext relation_expr() {
		Relation_exprContext _localctx = new Relation_exprContext(Context, State);
		EnterRule(_localctx, 1066, RULE_relation_expr);
		try {
			State = 9107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9096;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9097;
				qualified_name();
				State = 9098;
				Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9100;
				Match(ONLY);
				State = 9101;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9102;
				Match(ONLY);
				State = 9103;
				Match(OPEN_PAREN);
				State = 9104;
				qualified_name();
				State = 9105;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_listContext relation_expr_list() {
		return relation_expr_list(0);
	}

	private Relation_expr_listContext relation_expr_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relation_expr_listContext _localctx = new Relation_expr_listContext(Context, _parentState);
		Relation_expr_listContext _prevctx = _localctx;
		int _startState = 1068;
		EnterRecursionRule(_localctx, 1068, RULE_relation_expr_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9110;
			relation_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,420,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relation_expr_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relation_expr_list);
					State = 9112;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 9113;
					Match(COMMA);
					State = 9114;
					relation_expr();
					}
					} 
				}
				State = 9119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,420,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relation_expr_opt_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_opt_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_opt_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_opt_alias(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(Context, State);
		EnterRule(_localctx, 1070, RULE_relation_expr_opt_alias);
		try {
			State = 9128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9120;
				relation_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9121;
				relation_expr();
				State = 9122;
				colid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9124;
				relation_expr();
				State = 9125;
				Match(AS);
				State = 9126;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return GetRuleContext<Opt_repeatable_clauseContext>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 1072, RULE_tablesample_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9130;
			Match(TABLESAMPLE);
			State = 9131;
			func_name();
			State = 9132;
			Match(OPEN_PAREN);
			State = 9133;
			expr_list(0);
			State = 9134;
			Match(CLOSE_PAREN);
			State = 9135;
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_repeatable_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_repeatable_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_repeatable_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_repeatable_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_repeatable_clauseContext opt_repeatable_clause() {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(Context, State);
		EnterRule(_localctx, 1074, RULE_opt_repeatable_clause);
		try {
			State = 9143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9137;
				Match(REPEATABLE);
				State = 9138;
				Match(OPEN_PAREN);
				State = 9139;
				a_expr(0);
				State = 9140;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_ordinalityContext opt_ordinality() {
			return GetRuleContext<Opt_ordinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_listContext rowsfrom_list() {
			return GetRuleContext<Rowsfrom_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_tableContext func_table() {
		Func_tableContext _localctx = new Func_tableContext(Context, State);
		EnterRule(_localctx, 1076, RULE_func_table);
		try {
			State = 9155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9145;
				func_expr_windowless();
				State = 9146;
				opt_ordinality();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9148;
				Match(ROWS);
				State = 9149;
				Match(FROM);
				State = 9150;
				Match(OPEN_PAREN);
				State = 9151;
				rowsfrom_list(0);
				State = 9152;
				Match(CLOSE_PAREN);
				State = 9153;
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_col_def_listContext opt_col_def_list() {
			return GetRuleContext<Opt_col_def_listContext>(0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_item(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_itemContext rowsfrom_item() {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(Context, State);
		EnterRule(_localctx, 1078, RULE_rowsfrom_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9157;
			func_expr_windowless();
			State = 9158;
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext rowsfrom_item() {
			return GetRuleContext<Rowsfrom_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_listContext rowsfrom_list() {
			return GetRuleContext<Rowsfrom_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_list(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_listContext rowsfrom_list() {
		return rowsfrom_list(0);
	}

	private Rowsfrom_listContext rowsfrom_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(Context, _parentState);
		Rowsfrom_listContext _prevctx = _localctx;
		int _startState = 1080;
		EnterRecursionRule(_localctx, 1080, RULE_rowsfrom_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9161;
			rowsfrom_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,424,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Rowsfrom_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_rowsfrom_list);
					State = 9163;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 9164;
					Match(COMMA);
					State = 9165;
					rowsfrom_item();
					}
					} 
				}
				State = 9170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,424,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_col_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_col_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_col_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_col_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_col_def_listContext opt_col_def_list() {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(Context, State);
		EnterRule(_localctx, 1082, RULE_opt_col_def_list);
		try {
			State = 9177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9171;
				Match(AS);
				State = 9172;
				Match(OPEN_PAREN);
				State = 9173;
				tablefuncelementlist(0);
				State = 9174;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_ordinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_ordinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_ordinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_ordinality(this);
		}
	}

	[RuleVersion(0)]
	public Opt_ordinalityContext opt_ordinality() {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(Context, State);
		EnterRule(_localctx, 1084, RULE_opt_ordinality);
		try {
			State = 9182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9179;
				Match(WITH);
				State = 9180;
				Match(ORDINALITY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 1086, RULE_where_clause);
		try {
			State = 9187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,427,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9184;
				Match(WHERE);
				State = 9185;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_or_current_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_or_current_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_or_current_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_or_current_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_or_current_clauseContext where_or_current_clause() {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(Context, State);
		EnterRule(_localctx, 1088, RULE_where_or_current_clause);
		try {
			State = 9196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,428,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9189;
				Match(WHERE);
				State = 9190;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9191;
				Match(WHERE);
				State = 9192;
				Match(CURRENT_P);
				State = 9193;
				Match(OF);
				State = 9194;
				cursor_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttablefuncelementlistContext opttablefuncelementlist() {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1090, RULE_opttablefuncelementlist);
		try {
			State = 9200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9198;
				tablefuncelementlist(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement() {
			return GetRuleContext<TablefuncelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementlistContext tablefuncelementlist() {
		return tablefuncelementlist(0);
	}

	private TablefuncelementlistContext tablefuncelementlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(Context, _parentState);
		TablefuncelementlistContext _prevctx = _localctx;
		int _startState = 1092;
		EnterRecursionRule(_localctx, 1092, RULE_tablefuncelementlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9203;
			tablefuncelement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,430,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TablefuncelementlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_tablefuncelementlist);
					State = 9205;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 9206;
					Match(COMMA);
					State = 9207;
					tablefuncelement();
					}
					} 
				}
				State = 9212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,430,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TablefuncelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelement(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementContext tablefuncelement() {
		TablefuncelementContext _localctx = new TablefuncelementContext(Context, State);
		EnterRule(_localctx, 1094, RULE_tablefuncelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9213;
			colid();
			State = 9214;
			typename();
			State = 9215;
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmltableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_listContext xmltable_column_list() {
			return GetRuleContext<Xmltable_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_listContext xml_namespace_list() {
			return GetRuleContext<Xml_namespace_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable(this);
		}
	}

	[RuleVersion(0)]
	public XmltableContext xmltable() {
		XmltableContext _localctx = new XmltableContext(Context, State);
		EnterRule(_localctx, 1096, RULE_xmltable);
		try {
			State = 9238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9217;
				Match(XMLTABLE);
				State = 9218;
				Match(OPEN_PAREN);
				State = 9219;
				c_expr();
				State = 9220;
				xmlexists_argument();
				State = 9221;
				Match(COLUMNS);
				State = 9222;
				xmltable_column_list(0);
				State = 9223;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9225;
				Match(XMLTABLE);
				State = 9226;
				Match(OPEN_PAREN);
				State = 9227;
				Match(XMLNAMESPACES);
				State = 9228;
				Match(OPEN_PAREN);
				State = 9229;
				xml_namespace_list(0);
				State = 9230;
				Match(CLOSE_PAREN);
				State = 9231;
				Match(COMMA);
				State = 9232;
				c_expr();
				State = 9233;
				xmlexists_argument();
				State = 9234;
				Match(COLUMNS);
				State = 9235;
				xmltable_column_list(0);
				State = 9236;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext xmltable_column_el() {
			return GetRuleContext<Xmltable_column_elContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_listContext xmltable_column_list() {
			return GetRuleContext<Xmltable_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_listContext xmltable_column_list() {
		return xmltable_column_list(0);
	}

	private Xmltable_column_listContext xmltable_column_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(Context, _parentState);
		Xmltable_column_listContext _prevctx = _localctx;
		int _startState = 1098;
		EnterRecursionRule(_localctx, 1098, RULE_xmltable_column_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9241;
			xmltable_column_el();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,432,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xmltable_column_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_xmltable_column_list);
					State = 9243;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 9244;
					Match(COMMA);
					State = 9245;
					xmltable_column_el();
					}
					} 
				}
				State = 9250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,432,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Xmltable_column_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_listContext xmltable_column_option_list() {
			return GetRuleContext<Xmltable_column_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_elContext xmltable_column_el() {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(Context, State);
		EnterRule(_localctx, 1100, RULE_xmltable_column_el);
		try {
			State = 9262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9251;
				colid();
				State = 9252;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9254;
				colid();
				State = 9255;
				typename();
				State = 9256;
				xmltable_column_option_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9258;
				colid();
				State = 9259;
				Match(FOR);
				State = 9260;
				Match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext xmltable_column_option_el() {
			return GetRuleContext<Xmltable_column_option_elContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_listContext xmltable_column_option_list() {
			return GetRuleContext<Xmltable_column_option_listContext>(0);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_listContext xmltable_column_option_list() {
		return xmltable_column_option_list(0);
	}

	private Xmltable_column_option_listContext xmltable_column_option_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(Context, _parentState);
		Xmltable_column_option_listContext _prevctx = _localctx;
		int _startState = 1102;
		EnterRecursionRule(_localctx, 1102, RULE_xmltable_column_option_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9265;
			xmltable_column_option_el();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,434,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xmltable_column_option_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_xmltable_column_option_list);
					State = 9267;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 9268;
					xmltable_column_option_el();
					}
					} 
				}
				State = 9273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,434,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_elContext xmltable_column_option_el() {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(Context, State);
		EnterRule(_localctx, 1104, RULE_xmltable_column_option_el);
		try {
			State = 9282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9274;
				identifier();
				State = 9275;
				b_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9277;
				Match(DEFAULT);
				State = 9278;
				b_expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9279;
				Match(NOT);
				State = 9280;
				Match(NULL_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9281;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext xml_namespace_el() {
			return GetRuleContext<Xml_namespace_elContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_listContext xml_namespace_list() {
			return GetRuleContext<Xml_namespace_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_listContext xml_namespace_list() {
		return xml_namespace_list(0);
	}

	private Xml_namespace_listContext xml_namespace_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(Context, _parentState);
		Xml_namespace_listContext _prevctx = _localctx;
		int _startState = 1106;
		EnterRecursionRule(_localctx, 1106, RULE_xml_namespace_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9285;
			xml_namespace_el();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,436,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_namespace_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_xml_namespace_list);
					State = 9287;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 9288;
					Match(COMMA);
					State = 9289;
					xml_namespace_el();
					}
					} 
				}
				State = 9294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,436,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Xml_namespace_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_elContext xml_namespace_el() {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(Context, State);
		EnterRule(_localctx, 1108, RULE_xml_namespace_el);
		try {
			State = 9301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9295;
				b_expr(0);
				State = 9296;
				Match(AS);
				State = 9297;
				collabel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9299;
				Match(DEFAULT);
				State = 9300;
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_array_boundsContext opt_array_bounds() {
			return GetRuleContext<Opt_array_boundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWTYPE() { return GetToken(PostgreSQLParser.ROWTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 1110, RULE_typename);
		try {
			State = 9338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9303;
				simpletypename();
				State = 9304;
				opt_array_bounds(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9306;
				Match(SETOF);
				State = 9307;
				simpletypename();
				State = 9308;
				opt_array_bounds(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9310;
				simpletypename();
				State = 9311;
				Match(ARRAY);
				State = 9312;
				Match(OPEN_BRACKET);
				State = 9313;
				iconst();
				State = 9314;
				Match(CLOSE_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9316;
				Match(SETOF);
				State = 9317;
				simpletypename();
				State = 9318;
				Match(ARRAY);
				State = 9319;
				Match(OPEN_BRACKET);
				State = 9320;
				iconst();
				State = 9321;
				Match(CLOSE_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9323;
				simpletypename();
				State = 9324;
				Match(ARRAY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9326;
				Match(SETOF);
				State = 9327;
				simpletypename();
				State = 9328;
				Match(ARRAY);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9330;
				qualified_name();
				State = 9331;
				Match(PERCENT);
				State = 9332;
				Match(ROWTYPE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9334;
				qualified_name();
				State = 9335;
				Match(PERCENT);
				State = 9336;
				Match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_array_boundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_array_boundsContext opt_array_bounds() {
			return GetRuleContext<Opt_array_boundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_array_bounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_array_bounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_array_bounds(this);
		}
	}

	[RuleVersion(0)]
	public Opt_array_boundsContext opt_array_bounds() {
		return opt_array_bounds(0);
	}

	private Opt_array_boundsContext opt_array_bounds(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(Context, _parentState);
		Opt_array_boundsContext _prevctx = _localctx;
		int _startState = 1112;
		EnterRecursionRule(_localctx, 1112, RULE_opt_array_bounds, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9351;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,440,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9349;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
					case 1:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						State = 9341;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 9342;
						Match(OPEN_BRACKET);
						State = 9343;
						Match(CLOSE_BRACKET);
						}
						break;
					case 2:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						State = 9344;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 9345;
						Match(OPEN_BRACKET);
						State = 9346;
						iconst();
						State = 9347;
						Match(CLOSE_BRACKET);
						}
						break;
					}
					} 
				}
				State = 9353;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,440,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpletypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenerictypeContext generictype() {
			return GetRuleContext<GenerictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimpletypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimpletypename(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypenameContext simpletypename() {
		SimpletypenameContext _localctx = new SimpletypenameContext(Context, State);
		EnterRule(_localctx, 1114, RULE_simpletypename);
		try {
			State = 9367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9354;
				generictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9355;
				numeric();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9356;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9357;
				character();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9358;
				constdatetime();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9359;
				constinterval();
				State = 9360;
				opt_interval();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9362;
				constinterval();
				State = 9363;
				Match(OPEN_PAREN);
				State = 9364;
				iconst();
				State = 9365;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsttypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstbitContext constbit() {
			return GetRuleContext<ConstbitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstcharacterContext constcharacter() {
			return GetRuleContext<ConstcharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consttypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConsttypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConsttypename(this);
		}
	}

	[RuleVersion(0)]
	public ConsttypenameContext consttypename() {
		ConsttypenameContext _localctx = new ConsttypenameContext(Context, State);
		EnterRule(_localctx, 1116, RULE_consttypename);
		try {
			State = 9373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9369;
				numeric();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9370;
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9371;
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9372;
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenerictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_type_modifiersContext opt_type_modifiers() {
			return GetRuleContext<Opt_type_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerictype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerictype(this);
		}
	}

	[RuleVersion(0)]
	public GenerictypeContext generictype() {
		GenerictypeContext _localctx = new GenerictypeContext(Context, State);
		EnterRule(_localctx, 1118, RULE_generictype);
		try {
			State = 9382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9375;
				type_function_name();
				State = 9376;
				opt_type_modifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9378;
				type_function_name();
				State = 9379;
				attrs(0);
				State = 9380;
				opt_type_modifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_type_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_type_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_type_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_type_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Opt_type_modifiersContext opt_type_modifiers() {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(Context, State);
		EnterRule(_localctx, 1120, RULE_opt_type_modifiers);
		try {
			State = 9389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9384;
				Match(OPEN_PAREN);
				State = 9385;
				expr_list(0);
				State = 9386;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_floatContext opt_float() {
			return GetRuleContext<Opt_floatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_type_modifiersContext opt_type_modifiers() {
			return GetRuleContext<Opt_type_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(PostgreSQLParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 1122, RULE_numeric);
		try {
			State = 9407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9391;
				Match(INT_P);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9392;
				Match(INTEGER);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9393;
				Match(SMALLINT);
				}
				break;
			case BIGINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9394;
				Match(BIGINT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9395;
				Match(REAL);
				}
				break;
			case FLOAT_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9396;
				Match(FLOAT_P);
				State = 9397;
				opt_float();
				}
				break;
			case DOUBLE_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9398;
				Match(DOUBLE_P);
				State = 9399;
				Match(PRECISION);
				}
				break;
			case DECIMAL_P:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9400;
				Match(DECIMAL_P);
				State = 9401;
				opt_type_modifiers();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9402;
				Match(DEC);
				State = 9403;
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9404;
				Match(NUMERIC);
				State = 9405;
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9406;
				Match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_floatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_float(this);
		}
	}

	[RuleVersion(0)]
	public Opt_floatContext opt_float() {
		Opt_floatContext _localctx = new Opt_floatContext(Context, State);
		EnterRule(_localctx, 1124, RULE_opt_float);
		try {
			State = 9414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9409;
				Match(OPEN_PAREN);
				State = 9410;
				iconst();
				State = 9411;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public BitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBit(this);
		}
	}

	[RuleVersion(0)]
	public BitContext bit() {
		BitContext _localctx = new BitContext(Context, State);
		EnterRule(_localctx, 1126, RULE_bit);
		try {
			State = 9418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9416;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9417;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstbitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constbit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstbit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstbit(this);
		}
	}

	[RuleVersion(0)]
	public ConstbitContext constbit() {
		ConstbitContext _localctx = new ConstbitContext(Context, State);
		EnterRule(_localctx, 1128, RULE_constbit);
		try {
			State = 9422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9420;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9421;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithlengthContext bitwithlength() {
		BitwithlengthContext _localctx = new BitwithlengthContext(Context, State);
		EnterRule(_localctx, 1130, RULE_bitwithlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9424;
			Match(BIT);
			State = 9425;
			opt_varying();
			State = 9426;
			Match(OPEN_PAREN);
			State = 9427;
			expr_list(0);
			State = 9428;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithoutlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithoutlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithoutlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithoutlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithoutlengthContext bitwithoutlength() {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(Context, State);
		EnterRule(_localctx, 1132, RULE_bitwithoutlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9430;
			Match(BIT);
			State = 9431;
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 1134, RULE_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9433;
			character_c();
			State = 9438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				{
				State = 9434;
				Match(OPEN_PAREN);
				State = 9435;
				iconst();
				State = 9436;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstcharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constcharacter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstcharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstcharacter(this);
		}
	}

	[RuleVersion(0)]
	public ConstcharacterContext constcharacter() {
		ConstcharacterContext _localctx = new ConstcharacterContext(Context, State);
		EnterRule(_localctx, 1136, RULE_constcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9440;
			character_c();
			State = 9445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 9441;
				Match(OPEN_PAREN);
				State = 9442;
				iconst();
				State = 9443;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(PostgreSQLParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter_c(this);
		}
	}

	[RuleVersion(0)]
	public Character_cContext character_c() {
		Character_cContext _localctx = new Character_cContext(Context, State);
		EnterRule(_localctx, 1138, RULE_character_c);
		try {
			State = 9460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9447;
				Match(CHARACTER);
				State = 9448;
				opt_varying();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9449;
				Match(CHAR_P);
				State = 9450;
				opt_varying();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9451;
				Match(VARCHAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9452;
				Match(NATIONAL);
				State = 9453;
				Match(CHARACTER);
				State = 9454;
				opt_varying();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9455;
				Match(NATIONAL);
				State = 9456;
				Match(CHAR_P);
				State = 9457;
				opt_varying();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9458;
				Match(NCHAR);
				State = 9459;
				opt_varying();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_varyingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_varying; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_varying(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_varying(this);
		}
	}

	[RuleVersion(0)]
	public Opt_varyingContext opt_varying() {
		Opt_varyingContext _localctx = new Opt_varyingContext(Context, State);
		EnterRule(_localctx, 1140, RULE_opt_varying);
		try {
			State = 9464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9462;
				Match(VARYING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstdatetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_timezoneContext opt_timezone() {
			return GetRuleContext<Opt_timezoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constdatetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstdatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstdatetime(this);
		}
	}

	[RuleVersion(0)]
	public ConstdatetimeContext constdatetime() {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(Context, State);
		EnterRule(_localctx, 1142, RULE_constdatetime);
		try {
			State = 9482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9466;
				Match(TIMESTAMP);
				State = 9467;
				Match(OPEN_PAREN);
				State = 9468;
				iconst();
				State = 9469;
				Match(CLOSE_PAREN);
				State = 9470;
				opt_timezone();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9472;
				Match(TIMESTAMP);
				State = 9473;
				opt_timezone();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9474;
				Match(TIME);
				State = 9475;
				Match(OPEN_PAREN);
				State = 9476;
				iconst();
				State = 9477;
				Match(CLOSE_PAREN);
				State = 9478;
				opt_timezone();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9480;
				Match(TIME);
				State = 9481;
				opt_timezone();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstintervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constinterval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstinterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstinterval(this);
		}
	}

	[RuleVersion(0)]
	public ConstintervalContext constinterval() {
		ConstintervalContext _localctx = new ConstintervalContext(Context, State);
		EnterRule(_localctx, 1144, RULE_constinterval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9484;
			Match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_timezoneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_timezone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_timezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_timezone(this);
		}
	}

	[RuleVersion(0)]
	public Opt_timezoneContext opt_timezone() {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(Context, State);
		EnterRule(_localctx, 1146, RULE_opt_timezone);
		try {
			State = 9493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9486;
				Match(WITH);
				State = 9487;
				Match(TIME);
				State = 9488;
				Match(ZONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9489;
				Match(WITHOUT);
				State = 9490;
				Match(TIME);
				State = 9491;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_intervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interval_secondContext interval_second() {
			return GetRuleContext<Interval_secondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_interval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_interval(this);
		}
	}

	[RuleVersion(0)]
	public Opt_intervalContext opt_interval() {
		Opt_intervalContext _localctx = new Opt_intervalContext(Context, State);
		EnterRule(_localctx, 1148, RULE_opt_interval);
		try {
			State = 9523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9495;
				Match(YEAR_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9496;
				Match(MONTH_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9497;
				Match(DAY_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9498;
				Match(HOUR_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9499;
				Match(MINUTE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9500;
				interval_second();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9501;
				Match(YEAR_P);
				State = 9502;
				Match(TO);
				State = 9503;
				Match(MONTH_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9504;
				Match(DAY_P);
				State = 9505;
				Match(TO);
				State = 9506;
				Match(HOUR_P);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9507;
				Match(DAY_P);
				State = 9508;
				Match(TO);
				State = 9509;
				Match(MINUTE_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9510;
				Match(DAY_P);
				State = 9511;
				Match(TO);
				State = 9512;
				interval_second();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9513;
				Match(HOUR_P);
				State = 9514;
				Match(TO);
				State = 9515;
				Match(MINUTE_P);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9516;
				Match(HOUR_P);
				State = 9517;
				Match(TO);
				State = 9518;
				interval_second();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9519;
				Match(MINUTE_P);
				State = 9520;
				Match(TO);
				State = 9521;
				interval_second();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_secondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_second; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInterval_second(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInterval_second(this);
		}
	}

	[RuleVersion(0)]
	public Interval_secondContext interval_second() {
		Interval_secondContext _localctx = new Interval_secondContext(Context, State);
		EnterRule(_localctx, 1150, RULE_interval_second);
		try {
			State = 9531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9525;
				Match(SECOND_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9526;
				Match(SECOND_P);
				State = 9527;
				Match(OPEN_PAREN);
				State = 9528;
				iconst();
				State = 9529;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_escapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_escape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_escape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_escape(this);
		}
	}

	[RuleVersion(0)]
	public Opt_escapeContext opt_escape() {
		Opt_escapeContext _localctx = new Opt_escapeContext(Context, State);
		EnterRule(_localctx, 1152, RULE_opt_escape);
		try {
			State = 9536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9533;
				Match(ESCAPE);
				State = 9534;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Not_laContext not_la() {
			return GetRuleContext<Not_laContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asymmetricContext opt_asymmetric() {
			return GetRuleContext<Opt_asymmetricContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(PostgreSQLParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(PostgreSQLParser.GREATER_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(PostgreSQLParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_escapeContext opt_escape() {
			return GetRuleContext<Opt_escapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subquery_OpContext subquery_Op() {
			return GetRuleContext<Subquery_OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_typeContext sub_type() {
			return GetRuleContext<Sub_typeContext>(0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr(this);
		}
	}

	[RuleVersion(0)]
	public A_exprContext a_expr() {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		A_exprContext _localctx = new A_exprContext(Context, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 1154;
		EnterRecursionRule(_localctx, 1154, RULE_a_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
			case 1:
				{
				State = 9539;
				c_expr();
				}
				break;
			case 2:
				{
				State = 9540;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9541;
				a_expr(51);
				}
				break;
			case 3:
				{
				State = 9542;
				qual_op();
				State = 9543;
				a_expr(46);
				}
				break;
			case 4:
				{
				State = 9545;
				row();
				State = 9546;
				Match(OVERLAPS);
				State = 9547;
				row();
				}
				break;
			case 5:
				{
				State = 9549;
				Match(NOT);
				State = 9550;
				a_expr(13);
				}
				break;
			case 6:
				{
				State = 9551;
				not_la();
				State = 9552;
				a_expr(12);
				}
				break;
			case 7:
				{
				State = 9554;
				Match(UNIQUE);
				State = 9555;
				select_with_parens();
				}
				break;
			case 8:
				{
				State = 9556;
				Match(DEFAULT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9770;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9768;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
					case 1:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9559;
						if (!(Precpred(Context, 52))) throw new FailedPredicateException(this, "Precpred(Context, 52)");
						State = 9560;
						Match(AT);
						State = 9561;
						Match(TIME);
						State = 9562;
						Match(ZONE);
						State = 9563;
						a_expr(53);
						}
						break;
					case 2:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9564;
						if (!(Precpred(Context, 50))) throw new FailedPredicateException(this, "Precpred(Context, 50)");
						State = 9565;
						Match(CARET);
						State = 9566;
						a_expr(51);
						}
						break;
					case 3:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9567;
						if (!(Precpred(Context, 49))) throw new FailedPredicateException(this, "Precpred(Context, 49)");
						State = 9568;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9569;
						a_expr(50);
						}
						break;
					case 4:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9570;
						if (!(Precpred(Context, 48))) throw new FailedPredicateException(this, "Precpred(Context, 48)");
						State = 9571;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9572;
						a_expr(49);
						}
						break;
					case 5:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9573;
						if (!(Precpred(Context, 47))) throw new FailedPredicateException(this, "Precpred(Context, 47)");
						State = 9574;
						qual_op();
						State = 9575;
						a_expr(48);
						}
						break;
					case 6:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9577;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 9578;
						Match(BETWEEN);
						State = 9579;
						opt_asymmetric();
						State = 9580;
						b_expr(0);
						State = 9581;
						Match(AND);
						State = 9582;
						a_expr(40);
						}
						break;
					case 7:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9584;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 9585;
						not_la();
						State = 9586;
						Match(BETWEEN);
						State = 9587;
						opt_asymmetric();
						State = 9588;
						b_expr(0);
						State = 9589;
						Match(AND);
						State = 9590;
						a_expr(39);
						}
						break;
					case 8:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9592;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 9593;
						Match(BETWEEN);
						State = 9594;
						Match(SYMMETRIC);
						State = 9595;
						b_expr(0);
						State = 9596;
						Match(AND);
						State = 9597;
						a_expr(38);
						}
						break;
					case 9:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9599;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 9600;
						not_la();
						State = 9601;
						Match(BETWEEN);
						State = 9602;
						Match(SYMMETRIC);
						State = 9603;
						b_expr(0);
						State = 9604;
						Match(AND);
						State = 9605;
						a_expr(37);
						}
						break;
					case 10:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9607;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 9608;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9609;
						a_expr(36);
						}
						break;
					case 11:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9610;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 9611;
						Match(IS);
						State = 9612;
						Match(DISTINCT);
						State = 9613;
						Match(FROM);
						State = 9614;
						a_expr(24);
						}
						break;
					case 12:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9615;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 9616;
						Match(IS);
						State = 9617;
						Match(NOT);
						State = 9618;
						Match(DISTINCT);
						State = 9619;
						Match(FROM);
						State = 9620;
						a_expr(23);
						}
						break;
					case 13:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9621;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 9622;
						Match(AND);
						State = 9623;
						a_expr(12);
						}
						break;
					case 14:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9624;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 9625;
						Match(OR);
						State = 9626;
						a_expr(11);
						}
						break;
					case 15:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9627;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 9628;
						Match(LESS_LESS);
						State = 9629;
						a_expr(10);
						}
						break;
					case 16:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9630;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 9631;
						Match(GREATER_GREATER);
						State = 9632;
						a_expr(9);
						}
						break;
					case 17:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9633;
						if (!(Precpred(Context, 54))) throw new FailedPredicateException(this, "Precpred(Context, 54)");
						State = 9634;
						Match(TYPECAST);
						State = 9635;
						typename();
						}
						break;
					case 18:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9636;
						if (!(Precpred(Context, 53))) throw new FailedPredicateException(this, "Precpred(Context, 53)");
						State = 9637;
						Match(COLLATE);
						State = 9638;
						any_name();
						}
						break;
					case 19:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9639;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 9640;
						Match(LIKE);
						State = 9641;
						a_expr(0);
						State = 9642;
						opt_escape();
						}
						break;
					case 20:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9644;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 9645;
						not_la();
						State = 9646;
						Match(LIKE);
						State = 9647;
						a_expr(0);
						State = 9648;
						opt_escape();
						}
						break;
					case 21:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9650;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 9651;
						Match(ILIKE);
						State = 9652;
						a_expr(0);
						State = 9653;
						opt_escape();
						}
						break;
					case 22:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9655;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 9656;
						not_la();
						State = 9657;
						Match(ILIKE);
						State = 9658;
						a_expr(0);
						State = 9659;
						opt_escape();
						}
						break;
					case 23:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9661;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 9662;
						Match(SIMILAR);
						State = 9663;
						Match(TO);
						State = 9664;
						a_expr(0);
						State = 9665;
						opt_escape();
						}
						break;
					case 24:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9667;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 9668;
						not_la();
						State = 9669;
						Match(SIMILAR);
						State = 9670;
						Match(TO);
						State = 9671;
						a_expr(0);
						State = 9672;
						opt_escape();
						}
						break;
					case 25:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9674;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 9675;
						Match(IS);
						State = 9676;
						Match(NULL_P);
						}
						break;
					case 26:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9677;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 9678;
						Match(ISNULL);
						}
						break;
					case 27:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9679;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 9680;
						Match(IS);
						State = 9681;
						Match(NOT);
						State = 9682;
						Match(NULL_P);
						}
						break;
					case 28:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9683;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 9684;
						Match(NOTNULL);
						}
						break;
					case 29:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9685;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 9686;
						Match(IS);
						State = 9687;
						Match(TRUE_P);
						}
						break;
					case 30:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9688;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 9689;
						Match(IS);
						State = 9690;
						Match(NOT);
						State = 9691;
						Match(TRUE_P);
						}
						break;
					case 31:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9692;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 9693;
						Match(IS);
						State = 9694;
						Match(FALSE_P);
						}
						break;
					case 32:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9695;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 9696;
						Match(IS);
						State = 9697;
						Match(NOT);
						State = 9698;
						Match(FALSE_P);
						}
						break;
					case 33:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9699;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 9700;
						Match(IS);
						State = 9701;
						Match(UNKNOWN);
						}
						break;
					case 34:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9702;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 9703;
						Match(IS);
						State = 9704;
						Match(NOT);
						State = 9705;
						Match(UNKNOWN);
						}
						break;
					case 35:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9706;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 9707;
						Match(IS);
						State = 9708;
						Match(OF);
						State = 9709;
						Match(OPEN_PAREN);
						State = 9710;
						type_list(0);
						State = 9711;
						Match(CLOSE_PAREN);
						}
						break;
					case 36:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9713;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 9714;
						Match(IS);
						State = 9715;
						Match(NOT);
						State = 9716;
						Match(OF);
						State = 9717;
						Match(OPEN_PAREN);
						State = 9718;
						type_list(0);
						State = 9719;
						Match(CLOSE_PAREN);
						}
						break;
					case 37:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9721;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 9722;
						Match(IS);
						State = 9723;
						Match(DOCUMENT_P);
						}
						break;
					case 38:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9724;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 9725;
						Match(IS);
						State = 9726;
						Match(NOT);
						State = 9727;
						Match(DOCUMENT_P);
						}
						break;
					case 39:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9728;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 9729;
						Match(IS);
						State = 9730;
						Match(NORMALIZED);
						}
						break;
					case 40:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9731;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 9732;
						Match(IS);
						State = 9733;
						unicode_normal_form();
						State = 9734;
						Match(NORMALIZED);
						}
						break;
					case 41:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9736;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 9737;
						Match(IS);
						State = 9738;
						Match(NOT);
						State = 9739;
						Match(NORMALIZED);
						}
						break;
					case 42:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9740;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 9741;
						Match(IS);
						State = 9742;
						Match(NOT);
						State = 9743;
						unicode_normal_form();
						State = 9744;
						Match(NORMALIZED);
						}
						break;
					case 43:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9746;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 9747;
						qual_op();
						}
						break;
					case 44:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9748;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 9749;
						Match(IN_P);
						State = 9750;
						in_expr();
						}
						break;
					case 45:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9751;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 9752;
						not_la();
						State = 9753;
						Match(IN_P);
						State = 9754;
						in_expr();
						}
						break;
					case 46:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9756;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 9757;
						subquery_Op();
						State = 9758;
						sub_type();
						State = 9759;
						select_with_parens();
						}
						break;
					case 47:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 9761;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 9762;
						subquery_Op();
						State = 9763;
						sub_type();
						State = 9764;
						Match(OPEN_PAREN);
						State = 9765;
						a_expr(0);
						State = 9766;
						Match(CLOSE_PAREN);
						}
						break;
					}
					} 
				}
				State = 9772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Not_laContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Not_laContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_la; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNot_la(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNot_la(this);
		}
	}

	[RuleVersion(0)]
	public Not_laContext not_la() {
		Not_laContext _localctx = new Not_laContext(Context, State);
		EnterRule(_localctx, 1156, RULE_not_la);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9773;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(PostgreSQLParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterB_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitB_expr(this);
		}
	}

	[RuleVersion(0)]
	public B_exprContext b_expr() {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		B_exprContext _localctx = new B_exprContext(Context, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1158;
		EnterRecursionRule(_localctx, 1158, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
			case 1:
				{
				State = 9776;
				c_expr();
				}
				break;
			case 2:
				{
				State = 9777;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9778;
				b_expr(14);
				}
				break;
			case 3:
				{
				State = 9779;
				qual_op();
				State = 9780;
				b_expr(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9840;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,463,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9838;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9784;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 9785;
						Match(CARET);
						State = 9786;
						b_expr(14);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9787;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 9788;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9789;
						b_expr(13);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9790;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 9791;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9792;
						b_expr(12);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9793;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 9794;
						qual_op();
						State = 9795;
						b_expr(11);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9797;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 9798;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 9799;
						b_expr(10);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9800;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 9801;
						Match(IS);
						State = 9802;
						Match(DISTINCT);
						State = 9803;
						Match(FROM);
						State = 9804;
						b_expr(7);
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9805;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 9806;
						Match(IS);
						State = 9807;
						Match(NOT);
						State = 9808;
						Match(DISTINCT);
						State = 9809;
						Match(FROM);
						State = 9810;
						b_expr(6);
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9811;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 9812;
						Match(TYPECAST);
						State = 9813;
						typename();
						}
						break;
					case 9:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9814;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 9815;
						qual_op();
						}
						break;
					case 10:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9816;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 9817;
						Match(IS);
						State = 9818;
						Match(OF);
						State = 9819;
						Match(OPEN_PAREN);
						State = 9820;
						type_list(0);
						State = 9821;
						Match(CLOSE_PAREN);
						}
						break;
					case 11:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9823;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 9824;
						Match(IS);
						State = 9825;
						Match(NOT);
						State = 9826;
						Match(OF);
						State = 9827;
						Match(OPEN_PAREN);
						State = 9828;
						type_list(0);
						State = 9829;
						Match(CLOSE_PAREN);
						}
						break;
					case 12:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9831;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 9832;
						Match(IS);
						State = 9833;
						Match(DOCUMENT_P);
						}
						break;
					case 13:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9834;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 9835;
						Match(IS);
						State = 9836;
						Match(NOT);
						State = 9837;
						Match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				State = 9842;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,463,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class C_exprContext : ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_expr; } }
	 
		public C_exprContext() { }
		public virtual void CopyFrom(C_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class C_expr_existsContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public C_expr_existsContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_exists(this);
		}
	}
	public partial class C_expr_caseContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		public C_expr_caseContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_case(this);
		}
	}
	public partial class C_expr_exprContext : C_exprContext {
		public A_exprContext a_expr_in_parens;
		[System.Diagnostics.DebuggerNonUserCode] public ColumnrefContext columnref() {
			return GetRuleContext<ColumnrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AexprconstContext aexprconst() {
			return GetRuleContext<AexprconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlvariablenameContext plsqlvariablename() {
			return GetRuleContext<PlsqlvariablenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rowContext explicit_row() {
			return GetRuleContext<Explicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_rowContext implicit_row() {
			return GetRuleContext<Implicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public C_expr_exprContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_expr(this);
		}
	}

	[RuleVersion(0)]
	public C_exprContext c_expr() {
		C_exprContext _localctx = new C_exprContext(Context, State);
		EnterRule(_localctx, 1160, RULE_c_expr);
		try {
			State = 9872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
			case 1:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9843;
				columnref();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9844;
				aexprconst();
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 9845;
				plsqlvariablename();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 9846;
				Match(PARAM);
				State = 9847;
				opt_indirection(0);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 9848;
				Match(OPEN_PAREN);
				State = 9849;
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr(0);
				State = 9850;
				Match(CLOSE_PAREN);
				State = 9851;
				opt_indirection(0);
				}
				break;
			case 6:
				_localctx = new C_expr_caseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 9853;
				case_expr();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 9854;
				func_expr();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 9855;
				select_with_parens();
				State = 9857;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
				case 1:
					{
					State = 9856;
					indirection(0);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new C_expr_existsContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 9859;
				Match(EXISTS);
				State = 9860;
				select_with_parens();
				}
				break;
			case 10:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 9861;
				Match(ARRAY);
				State = 9862;
				select_with_parens();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 9863;
				Match(ARRAY);
				State = 9864;
				array_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 9865;
				explicit_row();
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 9866;
				implicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 9867;
				Match(GROUPING);
				State = 9868;
				Match(OPEN_PAREN);
				State = 9869;
				expr_list(0);
				State = 9870;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlvariablenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLVARIABLENAME() { return GetToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlvariablename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlvariablename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlvariablename(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlvariablenameContext plsqlvariablename() {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(Context, State);
		EnterRule(_localctx, 1162, RULE_plsqlvariablename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9874;
			Match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_applicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr() {
			return GetRuleContext<Func_arg_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_application; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_application(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_application(this);
		}
	}

	[RuleVersion(0)]
	public Func_applicationContext func_application() {
		Func_applicationContext _localctx = new Func_applicationContext(Context, State);
		EnterRule(_localctx, 1164, RULE_func_application);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9876;
			func_name();
			State = 9877;
			Match(OPEN_PAREN);
			State = 9896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 9878;
				func_arg_list(0);
				State = 9882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9879;
					Match(COMMA);
					State = 9880;
					Match(VARIADIC);
					State = 9881;
					func_arg_expr();
					}
				}

				State = 9884;
				opt_sort_clause();
				}
				break;
			case VARIADIC:
				{
				State = 9886;
				Match(VARIADIC);
				State = 9887;
				func_arg_expr();
				State = 9888;
				opt_sort_clause();
				}
				break;
			case ALL:
			case DISTINCT:
				{
				State = 9890;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9891;
				func_arg_list(0);
				State = 9892;
				opt_sort_clause();
				}
				break;
			case STAR:
				{
				State = 9894;
				Match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9898;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Within_group_clauseContext within_group_clause() {
			return GetRuleContext<Within_group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 1166, RULE_func_expr);
		try {
			State = 9906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9900;
				func_application();
				State = 9901;
				within_group_clause();
				State = 9902;
				filter_clause();
				State = 9903;
				over_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9905;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_windowlessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_windowless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_windowless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_windowless(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_windowlessContext func_expr_windowless() {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(Context, State);
		EnterRule(_localctx, 1168, RULE_func_expr_windowless);
		try {
			State = 9910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9908;
				func_application();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9909;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_common_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extract_listContext extract_list() {
			return GetRuleContext<Extract_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Overlay_listContext overlay_list() {
			return GetRuleContext<Overlay_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_listContext position_list() {
			return GetRuleContext<Position_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substr_listContext substr_list() {
			return GetRuleContext<Substr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trim_listContext trim_list() {
			return GetRuleContext<Trim_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attributesContext xml_attributes() {
			return GetRuleContext<Xml_attributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_whitespace_optionContext xml_whitespace_option() {
			return GetRuleContext<Xml_whitespace_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_root_versionContext xml_root_version() {
			return GetRuleContext<Xml_root_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return GetRuleContext<Opt_xml_root_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_common_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_common_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_common_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_common_subexprContext func_expr_common_subexpr() {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(Context, State);
		EnterRule(_localctx, 1170, RULE_func_expr_common_subexpr);
		try {
			State = 10126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9912;
				Match(COLLATION);
				State = 9913;
				Match(FOR);
				State = 9914;
				Match(OPEN_PAREN);
				State = 9915;
				a_expr(0);
				State = 9916;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9918;
				Match(CURRENT_DATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9919;
				Match(CURRENT_TIME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9920;
				Match(CURRENT_TIME);
				State = 9921;
				Match(OPEN_PAREN);
				State = 9922;
				iconst();
				State = 9923;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9925;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9926;
				Match(CURRENT_TIMESTAMP);
				State = 9927;
				Match(OPEN_PAREN);
				State = 9928;
				iconst();
				State = 9929;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9931;
				Match(LOCALTIME);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9932;
				Match(LOCALTIME);
				State = 9933;
				Match(OPEN_PAREN);
				State = 9934;
				iconst();
				State = 9935;
				Match(CLOSE_PAREN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9937;
				Match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9938;
				Match(LOCALTIMESTAMP);
				State = 9939;
				Match(OPEN_PAREN);
				State = 9940;
				iconst();
				State = 9941;
				Match(CLOSE_PAREN);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9943;
				Match(CURRENT_ROLE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9944;
				Match(CURRENT_USER);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9945;
				Match(SESSION_USER);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9946;
				Match(USER);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9947;
				Match(CURRENT_CATALOG);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9948;
				Match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9949;
				Match(CAST);
				State = 9950;
				Match(OPEN_PAREN);
				State = 9951;
				a_expr(0);
				State = 9952;
				Match(AS);
				State = 9953;
				typename();
				State = 9954;
				Match(CLOSE_PAREN);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9956;
				Match(EXTRACT);
				State = 9957;
				Match(OPEN_PAREN);
				State = 9958;
				extract_list();
				State = 9959;
				Match(CLOSE_PAREN);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9961;
				Match(NORMALIZE);
				State = 9962;
				Match(OPEN_PAREN);
				State = 9963;
				a_expr(0);
				State = 9964;
				Match(CLOSE_PAREN);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9966;
				Match(NORMALIZE);
				State = 9967;
				Match(OPEN_PAREN);
				State = 9968;
				a_expr(0);
				State = 9969;
				Match(COMMA);
				State = 9970;
				unicode_normal_form();
				State = 9971;
				Match(CLOSE_PAREN);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9973;
				Match(OVERLAY);
				State = 9974;
				Match(OPEN_PAREN);
				State = 9975;
				overlay_list();
				State = 9976;
				Match(CLOSE_PAREN);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9978;
				Match(POSITION);
				State = 9979;
				Match(OPEN_PAREN);
				State = 9980;
				position_list();
				State = 9981;
				Match(CLOSE_PAREN);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9983;
				Match(SUBSTRING);
				State = 9984;
				Match(OPEN_PAREN);
				State = 9985;
				substr_list();
				State = 9986;
				Match(CLOSE_PAREN);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9988;
				Match(TREAT);
				State = 9989;
				Match(OPEN_PAREN);
				State = 9990;
				a_expr(0);
				State = 9991;
				Match(AS);
				State = 9992;
				typename();
				State = 9993;
				Match(CLOSE_PAREN);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9995;
				Match(TRIM);
				State = 9996;
				Match(OPEN_PAREN);
				State = 9997;
				Match(BOTH);
				State = 9998;
				trim_list();
				State = 9999;
				Match(CLOSE_PAREN);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 10001;
				Match(TRIM);
				State = 10002;
				Match(OPEN_PAREN);
				State = 10003;
				Match(LEADING);
				State = 10004;
				trim_list();
				State = 10005;
				Match(CLOSE_PAREN);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 10007;
				Match(TRIM);
				State = 10008;
				Match(OPEN_PAREN);
				State = 10009;
				Match(TRAILING);
				State = 10010;
				trim_list();
				State = 10011;
				Match(CLOSE_PAREN);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 10013;
				Match(TRIM);
				State = 10014;
				Match(OPEN_PAREN);
				State = 10015;
				trim_list();
				State = 10016;
				Match(CLOSE_PAREN);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 10018;
				Match(NULLIF);
				State = 10019;
				Match(OPEN_PAREN);
				State = 10020;
				a_expr(0);
				State = 10021;
				Match(COMMA);
				State = 10022;
				a_expr(0);
				State = 10023;
				Match(CLOSE_PAREN);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 10025;
				Match(COALESCE);
				State = 10026;
				Match(OPEN_PAREN);
				State = 10027;
				expr_list(0);
				State = 10028;
				Match(CLOSE_PAREN);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 10030;
				Match(GREATEST);
				State = 10031;
				Match(OPEN_PAREN);
				State = 10032;
				expr_list(0);
				State = 10033;
				Match(CLOSE_PAREN);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 10035;
				Match(LEAST);
				State = 10036;
				Match(OPEN_PAREN);
				State = 10037;
				expr_list(0);
				State = 10038;
				Match(CLOSE_PAREN);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 10040;
				Match(XMLCONCAT);
				State = 10041;
				Match(OPEN_PAREN);
				State = 10042;
				expr_list(0);
				State = 10043;
				Match(CLOSE_PAREN);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 10045;
				Match(XMLELEMENT);
				State = 10046;
				Match(OPEN_PAREN);
				State = 10047;
				Match(NAME_P);
				State = 10048;
				collabel();
				State = 10049;
				Match(CLOSE_PAREN);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 10051;
				Match(XMLELEMENT);
				State = 10052;
				Match(OPEN_PAREN);
				State = 10053;
				Match(NAME_P);
				State = 10054;
				collabel();
				State = 10055;
				Match(COMMA);
				State = 10056;
				xml_attributes();
				State = 10057;
				Match(CLOSE_PAREN);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 10059;
				Match(XMLELEMENT);
				State = 10060;
				Match(OPEN_PAREN);
				State = 10061;
				Match(NAME_P);
				State = 10062;
				collabel();
				State = 10063;
				Match(COMMA);
				State = 10064;
				expr_list(0);
				State = 10065;
				Match(CLOSE_PAREN);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 10067;
				Match(XMLELEMENT);
				State = 10068;
				Match(OPEN_PAREN);
				State = 10069;
				Match(NAME_P);
				State = 10070;
				collabel();
				State = 10071;
				Match(COMMA);
				State = 10072;
				xml_attributes();
				State = 10073;
				Match(COMMA);
				State = 10074;
				expr_list(0);
				State = 10075;
				Match(CLOSE_PAREN);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 10077;
				Match(XMLEXISTS);
				State = 10078;
				Match(OPEN_PAREN);
				State = 10079;
				c_expr();
				State = 10080;
				xmlexists_argument();
				State = 10081;
				Match(CLOSE_PAREN);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 10083;
				Match(XMLFOREST);
				State = 10084;
				Match(OPEN_PAREN);
				State = 10085;
				xml_attribute_list(0);
				State = 10086;
				Match(CLOSE_PAREN);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 10088;
				Match(XMLPARSE);
				State = 10089;
				Match(OPEN_PAREN);
				State = 10090;
				document_or_content();
				State = 10091;
				a_expr(0);
				State = 10092;
				xml_whitespace_option();
				State = 10093;
				Match(CLOSE_PAREN);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 10095;
				Match(XMLPI);
				State = 10096;
				Match(OPEN_PAREN);
				State = 10097;
				Match(NAME_P);
				State = 10098;
				collabel();
				State = 10099;
				Match(CLOSE_PAREN);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 10101;
				Match(XMLPI);
				State = 10102;
				Match(OPEN_PAREN);
				State = 10103;
				Match(NAME_P);
				State = 10104;
				collabel();
				State = 10105;
				Match(COMMA);
				State = 10106;
				a_expr(0);
				State = 10107;
				Match(CLOSE_PAREN);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 10109;
				Match(XMLROOT);
				State = 10110;
				Match(OPEN_PAREN);
				State = 10111;
				Match(XML_P);
				State = 10112;
				a_expr(0);
				State = 10113;
				Match(COMMA);
				State = 10114;
				xml_root_version();
				State = 10115;
				opt_xml_root_standalone();
				State = 10116;
				Match(CLOSE_PAREN);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 10118;
				Match(XMLSERIALIZE);
				State = 10119;
				Match(OPEN_PAREN);
				State = 10120;
				document_or_content();
				State = 10121;
				a_expr(0);
				State = 10122;
				Match(AS);
				State = 10123;
				simpletypename();
				State = 10124;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_root_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_root_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_root_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_root_version(this);
		}
	}

	[RuleVersion(0)]
	public Xml_root_versionContext xml_root_version() {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(Context, State);
		EnterRule(_localctx, 1172, RULE_xml_root_version);
		try {
			State = 10133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10128;
				Match(VERSION_P);
				State = 10129;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10130;
				Match(VERSION_P);
				State = 10131;
				Match(NO);
				State = 10132;
				Match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_xml_root_standaloneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_xml_root_standalone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_xml_root_standalone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_xml_root_standalone(this);
		}
	}

	[RuleVersion(0)]
	public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(Context, State);
		EnterRule(_localctx, 1174, RULE_opt_xml_root_standalone);
		try {
			State = 10146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10135;
				Match(COMMA);
				State = 10136;
				Match(STANDALONE_P);
				State = 10137;
				Match(YES_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10138;
				Match(COMMA);
				State = 10139;
				Match(STANDALONE_P);
				State = 10140;
				Match(NO);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10141;
				Match(COMMA);
				State = 10142;
				Match(STANDALONE_P);
				State = 10143;
				Match(NO);
				State = 10144;
				Match(VALUE_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attributes(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributesContext xml_attributes() {
		Xml_attributesContext _localctx = new Xml_attributesContext(Context, State);
		EnterRule(_localctx, 1176, RULE_xml_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10148;
			Match(XMLATTRIBUTES);
			State = 10149;
			Match(OPEN_PAREN);
			State = 10150;
			xml_attribute_list(0);
			State = 10151;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext xml_attribute_el() {
			return GetRuleContext<Xml_attribute_elContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_listContext xml_attribute_list() {
		return xml_attribute_list(0);
	}

	private Xml_attribute_listContext xml_attribute_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(Context, _parentState);
		Xml_attribute_listContext _prevctx = _localctx;
		int _startState = 1178;
		EnterRecursionRule(_localctx, 1178, RULE_xml_attribute_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10154;
			xml_attribute_el();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,473,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_attribute_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_xml_attribute_list);
					State = 10156;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10157;
					Match(COMMA);
					State = 10158;
					xml_attribute_el();
					}
					} 
				}
				State = 10163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,473,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Xml_attribute_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_elContext xml_attribute_el() {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(Context, State);
		EnterRule(_localctx, 1180, RULE_xml_attribute_el);
		try {
			State = 10169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10164;
				a_expr(0);
				State = 10165;
				Match(AS);
				State = 10166;
				collabel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10168;
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_or_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_or_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDocument_or_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDocument_or_content(this);
		}
	}

	[RuleVersion(0)]
	public Document_or_contentContext document_or_content() {
		Document_or_contentContext _localctx = new Document_or_contentContext(Context, State);
		EnterRule(_localctx, 1182, RULE_document_or_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10171;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_whitespace_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_whitespace_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_whitespace_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_whitespace_option(this);
		}
	}

	[RuleVersion(0)]
	public Xml_whitespace_optionContext xml_whitespace_option() {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(Context, State);
		EnterRule(_localctx, 1184, RULE_xml_whitespace_option);
		try {
			State = 10178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRESERVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10173;
				Match(PRESERVE);
				State = 10174;
				Match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10175;
				Match(STRIP_P);
				State = 10176;
				Match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlexists_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext[] xml_passing_mech() {
			return GetRuleContexts<Xml_passing_mechContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext xml_passing_mech(int i) {
			return GetRuleContext<Xml_passing_mechContext>(i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlexists_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmlexists_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmlexists_argument(this);
		}
	}

	[RuleVersion(0)]
	public Xmlexists_argumentContext xmlexists_argument() {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(Context, State);
		EnterRule(_localctx, 1186, RULE_xmlexists_argument);
		try {
			State = 10195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10180;
				Match(PASSING);
				State = 10181;
				c_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10182;
				Match(PASSING);
				State = 10183;
				c_expr();
				State = 10184;
				xml_passing_mech();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10186;
				Match(PASSING);
				State = 10187;
				xml_passing_mech();
				State = 10188;
				c_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10190;
				Match(PASSING);
				State = 10191;
				xml_passing_mech();
				State = 10192;
				c_expr();
				State = 10193;
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_mechContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_mech; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_passing_mech(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_passing_mech(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_mechContext xml_passing_mech() {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(Context, State);
		EnterRule(_localctx, 1188, RULE_xml_passing_mech);
		try {
			State = 10201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,477,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10197;
				Match(BY);
				State = 10198;
				Match(REF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10199;
				Match(BY);
				State = 10200;
				Match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWithin_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWithin_group_clause(this);
		}
	}

	[RuleVersion(0)]
	public Within_group_clauseContext within_group_clause() {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(Context, State);
		EnterRule(_localctx, 1190, RULE_within_group_clause);
		try {
			State = 10210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10203;
				Match(WITHIN);
				State = 10204;
				Match(GROUP_P);
				State = 10205;
				Match(OPEN_PAREN);
				State = 10206;
				sort_clause();
				State = 10207;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 1192, RULE_filter_clause);
		try {
			State = 10219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10212;
				Match(FILTER);
				State = 10213;
				Match(OPEN_PAREN);
				State = 10214;
				Match(WHERE);
				State = 10215;
				a_expr(0);
				State = 10216;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 1194, RULE_window_clause);
		try {
			State = 10224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10221;
				Match(WINDOW);
				State = 10222;
				window_definition_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext window_definition() {
			return GetRuleContext<Window_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Window_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Window_definition_listContext window_definition_list() {
		return window_definition_list(0);
	}

	private Window_definition_listContext window_definition_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Window_definition_listContext _localctx = new Window_definition_listContext(Context, _parentState);
		Window_definition_listContext _prevctx = _localctx;
		int _startState = 1196;
		EnterRecursionRule(_localctx, 1196, RULE_window_definition_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10227;
			window_definition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,481,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Window_definition_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_window_definition_list);
					State = 10229;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10230;
					Match(COMMA);
					State = 10231;
					window_definition();
					}
					} 
				}
				State = 10236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,481,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Window_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition(this);
		}
	}

	[RuleVersion(0)]
	public Window_definitionContext window_definition() {
		Window_definitionContext _localctx = new Window_definitionContext(Context, State);
		EnterRule(_localctx, 1198, RULE_window_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10237;
			colid();
			State = 10238;
			Match(AS);
			State = 10239;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 1200, RULE_over_clause);
		try {
			State = 10246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10241;
				Match(OVER);
				State = 10242;
				window_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10243;
				Match(OVER);
				State = 10244;
				colid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_existing_window_nameContext opt_existing_window_name() {
			return GetRuleContext<Opt_existing_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_partition_clauseContext opt_partition_clause() {
			return GetRuleContext<Opt_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_frame_clauseContext opt_frame_clause() {
			return GetRuleContext<Opt_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 1202, RULE_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10248;
			Match(OPEN_PAREN);
			State = 10249;
			opt_existing_window_name();
			State = 10250;
			opt_partition_clause();
			State = 10251;
			opt_sort_clause();
			State = 10252;
			opt_frame_clause();
			State = 10253;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_existing_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_existing_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_existing_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_existing_window_name(this);
		}
	}

	[RuleVersion(0)]
	public Opt_existing_window_nameContext opt_existing_window_name() {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(Context, State);
		EnterRule(_localctx, 1204, RULE_opt_existing_window_name);
		try {
			State = 10257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10255;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_partition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_partition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_partition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_partition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_partition_clauseContext opt_partition_clause() {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(Context, State);
		EnterRule(_localctx, 1206, RULE_opt_partition_clause);
		try {
			State = 10263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10259;
				Match(PARTITION);
				State = 10260;
				Match(BY);
				State = 10261;
				expr_list(0);
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_extentContext frame_extent() {
			return GetRuleContext<Frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return GetRuleContext<Opt_window_exclusion_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_frame_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_frame_clauseContext opt_frame_clause() {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(Context, State);
		EnterRule(_localctx, 1208, RULE_opt_frame_clause);
		try {
			State = 10278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10265;
				Match(RANGE);
				State = 10266;
				frame_extent();
				State = 10267;
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10269;
				Match(ROWS);
				State = 10270;
				frame_extent();
				State = 10271;
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10273;
				Match(GROUPS);
				State = 10274;
				frame_extent();
				State = 10275;
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext[] frame_bound() {
			return GetRuleContexts<Frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext frame_bound(int i) {
			return GetRuleContext<Frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Frame_extentContext frame_extent() {
		Frame_extentContext _localctx = new Frame_extentContext(Context, State);
		EnterRule(_localctx, 1210, RULE_frame_extent);
		try {
			State = 10286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10280;
				frame_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10281;
				Match(BETWEEN);
				State = 10282;
				frame_bound();
				State = 10283;
				Match(AND);
				State = 10284;
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Frame_boundContext frame_bound() {
		Frame_boundContext _localctx = new Frame_boundContext(Context, State);
		EnterRule(_localctx, 1212, RULE_frame_bound);
		try {
			State = 10300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10288;
				Match(UNBOUNDED);
				State = 10289;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10290;
				Match(UNBOUNDED);
				State = 10291;
				Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10292;
				Match(CURRENT_P);
				State = 10293;
				Match(ROW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10294;
				a_expr(0);
				State = 10295;
				Match(PRECEDING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10297;
				a_expr(0);
				State = 10298;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_window_exclusion_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_window_exclusion_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_window_exclusion_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_window_exclusion_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(Context, State);
		EnterRule(_localctx, 1214, RULE_opt_window_exclusion_clause);
		try {
			State = 10313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10302;
				Match(EXCLUDE);
				State = 10303;
				Match(CURRENT_P);
				State = 10304;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10305;
				Match(EXCLUDE);
				State = 10306;
				Match(GROUP_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10307;
				Match(EXCLUDE);
				State = 10308;
				Match(TIES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10309;
				Match(EXCLUDE);
				State = 10310;
				Match(NO);
				State = 10311;
				Match(OTHERS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(Context, State);
		EnterRule(_localctx, 1216, RULE_row);
		try {
			State = 10329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10315;
				Match(ROW);
				State = 10316;
				Match(OPEN_PAREN);
				State = 10317;
				expr_list(0);
				State = 10318;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10320;
				Match(ROW);
				State = 10321;
				Match(OPEN_PAREN);
				State = 10322;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10323;
				Match(OPEN_PAREN);
				State = 10324;
				expr_list(0);
				State = 10325;
				Match(COMMA);
				State = 10326;
				a_expr(0);
				State = 10327;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Explicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_rowContext explicit_row() {
		Explicit_rowContext _localctx = new Explicit_rowContext(Context, State);
		EnterRule(_localctx, 1218, RULE_explicit_row);
		try {
			State = 10339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10331;
				Match(ROW);
				State = 10332;
				Match(OPEN_PAREN);
				State = 10333;
				expr_list(0);
				State = 10334;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10336;
				Match(ROW);
				State = 10337;
				Match(OPEN_PAREN);
				State = 10338;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_rowContext implicit_row() {
		Implicit_rowContext _localctx = new Implicit_rowContext(Context, State);
		EnterRule(_localctx, 1220, RULE_implicit_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10341;
			Match(OPEN_PAREN);
			State = 10342;
			expr_list(0);
			State = 10343;
			Match(COMMA);
			State = 10344;
			a_expr(0);
			State = 10345;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSub_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSub_type(this);
		}
	}

	[RuleVersion(0)]
	public Sub_typeContext sub_type() {
		Sub_typeContext _localctx = new Sub_typeContext(Context, State);
		EnterRule(_localctx, 1222, RULE_sub_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10347;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ALL - 30)) | (1L << (ANY - 30)) | (1L << (SOME - 30)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathopContext mathop() {
			return GetRuleContext<MathopContext>(0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_op(this);
		}
	}

	[RuleVersion(0)]
	public All_opContext all_op() {
		All_opContext _localctx = new All_opContext(Context, State);
		EnterRule(_localctx, 1224, RULE_all_op);
		try {
			State = 10351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10349;
				Match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10350;
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMathop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMathop(this);
		}
	}

	[RuleVersion(0)]
	public MathopContext mathop() {
		MathopContext _localctx = new MathopContext(Context, State);
		EnterRule(_localctx, 1226, RULE_mathop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10353;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << PERCENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_opContext qual_op() {
		Qual_opContext _localctx = new Qual_opContext(Context, State);
		EnterRule(_localctx, 1228, RULE_qual_op);
		try {
			State = 10361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10355;
				Match(Operator);
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10356;
				Match(OPERATOR);
				State = 10357;
				Match(OPEN_PAREN);
				State = 10358;
				any_operator();
				State = 10359;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_all_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_all_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_all_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_all_opContext qual_all_op() {
		Qual_all_opContext _localctx = new Qual_all_opContext(Context, State);
		EnterRule(_localctx, 1230, RULE_qual_all_op);
		try {
			State = 10369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10363;
				all_op();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10364;
				Match(OPERATOR);
				State = 10365;
				Match(OPEN_PAREN);
				State = 10366;
				any_operator();
				State = 10367;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_Op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery_Op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery_Op(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_OpContext subquery_Op() {
		Subquery_OpContext _localctx = new Subquery_OpContext(Context, State);
		EnterRule(_localctx, 1232, RULE_subquery_Op);
		try {
			State = 10383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10371;
				all_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10372;
				Match(OPERATOR);
				State = 10373;
				Match(OPEN_PAREN);
				State = 10374;
				any_operator();
				State = 10375;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10377;
				Match(LIKE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10378;
				Match(NOT);
				State = 10379;
				Match(LIKE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10380;
				Match(ILIKE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10381;
				Match(NOT);
				State = 10382;
				Match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr_listContext _localctx = new Expr_listContext(Context, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 1234;
		EnterRecursionRule(_localctx, 1234, RULE_expr_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10386;
			a_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,495,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					State = 10388;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10389;
					Match(COMMA);
					State = 10390;
					a_expr(0);
					}
					} 
				}
				State = 10395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,495,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Func_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr() {
			return GetRuleContext<Func_arg_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_listContext func_arg_list() {
		return func_arg_list(0);
	}

	private Func_arg_listContext func_arg_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Func_arg_listContext _localctx = new Func_arg_listContext(Context, _parentState);
		Func_arg_listContext _prevctx = _localctx;
		int _startState = 1236;
		EnterRecursionRule(_localctx, 1236, RULE_func_arg_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10397;
			func_arg_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10404;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,496,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_arg_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_func_arg_list);
					State = 10399;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10400;
					Match(COMMA);
					State = 10401;
					func_arg_expr();
					}
					} 
				}
				State = 10406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,496,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Func_arg_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS_GREATER() { return GetToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_exprContext func_arg_expr() {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(Context, State);
		EnterRule(_localctx, 1238, RULE_func_arg_expr);
		try {
			State = 10416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10407;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10408;
				param_name();
				State = 10409;
				Match(COLON_EQUALS);
				State = 10410;
				a_expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10412;
				param_name();
				State = 10413;
				Match(EQUALS_GREATER);
				State = 10414;
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_listContext type_list() {
		return type_list(0);
	}

	private Type_listContext type_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_listContext _localctx = new Type_listContext(Context, _parentState);
		Type_listContext _prevctx = _localctx;
		int _startState = 1240;
		EnterRecursionRule(_localctx, 1240, RULE_type_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10419;
			typename();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10426;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,498,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type_list);
					State = 10421;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10422;
					Match(COMMA);
					State = 10423;
					typename();
					}
					} 
				}
				State = 10428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,498,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_expr_listContext array_expr_list() {
			return GetRuleContext<Array_expr_listContext>(0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 1242, RULE_array_expr);
		try {
			State = 10439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10429;
				Match(OPEN_BRACKET);
				State = 10430;
				expr_list(0);
				State = 10431;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10433;
				Match(OPEN_BRACKET);
				State = 10434;
				array_expr_list(0);
				State = 10435;
				Match(CLOSE_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10437;
				Match(OPEN_BRACKET);
				State = 10438;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_expr_listContext array_expr_list() {
			return GetRuleContext<Array_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Array_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Array_expr_listContext array_expr_list() {
		return array_expr_list(0);
	}

	private Array_expr_listContext array_expr_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Array_expr_listContext _localctx = new Array_expr_listContext(Context, _parentState);
		Array_expr_listContext _prevctx = _localctx;
		int _startState = 1244;
		EnterRecursionRule(_localctx, 1244, RULE_array_expr_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10442;
			array_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,500,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_expr_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_array_expr_list);
					State = 10444;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10445;
					Match(COMMA);
					State = 10446;
					array_expr();
					}
					} 
				}
				State = 10451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,500,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Extract_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extract_argContext extract_arg() {
			return GetRuleContext<Extract_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_list(this);
		}
	}

	[RuleVersion(0)]
	public Extract_listContext extract_list() {
		Extract_listContext _localctx = new Extract_listContext(Context, State);
		EnterRule(_localctx, 1246, RULE_extract_list);
		try {
			State = 10457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10452;
				extract_arg();
				State = 10453;
				Match(FROM);
				State = 10454;
				a_expr(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_arg(this);
		}
	}

	[RuleVersion(0)]
	public Extract_argContext extract_arg() {
		Extract_argContext _localctx = new Extract_argContext(Context, State);
		EnterRule(_localctx, 1248, RULE_extract_arg);
		try {
			State = 10467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10459;
				identifier();
				}
				break;
			case YEAR_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10460;
				Match(YEAR_P);
				}
				break;
			case MONTH_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10461;
				Match(MONTH_P);
				}
				break;
			case DAY_P:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10462;
				Match(DAY_P);
				}
				break;
			case HOUR_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10463;
				Match(HOUR_P);
				}
				break;
			case MINUTE_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10464;
				Match(MINUTE_P);
				}
				break;
			case SECOND_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10465;
				Match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10466;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unicode_normal_formContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode_normal_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode_normal_form(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode_normal_form(this);
		}
	}

	[RuleVersion(0)]
	public Unicode_normal_formContext unicode_normal_form() {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(Context, State);
		EnterRule(_localctx, 1250, RULE_unicode_normal_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10469;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & ((1L << (NFC - 475)) | (1L << (NFD - 475)) | (1L << (NFKC - 475)) | (1L << (NFKD - 475)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overlay_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overlay_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverlay_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverlay_list(this);
		}
	}

	[RuleVersion(0)]
	public Overlay_listContext overlay_list() {
		Overlay_listContext _localctx = new Overlay_listContext(Context, State);
		EnterRule(_localctx, 1252, RULE_overlay_list);
		try {
			State = 10485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,503,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10471;
				a_expr(0);
				State = 10472;
				Match(PLACING);
				State = 10473;
				a_expr(0);
				State = 10474;
				Match(FROM);
				State = 10475;
				a_expr(0);
				State = 10476;
				Match(FOR);
				State = 10477;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10479;
				a_expr(0);
				State = 10480;
				Match(PLACING);
				State = 10481;
				a_expr(0);
				State = 10482;
				Match(FROM);
				State = 10483;
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPosition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPosition_list(this);
		}
	}

	[RuleVersion(0)]
	public Position_listContext position_list() {
		Position_listContext _localctx = new Position_listContext(Context, State);
		EnterRule(_localctx, 1254, RULE_position_list);
		try {
			State = 10492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10487;
				b_expr(0);
				State = 10488;
				Match(IN_P);
				State = 10489;
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Substr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubstr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubstr_list(this);
		}
	}

	[RuleVersion(0)]
	public Substr_listContext substr_list() {
		Substr_listContext _localctx = new Substr_listContext(Context, State);
		EnterRule(_localctx, 1256, RULE_substr_list);
		try {
			State = 10522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10494;
				a_expr(0);
				State = 10495;
				Match(FROM);
				State = 10496;
				a_expr(0);
				State = 10497;
				Match(FOR);
				State = 10498;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10500;
				a_expr(0);
				State = 10501;
				Match(FOR);
				State = 10502;
				a_expr(0);
				State = 10503;
				Match(FROM);
				State = 10504;
				a_expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10506;
				a_expr(0);
				State = 10507;
				Match(FROM);
				State = 10508;
				a_expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10510;
				a_expr(0);
				State = 10511;
				Match(FOR);
				State = 10512;
				a_expr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10514;
				a_expr(0);
				State = 10515;
				Match(SIMILAR);
				State = 10516;
				a_expr(0);
				State = 10517;
				Match(ESCAPE);
				State = 10518;
				a_expr(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10520;
				expr_list(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTrim_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTrim_list(this);
		}
	}

	[RuleVersion(0)]
	public Trim_listContext trim_list() {
		Trim_listContext _localctx = new Trim_listContext(Context, State);
		EnterRule(_localctx, 1258, RULE_trim_list);
		try {
			State = 10531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10524;
				a_expr(0);
				State = 10525;
				Match(FROM);
				State = 10526;
				expr_list(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10528;
				Match(FROM);
				State = 10529;
				expr_list(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10530;
				expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
	 
		public In_exprContext() { }
		public virtual void CopyFrom(In_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class In_expr_listContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_list(this);
		}
	}
	public partial class In_expr_selectContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public In_expr_selectContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_select(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 1260, RULE_in_expr);
		try {
			State = 10538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10533;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10534;
				Match(OPEN_PAREN);
				State = 10535;
				expr_list(0);
				State = 10536;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_argContext case_arg() {
			return GetRuleContext<Case_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clause_listContext when_clause_list() {
			return GetRuleContext<When_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_defaultContext case_default() {
			return GetRuleContext<Case_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 1262, RULE_case_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10540;
			Match(CASE);
			State = 10541;
			case_arg();
			State = 10542;
			when_clause_list(0);
			State = 10543;
			case_default();
			State = 10544;
			Match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext when_clause() {
			return GetRuleContext<When_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clause_listContext when_clause_list() {
			return GetRuleContext<When_clause_listContext>(0);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public When_clause_listContext when_clause_list() {
		return when_clause_list(0);
	}

	private When_clause_listContext when_clause_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		When_clause_listContext _localctx = new When_clause_listContext(Context, _parentState);
		When_clause_listContext _prevctx = _localctx;
		int _startState = 1264;
		EnterRecursionRule(_localctx, 1264, RULE_when_clause_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10547;
			when_clause();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10553;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,508,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new When_clause_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_when_clause_list);
					State = 10549;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10550;
					when_clause();
					}
					} 
				}
				State = 10555;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,508,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(Context, State);
		EnterRule(_localctx, 1266, RULE_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10556;
			Match(WHEN);
			State = 10557;
			a_expr(0);
			State = 10558;
			Match(THEN);
			State = 10559;
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_default(this);
		}
	}

	[RuleVersion(0)]
	public Case_defaultContext case_default() {
		Case_defaultContext _localctx = new Case_defaultContext(Context, State);
		EnterRule(_localctx, 1268, RULE_case_default);
		try {
			State = 10564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10561;
				Match(ELSE);
				State = 10562;
				a_expr(0);
				}
				break;
			case END_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_arg(this);
		}
	}

	[RuleVersion(0)]
	public Case_argContext case_arg() {
		Case_argContext _localctx = new Case_argContext(Context, State);
		EnterRule(_localctx, 1270, RULE_case_arg);
		try {
			State = 10568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10566;
				a_expr(0);
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnref(this);
		}
	}

	[RuleVersion(0)]
	public ColumnrefContext columnref() {
		ColumnrefContext _localctx = new ColumnrefContext(Context, State);
		EnterRule(_localctx, 1272, RULE_columnref);
		try {
			State = 10574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10570;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10571;
				colid();
				State = 10572;
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirection_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name() {
			return GetRuleContext<Attr_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_slice_boundContext[] opt_slice_bound() {
			return GetRuleContexts<Opt_slice_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_slice_boundContext opt_slice_bound(int i) {
			return GetRuleContext<Opt_slice_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection_el(this);
		}
	}

	[RuleVersion(0)]
	public Indirection_elContext indirection_el() {
		Indirection_elContext _localctx = new Indirection_elContext(Context, State);
		EnterRule(_localctx, 1274, RULE_indirection_el);
		try {
			State = 10590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10576;
				Match(DOT);
				State = 10577;
				attr_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10578;
				Match(DOT);
				State = 10579;
				Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10580;
				Match(OPEN_BRACKET);
				State = 10581;
				a_expr(0);
				State = 10582;
				Match(CLOSE_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10584;
				Match(OPEN_BRACKET);
				State = 10585;
				opt_slice_bound();
				State = 10586;
				Match(COLON);
				State = 10587;
				opt_slice_bound();
				State = 10588;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_slice_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_slice_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_slice_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_slice_bound(this);
		}
	}

	[RuleVersion(0)]
	public Opt_slice_boundContext opt_slice_bound() {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(Context, State);
		EnterRule(_localctx, 1276, RULE_opt_slice_bound);
		try {
			State = 10594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10592;
				a_expr(0);
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el() {
			return GetRuleContext<Indirection_elContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection(this);
		}
	}

	[RuleVersion(0)]
	public IndirectionContext indirection() {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IndirectionContext _localctx = new IndirectionContext(Context, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 1278;
		EnterRecursionRule(_localctx, 1278, RULE_indirection, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10597;
			indirection_el();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_indirection);
					State = 10599;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10600;
					indirection_el();
					}
					} 
				}
				State = 10605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_indirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el() {
			return GetRuleContext<Indirection_elContext>(0);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_indirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_indirection(this);
		}
	}

	[RuleVersion(0)]
	public Opt_indirectionContext opt_indirection() {
		return opt_indirection(0);
	}

	private Opt_indirectionContext opt_indirection(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opt_indirectionContext _localctx = new Opt_indirectionContext(Context, _parentState);
		Opt_indirectionContext _prevctx = _localctx;
		int _startState = 1280;
		EnterRecursionRule(_localctx, 1280, RULE_opt_indirection, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10611;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,515,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_indirectionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_opt_indirection);
					State = 10607;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10608;
					indirection_el();
					}
					} 
				}
				State = 10613;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,515,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_asymmetricContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public Opt_asymmetricContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_asymmetric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_asymmetric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_asymmetric(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asymmetricContext opt_asymmetric() {
		Opt_asymmetricContext _localctx = new Opt_asymmetricContext(Context, State);
		EnterRule(_localctx, 1282, RULE_opt_asymmetric);
		try {
			State = 10616;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10614;
				Match(ASYMMETRIC);
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_target_listContext opt_target_list() {
		Opt_target_listContext _localctx = new Opt_target_listContext(Context, State);
		EnterRule(_localctx, 1284, RULE_opt_target_list);
		try {
			State = 10620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10618;
				target_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext[] target_el() {
			return GetRuleContexts<Target_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext target_el(int i) {
			return GetRuleContext<Target_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_list(this);
		}
	}

	[RuleVersion(0)]
	public Target_listContext target_list() {
		Target_listContext _localctx = new Target_listContext(Context, State);
		EnterRule(_localctx, 1286, RULE_target_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10622;
			target_el();
			State = 10627;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,518,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10623;
					Match(COMMA);
					State = 10624;
					target_el();
					}
					} 
				}
				State = 10629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,518,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_elContext : ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_el; } }
	 
		public Target_elContext() { }
		public virtual void CopyFrom(Target_elContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Target_labelContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Target_labelContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_label(this);
		}
	}
	public partial class Target_starContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_star(this);
		}
	}

	[RuleVersion(0)]
	public Target_elContext target_el() {
		Target_elContext _localctx = new Target_elContext(Context, State);
		EnterRule(_localctx, 1288, RULE_target_el);
		try {
			State = 10638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10630;
				a_expr(0);
				State = 10635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,519,Context) ) {
				case 1:
					{
					State = 10631;
					Match(AS);
					State = 10632;
					collabel();
					}
					break;
				case 2:
					{
					State = 10633;
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10637;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_name_listContext qualified_name_list() {
		return qualified_name_list(0);
	}

	private Qualified_name_listContext qualified_name_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Qualified_name_listContext _localctx = new Qualified_name_listContext(Context, _parentState);
		Qualified_name_listContext _prevctx = _localctx;
		int _startState = 1290;
		EnterRecursionRule(_localctx, 1290, RULE_qualified_name_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10641;
			qualified_name();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10648;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,521,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_qualified_name_list);
					State = 10643;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10644;
					Match(COMMA);
					State = 10645;
					qualified_name();
					}
					} 
				}
				State = 10650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,521,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 1292, RULE_qualified_name);
		try {
			State = 10655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10651;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10652;
				colid();
				State = 10653;
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Name_listContext _localctx = new Name_listContext(Context, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 1294;
		EnterRecursionRule(_localctx, 1294, RULE_name_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10658;
			name();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10665;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,523,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_name_list);
					State = 10660;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10661;
					Match(COMMA);
					State = 10662;
					name();
					}
					} 
				}
				State = 10667;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,523,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 1296, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10668;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttr_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttr_name(this);
		}
	}

	[RuleVersion(0)]
	public Attr_nameContext attr_name() {
		Attr_nameContext _localctx = new Attr_nameContext(Context, State);
		EnterRule(_localctx, 1298, RULE_attr_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10670;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFile_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFile_name(this);
		}
	}

	[RuleVersion(0)]
	public File_nameContext file_name() {
		File_nameContext _localctx = new File_nameContext(Context, State);
		EnterRule(_localctx, 1300, RULE_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10672;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_name(this);
		}
	}

	[RuleVersion(0)]
	public Func_nameContext func_name() {
		Func_nameContext _localctx = new Func_nameContext(Context, State);
		EnterRule(_localctx, 1302, RULE_func_name);
		try {
			State = 10678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10674;
				type_function_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10675;
				colid();
				State = 10676;
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AexprconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BconstContext bconst() {
			return GetRuleContext<BconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XconstContext xconst() {
			return GetRuleContext<XconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConsttypenameContext consttypename() {
			return GetRuleContext<ConsttypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aexprconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAexprconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAexprconst(this);
		}
	}

	[RuleVersion(0)]
	public AexprconstContext aexprconst() {
		AexprconstContext _localctx = new AexprconstContext(Context, State);
		EnterRule(_localctx, 1304, RULE_aexprconst);
		try {
			State = 10711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10680;
				iconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10681;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10682;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10683;
				bconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10684;
				xconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10685;
				func_name();
				State = 10686;
				sconst();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10688;
				func_name();
				State = 10689;
				Match(OPEN_PAREN);
				State = 10690;
				func_arg_list(0);
				State = 10691;
				opt_sort_clause();
				State = 10692;
				Match(CLOSE_PAREN);
				State = 10693;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10695;
				consttypename();
				State = 10696;
				sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10698;
				constinterval();
				State = 10699;
				sconst();
				State = 10700;
				opt_interval();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10702;
				constinterval();
				State = 10703;
				Match(OPEN_PAREN);
				State = 10704;
				iconst();
				State = 10705;
				Match(CLOSE_PAREN);
				State = 10706;
				sconst();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10708;
				Match(TRUE_P);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10709;
				Match(FALSE_P);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10710;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalStringConstant() { return GetToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXconst(this);
		}
	}

	[RuleVersion(0)]
	public XconstContext xconst() {
		XconstContext _localctx = new XconstContext(Context, State);
		EnterRule(_localctx, 1306, RULE_xconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10713;
			Match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryStringConstant() { return GetToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBconst(this);
		}
	}

	[RuleVersion(0)]
	public BconstContext bconst() {
		BconstContext _localctx = new BconstContext(Context, State);
		EnterRule(_localctx, 1308, RULE_bconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10715;
			Match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeric() { return GetToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFconst(this);
		}
	}

	[RuleVersion(0)]
	public FconstContext fconst() {
		FconstContext _localctx = new FconstContext(Context, State);
		EnterRule(_localctx, 1310, RULE_fconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10717;
			Match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integral() { return GetToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIconst(this);
		}
	}

	[RuleVersion(0)]
	public IconstContext iconst() {
		IconstContext _localctx = new IconstContext(Context, State);
		EnterRule(_localctx, 1312, RULE_iconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10719;
			Match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uescapeContext opt_uescape() {
			return GetRuleContext<Opt_uescapeContext>(0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSconst(this);
		}
	}

	[RuleVersion(0)]
	public SconstContext sconst() {
		SconstContext _localctx = new SconstContext(Context, State);
		EnterRule(_localctx, 1314, RULE_sconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10721;
			anysconst();
			State = 10722;
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnysconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConstant() { return GetToken(PostgreSQLParser.StringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeEscapeStringConstant() { return GetToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BeginDollarStringConstant() { return GetToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndDollarStringConstant() { return GetToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DollarText() { return GetTokens(PostgreSQLParser.DollarText); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DollarText(int i) {
			return GetToken(PostgreSQLParser.DollarText, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapeStringConstant() { return GetToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anysconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnysconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnysconst(this);
		}
	}

	[RuleVersion(0)]
	public AnysconstContext anysconst() {
		AnysconstContext _localctx = new AnysconstContext(Context, State);
		EnterRule(_localctx, 1316, RULE_anysconst);
		int _la;
		try {
			State = 10735;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10724;
				Match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10725;
				Match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10726;
				Match(BeginDollarStringConstant);
				State = 10730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DollarText) {
					{
					{
					State = 10727;
					Match(DollarText);
					}
					}
					State = 10732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10733;
				Match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10734;
				Match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_uescapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_uescape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_uescape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_uescape(this);
		}
	}

	[RuleVersion(0)]
	public Opt_uescapeContext opt_uescape() {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(Context, State);
		EnterRule(_localctx, 1318, RULE_opt_uescape);
		try {
			State = 10740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10737;
				Match(UESCAPE);
				State = 10738;
				anysconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignediconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signediconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSignediconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSignediconst(this);
		}
	}

	[RuleVersion(0)]
	public SignediconstContext signediconst() {
		SignediconstContext _localctx = new SignediconstContext(Context, State);
		EnterRule(_localctx, 1320, RULE_signediconst);
		try {
			State = 10747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10742;
				iconst();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10743;
				Match(PLUS);
				State = 10744;
				iconst();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10745;
				Match(MINUS);
				State = 10746;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoleid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoleid(this);
		}
	}

	[RuleVersion(0)]
	public RoleidContext roleid() {
		RoleidContext _localctx = new RoleidContext(Context, State);
		EnterRule(_localctx, 1322, RULE_roleid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10749;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RolespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rolespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRolespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRolespec(this);
		}
	}

	[RuleVersion(0)]
	public RolespecContext rolespec() {
		RolespecContext _localctx = new RolespecContext(Context, State);
		EnterRule(_localctx, 1324, RULE_rolespec);
		try {
			State = 10754;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10751;
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10752;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10753;
				Match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Role_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRole_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRole_list(this);
		}
	}

	[RuleVersion(0)]
	public Role_listContext role_list() {
		return role_list(0);
	}

	private Role_listContext role_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Role_listContext _localctx = new Role_listContext(Context, _parentState);
		Role_listContext _prevctx = _localctx;
		int _startState = 1326;
		EnterRecursionRule(_localctx, 1326, RULE_role_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10757;
			rolespec();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,531,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Role_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_role_list);
					State = 10759;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10760;
					Match(COMMA);
					State = 10761;
					rolespec();
					}
					} 
				}
				State = 10766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,531,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ColidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public ColidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColid(this);
		}
	}

	[RuleVersion(0)]
	public ColidContext colid() {
		ColidContext _localctx = new ColidContext(Context, State);
		EnterRule(_localctx, 1328, RULE_colid);
		try {
			State = 10771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10767;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10768;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10769;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10770;
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_nameContext type_function_name() {
		Type_function_nameContext _localctx = new Type_function_nameContext(Context, State);
		EnterRule(_localctx, 1330, RULE_type_function_name);
		try {
			State = 10777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10773;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10774;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10775;
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10776;
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonreservedwordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword(this);
		}
	}

	[RuleVersion(0)]
	public NonreservedwordContext nonreservedword() {
		NonreservedwordContext _localctx = new NonreservedwordContext(Context, State);
		EnterRule(_localctx, 1332, RULE_nonreservedword);
		try {
			State = 10783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10779;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10780;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10781;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10782;
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCollabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCollabel(this);
		}
	}

	[RuleVersion(0)]
	public CollabelContext collabel() {
		CollabelContext _localctx = new CollabelContext(Context, State);
		EnterRule(_localctx, 1334, RULE_collabel);
		try {
			State = 10791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10785;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10786;
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10787;
				unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10788;
				col_name_keyword();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10789;
				type_func_name_keyword();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10790;
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PostgreSQLParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uescapeContext opt_uescape() {
			return GetRuleContext<Opt_uescapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedIdentifier() { return GetToken(PostgreSQLParser.QuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeQuotedIdentifier() { return GetToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlvariablenameContext plsqlvariablename() {
			return GetRuleContext<PlsqlvariablenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlidentifierContext plsqlidentifier() {
			return GetRuleContext<PlsqlidentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1336, RULE_identifier);
		try {
			State = 10800;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10793;
				Match(Identifier);
				State = 10794;
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10795;
				Match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10796;
				Match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10797;
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10798;
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10799;
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlidentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLIDENTIFIER() { return GetToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlidentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlidentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlidentifier(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlidentifierContext plsqlidentifier() {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(Context, State);
		EnterRule(_localctx, 1338, RULE_plsqlidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10802;
			Match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_P() { return GetToken(PostgreSQLParser.CATALOG_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(PostgreSQLParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(PostgreSQLParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(PostgreSQLParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(PostgreSQLParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P() { return GetToken(PostgreSQLParser.SQL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(PostgreSQLParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Unreserved_keywordContext unreserved_keyword() {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1340, RULE_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10804;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (OVER - 124)) | (1L << (ABORT_P - 124)) | (1L << (ABSOLUTE_P - 124)) | (1L << (ACCESS - 124)) | (1L << (ACTION - 124)) | (1L << (ADD_P - 124)) | (1L << (ADMIN - 124)) | (1L << (AFTER - 124)) | (1L << (AGGREGATE - 124)) | (1L << (ALSO - 124)) | (1L << (ALTER - 124)) | (1L << (ALWAYS - 124)) | (1L << (ASSERTION - 124)) | (1L << (ASSIGNMENT - 124)) | (1L << (AT - 124)) | (1L << (ATTRIBUTE - 124)) | (1L << (BACKWARD - 124)) | (1L << (BEFORE - 124)) | (1L << (BEGIN_P - 124)) | (1L << (BY - 124)) | (1L << (CACHE - 124)) | (1L << (CALLED - 124)) | (1L << (CASCADE - 124)) | (1L << (CASCADED - 124)) | (1L << (CHAIN - 124)) | (1L << (CHARACTERISTICS - 124)) | (1L << (CHECKPOINT - 124)) | (1L << (CLASS - 124)) | (1L << (CLOSE - 124)) | (1L << (CLUSTER - 124)) | (1L << (COMMENT - 124)) | (1L << (COMMENTS - 124)) | (1L << (COMMIT - 124)) | (1L << (COMMITTED - 124)) | (1L << (CONFIGURATION - 124)) | (1L << (CONNECTION - 124)) | (1L << (CONSTRAINTS - 124)) | (1L << (CONTENT_P - 124)) | (1L << (CONTINUE_P - 124)) | (1L << (CONVERSION_P - 124)) | (1L << (COPY - 124)) | (1L << (COST - 124)) | (1L << (CSV - 124)) | (1L << (CURSOR - 124)) | (1L << (CYCLE - 124)) | (1L << (DATA_P - 124)) | (1L << (DATABASE - 124)) | (1L << (DAY_P - 124)) | (1L << (DEALLOCATE - 124)) | (1L << (DECLARE - 124)) | (1L << (DEFAULTS - 124)) | (1L << (DEFERRED - 124)) | (1L << (DEFINER - 124)) | (1L << (DELETE_P - 124)) | (1L << (DELIMITER - 124)) | (1L << (DELIMITERS - 124)) | (1L << (DICTIONARY - 124)) | (1L << (DISABLE_P - 124)) | (1L << (DISCARD - 124)))) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (DOCUMENT_P - 188)) | (1L << (DOMAIN_P - 188)) | (1L << (DOUBLE_P - 188)) | (1L << (DROP - 188)) | (1L << (EACH - 188)) | (1L << (ENABLE_P - 188)) | (1L << (ENCODING - 188)) | (1L << (ENCRYPTED - 188)) | (1L << (ENUM_P - 188)) | (1L << (ESCAPE - 188)) | (1L << (EVENT - 188)) | (1L << (EXCLUDE - 188)) | (1L << (EXCLUDING - 188)) | (1L << (EXCLUSIVE - 188)) | (1L << (EXECUTE - 188)) | (1L << (EXPLAIN - 188)) | (1L << (EXTENSION - 188)) | (1L << (EXTERNAL - 188)) | (1L << (FAMILY - 188)) | (1L << (FIRST_P - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORCE - 188)) | (1L << (FORWARD - 188)) | (1L << (FUNCTION - 188)) | (1L << (FUNCTIONS - 188)) | (1L << (GLOBAL - 188)) | (1L << (GRANTED - 188)) | (1L << (HANDLER - 188)) | (1L << (HEADER_P - 188)) | (1L << (HOLD - 188)) | (1L << (HOUR_P - 188)) | (1L << (IDENTITY_P - 188)) | (1L << (IF_P - 188)) | (1L << (IMMEDIATE - 188)) | (1L << (IMMUTABLE - 188)) | (1L << (IMPLICIT_P - 188)) | (1L << (INCLUDING - 188)) | (1L << (INCREMENT - 188)) | (1L << (INDEX - 188)) | (1L << (INDEXES - 188)) | (1L << (INHERIT - 188)) | (1L << (INHERITS - 188)) | (1L << (INLINE_P - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERT - 188)) | (1L << (INSTEAD - 188)) | (1L << (INVOKER - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEY - 188)) | (1L << (LABEL - 188)) | (1L << (LANGUAGE - 188)) | (1L << (LARGE_P - 188)) | (1L << (LAST_P - 188)) | (1L << (LEAKPROOF - 188)) | (1L << (LEVEL - 188)) | (1L << (LISTEN - 188)) | (1L << (LOAD - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCATION - 188)) | (1L << (LOCK_P - 188)) | (1L << (MAPPING - 188)) | (1L << (MATCH - 188)) | (1L << (MATERIALIZED - 188)) | (1L << (MAXVALUE - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (MINUTE_P - 252)) | (1L << (MINVALUE - 252)) | (1L << (MODE - 252)) | (1L << (MONTH_P - 252)) | (1L << (MOVE - 252)) | (1L << (NAME_P - 252)) | (1L << (NAMES - 252)) | (1L << (NEXT - 252)) | (1L << (NO - 252)) | (1L << (NOTHING - 252)) | (1L << (NOTIFY - 252)) | (1L << (NOWAIT - 252)) | (1L << (NULLS_P - 252)) | (1L << (OBJECT_P - 252)) | (1L << (OF - 252)) | (1L << (OFF - 252)) | (1L << (OIDS - 252)) | (1L << (OPERATOR - 252)) | (1L << (OPTION - 252)) | (1L << (OPTIONS - 252)) | (1L << (OWNED - 252)) | (1L << (OWNER - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)) | (1L << (PARTITION - 252)) | (1L << (PASSING - 252)) | (1L << (PASSWORD - 252)) | (1L << (PLANS - 252)) | (1L << (PRECEDING - 252)) | (1L << (PREPARE - 252)) | (1L << (PREPARED - 252)) | (1L << (PRESERVE - 252)) | (1L << (PRIOR - 252)) | (1L << (PRIVILEGES - 252)) | (1L << (PROCEDURAL - 252)) | (1L << (PROCEDURE - 252)) | (1L << (PROGRAM - 252)) | (1L << (QUOTE - 252)) | (1L << (RANGE - 252)) | (1L << (READ - 252)) | (1L << (REASSIGN - 252)) | (1L << (RECHECK - 252)) | (1L << (RECURSIVE - 252)) | (1L << (REF - 252)) | (1L << (REFRESH - 252)) | (1L << (REINDEX - 252)) | (1L << (RELATIVE_P - 252)) | (1L << (RELEASE - 252)) | (1L << (RENAME - 252)) | (1L << (REPEATABLE - 252)) | (1L << (REPLACE - 252)) | (1L << (REPLICA - 252)) | (1L << (RESET - 252)) | (1L << (RESTART - 252)) | (1L << (RESTRICT - 252)) | (1L << (RETURNS - 252)) | (1L << (REVOKE - 252)) | (1L << (ROLE - 252)) | (1L << (ROLLBACK - 252)) | (1L << (ROWS - 252)) | (1L << (RULE - 252)) | (1L << (SAVEPOINT - 252)) | (1L << (SCHEMA - 252)) | (1L << (SCROLL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (SEARCH - 316)) | (1L << (SECOND_P - 316)) | (1L << (SECURITY - 316)) | (1L << (SEQUENCE - 316)) | (1L << (SEQUENCES - 316)) | (1L << (SERIALIZABLE - 316)) | (1L << (SERVER - 316)) | (1L << (SESSION - 316)) | (1L << (SET - 316)) | (1L << (SHARE - 316)) | (1L << (SHOW - 316)) | (1L << (SIMPLE - 316)) | (1L << (SNAPSHOT - 316)) | (1L << (STABLE - 316)) | (1L << (STANDALONE_P - 316)) | (1L << (START - 316)) | (1L << (STATEMENT - 316)) | (1L << (STATISTICS - 316)) | (1L << (STDIN - 316)) | (1L << (STDOUT - 316)) | (1L << (STORAGE - 316)) | (1L << (STRICT_P - 316)) | (1L << (STRIP_P - 316)) | (1L << (SYSID - 316)) | (1L << (SYSTEM_P - 316)) | (1L << (TABLES - 316)) | (1L << (TABLESPACE - 316)) | (1L << (TEMP - 316)) | (1L << (TEMPLATE - 316)) | (1L << (TEMPORARY - 316)) | (1L << (TEXT_P - 316)) | (1L << (TRANSACTION - 316)) | (1L << (TRIGGER - 316)) | (1L << (TRUNCATE - 316)) | (1L << (TRUSTED - 316)) | (1L << (TYPE_P - 316)) | (1L << (TYPES_P - 316)) | (1L << (UNBOUNDED - 316)) | (1L << (UNCOMMITTED - 316)) | (1L << (UNENCRYPTED - 316)) | (1L << (UNKNOWN - 316)) | (1L << (UNLISTEN - 316)) | (1L << (UNLOGGED - 316)) | (1L << (UNTIL - 316)) | (1L << (UPDATE - 316)) | (1L << (VACUUM - 316)) | (1L << (VALID - 316)) | (1L << (VALIDATE - 316)) | (1L << (VALIDATOR - 316)) | (1L << (VARYING - 316)) | (1L << (VERSION_P - 316)) | (1L << (VIEW - 316)) | (1L << (VOLATILE - 316)) | (1L << (WHITESPACE_P - 316)) | (1L << (WITHOUT - 316)) | (1L << (WORK - 316)) | (1L << (WRAPPER - 316)) | (1L << (WRITE - 316)) | (1L << (XML_P - 316)) | (1L << (YEAR_P - 316)) | (1L << (YES_P - 316)) | (1L << (ZONE - 316)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (CALL - 424)) | (1L << (CURRENT_P - 424)) | (1L << (CATALOG_P - 424)) | (1L << (ATTACH - 424)) | (1L << (DETACH - 424)) | (1L << (EXPRESSION - 424)) | (1L << (GENERATED - 424)) | (1L << (LOGGED - 424)) | (1L << (STORED - 424)) | (1L << (INCLUDE - 424)) | (1L << (ROUTINE - 424)) | (1L << (TRANSFORM - 424)) | (1L << (IMPORT_P - 424)) | (1L << (POLICY - 424)) | (1L << (METHOD - 424)) | (1L << (REFERENCING - 424)) | (1L << (NEW - 424)) | (1L << (OLD - 424)) | (1L << (VALUE_P - 424)) | (1L << (SUBSCRIPTION - 424)) | (1L << (PUBLICATION - 424)) | (1L << (ROUTINES - 424)) | (1L << (SCHEMAS - 424)) | (1L << (PROCEDURES - 424)) | (1L << (INPUT_P - 424)) | (1L << (SUPPORT - 424)) | (1L << (PARALLEL - 424)) | (1L << (SQL_P - 424)) | (1L << (DEPENDS - 424)) | (1L << (OVERRIDING - 424)) | (1L << (CONFLICT - 424)) | (1L << (SKIP_P - 424)) | (1L << (LOCKED - 424)) | (1L << (TIES - 424)) | (1L << (ROLLUP - 424)) | (1L << (CUBE - 424)) | (1L << (SETS - 424)) | (1L << (ORDINALITY - 424)) | (1L << (COLUMNS - 424)) | (1L << (NORMALIZED - 424)) | (1L << (WITHIN - 424)) | (1L << (FILTER - 424)) | (1L << (GROUPS - 424)) | (1L << (OTHERS - 424)) | (1L << (NFC - 424)) | (1L << (NFD - 424)) | (1L << (NFKC - 424)) | (1L << (NFKD - 424)) | (1L << (UESCAPE - 424)) | (1L << (VIEWS - 424)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Col_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_col_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCol_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCol_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Col_name_keywordContext col_name_keyword() {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(Context, State);
		EnterRule(_localctx, 1342, RULE_col_name_keyword);
		try {
			State = 10857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10806;
				Match(BETWEEN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10807;
				Match(BIGINT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10808;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10809;
				Match(BOOLEAN_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10810;
				Match(CHAR_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10811;
				character();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10812;
				Match(COALESCE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10813;
				Match(DEC);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10814;
				Match(DECIMAL_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10815;
				Match(EXISTS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10816;
				Match(EXTRACT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10817;
				Match(FLOAT_P);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10818;
				Match(GREATEST);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10819;
				Match(GROUPING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10820;
				Match(INOUT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10821;
				Match(INT_P);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10822;
				Match(INTEGER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10823;
				Match(INTERVAL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 10824;
				Match(LEAST);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 10825;
				Match(NATIONAL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 10826;
				Match(NCHAR);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 10827;
				Match(NONE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 10828;
				Match(NORMALIZE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 10829;
				Match(NULLIF);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 10830;
				numeric();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 10831;
				Match(OUT_P);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 10832;
				Match(OVERLAY);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 10833;
				Match(POSITION);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 10834;
				Match(PRECISION);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 10835;
				Match(REAL);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 10836;
				Match(ROW);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 10837;
				Match(SETOF);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 10838;
				Match(SMALLINT);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 10839;
				Match(SUBSTRING);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 10840;
				Match(TIME);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 10841;
				Match(TIMESTAMP);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 10842;
				Match(TREAT);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 10843;
				Match(TRIM);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 10844;
				Match(VALUES);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 10845;
				Match(VARCHAR);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 10846;
				Match(XMLATTRIBUTES);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 10847;
				Match(XMLCONCAT);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 10848;
				Match(XMLELEMENT);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 10849;
				Match(XMLEXISTS);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 10850;
				Match(XMLFOREST);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 10851;
				Match(XMLNAMESPACES);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 10852;
				Match(XMLPARSE);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 10853;
				Match(XMLPI);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 10854;
				Match(XMLROOT);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 10855;
				Match(XMLSERIALIZE);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 10856;
				Match(XMLTABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_func_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(PostgreSQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(PostgreSQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(PostgreSQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_func_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_func_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_func_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Type_func_name_keywordContext type_func_name_keyword() {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(Context, State);
		EnterRule(_localctx, 1344, RULE_type_func_name_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10859;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (AUTHORIZATION - 106)) | (1L << (BINARY - 106)) | (1L << (COLLATION - 106)) | (1L << (CONCURRENTLY - 106)) | (1L << (CROSS - 106)) | (1L << (CURRENT_SCHEMA - 106)) | (1L << (FREEZE - 106)) | (1L << (FULL - 106)) | (1L << (ILIKE - 106)) | (1L << (INNER_P - 106)) | (1L << (IS - 106)) | (1L << (ISNULL - 106)) | (1L << (JOIN - 106)) | (1L << (LEFT - 106)) | (1L << (LIKE - 106)) | (1L << (NATURAL - 106)) | (1L << (NOTNULL - 106)) | (1L << (OUTER_P - 106)) | (1L << (OVERLAPS - 106)) | (1L << (RIGHT - 106)) | (1L << (SIMILAR - 106)) | (1L << (VERBOSE - 106)))) != 0) || _la==TABLESAMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(PostgreSQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(PostgreSQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(PostgreSQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Reserved_keywordContext reserved_keyword() {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(Context, State);
		EnterRule(_localctx, 1346, RULE_reserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10861;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASYMMETRIC) | (1L << BOTH) | (1L << CASE) | (1L << CAST) | (1L << CHECK) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CREATE) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << DEFERRABLE) | (1L << DESC) | (1L << DISTINCT) | (1L << DO) | (1L << ELSE) | (1L << EXCEPT) | (1L << FALSE_P) | (1L << FETCH) | (1L << FOR) | (1L << FOREIGN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FROM - 64)) | (1L << (GRANT - 64)) | (1L << (GROUP_P - 64)) | (1L << (HAVING - 64)) | (1L << (IN_P - 64)) | (1L << (INITIALLY - 64)) | (1L << (INTERSECT - 64)) | (1L << (LATERAL_P - 64)) | (1L << (LEADING - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (NOT - 64)) | (1L << (NULL_P - 64)) | (1L << (OFFSET - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (PLACING - 64)) | (1L << (PRIMARY - 64)) | (1L << (REFERENCES - 64)) | (1L << (RETURNING - 64)) | (1L << (SELECT - 64)) | (1L << (SESSION_USER - 64)) | (1L << (SOME - 64)) | (1L << (SYMMETRIC - 64)) | (1L << (TABLE - 64)) | (1L << (THEN - 64)) | (1L << (TO - 64)) | (1L << (TRAILING - 64)) | (1L << (TRUE_P - 64)) | (1L << (UNION - 64)) | (1L << (UNIQUE - 64)) | (1L << (USER - 64)) | (1L << (USING - 64)) | (1L << (VARIADIC - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (WINDOW - 64)) | (1L << (WITH - 64)))) != 0) || _la==END_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pl_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionsContext comp_options() {
			return GetRuleContext<Comp_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pl_blockContext pl_block() {
			return GetRuleContext<Pl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_semiContext opt_semi() {
			return GetRuleContext<Opt_semiContext>(0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPl_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPl_function(this);
		}
	}

	[RuleVersion(0)]
	public Pl_functionContext pl_function() {
		Pl_functionContext _localctx = new Pl_functionContext(Context, State);
		EnterRule(_localctx, 1348, RULE_pl_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10863;
			comp_options(0);
			State = 10864;
			pl_block();
			State = 10865;
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionsContext comp_options() {
			return GetRuleContext<Comp_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionContext comp_option() {
			return GetRuleContext<Comp_optionContext>(0);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComp_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComp_options(this);
		}
	}

	[RuleVersion(0)]
	public Comp_optionsContext comp_options() {
		return comp_options(0);
	}

	private Comp_optionsContext comp_options(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Comp_optionsContext _localctx = new Comp_optionsContext(Context, _parentState);
		Comp_optionsContext _prevctx = _localctx;
		int _startState = 1350;
		EnterRecursionRule(_localctx, 1350, RULE_comp_options, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10872;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,538,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Comp_optionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_comp_options);
					State = 10868;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10869;
					comp_option();
					}
					} 
				}
				State = 10874;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,538,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comp_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SharpContext sharp() {
			return GetRuleContext<SharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMP() { return GetToken(PostgreSQLParser.DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_STRICT_PARAMS() { return GetToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_valueContext option_value() {
			return GetRuleContext<Option_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_CONFLICT() { return GetToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_VARIABLE() { return GetToken(PostgreSQLParser.USE_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_COLUMN() { return GetToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComp_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComp_option(this);
		}
	}

	[RuleVersion(0)]
	public Comp_optionContext comp_option() {
		Comp_optionContext _localctx = new Comp_optionContext(Context, State);
		EnterRule(_localctx, 1352, RULE_comp_option);
		try {
			State = 10895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10875;
				sharp();
				State = 10876;
				Match(OPTION);
				State = 10877;
				Match(DUMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10879;
				sharp();
				State = 10880;
				Match(PRINT_STRICT_PARAMS);
				State = 10881;
				option_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10883;
				sharp();
				State = 10884;
				Match(VARIABLE_CONFLICT);
				State = 10885;
				Match(ERROR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10887;
				sharp();
				State = 10888;
				Match(VARIABLE_CONFLICT);
				State = 10889;
				Match(USE_VARIABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10891;
				sharp();
				State = 10892;
				Match(VARIABLE_CONFLICT);
				State = 10893;
				Match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SharpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		public SharpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sharp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSharp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSharp(this);
		}
	}

	[RuleVersion(0)]
	public SharpContext sharp() {
		SharpContext _localctx = new SharpContext(Context, State);
		EnterRule(_localctx, 1354, RULE_sharp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10897;
			Match(Operator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOption_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOption_value(this);
		}
	}

	[RuleVersion(0)]
	public Option_valueContext option_value() {
		Option_valueContext _localctx = new Option_valueContext(Context, State);
		EnterRule(_localctx, 1356, RULE_option_value);
		try {
			State = 10903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10899;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10900;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10901;
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10902;
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_semiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_semi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_semi(this);
		}
	}

	[RuleVersion(0)]
	public Opt_semiContext opt_semi() {
		Opt_semiContext _localctx = new Opt_semiContext(Context, State);
		EnterRule(_localctx, 1358, RULE_opt_semi);
		try {
			State = 10907;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10906;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pl_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_sectContext decl_sect() {
			return GetRuleContext<Decl_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_sectContext exception_sect() {
			return GetRuleContext<Exception_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPl_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPl_block(this);
		}
	}

	[RuleVersion(0)]
	public Pl_blockContext pl_block() {
		Pl_blockContext _localctx = new Pl_blockContext(Context, State);
		EnterRule(_localctx, 1360, RULE_pl_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10909;
			decl_sect();
			State = 10910;
			Match(BEGIN_P);
			State = 10911;
			proc_sect(0);
			State = 10912;
			exception_sect();
			State = 10913;
			Match(END_P);
			State = 10914;
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_block_labelContext opt_block_label() {
			return GetRuleContext<Opt_block_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_startContext decl_start() {
			return GetRuleContext<Decl_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtsContext decl_stmts() {
			return GetRuleContext<Decl_stmtsContext>(0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_sect(this);
		}
	}

	[RuleVersion(0)]
	public Decl_sectContext decl_sect() {
		Decl_sectContext _localctx = new Decl_sectContext(Context, State);
		EnterRule(_localctx, 1362, RULE_decl_sect);
		try {
			State = 10924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10916;
				opt_block_label();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10917;
				opt_block_label();
				State = 10918;
				decl_start();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10920;
				opt_block_label();
				State = 10921;
				decl_start();
				State = 10922;
				decl_stmts(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_start(this);
		}
	}

	[RuleVersion(0)]
	public Decl_startContext decl_start() {
		Decl_startContext _localctx = new Decl_startContext(Context, State);
		EnterRule(_localctx, 1364, RULE_decl_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10926;
			Match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtContext decl_stmt() {
			return GetRuleContext<Decl_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtsContext decl_stmts() {
			return GetRuleContext<Decl_stmtsContext>(0);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_stmts(this);
		}
	}

	[RuleVersion(0)]
	public Decl_stmtsContext decl_stmts() {
		return decl_stmts(0);
	}

	private Decl_stmtsContext decl_stmts(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Decl_stmtsContext _localctx = new Decl_stmtsContext(Context, _parentState);
		Decl_stmtsContext _prevctx = _localctx;
		int _startState = 1366;
		EnterRecursionRule(_localctx, 1366, RULE_decl_stmts, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10929;
			decl_stmt();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10935;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,543,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_stmtsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_decl_stmts);
					State = 10931;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 10932;
					decl_stmt();
					}
					} 
				}
				State = 10937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,543,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Label_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(PostgreSQLParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLabel_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLabel_decl(this);
		}
	}

	[RuleVersion(0)]
	public Label_declContext label_decl() {
		Label_declContext _localctx = new Label_declContext(Context, State);
		EnterRule(_localctx, 1368, RULE_label_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10938;
			Match(LESS_LESS);
			State = 10939;
			any_identifier();
			State = 10940;
			Match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_statementContext decl_statement() {
			return GetRuleContext<Decl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Decl_stmtContext decl_stmt() {
		Decl_stmtContext _localctx = new Decl_stmtContext(Context, State);
		EnterRule(_localctx, 1370, RULE_decl_stmt);
		try {
			State = 10945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10942;
				decl_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10943;
				Match(DECLARE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10944;
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_varnameContext decl_varname() {
			return GetRuleContext<Decl_varnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PostgreSQLParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_aliasitemContext decl_aliasitem() {
			return GetRuleContext<Decl_aliasitemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_constContext decl_const() {
			return GetRuleContext<Decl_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_datatypeContext decl_datatype() {
			return GetRuleContext<Decl_datatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_collateContext decl_collate() {
			return GetRuleContext<Decl_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_notnullContext decl_notnull() {
			return GetRuleContext<Decl_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_defvalContext decl_defval() {
			return GetRuleContext<Decl_defvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scrollableContext opt_scrollable() {
			return GetRuleContext<Opt_scrollableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argsContext decl_cursor_args() {
			return GetRuleContext<Decl_cursor_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_is_forContext decl_is_for() {
			return GetRuleContext<Decl_is_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_queryContext decl_cursor_query() {
			return GetRuleContext<Decl_cursor_queryContext>(0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_statement(this);
		}
	}

	[RuleVersion(0)]
	public Decl_statementContext decl_statement() {
		Decl_statementContext _localctx = new Decl_statementContext(Context, State);
		EnterRule(_localctx, 1372, RULE_decl_statement);
		try {
			State = 10969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10947;
				decl_varname();
				State = 10948;
				Match(ALIAS);
				State = 10949;
				Match(FOR);
				State = 10950;
				decl_aliasitem();
				State = 10951;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10953;
				decl_varname();
				State = 10954;
				decl_const();
				State = 10955;
				decl_datatype();
				State = 10956;
				decl_collate();
				State = 10957;
				decl_notnull();
				State = 10958;
				decl_defval();
				State = 10959;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10961;
				decl_varname();
				State = 10962;
				opt_scrollable();
				State = 10963;
				Match(CURSOR);
				State = 10964;
				decl_cursor_args();
				State = 10965;
				decl_is_for();
				State = 10966;
				decl_cursor_query();
				State = 10967;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scrollableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scrollable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scrollable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scrollable(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scrollableContext opt_scrollable() {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(Context, State);
		EnterRule(_localctx, 1374, RULE_opt_scrollable);
		try {
			State = 10975;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURSOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10972;
				Match(NO);
				State = 10973;
				Match(SCROLL);
				}
				break;
			case SCROLL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10974;
				Match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_query(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_queryContext decl_cursor_query() {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(Context, State);
		EnterRule(_localctx, 1376, RULE_decl_cursor_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10977;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_arglistContext decl_cursor_arglist() {
			return GetRuleContext<Decl_cursor_arglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_args(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_argsContext decl_cursor_args() {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(Context, State);
		EnterRule(_localctx, 1378, RULE_decl_cursor_args);
		try {
			State = 10984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case IS:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10980;
				Match(OPEN_PAREN);
				State = 10981;
				decl_cursor_arglist(0);
				State = 10982;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_arglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argContext decl_cursor_arg() {
			return GetRuleContext<Decl_cursor_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_arglistContext decl_cursor_arglist() {
			return GetRuleContext<Decl_cursor_arglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_arglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_arglist(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_arglistContext decl_cursor_arglist() {
		return decl_cursor_arglist(0);
	}

	private Decl_cursor_arglistContext decl_cursor_arglist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(Context, _parentState);
		Decl_cursor_arglistContext _prevctx = _localctx;
		int _startState = 1380;
		EnterRecursionRule(_localctx, 1380, RULE_decl_cursor_arglist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10987;
			decl_cursor_arg();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 10994;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,548,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_cursor_arglistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_decl_cursor_arglist);
					State = 10989;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 10990;
					Match(COMMA);
					State = 10991;
					decl_cursor_arg();
					}
					} 
				}
				State = 10996;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,548,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Decl_cursor_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_varnameContext decl_varname() {
			return GetRuleContext<Decl_varnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_datatypeContext decl_datatype() {
			return GetRuleContext<Decl_datatypeContext>(0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_arg(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_argContext decl_cursor_arg() {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(Context, State);
		EnterRule(_localctx, 1382, RULE_decl_cursor_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10997;
			decl_varname();
			State = 10998;
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_is_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_is_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_is_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_is_for(this);
		}
	}

	[RuleVersion(0)]
	public Decl_is_forContext decl_is_for() {
		Decl_is_forContext _localctx = new Decl_is_forContext(Context, State);
		EnterRule(_localctx, 1384, RULE_decl_is_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11000;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_aliasitemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_aliasitem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_aliasitem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_aliasitem(this);
		}
	}

	[RuleVersion(0)]
	public Decl_aliasitemContext decl_aliasitem() {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(Context, State);
		EnterRule(_localctx, 1386, RULE_decl_aliasitem);
		try {
			State = 11004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11002;
				Match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11003;
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_varnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_varname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_varname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_varname(this);
		}
	}

	[RuleVersion(0)]
	public Decl_varnameContext decl_varname() {
		Decl_varnameContext _localctx = new Decl_varnameContext(Context, State);
		EnterRule(_localctx, 1388, RULE_decl_varname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11006;
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_const(this);
		}
	}

	[RuleVersion(0)]
	public Decl_constContext decl_const() {
		Decl_constContext _localctx = new Decl_constContext(Context, State);
		EnterRule(_localctx, 1390, RULE_decl_const);
		try {
			State = 11010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11009;
				Match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_datatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_datatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_datatype(this);
		}
	}

	[RuleVersion(0)]
	public Decl_datatypeContext decl_datatype() {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(Context, State);
		EnterRule(_localctx, 1392, RULE_decl_datatype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11012;
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_collate(this);
		}
	}

	[RuleVersion(0)]
	public Decl_collateContext decl_collate() {
		Decl_collateContext _localctx = new Decl_collateContext(Context, State);
		EnterRule(_localctx, 1394, RULE_decl_collate);
		try {
			State = 11017;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11015;
				Match(COLLATE);
				State = 11016;
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_notnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_notnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Decl_notnullContext decl_notnull() {
		Decl_notnullContext _localctx = new Decl_notnullContext(Context, State);
		EnterRule(_localctx, 1396, RULE_decl_notnull);
		try {
			State = 11022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11020;
				Match(NOT);
				State = 11021;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_defvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_defkeyContext decl_defkey() {
			return GetRuleContext<Decl_defkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_defval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_defval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_defval(this);
		}
	}

	[RuleVersion(0)]
	public Decl_defvalContext decl_defval() {
		Decl_defvalContext _localctx = new Decl_defvalContext(Context, State);
		EnterRule(_localctx, 1398, RULE_decl_defval);
		try {
			State = 11028;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11025;
				decl_defkey();
				State = 11026;
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_defkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_defkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_defkey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_defkey(this);
		}
	}

	[RuleVersion(0)]
	public Decl_defkeyContext decl_defkey() {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(Context, State);
		EnterRule(_localctx, 1400, RULE_decl_defkey);
		try {
			State = 11032;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11030;
				assign_operator();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11031;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAssign_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAssign_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assign_operatorContext assign_operator() {
		Assign_operatorContext _localctx = new Assign_operatorContext(Context, State);
		EnterRule(_localctx, 1402, RULE_assign_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11034;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_stmtContext proc_stmt() {
			return GetRuleContext<Proc_stmtContext>(0);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_sect(this);
		}
	}

	[RuleVersion(0)]
	public Proc_sectContext proc_sect() {
		return proc_sect(0);
	}

	private Proc_sectContext proc_sect(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Proc_sectContext _localctx = new Proc_sectContext(Context, _parentState);
		Proc_sectContext _prevctx = _localctx;
		int _startState = 1404;
		EnterRecursionRule(_localctx, 1404, RULE_proc_sect, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11041;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,555,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_sectContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_proc_sect);
					State = 11037;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 11038;
					proc_stmt();
					}
					} 
				}
				State = 11043;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,555,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Proc_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pl_blockContext pl_block() {
			return GetRuleContext<Pl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_returnContext stmt_return() {
			return GetRuleContext<Stmt_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_raiseContext stmt_raise() {
			return GetRuleContext<Stmt_raiseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_assignContext stmt_assign() {
			return GetRuleContext<Stmt_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_ifContext stmt_if() {
			return GetRuleContext<Stmt_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_caseContext stmt_case() {
			return GetRuleContext<Stmt_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_loopContext stmt_loop() {
			return GetRuleContext<Stmt_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_whileContext stmt_while() {
			return GetRuleContext<Stmt_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_forContext stmt_for() {
			return GetRuleContext<Stmt_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_foreach_aContext stmt_foreach_a() {
			return GetRuleContext<Stmt_foreach_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_exitContext stmt_exit() {
			return GetRuleContext<Stmt_exitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_assertContext stmt_assert() {
			return GetRuleContext<Stmt_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_execsqlContext stmt_execsql() {
			return GetRuleContext<Stmt_execsqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_dynexecuteContext stmt_dynexecute() {
			return GetRuleContext<Stmt_dynexecuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_performContext stmt_perform() {
			return GetRuleContext<Stmt_performContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_callContext stmt_call() {
			return GetRuleContext<Stmt_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_getdiagContext stmt_getdiag() {
			return GetRuleContext<Stmt_getdiagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_openContext stmt_open() {
			return GetRuleContext<Stmt_openContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_fetchContext stmt_fetch() {
			return GetRuleContext<Stmt_fetchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_moveContext stmt_move() {
			return GetRuleContext<Stmt_moveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_closeContext stmt_close() {
			return GetRuleContext<Stmt_closeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_nullContext stmt_null() {
			return GetRuleContext<Stmt_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_commitContext stmt_commit() {
			return GetRuleContext<Stmt_commitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_rollbackContext stmt_rollback() {
			return GetRuleContext<Stmt_rollbackContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_setContext stmt_set() {
			return GetRuleContext<Stmt_setContext>(0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Proc_stmtContext proc_stmt() {
		Proc_stmtContext _localctx = new Proc_stmtContext(Context, State);
		EnterRule(_localctx, 1406, RULE_proc_stmt);
		try {
			State = 11071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11044;
				pl_block();
				State = 11045;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11047;
				stmt_return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11048;
				stmt_raise();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11049;
				stmt_assign();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11050;
				stmt_if();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11051;
				stmt_case();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11052;
				stmt_loop();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11053;
				stmt_while();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11054;
				stmt_for();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11055;
				stmt_foreach_a();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11056;
				stmt_exit();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11057;
				stmt_assert();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11058;
				stmt_execsql();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 11059;
				stmt_dynexecute();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 11060;
				stmt_perform();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 11061;
				stmt_call();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 11062;
				stmt_getdiag();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 11063;
				stmt_open();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 11064;
				stmt_fetch();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 11065;
				stmt_move();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 11066;
				stmt_close();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 11067;
				stmt_null();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 11068;
				stmt_commit();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 11069;
				stmt_rollback();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 11070;
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_performContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(PostgreSQLParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_semiContext expr_until_semi() {
			return GetRuleContext<Expr_until_semiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_perform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_perform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_perform(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_performContext stmt_perform() {
		Stmt_performContext _localctx = new Stmt_performContext(Context, State);
		EnterRule(_localctx, 1408, RULE_stmt_perform);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11073;
			Match(PERFORM);
			State = 11074;
			expr_until_semi();
			State = 11075;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_expr_listContext opt_expr_list() {
			return GetRuleContext<Opt_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_call(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_callContext stmt_call() {
		Stmt_callContext _localctx = new Stmt_callContext(Context, State);
		EnterRule(_localctx, 1410, RULE_stmt_call);
		try {
			State = 11091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11077;
				Match(CALL);
				State = 11078;
				any_identifier();
				State = 11079;
				Match(OPEN_PAREN);
				State = 11080;
				opt_expr_list();
				State = 11081;
				Match(CLOSE_PAREN);
				State = 11082;
				Match(SEMI);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11084;
				Match(DO);
				State = 11085;
				any_identifier();
				State = 11086;
				Match(OPEN_PAREN);
				State = 11087;
				opt_expr_list();
				State = 11088;
				Match(CLOSE_PAREN);
				State = 11089;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_expr_listContext opt_expr_list() {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(Context, State);
		EnterRule(_localctx, 1412, RULE_opt_expr_list);
		try {
			State = 11095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11094;
				expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_assign(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_assignContext stmt_assign() {
		Stmt_assignContext _localctx = new Stmt_assignContext(Context, State);
		EnterRule(_localctx, 1414, RULE_stmt_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11097;
			assign_var(0);
			State = 11098;
			assign_operator();
			State = 11099;
			sql_expression();
			State = 11100;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_getdiagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(PostgreSQLParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_area_optContext getdiag_area_opt() {
			return GetRuleContext<Getdiag_area_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_listContext getdiag_list() {
			return GetRuleContext<Getdiag_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_getdiag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_getdiag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_getdiag(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_getdiagContext stmt_getdiag() {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(Context, State);
		EnterRule(_localctx, 1416, RULE_stmt_getdiag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11102;
			Match(GET);
			State = 11103;
			getdiag_area_opt();
			State = 11104;
			Match(DIAGNOSTICS);
			State = 11105;
			getdiag_list(0);
			State = 11106;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_area_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_area_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_area_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_area_opt(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_area_optContext getdiag_area_opt() {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(Context, State);
		EnterRule(_localctx, 1418, RULE_getdiag_area_opt);
		try {
			State = 11111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIAGNOSTICS:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11109;
				Match(CURRENT_P);
				}
				break;
			case STACKED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11110;
				Match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_list_itemContext getdiag_list_item() {
			return GetRuleContext<Getdiag_list_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_listContext getdiag_list() {
			return GetRuleContext<Getdiag_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Getdiag_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_list(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_listContext getdiag_list() {
		return getdiag_list(0);
	}

	private Getdiag_listContext getdiag_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Getdiag_listContext _localctx = new Getdiag_listContext(Context, _parentState);
		Getdiag_listContext _prevctx = _localctx;
		int _startState = 1420;
		EnterRecursionRule(_localctx, 1420, RULE_getdiag_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11114;
			getdiag_list_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11121;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Getdiag_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_getdiag_list);
					State = 11116;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 11117;
					Match(COMMA);
					State = 11118;
					getdiag_list_item();
					}
					} 
				}
				State = 11123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Getdiag_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_targetContext getdiag_target() {
			return GetRuleContext<Getdiag_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_itemContext getdiag_item() {
			return GetRuleContext<Getdiag_itemContext>(0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_list_itemContext getdiag_list_item() {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(Context, State);
		EnterRule(_localctx, 1422, RULE_getdiag_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11124;
			getdiag_target();
			State = 11125;
			assign_operator();
			State = 11126;
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_item(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_itemContext getdiag_item() {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(Context, State);
		EnterRule(_localctx, 1424, RULE_getdiag_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11128;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_target(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_targetContext getdiag_target() {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(Context, State);
		EnterRule(_localctx, 1426, RULE_getdiag_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11130;
			assign_var(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_rightbracketContext expr_until_rightbracket() {
			return GetRuleContext<Expr_until_rightbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Assign_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAssign_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAssign_var(this);
		}
	}

	[RuleVersion(0)]
	public Assign_varContext assign_var() {
		return assign_var(0);
	}

	private Assign_varContext assign_var(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assign_varContext _localctx = new Assign_varContext(Context, _parentState);
		Assign_varContext _prevctx = _localctx;
		int _startState = 1428;
		EnterRecursionRule(_localctx, 1428, RULE_assign_var, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 11133;
				any_name();
				}
				break;
			case PARAM:
				{
				State = 11134;
				Match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,562,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assign_varContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assign_var);
					State = 11137;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 11138;
					Match(OPEN_BRACKET);
					State = 11139;
					expr_until_rightbracket();
					State = 11140;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 11146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,562,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Stmt_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_P() { return GetTokens(PostgreSQLParser.IF_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P(int i) {
			return GetToken(PostgreSQLParser.IF_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_thenContext expr_until_then() {
			return GetRuleContext<Expr_until_thenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elsifsContext stmt_elsifs() {
			return GetRuleContext<Stmt_elsifsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elseContext stmt_else() {
			return GetRuleContext<Stmt_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_if(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_ifContext stmt_if() {
		Stmt_ifContext _localctx = new Stmt_ifContext(Context, State);
		EnterRule(_localctx, 1430, RULE_stmt_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11147;
			Match(IF_P);
			State = 11148;
			expr_until_then();
			State = 11149;
			Match(THEN);
			State = 11150;
			proc_sect(0);
			State = 11151;
			stmt_elsifs(0);
			State = 11152;
			stmt_else();
			State = 11153;
			Match(END_P);
			State = 11154;
			Match(IF_P);
			State = 11155;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_elsifsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elsifsContext stmt_elsifs() {
			return GetRuleContext<Stmt_elsifsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(PostgreSQLParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_elsifs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_elsifs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_elsifs(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_elsifsContext stmt_elsifs() {
		return stmt_elsifs(0);
	}

	private Stmt_elsifsContext stmt_elsifs(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(Context, _parentState);
		Stmt_elsifsContext _prevctx = _localctx;
		int _startState = 1432;
		EnterRecursionRule(_localctx, 1432, RULE_stmt_elsifs, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,563,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Stmt_elsifsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_stmt_elsifs);
					State = 11158;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 11159;
					Match(ELSIF);
					State = 11160;
					a_expr(0);
					State = 11161;
					Match(THEN);
					State = 11162;
					proc_sect(0);
					}
					} 
				}
				State = 11168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,563,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Stmt_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_else(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_elseContext stmt_else() {
		Stmt_elseContext _localctx = new Stmt_elseContext(Context, State);
		EnterRule(_localctx, 1434, RULE_stmt_else);
		try {
			State = 11172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11170;
				Match(ELSE);
				State = 11171;
				proc_sect(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(PostgreSQLParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(PostgreSQLParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_expr_until_whenContext opt_expr_until_when() {
			return GetRuleContext<Opt_expr_until_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_when_listContext case_when_list() {
			return GetRuleContext<Case_when_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_case_elseContext opt_case_else() {
			return GetRuleContext<Opt_case_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_case(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_caseContext stmt_case() {
		Stmt_caseContext _localctx = new Stmt_caseContext(Context, State);
		EnterRule(_localctx, 1436, RULE_stmt_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11174;
			Match(CASE);
			State = 11175;
			opt_expr_until_when();
			State = 11176;
			case_when_list(0);
			State = 11177;
			opt_case_else();
			State = 11178;
			Match(END_P);
			State = 11179;
			Match(CASE);
			State = 11180;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_expr_until_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_expr_until_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_expr_until_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_expr_until_when(this);
		}
	}

	[RuleVersion(0)]
	public Opt_expr_until_whenContext opt_expr_until_when() {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(Context, State);
		EnterRule(_localctx, 1438, RULE_opt_expr_until_when);
		try {
			State = 11184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11183;
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_whenContext case_when() {
			return GetRuleContext<Case_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_when_listContext case_when_list() {
			return GetRuleContext<Case_when_listContext>(0);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Case_when_listContext case_when_list() {
		return case_when_list(0);
	}

	private Case_when_listContext case_when_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Case_when_listContext _localctx = new Case_when_listContext(Context, _parentState);
		Case_when_listContext _prevctx = _localctx;
		int _startState = 1440;
		EnterRecursionRule(_localctx, 1440, RULE_case_when_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11187;
			case_when();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,566,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Case_when_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_case_when_list);
					State = 11189;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 11190;
					case_when();
					}
					} 
				}
				State = 11195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,566,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Case_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_when(this);
		}
	}

	[RuleVersion(0)]
	public Case_whenContext case_when() {
		Case_whenContext _localctx = new Case_whenContext(Context, State);
		EnterRule(_localctx, 1442, RULE_case_when);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11196;
			Match(WHEN);
			State = 11197;
			expr_list(0);
			State = 11198;
			Match(THEN);
			State = 11199;
			proc_sect(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_case_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_case_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_case_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_case_else(this);
		}
	}

	[RuleVersion(0)]
	public Opt_case_elseContext opt_case_else() {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(Context, State);
		EnterRule(_localctx, 1444, RULE_opt_case_else);
		try {
			State = 11204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11202;
				Match(ELSE);
				State = 11203;
				proc_sect(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_loop(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_loopContext stmt_loop() {
		Stmt_loopContext _localctx = new Stmt_loopContext(Context, State);
		EnterRule(_localctx, 1446, RULE_stmt_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11206;
			opt_loop_label();
			State = 11207;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PostgreSQLParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_loopContext expr_until_loop() {
			return GetRuleContext<Expr_until_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_while(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_while(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_whileContext stmt_while() {
		Stmt_whileContext _localctx = new Stmt_whileContext(Context, State);
		EnterRule(_localctx, 1448, RULE_stmt_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11209;
			opt_loop_label();
			State = 11210;
			Match(WHILE);
			State = 11211;
			expr_until_loop();
			State = 11212;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_controlContext for_control() {
			return GetRuleContext<For_controlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_for(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_forContext stmt_for() {
		Stmt_forContext _localctx = new Stmt_forContext(Context, State);
		EnterRule(_localctx, 1450, RULE_stmt_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11214;
			opt_loop_label();
			State = 11215;
			Match(FOR);
			State = 11216;
			for_control();
			State = 11217;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_variableContext for_variable() {
			return GetRuleContext<For_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reverseContext opt_reverse() {
			return GetRuleContext<Opt_reverseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_DOT() { return GetToken(PostgreSQLParser.DOT_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_by_expressionContext opt_by_expression() {
			return GetRuleContext<Opt_by_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_cursor_parametersContext opt_cursor_parameters() {
			return GetRuleContext<Opt_cursor_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_using_expressionContext opt_for_using_expression() {
			return GetRuleContext<Opt_for_using_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_control(this);
		}
	}

	[RuleVersion(0)]
	public For_controlContext for_control() {
		For_controlContext _localctx = new For_controlContext(Context, State);
		EnterRule(_localctx, 1452, RULE_for_control);
		try {
			State = 11246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11219;
				for_variable();
				State = 11220;
				Match(IN_P);
				State = 11221;
				opt_reverse();
				State = 11222;
				a_expr(0);
				State = 11223;
				Match(DOT_DOT);
				State = 11224;
				a_expr(0);
				State = 11225;
				opt_by_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11227;
				for_variable();
				State = 11228;
				Match(IN_P);
				State = 11229;
				cursor_name();
				State = 11230;
				opt_cursor_parameters();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11232;
				for_variable();
				State = 11233;
				Match(IN_P);
				State = 11234;
				selectstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11236;
				for_variable();
				State = 11237;
				Match(IN_P);
				State = 11238;
				Match(EXECUTE);
				State = 11239;
				a_expr(0);
				State = 11240;
				opt_for_using_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11242;
				for_variable();
				State = 11243;
				Match(IN_P);
				State = 11244;
				explainstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_for_using_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_for_using_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_for_using_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_for_using_expression(this);
		}
	}

	[RuleVersion(0)]
	public Opt_for_using_expressionContext opt_for_using_expression() {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(Context, State);
		EnterRule(_localctx, 1454, RULE_opt_for_using_expression);
		try {
			State = 11251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11249;
				Match(USING);
				State = 11250;
				expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_cursor_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_cursor_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_cursor_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_cursor_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Opt_cursor_parametersContext opt_cursor_parameters() {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(Context, State);
		EnterRule(_localctx, 1456, RULE_opt_cursor_parameters);
		int _la;
		try {
			State = 11265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11254;
				Match(OPEN_PAREN);
				State = 11255;
				a_expr(0);
				State = 11260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 11256;
					Match(COMMA);
					State = 11257;
					a_expr(0);
					}
					}
					State = 11262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 11263;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_reverseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_reverse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_reverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_reverse(this);
		}
	}

	[RuleVersion(0)]
	public Opt_reverseContext opt_reverse() {
		Opt_reverseContext _localctx = new Opt_reverseContext(Context, State);
		EnterRule(_localctx, 1458, RULE_opt_reverse);
		try {
			State = 11269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,572,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11268;
				Match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_by_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_by_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Opt_by_expressionContext opt_by_expression() {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(Context, State);
		EnterRule(_localctx, 1460, RULE_opt_by_expression);
		try {
			State = 11274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11272;
				Match(BY);
				State = 11273;
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_variable(this);
		}
	}

	[RuleVersion(0)]
	public For_variableContext for_variable() {
		For_variableContext _localctx = new For_variableContext(Context, State);
		EnterRule(_localctx, 1462, RULE_for_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11276;
			any_name_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_foreach_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(PostgreSQLParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_variableContext for_variable() {
			return GetRuleContext<For_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreach_sliceContext foreach_slice() {
			return GetRuleContext<Foreach_sliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_foreach_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_foreach_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_foreach_a(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_foreach_aContext stmt_foreach_a() {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(Context, State);
		EnterRule(_localctx, 1464, RULE_stmt_foreach_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11278;
			opt_loop_label();
			State = 11279;
			Match(FOREACH);
			State = 11280;
			for_variable();
			State = 11281;
			foreach_slice();
			State = 11282;
			Match(IN_P);
			State = 11283;
			Match(ARRAY);
			State = 11284;
			a_expr(0);
			State = 11285;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_sliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICE() { return GetToken(PostgreSQLParser.SLICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeach_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeach_slice(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_sliceContext foreach_slice() {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(Context, State);
		EnterRule(_localctx, 1466, RULE_foreach_slice);
		try {
			State = 11290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11288;
				Match(SLICE);
				State = 11289;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_exitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exit_typeContext exit_type() {
			return GetRuleContext<Exit_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_exitcondContext opt_exitcond() {
			return GetRuleContext<Opt_exitcondContext>(0);
		}
		public Stmt_exitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_exit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_exit(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_exitContext stmt_exit() {
		Stmt_exitContext _localctx = new Stmt_exitContext(Context, State);
		EnterRule(_localctx, 1468, RULE_stmt_exit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11292;
			exit_type();
			State = 11293;
			opt_label();
			State = 11294;
			opt_exitcond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExit_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExit_type(this);
		}
	}

	[RuleVersion(0)]
	public Exit_typeContext exit_type() {
		Exit_typeContext _localctx = new Exit_typeContext(Context, State);
		EnterRule(_localctx, 1470, RULE_exit_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11296;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PostgreSQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_using_expressionContext opt_for_using_expression() {
			return GetRuleContext<Opt_for_using_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_return_resultContext opt_return_result() {
			return GetRuleContext<Opt_return_resultContext>(0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_return(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_returnContext stmt_return() {
		Stmt_returnContext _localctx = new Stmt_returnContext(Context, State);
		EnterRule(_localctx, 1472, RULE_stmt_return);
		try {
			State = 11319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,575,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11298;
				Match(RETURN);
				State = 11299;
				Match(NEXT);
				State = 11300;
				sql_expression();
				State = 11301;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11303;
				Match(RETURN);
				State = 11304;
				Match(QUERY);
				State = 11305;
				Match(EXECUTE);
				State = 11306;
				a_expr(0);
				State = 11307;
				opt_for_using_expression();
				State = 11308;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11310;
				Match(RETURN);
				State = 11311;
				Match(QUERY);
				State = 11312;
				selectstmt();
				State = 11313;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11315;
				Match(RETURN);
				State = 11316;
				opt_return_result();
				State = 11317;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_return_resultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_return_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_return_result(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_return_result(this);
		}
	}

	[RuleVersion(0)]
	public Opt_return_resultContext opt_return_result() {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(Context, State);
		EnterRule(_localctx, 1474, RULE_opt_return_result);
		try {
			State = 11323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11322;
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_raiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PostgreSQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return GetRuleContext<Opt_stmt_raise_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_listContext opt_raise_list() {
			return GetRuleContext<Opt_raise_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_usingContext opt_raise_using() {
			return GetRuleContext<Opt_raise_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_raise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_raise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_raise(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_raiseContext stmt_raise() {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(Context, State);
		EnterRule(_localctx, 1476, RULE_stmt_raise);
		try {
			State = 11351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,577,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11325;
				Match(RAISE);
				State = 11326;
				opt_stmt_raise_level();
				State = 11327;
				sconst();
				State = 11328;
				opt_raise_list(0);
				State = 11329;
				opt_raise_using();
				State = 11330;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11332;
				Match(RAISE);
				State = 11333;
				opt_stmt_raise_level();
				State = 11334;
				identifier();
				State = 11335;
				opt_raise_using();
				State = 11336;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11338;
				Match(RAISE);
				State = 11339;
				opt_stmt_raise_level();
				State = 11340;
				Match(SQLSTATE);
				State = 11341;
				sconst();
				State = 11342;
				opt_raise_using();
				State = 11343;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11345;
				Match(RAISE);
				State = 11346;
				opt_stmt_raise_level();
				State = 11347;
				opt_raise_using();
				State = 11348;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11350;
				Match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmt_raise_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(PostgreSQLParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(PostgreSQLParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFO() { return GetToken(PostgreSQLParser.INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTICE() { return GetToken(PostgreSQLParser.NOTICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNING() { return GetToken(PostgreSQLParser.WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmt_raise_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_stmt_raise_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_stmt_raise_level(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(Context, State);
		EnterRule(_localctx, 1478, RULE_opt_stmt_raise_level);
		try {
			State = 11361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11355;
				Match(DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11356;
				Match(LOG);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11357;
				Match(INFO);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11358;
				Match(NOTICE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11359;
				Match(WARNING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11360;
				Match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_listContext opt_raise_list() {
			return GetRuleContext<Opt_raise_listContext>(0);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_listContext opt_raise_list() {
		return opt_raise_list(0);
	}

	private Opt_raise_listContext opt_raise_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opt_raise_listContext _localctx = new Opt_raise_listContext(Context, _parentState);
		Opt_raise_listContext _prevctx = _localctx;
		int _startState = 1480;
		EnterRecursionRule(_localctx, 1480, RULE_opt_raise_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				State = 11364;
				Match(COMMA);
				State = 11365;
				a_expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,580,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_raise_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_opt_raise_list);
					State = 11368;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 11369;
					Match(COMMA);
					State = 11370;
					a_expr(0);
					}
					} 
				}
				State = 11375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,580,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_raise_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return GetRuleContext<Opt_raise_using_elem_listContext>(0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_usingContext opt_raise_using() {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(Context, State);
		EnterRule(_localctx, 1482, RULE_opt_raise_using);
		try {
			State = 11379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11377;
				Match(USING);
				State = 11378;
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_using_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using_elem(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_using_elemContext opt_raise_using_elem() {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(Context, State);
		EnterRule(_localctx, 1484, RULE_opt_raise_using_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11381;
			identifier();
			State = 11382;
			Match(EQUAL);
			State = 11383;
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_using_elem_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elemContext opt_raise_using_elem() {
			return GetRuleContext<Opt_raise_using_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return GetRuleContext<Opt_raise_using_elem_listContext>(0);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using_elem_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using_elem_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using_elem_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(Context, State);
		EnterRule(_localctx, 1486, RULE_opt_raise_using_elem_list);
		try {
			State = 11390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11385;
				opt_raise_using_elem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11386;
				opt_raise_using_elem();
				State = 11387;
				Match(COMMA);
				State = 11388;
				opt_raise_using_elem_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PostgreSQLParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return GetRuleContext<Opt_stmt_assert_messageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_assert(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_assertContext stmt_assert() {
		Stmt_assertContext _localctx = new Stmt_assertContext(Context, State);
		EnterRule(_localctx, 1488, RULE_stmt_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11392;
			Match(ASSERT);
			State = 11393;
			sql_expression();
			State = 11394;
			opt_stmt_assert_message();
			State = 11395;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmt_assert_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmt_assert_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_stmt_assert_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_stmt_assert_message(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(Context, State);
		EnterRule(_localctx, 1490, RULE_opt_stmt_assert_message);
		try {
			State = 11400;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11398;
				Match(COMMA);
				State = 11399;
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(PostgreSQLParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(PostgreSQLParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoop_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoop_body(this);
		}
	}

	[RuleVersion(0)]
	public Loop_bodyContext loop_body() {
		Loop_bodyContext _localctx = new Loop_bodyContext(Context, State);
		EnterRule(_localctx, 1492, RULE_loop_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11402;
			Match(LOOP);
			State = 11403;
			proc_sect(0);
			State = 11404;
			Match(END_P);
			State = 11405;
			Match(LOOP);
			State = 11406;
			opt_label();
			State = 11407;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_execsqlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Make_execsql_stmtContext make_execsql_stmt() {
			return GetRuleContext<Make_execsql_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_execsql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_execsql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_execsql(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_execsqlContext stmt_execsql() {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(Context, State);
		EnterRule(_localctx, 1494, RULE_stmt_execsql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11409;
			make_execsql_stmt();
			State = 11410;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_dynexecuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_intoContext opt_execute_into() {
			return GetRuleContext<Opt_execute_intoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_usingContext opt_execute_using() {
			return GetRuleContext<Opt_execute_usingContext>(0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_dynexecute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_dynexecute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_dynexecute(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_dynexecuteContext stmt_dynexecute() {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(Context, State);
		EnterRule(_localctx, 1496, RULE_stmt_dynexecute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11412;
			Match(EXECUTE);
			State = 11413;
			a_expr(0);
			State = 11421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
			case 1:
				{
				State = 11414;
				opt_execute_into();
				State = 11415;
				opt_execute_using();
				}
				break;
			case 2:
				{
				State = 11417;
				opt_execute_using();
				State = 11418;
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			State = 11423;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_using_listContext opt_execute_using_list() {
			return GetRuleContext<Opt_execute_using_listContext>(0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_usingContext opt_execute_using() {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(Context, State);
		EnterRule(_localctx, 1498, RULE_opt_execute_using);
		try {
			State = 11428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case INTO:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11426;
				Match(USING);
				State = 11427;
				opt_execute_using_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_using_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_using_listContext opt_execute_using_list() {
			return GetRuleContext<Opt_execute_using_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_using_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_using_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_using_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_using_listContext opt_execute_using_list() {
		return opt_execute_using_list(0);
	}

	private Opt_execute_using_listContext opt_execute_using_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(Context, _parentState);
		Opt_execute_using_listContext _prevctx = _localctx;
		int _startState = 1500;
		EnterRecursionRule(_localctx, 1500, RULE_opt_execute_using_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11431;
			a_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,586,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_execute_using_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_opt_execute_using_list);
					State = 11433;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 11434;
					Match(COMMA);
					State = 11435;
					a_expr(0);
					}
					} 
				}
				State = 11440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,586,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_execute_intoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_into; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_into(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_into(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_intoContext opt_execute_into() {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(Context, State);
		EnterRule(_localctx, 1502, RULE_opt_execute_into);
		try {
			State = 11447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,587,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11442;
				Match(INTO);
				State = 11443;
				Match(STRICT_P);
				State = 11444;
				into_target();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11445;
				Match(INTO);
				State = 11446;
				into_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_openContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(PostgreSQLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scroll_optionContext opt_scroll_option() {
			return GetRuleContext<Opt_scroll_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_usingContext opt_open_using() {
			return GetRuleContext<Opt_open_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_listContext opt_open_bound_list() {
			return GetRuleContext<Opt_open_bound_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_open; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_open(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_open(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_openContext stmt_open() {
		Stmt_openContext _localctx = new Stmt_openContext(Context, State);
		EnterRule(_localctx, 1504, RULE_stmt_open);
		try {
			State = 11474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11449;
				Match(OPEN);
				State = 11450;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11451;
				Match(OPEN);
				State = 11452;
				cursor_variable();
				State = 11453;
				opt_scroll_option();
				State = 11454;
				Match(FOR);
				State = 11455;
				selectstmt();
				State = 11456;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11458;
				Match(OPEN);
				State = 11459;
				cursor_variable();
				State = 11460;
				opt_scroll_option();
				State = 11461;
				Match(FOR);
				State = 11462;
				Match(EXECUTE);
				State = 11463;
				sql_expression();
				State = 11464;
				opt_open_using();
				State = 11465;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11467;
				Match(OPEN);
				State = 11468;
				colid();
				State = 11469;
				Match(OPEN_PAREN);
				State = 11470;
				opt_open_bound_list(0);
				State = 11471;
				Match(CLOSE_PAREN);
				State = 11472;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_bound_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_bound_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_bound_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_bound_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_bound_list_itemContext opt_open_bound_list_item() {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(Context, State);
		EnterRule(_localctx, 1506, RULE_opt_open_bound_list_item);
		try {
			State = 11481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,589,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11476;
				colid();
				State = 11477;
				Match(COLON_EQUALS);
				State = 11478;
				a_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11480;
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_bound_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_list_itemContext opt_open_bound_list_item() {
			return GetRuleContext<Opt_open_bound_list_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_listContext opt_open_bound_list() {
			return GetRuleContext<Opt_open_bound_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_bound_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_bound_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_bound_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_bound_listContext opt_open_bound_list() {
		return opt_open_bound_list(0);
	}

	private Opt_open_bound_listContext opt_open_bound_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(Context, _parentState);
		Opt_open_bound_listContext _prevctx = _localctx;
		int _startState = 1508;
		EnterRecursionRule(_localctx, 1508, RULE_opt_open_bound_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11484;
			opt_open_bound_list_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11491;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,590,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_open_bound_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_opt_open_bound_list);
					State = 11486;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 11487;
					Match(COMMA);
					State = 11488;
					opt_open_bound_list_item();
					}
					} 
				}
				State = 11493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,590,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_open_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_usingContext opt_open_using() {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(Context, State);
		EnterRule(_localctx, 1510, RULE_opt_open_using);
		try {
			State = 11497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11495;
				Match(USING);
				State = 11496;
				expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext[] sql_expression() {
			return GetRuleContexts<Sql_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression(int i) {
			return GetRuleContext<Sql_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Sql_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSql_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSql_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Sql_expression_listContext sql_expression_list() {
		Sql_expression_listContext _localctx = new Sql_expression_listContext(Context, State);
		EnterRule(_localctx, 1512, RULE_sql_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11499;
			sql_expression();
			State = 11504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 11500;
				Match(COMMA);
				State = 11501;
				sql_expression();
				}
				}
				State = 11506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scroll_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scroll_option_noContext opt_scroll_option_no() {
			return GetRuleContext<Opt_scroll_option_noContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scroll_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scroll_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scroll_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scroll_optionContext opt_scroll_option() {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(Context, State);
		EnterRule(_localctx, 1514, RULE_opt_scroll_option);
		try {
			State = 11511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11508;
				opt_scroll_option_no();
				State = 11509;
				Match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scroll_option_noContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scroll_option_no; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scroll_option_no(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scroll_option_no(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scroll_option_noContext opt_scroll_option_no() {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(Context, State);
		EnterRule(_localctx, 1516, RULE_opt_scroll_option_no);
		try {
			State = 11515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCROLL:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11514;
				Match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_fetchContext : ParserRuleContext {
		public Opt_fetch_directionContext direction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_cursor_fromContext opt_cursor_from() {
			return GetRuleContext<Opt_cursor_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fetch_directionContext opt_fetch_direction() {
			return GetRuleContext<Opt_fetch_directionContext>(0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_fetch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_fetch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_fetch(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_fetchContext stmt_fetch() {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(Context, State);
		EnterRule(_localctx, 1518, RULE_stmt_fetch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11517;
			Match(FETCH);
			State = 11518;
			_localctx.direction = opt_fetch_direction();
			State = 11519;
			opt_cursor_from();
			State = 11520;
			cursor_variable();
			State = 11521;
			Match(INTO);
			State = 11522;
			into_target();
			State = 11523;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_target(this);
		}
	}

	[RuleVersion(0)]
	public Into_targetContext into_target() {
		Into_targetContext _localctx = new Into_targetContext(Context, State);
		EnterRule(_localctx, 1520, RULE_into_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11525;
			expr_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_cursor_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_cursor_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_cursor_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_cursor_from(this);
		}
	}

	[RuleVersion(0)]
	public Opt_cursor_fromContext opt_cursor_from() {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(Context, State);
		EnterRule(_localctx, 1522, RULE_opt_cursor_from);
		try {
			State = 11530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11528;
				Match(FROM);
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11529;
				Match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fetch_directionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_fetch_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_fetch_direction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_fetch_direction(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fetch_directionContext opt_fetch_direction() {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(Context, State);
		EnterRule(_localctx, 1524, RULE_opt_fetch_direction);
		try {
			State = 11554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11534;
				Match(NEXT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11535;
				Match(PRIOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11536;
				Match(FIRST_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11537;
				Match(LAST_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11538;
				Match(ABSOLUTE_P);
				State = 11539;
				a_expr(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11540;
				Match(RELATIVE_P);
				State = 11541;
				a_expr(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11542;
				a_expr(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11543;
				Match(ALL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11544;
				Match(FORWARD);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11545;
				Match(FORWARD);
				State = 11546;
				a_expr(0);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11547;
				Match(FORWARD);
				State = 11548;
				Match(ALL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 11549;
				Match(BACKWARD);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 11550;
				Match(BACKWARD);
				State = 11551;
				a_expr(0);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 11552;
				Match(BACKWARD);
				State = 11553;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_moveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fetch_directionContext opt_fetch_direction() {
			return GetRuleContext<Opt_fetch_directionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_move(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_move(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_moveContext stmt_move() {
		Stmt_moveContext _localctx = new Stmt_moveContext(Context, State);
		EnterRule(_localctx, 1526, RULE_stmt_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11556;
			Match(MOVE);
			State = 11557;
			opt_fetch_direction();
			State = 11558;
			cursor_variable();
			State = 11559;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_closeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_close; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_close(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_close(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_closeContext stmt_close() {
		Stmt_closeContext _localctx = new Stmt_closeContext(Context, State);
		EnterRule(_localctx, 1528, RULE_stmt_close);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11561;
			Match(CLOSE);
			State = 11562;
			cursor_variable();
			State = 11563;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_nullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_null(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_nullContext stmt_null() {
		Stmt_nullContext _localctx = new Stmt_nullContext(Context, State);
		EnterRule(_localctx, 1530, RULE_stmt_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11565;
			Match(NULL_P);
			State = 11566;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_commitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return GetRuleContext<Plsql_opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_commit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_commit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_commit(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_commitContext stmt_commit() {
		Stmt_commitContext _localctx = new Stmt_commitContext(Context, State);
		EnterRule(_localctx, 1532, RULE_stmt_commit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11568;
			Match(COMMIT);
			State = 11569;
			plsql_opt_transaction_chain();
			State = 11570;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_rollbackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return GetRuleContext<Plsql_opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_rollback; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_rollback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_rollback(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_rollbackContext stmt_rollback() {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(Context, State);
		EnterRule(_localctx, 1534, RULE_stmt_rollback);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11572;
			Match(ROLLBACK);
			State = 11573;
			plsql_opt_transaction_chain();
			State = 11574;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plsql_opt_transaction_chainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsql_opt_transaction_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsql_opt_transaction_chain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsql_opt_transaction_chain(this);
		}
	}

	[RuleVersion(0)]
	public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(Context, State);
		EnterRule(_localctx, 1536, RULE_plsql_opt_transaction_chain);
		try {
			State = 11582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11576;
				Match(AND);
				State = 11577;
				Match(CHAIN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11578;
				Match(AND);
				State = 11579;
				Match(NO);
				State = 11580;
				Match(CHAIN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_set(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_setContext stmt_set() {
		Stmt_setContext _localctx = new Stmt_setContext(Context, State);
		EnterRule(_localctx, 1538, RULE_stmt_set);
		try {
			State = 11597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11584;
				Match(SET);
				State = 11585;
				any_name();
				State = 11586;
				Match(TO);
				State = 11587;
				Match(DEFAULT);
				State = 11588;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11590;
				Match(RESET);
				State = 11591;
				any_name();
				State = 11592;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11594;
				Match(RESET);
				State = 11595;
				Match(ALL);
				State = 11596;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_variable(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_variableContext cursor_variable() {
		Cursor_variableContext _localctx = new Cursor_variableContext(Context, State);
		EnterRule(_localctx, 1540, RULE_cursor_variable);
		try {
			State = 11601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11599;
				colid();
				}
				break;
			case PARAM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11600;
				Match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionsContext proc_exceptions() {
			return GetRuleContext<Proc_exceptionsContext>(0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterException_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitException_sect(this);
		}
	}

	[RuleVersion(0)]
	public Exception_sectContext exception_sect() {
		Exception_sectContext _localctx = new Exception_sectContext(Context, State);
		EnterRule(_localctx, 1542, RULE_exception_sect);
		try {
			State = 11606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11604;
				Match(EXCEPTION);
				State = 11605;
				proc_exceptions(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_exceptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionContext proc_exception() {
			return GetRuleContext<Proc_exceptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionsContext proc_exceptions() {
			return GetRuleContext<Proc_exceptionsContext>(0);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_exceptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_exceptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_exceptions(this);
		}
	}

	[RuleVersion(0)]
	public Proc_exceptionsContext proc_exceptions() {
		return proc_exceptions(0);
	}

	private Proc_exceptionsContext proc_exceptions(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(Context, _parentState);
		Proc_exceptionsContext _prevctx = _localctx;
		int _startState = 1544;
		EnterRecursionRule(_localctx, 1544, RULE_proc_exceptions, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11609;
			proc_exception();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11615;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,601,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_exceptionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_proc_exceptions);
					State = 11611;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 11612;
					proc_exception();
					}
					} 
				}
				State = 11617;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,601,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Proc_exceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionsContext proc_conditions() {
			return GetRuleContext<Proc_conditionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_exception; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_exception(this);
		}
	}

	[RuleVersion(0)]
	public Proc_exceptionContext proc_exception() {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(Context, State);
		EnterRule(_localctx, 1546, RULE_proc_exception);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11618;
			Match(WHEN);
			State = 11619;
			proc_conditions(0);
			State = 11620;
			Match(THEN);
			State = 11621;
			proc_sect(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_conditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionContext proc_condition() {
			return GetRuleContext<Proc_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionsContext proc_conditions() {
			return GetRuleContext<Proc_conditionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_conditions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_conditions(this);
		}
	}

	[RuleVersion(0)]
	public Proc_conditionsContext proc_conditions() {
		return proc_conditions(0);
	}

	private Proc_conditionsContext proc_conditions(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Proc_conditionsContext _localctx = new Proc_conditionsContext(Context, _parentState);
		Proc_conditionsContext _prevctx = _localctx;
		int _startState = 1548;
		EnterRecursionRule(_localctx, 1548, RULE_proc_conditions, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11624;
			proc_condition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 11631;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,602,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_conditionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_proc_conditions);
					State = 11626;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 11627;
					Match(OR);
					State = 11628;
					proc_condition();
					}
					} 
				}
				State = 11633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,602,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Proc_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_condition(this);
		}
	}

	[RuleVersion(0)]
	public Proc_conditionContext proc_condition() {
		Proc_conditionContext _localctx = new Proc_conditionContext(Context, State);
		EnterRule(_localctx, 1550, RULE_proc_condition);
		try {
			State = 11637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,603,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11634;
				any_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11635;
				Match(SQLSTATE);
				State = 11636;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_block_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_block_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_block_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_block_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_block_labelContext opt_block_label() {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(Context, State);
		EnterRule(_localctx, 1552, RULE_opt_block_label);
		try {
			State = 11641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11640;
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_loop_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_loop_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_loop_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_loop_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_loop_labelContext opt_loop_label() {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(Context, State);
		EnterRule(_localctx, 1554, RULE_opt_loop_label);
		try {
			State = 11645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11644;
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_labelContext opt_label() {
		Opt_labelContext _localctx = new Opt_labelContext(Context, State);
		EnterRule(_localctx, 1556, RULE_opt_label);
		try {
			State = 11649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case SEMI:
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11648;
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_exitcondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_semiContext expr_until_semi() {
			return GetRuleContext<Expr_until_semiContext>(0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_exitcond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_exitcond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_exitcond(this);
		}
	}

	[RuleVersion(0)]
	public Opt_exitcondContext opt_exitcond() {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(Context, State);
		EnterRule(_localctx, 1558, RULE_opt_exitcond);
		try {
			State = 11654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11651;
				Match(SEMI);
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11652;
				Match(WHEN);
				State = 11653;
				expr_until_semi();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 1560, RULE_any_identifier);
		try {
			State = 11658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11656;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11657;
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plsql_unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PostgreSQLParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PostgreSQLParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(PostgreSQLParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(PostgreSQLParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMP() { return GetToken(PostgreSQLParser.DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(PostgreSQLParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(PostgreSQLParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFO() { return GetToken(PostgreSQLParser.INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(PostgreSQLParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTICE() { return GetToken(PostgreSQLParser.NOTICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(PostgreSQLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(PostgreSQLParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_STRICT_PARAMS() { return GetToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PostgreSQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PostgreSQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(PostgreSQLParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWTYPE() { return GetToken(PostgreSQLParser.ROWTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICE() { return GetToken(PostgreSQLParser.SLICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(PostgreSQLParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_COLUMN() { return GetToken(PostgreSQLParser.USE_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_VARIABLE() { return GetToken(PostgreSQLParser.USE_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_CONFLICT() { return GetToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNING() { return GetToken(PostgreSQLParser.WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsql_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsql_unreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsql_unreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1562, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11660;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TABLE - 92)) | (1L << (IS - 92)) | (1L << (OUTER_P - 92)) | (1L << (ABSOLUTE_P - 92)) | (1L << (BACKWARD - 92)) | (1L << (CHAIN - 92)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (CLOSE - 157)) | (1L << (COMMIT - 157)) | (1L << (CONTINUE_P - 157)) | (1L << (CURSOR - 157)) | (1L << (FIRST_P - 157)) | (1L << (FORWARD - 157)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (INSERT - 232)) | (1L << (LAST_P - 232)) | (1L << (MOVE - 232)) | (1L << (NEXT - 232)) | (1L << (NO - 232)) | (1L << (OPTION - 232)) | (1L << (PRIOR - 232)))) != 0) || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (RELATIVE_P - 298)) | (1L << (RESET - 298)) | (1L << (ROLLBACK - 298)) | (1L << (SCHEMA - 298)) | (1L << (SCROLL - 298)) | (1L << (SET - 298)) | (1L << (TYPE_P - 298)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (CALL - 424)) | (1L << (CURRENT_P - 424)) | (1L << (ROWTYPE - 424)) | (1L << (DUMP - 424)) | (1L << (PRINT_STRICT_PARAMS - 424)) | (1L << (VARIABLE_CONFLICT - 424)) | (1L << (ERROR - 424)) | (1L << (USE_VARIABLE - 424)) | (1L << (USE_COLUMN - 424)))) != 0) || ((((_la - 488)) & ~0x3f) == 0 && ((1L << (_la - 488)) & ((1L << (ALIAS - 488)) | (1L << (CONSTANT - 488)) | (1L << (PERFORM - 488)) | (1L << (GET - 488)) | (1L << (DIAGNOSTICS - 488)) | (1L << (STACKED - 488)) | (1L << (ELSIF - 488)) | (1L << (REVERSE - 488)) | (1L << (SLICE - 488)) | (1L << (EXIT - 488)) | (1L << (RETURN - 488)) | (1L << (QUERY - 488)) | (1L << (RAISE - 488)) | (1L << (SQLSTATE - 488)) | (1L << (DEBUG - 488)) | (1L << (LOG - 488)) | (1L << (INFO - 488)) | (1L << (NOTICE - 488)) | (1L << (WARNING - 488)) | (1L << (EXCEPTION - 488)) | (1L << (ASSERT - 488)) | (1L << (OPEN - 488)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_target_listContext opt_target_list() {
			return GetRuleContext<Opt_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSql_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSql_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sql_expressionContext sql_expression() {
		Sql_expressionContext _localctx = new Sql_expressionContext(Context, State);
		EnterRule(_localctx, 1564, RULE_sql_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11662;
			opt_target_list();
			State = 11663;
			into_clause();
			State = 11664;
			from_clause();
			State = 11665;
			where_clause();
			State = 11666;
			group_clause();
			State = 11667;
			having_clause();
			State = 11668;
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_thenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_then; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_then(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_then(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_thenContext expr_until_then() {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(Context, State);
		EnterRule(_localctx, 1566, RULE_expr_until_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11670;
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_semiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_semi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_semi(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_semiContext expr_until_semi() {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(Context, State);
		EnterRule(_localctx, 1568, RULE_expr_until_semi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11672;
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_rightbracketContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_rightbracket; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_rightbracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_rightbracket(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_rightbracketContext expr_until_rightbracket() {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(Context, State);
		EnterRule(_localctx, 1570, RULE_expr_until_rightbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11674;
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_loop(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_loopContext expr_until_loop() {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(Context, State);
		EnterRule(_localctx, 1572, RULE_expr_until_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11676;
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Make_execsql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return GetRuleContext<Opt_returning_clause_intoContext>(0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_make_execsql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMake_execsql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMake_execsql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Make_execsql_stmtContext make_execsql_stmt() {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(Context, State);
		EnterRule(_localctx, 1574, RULE_make_execsql_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11678;
			stmt();
			State = 11679;
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_returning_clause_intoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_strictContext opt_strict() {
			return GetRuleContext<Opt_strictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_returning_clause_into; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_returning_clause_into(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_returning_clause_into(this);
		}
	}

	[RuleVersion(0)]
	public Opt_returning_clause_intoContext opt_returning_clause_into() {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(Context, State);
		EnterRule(_localctx, 1576, RULE_opt_returning_clause_into);
		try {
			State = 11686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11681;
				Match(INTO);
				State = 11682;
				opt_strict();
				State = 11683;
				into_target();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return optrolelist_sempred((OptrolelistContext)_localctx, predIndex);
		case 10: return alteroptrolelist_sempred((AlteroptrolelistContext)_localctx, predIndex);
		case 23: return optschemaeltlist_sempred((OptschemaeltlistContext)_localctx, predIndex);
		case 29: return var_name_sempred((Var_nameContext)_localctx, predIndex);
		case 30: return var_list_sempred((Var_listContext)_localctx, predIndex);
		case 49: return alter_table_cmds_sempred((Alter_table_cmdsContext)_localctx, predIndex);
		case 60: return reloption_list_sempred((Reloption_listContext)_localctx, predIndex);
		case 62: return alter_identity_column_option_list_sempred((Alter_identity_column_option_listContext)_localctx, predIndex);
		case 66: return hash_partbound_sempred((Hash_partboundContext)_localctx, predIndex);
		case 68: return alter_type_cmds_sempred((Alter_type_cmdsContext)_localctx, predIndex);
		case 76: return copy_opt_list_sempred((Copy_opt_listContext)_localctx, predIndex);
		case 81: return copy_generic_opt_list_sempred((Copy_generic_opt_listContext)_localctx, predIndex);
		case 84: return copy_generic_opt_arg_list_sempred((Copy_generic_opt_arg_listContext)_localctx, predIndex);
		case 90: return tableelementlist_sempred((TableelementlistContext)_localctx, predIndex);
		case 91: return typedtableelementlist_sempred((TypedtableelementlistContext)_localctx, predIndex);
		case 96: return colquallist_sempred((ColquallistContext)_localctx, predIndex);
		case 102: return tablelikeoptionlist_sempred((TablelikeoptionlistContext)_localctx, predIndex);
		case 108: return columnlist_sempred((ColumnlistContext)_localctx, predIndex);
		case 112: return exclusionconstraintlist_sempred((ExclusionconstraintlistContext)_localctx, predIndex);
		case 122: return part_params_sempred((Part_paramsContext)_localctx, predIndex);
		case 143: return seqoptlist_sempred((SeqoptlistContext)_localctx, predIndex);
		case 147: return numericonly_list_sempred((Numericonly_listContext)_localctx, predIndex);
		case 159: return create_extension_opt_list_sempred((Create_extension_opt_listContext)_localctx, predIndex);
		case 162: return alter_extension_opt_list_sempred((Alter_extension_opt_listContext)_localctx, predIndex);
		case 167: return fdw_options_sempred((Fdw_optionsContext)_localctx, predIndex);
		case 171: return generic_option_list_sempred((Generic_option_listContext)_localctx, predIndex);
		case 173: return alter_generic_option_list_sempred((Alter_generic_option_listContext)_localctx, predIndex);
		case 204: return triggerevents_sempred((TriggereventsContext)_localctx, predIndex);
		case 207: return triggertransitions_sempred((TriggertransitionsContext)_localctx, predIndex);
		case 217: return triggerfuncargs_sempred((TriggerfuncargsContext)_localctx, predIndex);
		case 220: return constraintattributespec_sempred((ConstraintattributespecContext)_localctx, predIndex);
		case 223: return event_trigger_when_list_sempred((Event_trigger_when_listContext)_localctx, predIndex);
		case 225: return event_trigger_value_list_sempred((Event_trigger_value_listContext)_localctx, predIndex);
		case 231: return def_list_sempred((Def_listContext)_localctx, predIndex);
		case 235: return old_aggr_list_sempred((Old_aggr_listContext)_localctx, predIndex);
		case 238: return enum_val_list_sempred((Enum_val_listContext)_localctx, predIndex);
		case 242: return opclass_item_list_sempred((Opclass_item_listContext)_localctx, predIndex);
		case 250: return opclass_drop_list_sempred((Opclass_drop_listContext)_localctx, predIndex);
		case 261: return any_name_list_sempred((Any_name_listContext)_localctx, predIndex);
		case 263: return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 264: return type_name_list_sempred((Type_name_listContext)_localctx, predIndex);
		case 279: return privilege_list_sempred((Privilege_listContext)_localctx, predIndex);
		case 282: return grantee_list_sempred((Grantee_listContext)_localctx, predIndex);
		case 290: return defacloptionlist_sempred((DefacloptionlistContext)_localctx, predIndex);
		case 299: return index_params_sempred((Index_paramsContext)_localctx, predIndex);
		case 303: return index_including_params_sempred((Index_including_paramsContext)_localctx, predIndex);
		case 311: return func_args_list_sempred((Func_args_listContext)_localctx, predIndex);
		case 312: return function_with_argtypes_list_sempred((Function_with_argtypes_listContext)_localctx, predIndex);
		case 315: return func_args_with_defaults_list_sempred((Func_args_with_defaults_listContext)_localctx, predIndex);
		case 324: return aggr_args_list_sempred((Aggr_args_listContext)_localctx, predIndex);
		case 326: return aggregate_with_argtypes_list_sempred((Aggregate_with_argtypes_listContext)_localctx, predIndex);
		case 331: return transform_type_list_sempred((Transform_type_listContext)_localctx, predIndex);
		case 334: return table_func_column_list_sempred((Table_func_column_listContext)_localctx, predIndex);
		case 336: return alterfunc_opt_list_sempred((Alterfunc_opt_listContext)_localctx, predIndex);
		case 343: return operator_with_argtypes_list_sempred((Operator_with_argtypes_listContext)_localctx, predIndex);
		case 346: return dostmt_opt_list_sempred((Dostmt_opt_listContext)_localctx, predIndex);
		case 358: return reindex_option_list_sempred((Reindex_option_listContext)_localctx, predIndex);
		case 368: return operator_def_list_sempred((Operator_def_listContext)_localctx, predIndex);
		case 378: return publication_name_list_sempred((Publication_name_listContext)_localctx, predIndex);
		case 384: return ruleactionmulti_sempred((RuleactionmultiContext)_localctx, predIndex);
		case 396: return transaction_mode_list_sempred((Transaction_mode_listContext)_localctx, predIndex);
		case 404: return createdb_opt_items_sempred((Createdb_opt_itemsContext)_localctx, predIndex);
		case 411: return drop_option_list_sempred((Drop_option_listContext)_localctx, predIndex);
		case 426: return vac_analyze_option_list_sempred((Vac_analyze_option_listContext)_localctx, predIndex);
		case 437: return vacuum_relation_list_sempred((Vacuum_relation_listContext)_localctx, predIndex);
		case 441: return explain_option_list_sempred((Explain_option_listContext)_localctx, predIndex);
		case 455: return insert_column_list_sempred((Insert_column_listContext)_localctx, predIndex);
		case 468: return set_clause_list_sempred((Set_clause_listContext)_localctx, predIndex);
		case 471: return set_target_list_sempred((Set_target_listContext)_localctx, predIndex);
		case 474: return cursor_options_sempred((Cursor_optionsContext)_localctx, predIndex);
		case 480: return simple_select_sempred((Simple_selectContext)_localctx, predIndex);
		case 484: return cte_list_sempred((Cte_listContext)_localctx, predIndex);
		case 510: return group_by_list_sempred((Group_by_listContext)_localctx, predIndex);
		case 519: return for_locking_items_sempred((For_locking_itemsContext)_localctx, predIndex);
		case 523: return values_clause_sempred((Values_clauseContext)_localctx, predIndex);
		case 526: return table_ref_sempred((Table_refContext)_localctx, predIndex);
		case 534: return relation_expr_list_sempred((Relation_expr_listContext)_localctx, predIndex);
		case 540: return rowsfrom_list_sempred((Rowsfrom_listContext)_localctx, predIndex);
		case 546: return tablefuncelementlist_sempred((TablefuncelementlistContext)_localctx, predIndex);
		case 549: return xmltable_column_list_sempred((Xmltable_column_listContext)_localctx, predIndex);
		case 551: return xmltable_column_option_list_sempred((Xmltable_column_option_listContext)_localctx, predIndex);
		case 553: return xml_namespace_list_sempred((Xml_namespace_listContext)_localctx, predIndex);
		case 556: return opt_array_bounds_sempred((Opt_array_boundsContext)_localctx, predIndex);
		case 577: return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 579: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 589: return xml_attribute_list_sempred((Xml_attribute_listContext)_localctx, predIndex);
		case 598: return window_definition_list_sempred((Window_definition_listContext)_localctx, predIndex);
		case 617: return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 618: return func_arg_list_sempred((Func_arg_listContext)_localctx, predIndex);
		case 620: return type_list_sempred((Type_listContext)_localctx, predIndex);
		case 622: return array_expr_list_sempred((Array_expr_listContext)_localctx, predIndex);
		case 632: return when_clause_list_sempred((When_clause_listContext)_localctx, predIndex);
		case 639: return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 640: return opt_indirection_sempred((Opt_indirectionContext)_localctx, predIndex);
		case 645: return qualified_name_list_sempred((Qualified_name_listContext)_localctx, predIndex);
		case 647: return name_list_sempred((Name_listContext)_localctx, predIndex);
		case 663: return role_list_sempred((Role_listContext)_localctx, predIndex);
		case 675: return comp_options_sempred((Comp_optionsContext)_localctx, predIndex);
		case 683: return decl_stmts_sempred((Decl_stmtsContext)_localctx, predIndex);
		case 690: return decl_cursor_arglist_sempred((Decl_cursor_arglistContext)_localctx, predIndex);
		case 702: return proc_sect_sempred((Proc_sectContext)_localctx, predIndex);
		case 710: return getdiag_list_sempred((Getdiag_listContext)_localctx, predIndex);
		case 714: return assign_var_sempred((Assign_varContext)_localctx, predIndex);
		case 716: return stmt_elsifs_sempred((Stmt_elsifsContext)_localctx, predIndex);
		case 720: return case_when_list_sempred((Case_when_listContext)_localctx, predIndex);
		case 740: return opt_raise_list_sempred((Opt_raise_listContext)_localctx, predIndex);
		case 750: return opt_execute_using_list_sempred((Opt_execute_using_listContext)_localctx, predIndex);
		case 754: return opt_open_bound_list_sempred((Opt_open_bound_listContext)_localctx, predIndex);
		case 772: return proc_exceptions_sempred((Proc_exceptionsContext)_localctx, predIndex);
		case 774: return proc_conditions_sempred((Proc_conditionsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool optrolelist_sempred(OptrolelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool alteroptrolelist_sempred(AlteroptrolelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool optschemaeltlist_sempred(OptschemaeltlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool var_name_sempred(Var_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool var_list_sempred(Var_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool alter_table_cmds_sempred(Alter_table_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool reloption_list_sempred(Reloption_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool alter_identity_column_option_list_sempred(Alter_identity_column_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool hash_partbound_sempred(Hash_partboundContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool alter_type_cmds_sempred(Alter_type_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool copy_opt_list_sempred(Copy_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 2);
		}
		return true;
	}
	private bool copy_generic_opt_list_sempred(Copy_generic_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool copy_generic_opt_arg_list_sempred(Copy_generic_opt_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool tableelementlist_sempred(TableelementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typedtableelementlist_sempred(TypedtableelementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool colquallist_sempred(ColquallistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 2);
		}
		return true;
	}
	private bool tablelikeoptionlist_sempred(TablelikeoptionlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		}
		return true;
	}
	private bool columnlist_sempred(ColumnlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusionconstraintlist_sempred(ExclusionconstraintlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool part_params_sempred(Part_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool seqoptlist_sempred(SeqoptlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool numericonly_list_sempred(Numericonly_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool create_extension_opt_list_sempred(Create_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 2);
		}
		return true;
	}
	private bool alter_extension_opt_list_sempred(Alter_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 2);
		}
		return true;
	}
	private bool fdw_options_sempred(Fdw_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool generic_option_list_sempred(Generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool alter_generic_option_list_sempred(Alter_generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool triggerevents_sempred(TriggereventsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool triggertransitions_sempred(TriggertransitionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool triggerfuncargs_sempred(TriggerfuncargsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 2);
		}
		return true;
	}
	private bool constraintattributespec_sempred(ConstraintattributespecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool event_trigger_when_list_sempred(Event_trigger_when_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool event_trigger_value_list_sempred(Event_trigger_value_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool def_list_sempred(Def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool old_aggr_list_sempred(Old_aggr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enum_val_list_sempred(Enum_val_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool opclass_item_list_sempred(Opclass_item_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool opclass_drop_list_sempred(Opclass_drop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool any_name_list_sempred(Any_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_name_list_sempred(Type_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool privilege_list_sempred(Privilege_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool grantee_list_sempred(Grantee_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 1);
		}
		return true;
	}
	private bool defacloptionlist_sempred(DefacloptionlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 2);
		}
		return true;
	}
	private bool index_params_sempred(Index_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 1);
		}
		return true;
	}
	private bool index_including_params_sempred(Index_including_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 1);
		}
		return true;
	}
	private bool func_args_list_sempred(Func_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Precpred(Context, 1);
		}
		return true;
	}
	private bool function_with_argtypes_list_sempred(Function_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool func_args_with_defaults_list_sempred(Func_args_with_defaults_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool aggr_args_list_sempred(Aggr_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool aggregate_with_argtypes_list_sempred(Aggregate_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool transform_type_list_sempred(Transform_type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool table_func_column_list_sempred(Table_func_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool alterfunc_opt_list_sempred(Alterfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool operator_with_argtypes_list_sempred(Operator_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool dostmt_opt_list_sempred(Dostmt_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool reindex_option_list_sempred(Reindex_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool operator_def_list_sempred(Operator_def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool publication_name_list_sempred(Publication_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ruleactionmulti_sempred(RuleactionmultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 2);
		}
		return true;
	}
	private bool transaction_mode_list_sempred(Transaction_mode_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 2);
		case 62: return Precpred(Context, 1);
		}
		return true;
	}
	private bool createdb_opt_items_sempred(Createdb_opt_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(Context, 1);
		}
		return true;
	}
	private bool drop_option_list_sempred(Drop_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return Precpred(Context, 1);
		}
		return true;
	}
	private bool vac_analyze_option_list_sempred(Vac_analyze_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return Precpred(Context, 1);
		}
		return true;
	}
	private bool vacuum_relation_list_sempred(Vacuum_relation_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return Precpred(Context, 1);
		}
		return true;
	}
	private bool explain_option_list_sempred(Explain_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return Precpred(Context, 1);
		}
		return true;
	}
	private bool insert_column_list_sempred(Insert_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return Precpred(Context, 1);
		}
		return true;
	}
	private bool set_clause_list_sempred(Set_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return Precpred(Context, 1);
		}
		return true;
	}
	private bool set_target_list_sempred(Set_target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Precpred(Context, 1);
		}
		return true;
	}
	private bool cursor_options_sempred(Cursor_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return Precpred(Context, 4);
		case 72: return Precpred(Context, 3);
		case 73: return Precpred(Context, 2);
		case 74: return Precpred(Context, 1);
		}
		return true;
	}
	private bool simple_select_sempred(Simple_selectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Precpred(Context, 2);
		}
		return true;
	}
	private bool cte_list_sempred(Cte_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return Precpred(Context, 1);
		}
		return true;
	}
	private bool group_by_list_sempred(Group_by_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return Precpred(Context, 1);
		}
		return true;
	}
	private bool for_locking_items_sempred(For_locking_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Precpred(Context, 1);
		}
		return true;
	}
	private bool values_clause_sempred(Values_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return Precpred(Context, 1);
		}
		return true;
	}
	private bool table_ref_sempred(Table_refContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80: return Precpred(Context, 7);
		case 81: return Precpred(Context, 4);
		case 82: return Precpred(Context, 3);
		case 83: return Precpred(Context, 6);
		case 84: return Precpred(Context, 5);
		}
		return true;
	}
	private bool relation_expr_list_sempred(Relation_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85: return Precpred(Context, 1);
		}
		return true;
	}
	private bool rowsfrom_list_sempred(Rowsfrom_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 86: return Precpred(Context, 1);
		}
		return true;
	}
	private bool tablefuncelementlist_sempred(TablefuncelementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87: return Precpred(Context, 1);
		}
		return true;
	}
	private bool xmltable_column_list_sempred(Xmltable_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88: return Precpred(Context, 1);
		}
		return true;
	}
	private bool xmltable_column_option_list_sempred(Xmltable_column_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89: return Precpred(Context, 1);
		}
		return true;
	}
	private bool xml_namespace_list_sempred(Xml_namespace_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90: return Precpred(Context, 1);
		}
		return true;
	}
	private bool opt_array_bounds_sempred(Opt_array_boundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91: return Precpred(Context, 3);
		case 92: return Precpred(Context, 2);
		}
		return true;
	}
	private bool a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93: return Precpred(Context, 52);
		case 94: return Precpred(Context, 50);
		case 95: return Precpred(Context, 49);
		case 96: return Precpred(Context, 48);
		case 97: return Precpred(Context, 47);
		case 98: return Precpred(Context, 39);
		case 99: return Precpred(Context, 38);
		case 100: return Precpred(Context, 37);
		case 101: return Precpred(Context, 36);
		case 102: return Precpred(Context, 35);
		case 103: return Precpred(Context, 23);
		case 104: return Precpred(Context, 22);
		case 105: return Precpred(Context, 11);
		case 106: return Precpred(Context, 10);
		case 107: return Precpred(Context, 9);
		case 108: return Precpred(Context, 8);
		case 109: return Precpred(Context, 54);
		case 110: return Precpred(Context, 53);
		case 111: return Precpred(Context, 45);
		case 112: return Precpred(Context, 44);
		case 113: return Precpred(Context, 43);
		case 114: return Precpred(Context, 42);
		case 115: return Precpred(Context, 41);
		case 116: return Precpred(Context, 40);
		case 117: return Precpred(Context, 34);
		case 118: return Precpred(Context, 33);
		case 119: return Precpred(Context, 32);
		case 120: return Precpred(Context, 31);
		case 121: return Precpred(Context, 29);
		case 122: return Precpred(Context, 28);
		case 123: return Precpred(Context, 27);
		case 124: return Precpred(Context, 26);
		case 125: return Precpred(Context, 25);
		case 126: return Precpred(Context, 24);
		case 127: return Precpred(Context, 21);
		case 128: return Precpred(Context, 20);
		case 129: return Precpred(Context, 19);
		case 130: return Precpred(Context, 18);
		case 131: return Precpred(Context, 17);
		case 132: return Precpred(Context, 16);
		case 133: return Precpred(Context, 15);
		case 134: return Precpred(Context, 14);
		case 135: return Precpred(Context, 7);
		case 136: return Precpred(Context, 6);
		case 137: return Precpred(Context, 5);
		case 138: return Precpred(Context, 4);
		case 139: return Precpred(Context, 3);
		}
		return true;
	}
	private bool b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 140: return Precpred(Context, 13);
		case 141: return Precpred(Context, 12);
		case 142: return Precpred(Context, 11);
		case 143: return Precpred(Context, 10);
		case 144: return Precpred(Context, 9);
		case 145: return Precpred(Context, 6);
		case 146: return Precpred(Context, 5);
		case 147: return Precpred(Context, 15);
		case 148: return Precpred(Context, 7);
		case 149: return Precpred(Context, 4);
		case 150: return Precpred(Context, 3);
		case 151: return Precpred(Context, 2);
		case 152: return Precpred(Context, 1);
		}
		return true;
	}
	private bool xml_attribute_list_sempred(Xml_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 153: return Precpred(Context, 1);
		}
		return true;
	}
	private bool window_definition_list_sempred(Window_definition_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 154: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 155: return Precpred(Context, 1);
		}
		return true;
	}
	private bool func_arg_list_sempred(Func_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 156: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_list_sempred(Type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 157: return Precpred(Context, 1);
		}
		return true;
	}
	private bool array_expr_list_sempred(Array_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 158: return Precpred(Context, 1);
		}
		return true;
	}
	private bool when_clause_list_sempred(When_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 159: return Precpred(Context, 1);
		}
		return true;
	}
	private bool indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 160: return Precpred(Context, 1);
		}
		return true;
	}
	private bool opt_indirection_sempred(Opt_indirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 161: return Precpred(Context, 1);
		}
		return true;
	}
	private bool qualified_name_list_sempred(Qualified_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162: return Precpred(Context, 1);
		}
		return true;
	}
	private bool name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 163: return Precpred(Context, 1);
		}
		return true;
	}
	private bool role_list_sempred(Role_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comp_options_sempred(Comp_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165: return Precpred(Context, 1);
		}
		return true;
	}
	private bool decl_stmts_sempred(Decl_stmtsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166: return Precpred(Context, 2);
		}
		return true;
	}
	private bool decl_cursor_arglist_sempred(Decl_cursor_arglistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167: return Precpred(Context, 1);
		}
		return true;
	}
	private bool proc_sect_sempred(Proc_sectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 168: return Precpred(Context, 1);
		}
		return true;
	}
	private bool getdiag_list_sempred(Getdiag_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169: return Precpred(Context, 2);
		}
		return true;
	}
	private bool assign_var_sempred(Assign_varContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170: return Precpred(Context, 1);
		}
		return true;
	}
	private bool stmt_elsifs_sempred(Stmt_elsifsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171: return Precpred(Context, 1);
		}
		return true;
	}
	private bool case_when_list_sempred(Case_when_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 172: return Precpred(Context, 2);
		}
		return true;
	}
	private bool opt_raise_list_sempred(Opt_raise_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173: return Precpred(Context, 1);
		}
		return true;
	}
	private bool opt_execute_using_list_sempred(Opt_execute_using_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 174: return Precpred(Context, 1);
		}
		return true;
	}
	private bool opt_open_bound_list_sempred(Opt_open_bound_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 175: return Precpred(Context, 1);
		}
		return true;
	}
	private bool proc_exceptions_sempred(Proc_exceptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176: return Precpred(Context, 2);
		}
		return true;
	}
	private bool proc_conditions_sempred(Proc_conditionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 177: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x22E', '\x2DAB', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x4', '\x1E3', 
		'\t', '\x1E3', '\x4', '\x1E4', '\t', '\x1E4', '\x4', '\x1E5', '\t', '\x1E5', 
		'\x4', '\x1E6', '\t', '\x1E6', '\x4', '\x1E7', '\t', '\x1E7', '\x4', '\x1E8', 
		'\t', '\x1E8', '\x4', '\x1E9', '\t', '\x1E9', '\x4', '\x1EA', '\t', '\x1EA', 
		'\x4', '\x1EB', '\t', '\x1EB', '\x4', '\x1EC', '\t', '\x1EC', '\x4', '\x1ED', 
		'\t', '\x1ED', '\x4', '\x1EE', '\t', '\x1EE', '\x4', '\x1EF', '\t', '\x1EF', 
		'\x4', '\x1F0', '\t', '\x1F0', '\x4', '\x1F1', '\t', '\x1F1', '\x4', '\x1F2', 
		'\t', '\x1F2', '\x4', '\x1F3', '\t', '\x1F3', '\x4', '\x1F4', '\t', '\x1F4', 
		'\x4', '\x1F5', '\t', '\x1F5', '\x4', '\x1F6', '\t', '\x1F6', '\x4', '\x1F7', 
		'\t', '\x1F7', '\x4', '\x1F8', '\t', '\x1F8', '\x4', '\x1F9', '\t', '\x1F9', 
		'\x4', '\x1FA', '\t', '\x1FA', '\x4', '\x1FB', '\t', '\x1FB', '\x4', '\x1FC', 
		'\t', '\x1FC', '\x4', '\x1FD', '\t', '\x1FD', '\x4', '\x1FE', '\t', '\x1FE', 
		'\x4', '\x1FF', '\t', '\x1FF', '\x4', '\x200', '\t', '\x200', '\x4', '\x201', 
		'\t', '\x201', '\x4', '\x202', '\t', '\x202', '\x4', '\x203', '\t', '\x203', 
		'\x4', '\x204', '\t', '\x204', '\x4', '\x205', '\t', '\x205', '\x4', '\x206', 
		'\t', '\x206', '\x4', '\x207', '\t', '\x207', '\x4', '\x208', '\t', '\x208', 
		'\x4', '\x209', '\t', '\x209', '\x4', '\x20A', '\t', '\x20A', '\x4', '\x20B', 
		'\t', '\x20B', '\x4', '\x20C', '\t', '\x20C', '\x4', '\x20D', '\t', '\x20D', 
		'\x4', '\x20E', '\t', '\x20E', '\x4', '\x20F', '\t', '\x20F', '\x4', '\x210', 
		'\t', '\x210', '\x4', '\x211', '\t', '\x211', '\x4', '\x212', '\t', '\x212', 
		'\x4', '\x213', '\t', '\x213', '\x4', '\x214', '\t', '\x214', '\x4', '\x215', 
		'\t', '\x215', '\x4', '\x216', '\t', '\x216', '\x4', '\x217', '\t', '\x217', 
		'\x4', '\x218', '\t', '\x218', '\x4', '\x219', '\t', '\x219', '\x4', '\x21A', 
		'\t', '\x21A', '\x4', '\x21B', '\t', '\x21B', '\x4', '\x21C', '\t', '\x21C', 
		'\x4', '\x21D', '\t', '\x21D', '\x4', '\x21E', '\t', '\x21E', '\x4', '\x21F', 
		'\t', '\x21F', '\x4', '\x220', '\t', '\x220', '\x4', '\x221', '\t', '\x221', 
		'\x4', '\x222', '\t', '\x222', '\x4', '\x223', '\t', '\x223', '\x4', '\x224', 
		'\t', '\x224', '\x4', '\x225', '\t', '\x225', '\x4', '\x226', '\t', '\x226', 
		'\x4', '\x227', '\t', '\x227', '\x4', '\x228', '\t', '\x228', '\x4', '\x229', 
		'\t', '\x229', '\x4', '\x22A', '\t', '\x22A', '\x4', '\x22B', '\t', '\x22B', 
		'\x4', '\x22C', '\t', '\x22C', '\x4', '\x22D', '\t', '\x22D', '\x4', '\x22E', 
		'\t', '\x22E', '\x4', '\x22F', '\t', '\x22F', '\x4', '\x230', '\t', '\x230', 
		'\x4', '\x231', '\t', '\x231', '\x4', '\x232', '\t', '\x232', '\x4', '\x233', 
		'\t', '\x233', '\x4', '\x234', '\t', '\x234', '\x4', '\x235', '\t', '\x235', 
		'\x4', '\x236', '\t', '\x236', '\x4', '\x237', '\t', '\x237', '\x4', '\x238', 
		'\t', '\x238', '\x4', '\x239', '\t', '\x239', '\x4', '\x23A', '\t', '\x23A', 
		'\x4', '\x23B', '\t', '\x23B', '\x4', '\x23C', '\t', '\x23C', '\x4', '\x23D', 
		'\t', '\x23D', '\x4', '\x23E', '\t', '\x23E', '\x4', '\x23F', '\t', '\x23F', 
		'\x4', '\x240', '\t', '\x240', '\x4', '\x241', '\t', '\x241', '\x4', '\x242', 
		'\t', '\x242', '\x4', '\x243', '\t', '\x243', '\x4', '\x244', '\t', '\x244', 
		'\x4', '\x245', '\t', '\x245', '\x4', '\x246', '\t', '\x246', '\x4', '\x247', 
		'\t', '\x247', '\x4', '\x248', '\t', '\x248', '\x4', '\x249', '\t', '\x249', 
		'\x4', '\x24A', '\t', '\x24A', '\x4', '\x24B', '\t', '\x24B', '\x4', '\x24C', 
		'\t', '\x24C', '\x4', '\x24D', '\t', '\x24D', '\x4', '\x24E', '\t', '\x24E', 
		'\x4', '\x24F', '\t', '\x24F', '\x4', '\x250', '\t', '\x250', '\x4', '\x251', 
		'\t', '\x251', '\x4', '\x252', '\t', '\x252', '\x4', '\x253', '\t', '\x253', 
		'\x4', '\x254', '\t', '\x254', '\x4', '\x255', '\t', '\x255', '\x4', '\x256', 
		'\t', '\x256', '\x4', '\x257', '\t', '\x257', '\x4', '\x258', '\t', '\x258', 
		'\x4', '\x259', '\t', '\x259', '\x4', '\x25A', '\t', '\x25A', '\x4', '\x25B', 
		'\t', '\x25B', '\x4', '\x25C', '\t', '\x25C', '\x4', '\x25D', '\t', '\x25D', 
		'\x4', '\x25E', '\t', '\x25E', '\x4', '\x25F', '\t', '\x25F', '\x4', '\x260', 
		'\t', '\x260', '\x4', '\x261', '\t', '\x261', '\x4', '\x262', '\t', '\x262', 
		'\x4', '\x263', '\t', '\x263', '\x4', '\x264', '\t', '\x264', '\x4', '\x265', 
		'\t', '\x265', '\x4', '\x266', '\t', '\x266', '\x4', '\x267', '\t', '\x267', 
		'\x4', '\x268', '\t', '\x268', '\x4', '\x269', '\t', '\x269', '\x4', '\x26A', 
		'\t', '\x26A', '\x4', '\x26B', '\t', '\x26B', '\x4', '\x26C', '\t', '\x26C', 
		'\x4', '\x26D', '\t', '\x26D', '\x4', '\x26E', '\t', '\x26E', '\x4', '\x26F', 
		'\t', '\x26F', '\x4', '\x270', '\t', '\x270', '\x4', '\x271', '\t', '\x271', 
		'\x4', '\x272', '\t', '\x272', '\x4', '\x273', '\t', '\x273', '\x4', '\x274', 
		'\t', '\x274', '\x4', '\x275', '\t', '\x275', '\x4', '\x276', '\t', '\x276', 
		'\x4', '\x277', '\t', '\x277', '\x4', '\x278', '\t', '\x278', '\x4', '\x279', 
		'\t', '\x279', '\x4', '\x27A', '\t', '\x27A', '\x4', '\x27B', '\t', '\x27B', 
		'\x4', '\x27C', '\t', '\x27C', '\x4', '\x27D', '\t', '\x27D', '\x4', '\x27E', 
		'\t', '\x27E', '\x4', '\x27F', '\t', '\x27F', '\x4', '\x280', '\t', '\x280', 
		'\x4', '\x281', '\t', '\x281', '\x4', '\x282', '\t', '\x282', '\x4', '\x283', 
		'\t', '\x283', '\x4', '\x284', '\t', '\x284', '\x4', '\x285', '\t', '\x285', 
		'\x4', '\x286', '\t', '\x286', '\x4', '\x287', '\t', '\x287', '\x4', '\x288', 
		'\t', '\x288', '\x4', '\x289', '\t', '\x289', '\x4', '\x28A', '\t', '\x28A', 
		'\x4', '\x28B', '\t', '\x28B', '\x4', '\x28C', '\t', '\x28C', '\x4', '\x28D', 
		'\t', '\x28D', '\x4', '\x28E', '\t', '\x28E', '\x4', '\x28F', '\t', '\x28F', 
		'\x4', '\x290', '\t', '\x290', '\x4', '\x291', '\t', '\x291', '\x4', '\x292', 
		'\t', '\x292', '\x4', '\x293', '\t', '\x293', '\x4', '\x294', '\t', '\x294', 
		'\x4', '\x295', '\t', '\x295', '\x4', '\x296', '\t', '\x296', '\x4', '\x297', 
		'\t', '\x297', '\x4', '\x298', '\t', '\x298', '\x4', '\x299', '\t', '\x299', 
		'\x4', '\x29A', '\t', '\x29A', '\x4', '\x29B', '\t', '\x29B', '\x4', '\x29C', 
		'\t', '\x29C', '\x4', '\x29D', '\t', '\x29D', '\x4', '\x29E', '\t', '\x29E', 
		'\x4', '\x29F', '\t', '\x29F', '\x4', '\x2A0', '\t', '\x2A0', '\x4', '\x2A1', 
		'\t', '\x2A1', '\x4', '\x2A2', '\t', '\x2A2', '\x4', '\x2A3', '\t', '\x2A3', 
		'\x4', '\x2A4', '\t', '\x2A4', '\x4', '\x2A5', '\t', '\x2A5', '\x4', '\x2A6', 
		'\t', '\x2A6', '\x4', '\x2A7', '\t', '\x2A7', '\x4', '\x2A8', '\t', '\x2A8', 
		'\x4', '\x2A9', '\t', '\x2A9', '\x4', '\x2AA', '\t', '\x2AA', '\x4', '\x2AB', 
		'\t', '\x2AB', '\x4', '\x2AC', '\t', '\x2AC', '\x4', '\x2AD', '\t', '\x2AD', 
		'\x4', '\x2AE', '\t', '\x2AE', '\x4', '\x2AF', '\t', '\x2AF', '\x4', '\x2B0', 
		'\t', '\x2B0', '\x4', '\x2B1', '\t', '\x2B1', '\x4', '\x2B2', '\t', '\x2B2', 
		'\x4', '\x2B3', '\t', '\x2B3', '\x4', '\x2B4', '\t', '\x2B4', '\x4', '\x2B5', 
		'\t', '\x2B5', '\x4', '\x2B6', '\t', '\x2B6', '\x4', '\x2B7', '\t', '\x2B7', 
		'\x4', '\x2B8', '\t', '\x2B8', '\x4', '\x2B9', '\t', '\x2B9', '\x4', '\x2BA', 
		'\t', '\x2BA', '\x4', '\x2BB', '\t', '\x2BB', '\x4', '\x2BC', '\t', '\x2BC', 
		'\x4', '\x2BD', '\t', '\x2BD', '\x4', '\x2BE', '\t', '\x2BE', '\x4', '\x2BF', 
		'\t', '\x2BF', '\x4', '\x2C0', '\t', '\x2C0', '\x4', '\x2C1', '\t', '\x2C1', 
		'\x4', '\x2C2', '\t', '\x2C2', '\x4', '\x2C3', '\t', '\x2C3', '\x4', '\x2C4', 
		'\t', '\x2C4', '\x4', '\x2C5', '\t', '\x2C5', '\x4', '\x2C6', '\t', '\x2C6', 
		'\x4', '\x2C7', '\t', '\x2C7', '\x4', '\x2C8', '\t', '\x2C8', '\x4', '\x2C9', 
		'\t', '\x2C9', '\x4', '\x2CA', '\t', '\x2CA', '\x4', '\x2CB', '\t', '\x2CB', 
		'\x4', '\x2CC', '\t', '\x2CC', '\x4', '\x2CD', '\t', '\x2CD', '\x4', '\x2CE', 
		'\t', '\x2CE', '\x4', '\x2CF', '\t', '\x2CF', '\x4', '\x2D0', '\t', '\x2D0', 
		'\x4', '\x2D1', '\t', '\x2D1', '\x4', '\x2D2', '\t', '\x2D2', '\x4', '\x2D3', 
		'\t', '\x2D3', '\x4', '\x2D4', '\t', '\x2D4', '\x4', '\x2D5', '\t', '\x2D5', 
		'\x4', '\x2D6', '\t', '\x2D6', '\x4', '\x2D7', '\t', '\x2D7', '\x4', '\x2D8', 
		'\t', '\x2D8', '\x4', '\x2D9', '\t', '\x2D9', '\x4', '\x2DA', '\t', '\x2DA', 
		'\x4', '\x2DB', '\t', '\x2DB', '\x4', '\x2DC', '\t', '\x2DC', '\x4', '\x2DD', 
		'\t', '\x2DD', '\x4', '\x2DE', '\t', '\x2DE', '\x4', '\x2DF', '\t', '\x2DF', 
		'\x4', '\x2E0', '\t', '\x2E0', '\x4', '\x2E1', '\t', '\x2E1', '\x4', '\x2E2', 
		'\t', '\x2E2', '\x4', '\x2E3', '\t', '\x2E3', '\x4', '\x2E4', '\t', '\x2E4', 
		'\x4', '\x2E5', '\t', '\x2E5', '\x4', '\x2E6', '\t', '\x2E6', '\x4', '\x2E7', 
		'\t', '\x2E7', '\x4', '\x2E8', '\t', '\x2E8', '\x4', '\x2E9', '\t', '\x2E9', 
		'\x4', '\x2EA', '\t', '\x2EA', '\x4', '\x2EB', '\t', '\x2EB', '\x4', '\x2EC', 
		'\t', '\x2EC', '\x4', '\x2ED', '\t', '\x2ED', '\x4', '\x2EE', '\t', '\x2EE', 
		'\x4', '\x2EF', '\t', '\x2EF', '\x4', '\x2F0', '\t', '\x2F0', '\x4', '\x2F1', 
		'\t', '\x2F1', '\x4', '\x2F2', '\t', '\x2F2', '\x4', '\x2F3', '\t', '\x2F3', 
		'\x4', '\x2F4', '\t', '\x2F4', '\x4', '\x2F5', '\t', '\x2F5', '\x4', '\x2F6', 
		'\t', '\x2F6', '\x4', '\x2F7', '\t', '\x2F7', '\x4', '\x2F8', '\t', '\x2F8', 
		'\x4', '\x2F9', '\t', '\x2F9', '\x4', '\x2FA', '\t', '\x2FA', '\x4', '\x2FB', 
		'\t', '\x2FB', '\x4', '\x2FC', '\t', '\x2FC', '\x4', '\x2FD', '\t', '\x2FD', 
		'\x4', '\x2FE', '\t', '\x2FE', '\x4', '\x2FF', '\t', '\x2FF', '\x4', '\x300', 
		'\t', '\x300', '\x4', '\x301', '\t', '\x301', '\x4', '\x302', '\t', '\x302', 
		'\x4', '\x303', '\t', '\x303', '\x4', '\x304', '\t', '\x304', '\x4', '\x305', 
		'\t', '\x305', '\x4', '\x306', '\t', '\x306', '\x4', '\x307', '\t', '\x307', 
		'\x4', '\x308', '\t', '\x308', '\x4', '\x309', '\t', '\x309', '\x4', '\x30A', 
		'\t', '\x30A', '\x4', '\x30B', '\t', '\x30B', '\x4', '\x30C', '\t', '\x30C', 
		'\x4', '\x30D', '\t', '\x30D', '\x4', '\x30E', '\t', '\x30E', '\x4', '\x30F', 
		'\t', '\x30F', '\x4', '\x310', '\t', '\x310', '\x4', '\x311', '\t', '\x311', 
		'\x4', '\x312', '\t', '\x312', '\x4', '\x313', '\t', '\x313', '\x4', '\x314', 
		'\t', '\x314', '\x4', '\x315', '\t', '\x315', '\x4', '\x316', '\t', '\x316', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x637', '\n', '\x5', '\x6', '\x5', '\x639', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\x63A', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x6BA', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x6BE', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x6CB', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x6D0', '\n', '\v', '\f', '\v', '\xE', '\v', '\x6D3', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x6D8', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x6DB', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x6F1', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x700', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x714', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x71A', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x734', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x74E', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x77D', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x781', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x786', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x789', '\v', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x791', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x79B', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x7A5', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x7B7', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x7D5', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', 
		'\x7DD', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x7E0', '\v', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x7E8', '\n', ' ', '\f', ' ', '\xE', ' ', '\x7EB', '\v', ' ', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x7EF', '\n', '!', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x7F8', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x7FE', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x80F', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x814', '\n', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x818', 
		'\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x825', '\n', '(', '\x3', ')', '\x3', ')', '\x5', ')', '\x829', 
		'\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x82E', '\n', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x833', '\n', '+', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x5', ',', '\x843', '\n', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x84C', '\n', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x5', '\x31', '\x85C', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x908', '\n', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\a', '\x33', '\x910', '\n', '\x33', '\f', '\x33', 
		'\xE', '\x33', '\x913', '\v', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x91D', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\xA1F', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x5', '\x37', '\xA26', '\n', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\xA2B', '\n', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\xA30', '\n', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\xA35', '\n', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', 
		';', '\xA3D', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\xA46', '\n', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', 
		'>', '\xA4E', '\n', '>', '\f', '>', '\xE', '>', '\xA51', '\v', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x5', '?', '\xA62', '\n', '?', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\a', '@', '\xA69', '\n', 
		'@', '\f', '@', '\xE', '@', '\xA6C', '\v', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\xA78', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\xA94', '\n', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\xA9F', 
		'\n', '\x44', '\f', '\x44', '\xE', '\x44', '\xAA2', '\v', '\x44', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\a', '\x46', '\xAAF', '\n', '\x46', '\f', '\x46', '\xE', '\x46', 
		'\xAB2', '\v', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\xACE', '\n', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\xAD4', 
		'\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', 
		'\xAEC', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x5', 
		'K', '\xAF2', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', 
		'\xAF7', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x5', 'M', '\xAFE', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\a', 'N', '\xB03', '\n', 'N', '\f', 'N', '\xE', 'N', '\xB06', '\v', 'N', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', 
		'\xB2B', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\xB2F', '\n', 
		'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 
		'Q', '\xB36', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\xB3A', 
		'\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\a', 'S', '\xB42', '\n', 'S', '\f', 'S', '\xE', 'S', '\xB45', 
		'\v', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\xB52', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\a', 'V', '\xB5A', '\n', 'V', '\f', 'V', 
		'\xE', 'V', '\xB5D', '\v', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x5', 'X', '\xBBE', '\n', 'X', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xBCC', '\n', 
		'Y', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\xBD0', '\n', 'Z', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\xBD7', '\n', 
		'[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\a', '\\', '\xBDF', '\n', '\\', '\f', '\\', '\xE', '\\', 
		'\xBE2', '\v', '\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\a', ']', '\xBEA', '\n', ']', '\f', ']', '\xE', ']', 
		'\xBED', '\v', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\xBF2', 
		'\n', '^', '\x3', '_', '\x3', '_', '\x5', '_', '\xBF6', '\n', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x5', '\x61', '\xC05', '\n', '\x61', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\a', '\x62', '\xC0A', '\n', '\x62', '\f', 
		'\x62', '\xE', '\x62', '\xC0D', '\v', '\x62', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\xC17', '\n', '\x63', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\xC41', 
		'\n', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', 
		'\xC46', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\xC4F', 
		'\n', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', 
		'\a', 'h', '\xC5C', '\n', 'h', '\f', 'h', '\xE', 'h', '\xC5F', '\v', 'h', 
		'\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', 
		'\x3', 'j', '\x5', 'j', '\xC68', '\n', 'j', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x5', 'k', '\xCA3', '\n', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', 
		'\x5', 'l', '\xCA8', '\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x5', 'm', '\xCAF', '\n', 'm', '\x3', 'n', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\a', 'n', '\xCB7', '\n', 
		'n', '\f', 'n', '\xE', 'n', '\xCBA', '\v', 'n', '\x3', 'o', '\x3', 'o', 
		'\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x5', 'p', '\xCC4', '\n', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xCCD', '\n', 'q', 
		'\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', 
		'\a', 'r', '\xCD5', '\n', 'r', '\f', 'r', '\xE', 'r', '\xCD8', '\v', 'r', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x5', 's', 
		'\xCE5', '\n', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x5', 't', '\xCED', '\n', 't', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x5', 'u', '\xCF8', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 
		'v', '\x3', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x5', 'x', '\xD0A', '\n', 'x', '\x3', 'y', '\x3', 'y', 
		'\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\xD12', '\n', 
		'y', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\xD16', '\n', 'z', '\x3', '{', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\a', '|', '\xD25', '\n', '|', '\f', '|', '\xE', '|', '\xD28', '\v', '|', 
		'\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\x5', '}', '\xD38', '\n', '}', '\x3', '~', '\x3', 
		'~', '\x3', '~', '\x5', '~', '\xD3D', '\n', '~', '\x3', '\x7F', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\xD44', 
		'\n', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xD52', '\n', 
		'\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\xD57', 
		'\n', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', 
		'\x3', '\x82', '\x5', '\x82', '\xD5E', '\n', '\x82', '\x3', '\x83', '\x3', 
		'\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\xD79', 
		'\n', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\xD8B', '\n', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\xDA0', 
		'\n', '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\xDAF', '\n', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\xDC6', '\n', '\x89', 
		'\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xDD0', '\n', 
		'\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xDE8', '\n', '\x8D', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\xDF6', '\n', '\x8E', '\x3', 
		'\x8F', '\x3', '\x8F', '\x5', '\x8F', '\xDFA', '\n', '\x8F', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', '\x90', 
		'\xE01', '\n', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\a', '\x91', '\xE08', '\n', '\x91', '\f', '\x91', 
		'\xE', '\x91', '\xE0B', '\v', '\x91', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x5', '\x92', '\xE2F', '\n', '\x92', '\x3', '\x93', 
		'\x3', '\x93', '\x5', '\x93', '\xE33', '\n', '\x93', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x5', 
		'\x94', '\xE3B', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\a', '\x95', '\xE43', '\n', 
		'\x95', '\f', '\x95', '\xE', '\x95', '\xE46', '\v', '\x95', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\xE5A', '\n', '\x96', '\x3', 
		'\x97', '\x3', '\x97', '\x5', '\x97', '\xE5E', '\n', '\x97', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\xE64', '\n', 
		'\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', '\x99', '\xE69', 
		'\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x5', '\x9A', '\xE6F', '\n', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\xE73', '\n', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x5', '\x9C', 
		'\xE77', '\n', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', '\xE84', '\n', '\x9E', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE8E', '\n', 
		'\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x5', '\xA0', '\xE9F', '\n', '\xA0', '\x3', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\a', '\xA1', '\xEA4', '\n', '\xA1', '\f', '\xA1', '\xE', 
		'\xA1', '\xEA7', '\v', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', 
		'\xEB0', '\n', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\a', '\xA4', '\xEBB', '\n', '\xA4', '\f', '\xA4', '\xE', '\xA4', 
		'\xEBE', '\v', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xF2B', 
		'\n', '\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', 
		'\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', 
		'\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\xF3D', '\n', '\xA8', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\a', 
		'\xA9', '\xF44', '\n', '\xA9', '\f', '\xA9', '\xE', '\xA9', '\xF47', '\v', 
		'\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xF4B', '\n', '\xAA', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x5', '\xAB', '\xF5C', '\n', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\xF64', 
		'\n', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\a', '\xAD', '\xF6C', '\n', '\xAD', '\f', 
		'\xAD', '\xE', '\xAD', '\xF6F', '\v', '\xAD', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\a', '\xAF', 
		'\xF7C', '\n', '\xAF', '\f', '\xAF', '\xE', '\xAF', '\xF7F', '\v', '\xAF', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\xF88', '\n', '\xB0', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x5', '\xB4', '\xFAA', '\n', '\xB4', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\xFAF', '\n', '\xB5', '\x3', 
		'\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', '\xFB5', 
		'\n', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\xFB9', '\n', 
		'\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xFCB', '\n', '\xB8', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x5', '\xB9', '\x1005', '\n', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x1016', '\n', '\xBB', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\x101E', '\n', '\xBC', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', 
		'\xBD', '\x1035', '\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', 
		'\x1039', '\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', 
		'\xBF', '\x104D', '\n', '\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', '\x1072', '\n', '\xC3', '\x3', 
		'\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x107B', '\n', '\xC4', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x1080', '\n', '\xC5', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x1085', '\n', '\xC6', 
		'\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x108A', 
		'\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', 
		'\x108F', '\n', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x10C4', '\n', '\xCC', 
		'\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', 
		'\x10CA', '\n', '\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\a', '\xCE', '\x10D2', '\n', '\xCE', 
		'\f', '\xCE', '\xE', '\xCE', '\x10D5', '\v', '\xCE', '\x3', '\xCF', '\x3', 
		'\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', 
		'\xCF', '\x5', '\xCF', '\x10DE', '\n', '\xCF', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x5', '\xD0', '\x10E3', '\n', '\xD0', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\a', '\xD1', '\x10EA', 
		'\n', '\xD1', '\f', '\xD1', '\xE', '\xD1', '\x10ED', '\v', '\xD1', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x5', '\xD6', '\x10FF', '\n', '\xD6', '\x3', '\xD7', '\x3', '\xD7', 
		'\x5', '\xD7', '\x1103', '\n', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x5', '\xD9', '\x110D', '\n', '\xD9', '\x3', '\xDA', '\x3', '\xDA', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x1114', 
		'\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\a', '\xDB', 
		'\x1119', '\n', '\xDB', '\f', '\xDB', '\xE', '\xDB', '\x111C', '\v', '\xDB', 
		'\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x5', '\xDC', 
		'\x1122', '\n', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', 
		'\xDD', '\x1127', '\n', '\xDD', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\a', '\xDE', '\x112C', '\n', '\xDE', '\f', '\xDE', '\xE', '\xDE', '\x112F', 
		'\v', '\xDE', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x113C', '\n', '\xDF', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\x5', '\xE0', '\x1158', '\n', '\xE0', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\a', '\xE1', 
		'\x1160', '\n', '\xE1', '\f', '\xE1', '\xE', '\xE1', '\x1163', '\v', '\xE1', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\a', '\xE3', '\x1171', '\n', '\xE3', '\f', 
		'\xE3', '\xE', '\xE3', '\x1174', '\v', '\xE3', '\x3', '\xE4', '\x3', '\xE4', 
		'\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE5', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', 
		'\x5', '\xE5', '\x1182', '\n', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x11F7', '\n', '\xE7', 
		'\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE9', 
		'\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', 
		'\a', '\xE9', '\x1203', '\n', '\xE9', '\f', '\xE9', '\xE', '\xE9', '\x1206', 
		'\v', '\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\x5', '\xEA', '\x120D', '\n', '\xEA', '\x3', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', 
		'\xEB', '\x1215', '\n', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', 
		'\x3', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', 
		'\x3', '\xED', '\x3', '\xED', '\a', '\xED', '\x1221', '\n', '\xED', '\f', 
		'\xED', '\xE', '\xED', '\x1224', '\v', '\xED', '\x3', '\xEE', '\x3', '\xEE', 
		'\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', 
		'\x122C', '\n', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF0', '\x3', '\xF0', '\x3', '\xF0', '\a', '\xF0', '\x1234', '\n', '\xF0', 
		'\f', '\xF0', '\xE', '\xF0', '\x1237', '\v', '\xF0', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x5', '\xF1', '\x125E', '\n', '\xF1', '\x3', '\xF2', '\x3', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1264', '\n', '\xF2', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF4', '\x3', 
		'\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\a', 
		'\xF4', '\x127A', '\n', '\xF4', '\f', '\xF4', '\xE', '\xF4', '\x127D', 
		'\v', '\xF4', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', 
		'\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', 
		'\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', 
		'\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', 
		'\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', 
		'\x3', '\xF5', '\x5', '\xF5', '\x1298', '\n', '\xF5', '\x3', '\xF6', '\x3', 
		'\xF6', '\x5', '\xF6', '\x129C', '\n', '\xF6', '\x3', '\xF7', '\x3', '\xF7', 
		'\x3', '\xF7', '\x5', '\xF7', '\x12A1', '\n', '\xF7', '\x3', '\xF8', '\x3', 
		'\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', 
		'\xF8', '\x5', '\xF8', '\x12AA', '\n', '\xF8', '\x3', '\xF9', '\x3', '\xF9', 
		'\x5', '\xF9', '\x12AE', '\n', '\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x12C9', '\n', '\xFB', 
		'\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', 
		'\x3', '\xFC', '\a', '\xFC', '\x12D1', '\n', '\xFC', '\f', '\xFC', '\xE', 
		'\xFC', '\x12D4', '\v', '\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', 
		'\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', 
		'\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', 
		'\x12E2', '\n', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', 
		'\xFE', '\x12F6', '\n', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x5', '\xFF', '\x130A', '\n', '\xFF', '\x3', '\x100', '\x3', '\x100', 
		'\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', 
		'\x1367', '\n', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', 
		'\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', 
		'\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', 
		'\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\x1380', '\n', '\x103', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x5', '\x104', '\x1387', '\n', '\x104', '\x3', '\x105', '\x3', 
		'\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', 
		'\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', 
		'\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x5', '\x105', 
		'\x1397', '\n', '\x105', '\x3', '\x106', '\x3', '\x106', '\x3', '\x107', 
		'\x3', '\x107', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', '\x3', 
		'\x107', '\a', '\x107', '\x13A1', '\n', '\x107', '\f', '\x107', '\xE', 
		'\x107', '\x13A4', '\v', '\x107', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x5', '\x108', '\x13AA', '\n', '\x108', '\x3', 
		'\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x109', '\a', '\x109', '\x13B3', '\n', '\x109', 
		'\f', '\x109', '\xE', '\x109', '\x13B6', '\v', '\x109', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10A', '\a', '\x10A', '\x13BE', '\n', '\x10A', '\f', '\x10A', '\xE', 
		'\x10A', '\x13C1', '\v', '\x10A', '\x3', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10C', 
		'\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', 
		'\x10C', '\x13CE', '\n', '\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x5', '\x10D', '\x1463', '\n', '\x10D', '\x3', '\x10E', '\x3', 
		'\x10E', '\x5', '\x10E', '\x1467', '\n', '\x10E', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x5', 
		'\x10F', '\x14C4', '\n', '\x10F', '\x3', '\x110', '\x3', '\x110', '\x3', 
		'\x110', '\x5', '\x110', '\x14C9', '\n', '\x110', '\x3', '\x111', '\x3', 
		'\x111', '\x5', '\x111', '\x14CD', '\n', '\x111', '\x3', '\x112', '\x3', 
		'\x112', '\x3', '\x112', '\x3', '\x112', '\x5', '\x112', '\x14D3', '\n', 
		'\x112', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x5', '\x113', 
		'\x1517', '\n', '\x113', '\x3', '\x114', '\x3', '\x114', '\x3', '\x115', 
		'\x3', '\x115', '\x5', '\x115', '\x151D', '\n', '\x115', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', 
		'\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', 
		'\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x5', '\x117', 
		'\x153A', '\n', '\x117', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x5', '\x118', '\x154B', 
		'\n', '\x118', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\a', '\x119', '\x1553', '\n', 
		'\x119', '\f', '\x119', '\xE', '\x119', '\x1556', '\v', '\x119', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x5', 
		'\x11A', '\x1561', '\n', '\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x5', '\x11B', '\x159D', '\n', '\x11B', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\a', '\x11C', '\x15A5', '\n', '\x11C', '\f', '\x11C', 
		'\xE', '\x11C', '\x15A8', '\v', '\x11C', '\x3', '\x11D', '\x3', '\x11D', 
		'\x3', '\x11D', '\x5', '\x11D', '\x15AD', '\n', '\x11D', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15B3', 
		'\n', '\x11E', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', 
		'\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x5', '\x120', '\x15CD', '\n', 
		'\x120', '\x3', '\x121', '\x3', '\x121', '\x3', '\x121', '\x3', '\x121', 
		'\x5', '\x121', '\x15D3', '\n', '\x121', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x15D9', '\n', '\x122', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x3', '\x123', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', 
		'\a', '\x124', '\x15E4', '\n', '\x124', '\f', '\x124', '\xE', '\x124', 
		'\x15E7', '\v', '\x124', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', 
		'\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', 
		'\x125', '\x3', '\x125', '\x5', '\x125', '\x15F2', '\n', '\x125', '\x3', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', 
		'\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', 
		'\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', 
		'\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x5', 
		'\x126', '\x160F', '\n', '\x126', '\x3', '\x127', '\x3', '\x127', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x1636', 
		'\n', '\x128', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x163A', 
		'\n', '\x129', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x163E', 
		'\n', '\x12A', '\x3', '\x12B', '\x3', '\x12B', '\x5', '\x12B', '\x1642', 
		'\n', '\x12B', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x5', 
		'\x12C', '\x1647', '\n', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\a', '\x12D', 
		'\x164F', '\n', '\x12D', '\f', '\x12D', '\xE', '\x12D', '\x1652', '\v', 
		'\x12D', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', 
		'\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x165F', '\n', 
		'\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', 
		'\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x5', '\x12F', '\x166C', '\n', 
		'\x12F', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x1674', '\n', '\x130', 
		'\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', 
		'\x131', '\x3', '\x131', '\a', '\x131', '\x167C', '\n', '\x131', '\f', 
		'\x131', '\xE', '\x131', '\x167F', '\v', '\x131', '\x3', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x5', '\x132', '\x1684', '\n', '\x132', '\x3', 
		'\x133', '\x3', '\x133', '\x5', '\x133', '\x1688', '\n', '\x133', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x168D', '\n', 
		'\x134', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\x3', '\x135', '\x5', '\x135', '\x1694', '\n', '\x135', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x5', '\x136', '\x16B9', '\n', 
		'\x136', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x5', '\x137', 
		'\x16BE', '\n', '\x137', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', 
		'\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x5', '\x138', '\x16C6', 
		'\n', '\x138', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', 
		'\x139', '\x3', '\x139', '\x3', '\x139', '\a', '\x139', '\x16CE', '\n', 
		'\x139', '\f', '\x139', '\xE', '\x139', '\x16D1', '\v', '\x139', '\x3', 
		'\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13A', 
		'\x3', '\x13A', '\a', '\x13A', '\x16D9', '\n', '\x13A', '\f', '\x13A', 
		'\xE', '\x13A', '\x16DC', '\v', '\x13A', '\x3', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', 
		'\x13B', '\x3', '\x13B', '\x5', '\x13B', '\x16E6', '\n', '\x13B', '\x3', 
		'\x13C', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', 
		'\x3', '\x13C', '\x5', '\x13C', '\x16EE', '\n', '\x13C', '\x3', '\x13D', 
		'\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\a', '\x13D', '\x16F6', '\n', '\x13D', '\f', '\x13D', '\xE', 
		'\x13D', '\x16F9', '\v', '\x13D', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', '\x13E', 
		'\x170A', '\n', '\x13E', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x1712', 
		'\n', '\x13F', '\x3', '\x140', '\x3', '\x140', '\x3', '\x141', '\x3', 
		'\x141', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', 
		'\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x5', '\x142', 
		'\x1724', '\n', '\x142', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', 
		'\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x5', '\x143', '\x172F', '\n', '\x143', '\x3', 
		'\x144', '\x3', '\x144', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', 
		'\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', 
		'\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x5', '\x145', 
		'\x1747', '\n', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', 
		'\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\a', '\x146', '\x174F', 
		'\n', '\x146', '\f', '\x146', '\xE', '\x146', '\x1752', '\v', '\x146', 
		'\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x148', '\x3', 
		'\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', 
		'\a', '\x148', '\x175D', '\n', '\x148', '\f', '\x148', '\xE', '\x148', 
		'\x1760', '\v', '\x148', '\x3', '\x149', '\x6', '\x149', '\x1763', '\n', 
		'\x149', '\r', '\x149', '\xE', '\x149', '\x1764', '\x3', '\x149', '\x3', 
		'\x149', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x5', 
		'\x14A', '\x178C', '\n', '\x14A', '\x3', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x3', '\x14B', '\x5', '\x14B', '\x1796', '\n', '\x14B', '\x3', '\x14C', 
		'\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x179F', '\n', '\x14C', '\x3', 
		'\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', 
		'\x14D', '\a', '\x14D', '\x17AB', '\n', '\x14D', '\f', '\x14D', '\xE', 
		'\x14D', '\x17AE', '\v', '\x14D', '\x3', '\x14E', '\x3', '\x14E', '\x3', 
		'\x14E', '\x5', '\x14E', '\x17B3', '\n', '\x14E', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', 
		'\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\a', '\x150', '\x17BE', 
		'\n', '\x150', '\f', '\x150', '\xE', '\x150', '\x17C1', '\v', '\x150', 
		'\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', 
		'\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', 
		'\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', 
		'\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', 
		'\x5', '\x151', '\x17D5', '\n', '\x151', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\a', '\x152', '\x17DC', 
		'\n', '\x152', '\f', '\x152', '\xE', '\x152', '\x17DF', '\v', '\x152', 
		'\x3', '\x153', '\x3', '\x153', '\x5', '\x153', '\x17E3', '\n', '\x153', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x5', '\x154', '\x1809', '\n', '\x154', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x5', '\x155', '\x1817', '\n', '\x155', '\x3', '\x156', 
		'\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x3', 
		'\x156', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', 
		'\x3', '\x156', '\x3', '\x156', '\x5', '\x156', '\x1825', '\n', '\x156', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x5', 
		'\x157', '\x183D', '\n', '\x157', '\x3', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x5', '\x158', '\x1844', '\n', 
		'\x158', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\a', '\x159', '\x184C', '\n', '\x159', 
		'\f', '\x159', '\xE', '\x159', '\x184F', '\v', '\x159', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15B', '\x3', '\x15B', '\x3', 
		'\x15B', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\a', '\x15C', '\x185C', '\n', '\x15C', '\f', '\x15C', 
		'\xE', '\x15C', '\x185F', '\v', '\x15C', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x5', '\x15D', '\x1864', '\n', '\x15D', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x5', '\x15E', '\x1888', '\n', '\x15E', '\x3', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', 
		'\x5', '\x15F', '\x188F', '\n', '\x15F', '\x3', '\x160', '\x3', '\x160', 
		'\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', 
		'\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x161', 
		'\x3', '\x161', '\x3', '\x161', '\x5', '\x161', '\x189E', '\n', '\x161', 
		'\x3', '\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x162', '\x3', 
		'\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x162', 
		'\x3', '\x162', '\x3', '\x162', '\x3', '\x163', '\x3', '\x163', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', 
		'\x5', '\x163', '\x18CD', '\n', '\x163', '\x3', '\x164', '\x3', '\x164', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x5', '\x165', '\x18F2', '\n', '\x165', '\x3', 
		'\x166', '\x3', '\x166', '\x3', '\x167', '\x3', '\x167', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\a', '\x168', '\x18FE', '\n', '\x168', '\f', '\x168', '\xE', 
		'\x168', '\x1901', '\v', '\x168', '\x3', '\x169', '\x3', '\x169', '\x3', 
		'\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', 
		'\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', 
		'\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x5', '\x16A', '\x1911', '\n', 
		'\x16A', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x5', '\x16B', '\x1AE7', '\n', '\x16B', '\x3', '\x16C', '\x3', 
		'\x16C', '\x5', '\x16C', '\x1AEB', '\n', '\x16C', '\x3', '\x16D', '\x3', 
		'\x16D', '\x3', '\x16D', '\x5', '\x16D', '\x1AF0', '\n', '\x16D', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x5', '\x16E', '\x1B2B', '\n', 
		'\x16E', '\x3', '\x16F', '\x3', '\x16F', '\x5', '\x16F', '\x1B2F', '\n', 
		'\x16F', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x5', '\x170', '\x1C0A', '\n', '\x170', '\x3', 
		'\x171', '\x3', '\x171', '\x3', '\x171', '\x3', '\x171', '\x3', '\x171', 
		'\x3', '\x171', '\x3', '\x171', '\x3', '\x171', '\x3', '\x172', '\x3', 
		'\x172', '\x3', '\x172', '\x3', '\x172', '\x3', '\x172', '\x3', '\x172', 
		'\a', '\x172', '\x1C1A', '\n', '\x172', '\f', '\x172', '\xE', '\x172', 
		'\x1C1D', '\v', '\x172', '\x3', '\x173', '\x3', '\x173', '\x3', '\x173', 
		'\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x3', 
		'\x173', '\x5', '\x173', '\x1C27', '\n', '\x173', '\x3', '\x174', '\x3', 
		'\x174', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', '\x5', '\x174', 
		'\x1C2E', '\n', '\x174', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x5', '\x176', 
		'\x1CEF', '\n', '\x176', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', 
		'\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x3', '\x178', '\x3', 
		'\x178', '\x5', '\x178', '\x1CF9', '\n', '\x178', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x1D01', '\n', '\x179', '\x3', '\x17A', '\x3', '\x17A', 
		'\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', 
		'\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', 
		'\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', 
		'\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', 
		'\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', 
		'\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x5', '\x17A', '\x1D1E', '\n', 
		'\x17A', '\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', 
		'\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x3', 
		'\x17B', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', 
		'\x3', '\x17C', '\x3', '\x17C', '\a', '\x17C', '\x1D2F', '\n', '\x17C', 
		'\f', '\x17C', '\xE', '\x17C', '\x1D32', '\v', '\x17C', '\x3', '\x17D', 
		'\x3', '\x17D', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', 
		'\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', 
		'\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', 
		'\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', 
		'\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17E', '\x5', '\x17E', '\x1D5B', '\n', '\x17E', 
		'\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', 
		'\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', 
		'\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x5', '\x17F', '\x1D69', 
		'\n', '\x17F', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', '\x3', 
		'\x180', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', 
		'\x3', '\x180', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', '\x3', 
		'\x180', '\x3', '\x180', '\x3', '\x181', '\x3', '\x181', '\x3', '\x181', 
		'\x3', '\x181', '\x3', '\x181', '\x3', '\x181', '\x5', '\x181', '\x1D7F', 
		'\n', '\x181', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', 
		'\x182', '\x3', '\x182', '\x3', '\x182', '\a', '\x182', '\x1D87', '\n', 
		'\x182', '\f', '\x182', '\xE', '\x182', '\x1D8A', '\v', '\x182', '\x3', 
		'\x183', '\x3', '\x183', '\x3', '\x183', '\x3', '\x183', '\x3', '\x183', 
		'\x5', '\x183', '\x1D91', '\n', '\x183', '\x3', '\x184', '\x3', '\x184', 
		'\x5', '\x184', '\x1D95', '\n', '\x184', '\x3', '\x185', '\x3', '\x185', 
		'\x3', '\x186', '\x3', '\x186', '\x3', '\x186', '\x5', '\x186', '\x1D9C', 
		'\n', '\x186', '\x3', '\x187', '\x3', '\x187', '\x3', '\x187', '\x3', 
		'\x187', '\x3', '\x188', '\x3', '\x188', '\x3', '\x188', '\x5', '\x188', 
		'\x1DA5', '\n', '\x188', '\x3', '\x189', '\x3', '\x189', '\x3', '\x189', 
		'\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x5', 
		'\x18A', '\x1DAE', '\n', '\x18A', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x5', '\x18B', '\x1DE2', '\n', 
		'\x18B', '\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x5', '\x18C', 
		'\x1DE7', '\n', '\x18C', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', 
		'\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', 
		'\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x5', '\x18D', '\x1DF3', '\n', 
		'\x18D', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\a', 
		'\x18E', '\x1DFD', '\n', '\x18E', '\f', '\x18E', '\xE', '\x18E', '\x1E00', 
		'\v', '\x18E', '\x3', '\x18F', '\x3', '\x18F', '\x5', '\x18F', '\x1E04', 
		'\n', '\x18F', '\x3', '\x190', '\x3', '\x190', '\x3', '\x190', '\x3', 
		'\x190', '\x3', '\x190', '\x3', '\x190', '\x5', '\x190', '\x1E0C', '\n', 
		'\x190', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x5', '\x191', '\x1E40', '\n', '\x191', '\x3', '\x192', 
		'\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', 
		'\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', 
		'\x3', '\x192', '\x3', '\x192', '\x5', '\x192', '\x1E4E', '\n', '\x192', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x194', '\x3', 
		'\x194', '\x3', '\x194', '\x3', '\x194', '\x3', '\x194', '\x3', '\x194', 
		'\x3', '\x195', '\x3', '\x195', '\x5', '\x195', '\x1E5B', '\n', '\x195', 
		'\x3', '\x196', '\x3', '\x196', '\x3', '\x196', '\x3', '\x196', '\x3', 
		'\x196', '\a', '\x196', '\x1E62', '\n', '\x196', '\f', '\x196', '\xE', 
		'\x196', '\x1E65', '\v', '\x196', '\x3', '\x197', '\x3', '\x197', '\x3', 
		'\x197', '\x3', '\x197', '\x3', '\x197', '\x3', '\x197', '\x3', '\x197', 
		'\x3', '\x197', '\x3', '\x197', '\x3', '\x197', '\x3', '\x197', '\x3', 
		'\x197', '\x5', '\x197', '\x1E73', '\n', '\x197', '\x3', '\x198', '\x3', 
		'\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', 
		'\x3', '\x198', '\x3', '\x198', '\x5', '\x198', '\x1E7D', '\n', '\x198', 
		'\x3', '\x199', '\x3', '\x199', '\x5', '\x199', '\x1E81', '\n', '\x199', 
		'\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', 
		'\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', 
		'\x5', '\x19A', '\x1E95', '\n', '\x19A', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19C', '\x3', 
		'\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', 
		'\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', 
		'\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x3', '\x19C', '\x3', '\x19C', '\x5', '\x19C', '\x1EB6', '\n', '\x19C', 
		'\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', 
		'\x19D', '\x3', '\x19D', '\a', '\x19D', '\x1EBE', '\n', '\x19D', '\f', 
		'\x19D', '\xE', '\x19D', '\x1EC1', '\v', '\x19D', '\x3', '\x19E', '\x3', 
		'\x19E', '\x3', '\x19F', '\x3', '\x19F', '\x3', '\x19F', '\x3', '\x19F', 
		'\x3', '\x19F', '\x3', '\x19F', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', 
		'\x3', '\x1A0', '\x5', '\x1A0', '\x1ED3', '\n', '\x1A0', '\x3', '\x1A1', 
		'\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', 
		'\x1A1', '\x3', '\x1A1', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x5', '\x1A2', '\x1F0E', '\n', '\x1A2', 
		'\x3', '\x1A3', '\x3', '\x1A3', '\x5', '\x1A3', '\x1F12', '\n', '\x1A3', 
		'\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', 
		'\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', '\x5', '\x1A5', '\x1F63', '\n', 
		'\x1A5', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A7', '\x3', '\x1A7', 
		'\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', 
		'\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', 
		'\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', 
		'\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x5', 
		'\x1A8', '\x1F7F', '\n', '\x1A8', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x5', '\x1A9', '\x1F84', '\n', '\x1A9', '\x3', '\x1AA', '\x3', 
		'\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', 
		'\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', 
		'\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x5', '\x1AA', '\x1F93', '\n', 
		'\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', 
		'\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1F9F', '\n', '\x1AB', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\a', '\x1AC', '\x1FA7', '\n', '\x1AC', '\f', '\x1AC', 
		'\xE', '\x1AC', '\x1FAA', '\v', '\x1AC', '\x3', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AF', '\x3', 
		'\x1AF', '\x5', '\x1AF', '\x1FB3', '\n', '\x1AF', '\x3', '\x1B0', '\x3', 
		'\x1B0', '\x3', '\x1B0', '\x5', '\x1B0', '\x1FB8', '\n', '\x1B0', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x5', '\x1B1', '\x1FBC', '\n', '\x1B1', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1FC0', '\n', '\x1B2', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x1FC4', '\n', '\x1B3', '\x3', 
		'\x1B4', '\x3', '\x1B4', '\x5', '\x1B4', '\x1FC8', '\n', '\x1B4', '\x3', 
		'\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', 
		'\x5', '\x1B5', '\x1FCF', '\n', '\x1B5', '\x3', '\x1B6', '\x3', '\x1B6', 
		'\x3', '\x1B6', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', 
		'\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\a', '\x1B7', '\x1FDA', '\n', 
		'\x1B7', '\f', '\x1B7', '\xE', '\x1B7', '\x1FDD', '\v', '\x1B7', '\x3', 
		'\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', '\x1FE1', '\n', '\x1B8', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x1FF3', '\n', '\x1B9', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', 
		'\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', 
		'\x5', '\x1BA', '\x1FFE', '\n', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', 
		'\x3', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', '\a', 
		'\x1BB', '\x2006', '\n', '\x1BB', '\f', '\x1BB', '\xE', '\x1BB', '\x2009', 
		'\v', '\x1BB', '\x3', '\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x3', 
		'\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x2010', '\n', '\x1BD', '\x3', 
		'\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x2015', '\n', 
		'\x1BE', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', 
		'\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', '\x2022', '\n', 
		'\x1C0', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', 
		'\x5', '\x1C1', '\x2028', '\n', '\x1C1', '\x3', '\x1C2', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', 
		'\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', 
		'\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', 
		'\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x5', '\x1C2', '\x2045', '\n', 
		'\x1C2', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', 
		'\x3', '\x1C3', '\x5', '\x1C3', '\x204C', '\n', '\x1C3', '\x3', '\x1C4', 
		'\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', 
		'\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', 
		'\x5', '\x1C4', '\x2058', '\n', '\x1C4', '\x3', '\x1C5', '\x3', '\x1C5', 
		'\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', 
		'\x1C5', '\x3', '\x1C5', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x2067', '\n', '\x1C6', 
		'\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', 
		'\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', 
		'\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', 
		'\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', 
		'\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x5', '\x1C7', '\x207E', 
		'\n', '\x1C7', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C9', '\x3', 
		'\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', 
		'\a', '\x1C9', '\x2088', '\n', '\x1C9', '\f', '\x1C9', '\xE', '\x1C9', 
		'\x208B', '\v', '\x1C9', '\x3', '\x1CA', '\x3', '\x1CA', '\x3', '\x1CA', 
		'\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', 
		'\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', 
		'\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', 
		'\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x5', '\x1CB', '\x20A0', '\n', 
		'\x1CB', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', 
		'\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', 
		'\x1CC', '\x5', '\x1CC', '\x20AB', '\n', '\x1CC', '\x3', '\x1CD', '\x3', 
		'\x1CD', '\x3', '\x1CD', '\x5', '\x1CD', '\x20B0', '\n', '\x1CD', '\x3', 
		'\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', 
		'\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CF', '\x3', 
		'\x1CF', '\x3', '\x1CF', '\x5', '\x1CF', '\x20BD', '\n', '\x1CF', '\x3', 
		'\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', 
		'\x3', '\x1D0', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x20CA', '\n', '\x1D1', '\x3', 
		'\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', 
		'\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x5', '\x1D2', '\x20DC', '\n', '\x1D2', 
		'\x3', '\x1D3', '\x3', '\x1D3', '\x5', '\x1D3', '\x20E0', '\n', '\x1D3', 
		'\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x5', 
		'\x1D4', '\x20E6', '\n', '\x1D4', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', 
		'\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', 
		'\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', 
		'\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\a', '\x1D6', 
		'\x20F7', '\n', '\x1D6', '\f', '\x1D6', '\xE', '\x1D6', '\x20FA', '\v', 
		'\x1D6', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x2106', '\n', '\x1D7', '\x3', 
		'\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\a', 
		'\x1D9', '\x2111', '\n', '\x1D9', '\f', '\x1D9', '\xE', '\x1D9', '\x2114', 
		'\v', '\x1D9', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', 
		'\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', 
		'\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\a', '\x1DC', '\x212A', 
		'\n', '\x1DC', '\f', '\x1DC', '\xE', '\x1DC', '\x212D', '\v', '\x1DC', 
		'\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', 
		'\x1DD', '\x5', '\x1DD', '\x2134', '\n', '\x1DD', '\x3', '\x1DE', '\x3', 
		'\x1DE', '\x5', '\x1DE', '\x2138', '\n', '\x1DE', '\x3', '\x1DF', '\x3', 
		'\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', 
		'\x3', '\x1DF', '\x3', '\x1DF', '\x5', '\x1DF', '\x2142', '\n', '\x1DF', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x5', '\x1E0', '\x2165', '\n', '\x1E0', '\x3', 
		'\x1E1', '\x3', '\x1E1', '\x5', '\x1E1', '\x2169', '\n', '\x1E1', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', 
		'\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', 
		'\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', 
		'\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x5', '\x1E2', '\x2188', '\n', '\x1E2', '\x5', 
		'\x1E2', '\x218A', '\n', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x5', '\x1E2', '\x2190', '\n', '\x1E2', '\a', 
		'\x1E2', '\x2192', '\n', '\x1E2', '\f', '\x1E2', '\xE', '\x1E2', '\x2195', 
		'\v', '\x1E2', '\x3', '\x1E3', '\x3', '\x1E3', '\x3', '\x1E3', '\x5', 
		'\x1E3', '\x219A', '\n', '\x1E3', '\x3', '\x1E4', '\x3', '\x1E4', '\x3', 
		'\x1E4', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E5', 
		'\x3', '\x1E5', '\x5', '\x1E5', '\x21A4', '\n', '\x1E5', '\x3', '\x1E6', 
		'\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', 
		'\x1E6', '\a', '\x1E6', '\x21AC', '\n', '\x1E6', '\f', '\x1E6', '\xE', 
		'\x1E6', '\x21AF', '\v', '\x1E6', '\x3', '\x1E7', '\x3', '\x1E7', '\x3', 
		'\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', 
		'\x3', '\x1E7', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', 
		'\x1E8', '\x5', '\x1E8', '\x21BD', '\n', '\x1E8', '\x3', '\x1E9', '\x3', 
		'\x1E9', '\x5', '\x1E9', '\x21C1', '\n', '\x1E9', '\x3', '\x1EA', '\x3', 
		'\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', 
		'\x3', '\x1EA', '\x5', '\x1EA', '\x21CA', '\n', '\x1EA', '\x3', '\x1EB', 
		'\x3', '\x1EB', '\x5', '\x1EB', '\x21CE', '\n', '\x1EB', '\x3', '\x1EC', 
		'\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', 
		'\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', 
		'\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', 
		'\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', 
		'\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', 
		'\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', 
		'\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x3', 
		'\x1EC', '\x3', '\x1EC', '\x3', '\x1EC', '\x5', '\x1EC', '\x21F3', '\n', 
		'\x1EC', '\x3', '\x1ED', '\x3', '\x1ED', '\x5', '\x1ED', '\x21F7', '\n', 
		'\x1ED', '\x3', '\x1EE', '\x3', '\x1EE', '\x3', '\x1EE', '\x5', '\x1EE', 
		'\x21FC', '\n', '\x1EE', '\x3', '\x1EF', '\x3', '\x1EF', '\x3', '\x1EF', 
		'\x3', '\x1EF', '\x3', '\x1EF', '\x3', '\x1EF', '\x3', '\x1EF', '\x5', 
		'\x1EF', '\x2205', '\n', '\x1EF', '\x3', '\x1F0', '\x3', '\x1F0', '\x5', 
		'\x1F0', '\x2209', '\n', '\x1F0', '\x3', '\x1F1', '\x3', '\x1F1', '\x5', 
		'\x1F1', '\x220D', '\n', '\x1F1', '\x3', '\x1F2', '\x3', '\x1F2', '\x3', 
		'\x1F2', '\x3', '\x1F2', '\x3', '\x1F3', '\x3', '\x1F3', '\x3', '\x1F3', 
		'\a', '\x1F3', '\x2216', '\n', '\x1F3', '\f', '\x1F3', '\xE', '\x1F3', 
		'\x2219', '\v', '\x1F3', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', 
		'\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', 
		'\x1F4', '\x3', '\x1F4', '\x5', '\x1F4', '\x2224', '\n', '\x1F4', '\x3', 
		'\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', 
		'\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x5', '\x1F5', '\x222E', 
		'\n', '\x1F5', '\x3', '\x1F6', '\x3', '\x1F6', '\x5', '\x1F6', '\x2232', 
		'\n', '\x1F6', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', 
		'\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', 
		'\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', 
		'\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', 
		'\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', 
		'\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', 
		'\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', '\x1F7', '\x3', 
		'\x1F7', '\x5', '\x1F7', '\x2253', '\n', '\x1F7', '\x3', '\x1F8', '\x3', 
		'\x1F8', '\x3', '\x1F8', '\x3', '\x1F8', '\x3', '\x1F8', '\x3', '\x1F8', 
		'\x5', '\x1F8', '\x225B', '\n', '\x1F8', '\x3', '\x1F9', '\x3', '\x1F9', 
		'\x5', '\x1F9', '\x225F', '\n', '\x1F9', '\x3', '\x1FA', '\x3', '\x1FA', 
		'\x3', '\x1FB', '\x3', '\x1FB', '\x3', '\x1FB', '\x3', '\x1FB', '\x3', 
		'\x1FB', '\x5', '\x1FB', '\x2268', '\n', '\x1FB', '\x3', '\x1FC', '\x3', 
		'\x1FC', '\x5', '\x1FC', '\x226C', '\n', '\x1FC', '\x3', '\x1FD', '\x3', 
		'\x1FD', '\x3', '\x1FE', '\x3', '\x1FE', '\x3', '\x1FF', '\x3', '\x1FF', 
		'\x3', '\x1FF', '\x3', '\x1FF', '\x5', '\x1FF', '\x2276', '\n', '\x1FF', 
		'\x3', '\x200', '\x3', '\x200', '\x3', '\x200', '\x3', '\x200', '\x3', 
		'\x200', '\x3', '\x200', '\a', '\x200', '\x227E', '\n', '\x200', '\f', 
		'\x200', '\xE', '\x200', '\x2281', '\v', '\x200', '\x3', '\x201', '\x3', 
		'\x201', '\x3', '\x201', '\x3', '\x201', '\x3', '\x201', '\x5', '\x201', 
		'\x2288', '\n', '\x201', '\x3', '\x202', '\x3', '\x202', '\x3', '\x202', 
		'\x3', '\x203', '\x3', '\x203', '\x3', '\x203', '\x3', '\x203', '\x3', 
		'\x203', '\x3', '\x204', '\x3', '\x204', '\x3', '\x204', '\x3', '\x204', 
		'\x3', '\x204', '\x3', '\x205', '\x3', '\x205', '\x3', '\x205', '\x3', 
		'\x205', '\x3', '\x205', '\x3', '\x205', '\x3', '\x206', '\x3', '\x206', 
		'\x3', '\x206', '\x5', '\x206', '\x22A0', '\n', '\x206', '\x3', '\x207', 
		'\x3', '\x207', '\x3', '\x207', '\x3', '\x207', '\x5', '\x207', '\x22A6', 
		'\n', '\x207', '\x3', '\x208', '\x3', '\x208', '\x5', '\x208', '\x22AA', 
		'\n', '\x208', '\x3', '\x209', '\x3', '\x209', '\x3', '\x209', '\x3', 
		'\x209', '\x3', '\x209', '\a', '\x209', '\x22B1', '\n', '\x209', '\f', 
		'\x209', '\xE', '\x209', '\x22B4', '\v', '\x209', '\x3', '\x20A', '\x3', 
		'\x20A', '\x3', '\x20A', '\x3', '\x20A', '\x3', '\x20B', '\x3', '\x20B', 
		'\x3', '\x20B', '\x3', '\x20B', '\x3', '\x20B', '\x3', '\x20B', '\x3', 
		'\x20B', '\x3', '\x20B', '\x3', '\x20B', '\x3', '\x20B', '\x3', '\x20B', 
		'\x5', '\x20B', '\x22C5', '\n', '\x20B', '\x3', '\x20C', '\x3', '\x20C', 
		'\x3', '\x20C', '\x5', '\x20C', '\x22CA', '\n', '\x20C', '\x3', '\x20D', 
		'\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20D', '\x3', 
		'\x20D', '\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20D', 
		'\x3', '\x20D', '\x3', '\x20D', '\a', '\x20D', '\x22D8', '\n', '\x20D', 
		'\f', '\x20D', '\xE', '\x20D', '\x22DB', '\v', '\x20D', '\x3', '\x20E', 
		'\x3', '\x20E', '\x3', '\x20E', '\x5', '\x20E', '\x22E0', '\n', '\x20E', 
		'\x3', '\x20F', '\x3', '\x20F', '\x3', '\x20F', '\a', '\x20F', '\x22E5', 
		'\n', '\x20F', '\f', '\x20F', '\xE', '\x20F', '\x22E8', '\v', '\x20F', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x5', '\x210', 
		'\x2328', '\n', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x5', '\x210', '\x232D', '\n', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', 
		'\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x210', '\a', '\x210', '\x2348', '\n', '\x210', '\f', '\x210', '\xE', 
		'\x210', '\x234B', '\v', '\x210', '\x3', '\x211', '\x3', '\x211', '\x3', 
		'\x211', '\x3', '\x211', '\x3', '\x211', '\x3', '\x211', '\x3', '\x211', 
		'\x3', '\x211', '\x3', '\x211', '\x3', '\x211', '\x3', '\x211', '\x3', 
		'\x211', '\x3', '\x211', '\x3', '\x211', '\x5', '\x211', '\x235B', '\n', 
		'\x211', '\x3', '\x212', '\x3', '\x212', '\x5', '\x212', '\x235F', '\n', 
		'\x212', '\x3', '\x213', '\x3', '\x213', '\x3', '\x213', '\x3', '\x213', 
		'\x3', '\x213', '\x3', '\x213', '\x3', '\x213', '\x3', '\x213', '\x3', 
		'\x213', '\x3', '\x213', '\x3', '\x213', '\x3', '\x213', '\x3', '\x213', 
		'\x3', '\x213', '\x3', '\x213', '\x3', '\x213', '\x3', '\x213', '\x3', 
		'\x213', '\x5', '\x213', '\x2373', '\n', '\x213', '\x3', '\x214', '\x3', 
		'\x214', '\x3', '\x214', '\x3', '\x214', '\x3', '\x214', '\x3', '\x214', 
		'\x3', '\x214', '\x5', '\x214', '\x237C', '\n', '\x214', '\x3', '\x215', 
		'\x3', '\x215', '\x5', '\x215', '\x2380', '\n', '\x215', '\x3', '\x216', 
		'\x3', '\x216', '\x3', '\x216', '\x3', '\x216', '\x3', '\x216', '\x3', 
		'\x216', '\x3', '\x216', '\x5', '\x216', '\x2389', '\n', '\x216', '\x3', 
		'\x217', '\x3', '\x217', '\x3', '\x217', '\x3', '\x217', '\x3', '\x217', 
		'\x3', '\x217', '\x3', '\x217', '\x3', '\x217', '\x3', '\x217', '\x3', 
		'\x217', '\x3', '\x217', '\x5', '\x217', '\x2396', '\n', '\x217', '\x3', 
		'\x218', '\x3', '\x218', '\x3', '\x218', '\x3', '\x218', '\x3', '\x218', 
		'\x3', '\x218', '\a', '\x218', '\x239E', '\n', '\x218', '\f', '\x218', 
		'\xE', '\x218', '\x23A1', '\v', '\x218', '\x3', '\x219', '\x3', '\x219', 
		'\x3', '\x219', '\x3', '\x219', '\x3', '\x219', '\x3', '\x219', '\x3', 
		'\x219', '\x3', '\x219', '\x5', '\x219', '\x23AB', '\n', '\x219', '\x3', 
		'\x21A', '\x3', '\x21A', '\x3', '\x21A', '\x3', '\x21A', '\x3', '\x21A', 
		'\x3', '\x21A', '\x3', '\x21A', '\x3', '\x21B', '\x3', '\x21B', '\x3', 
		'\x21B', '\x3', '\x21B', '\x3', '\x21B', '\x3', '\x21B', '\x5', '\x21B', 
		'\x23BA', '\n', '\x21B', '\x3', '\x21C', '\x3', '\x21C', '\x3', '\x21C', 
		'\x3', '\x21C', '\x3', '\x21C', '\x3', '\x21C', '\x3', '\x21C', '\x3', 
		'\x21C', '\x3', '\x21C', '\x3', '\x21C', '\x5', '\x21C', '\x23C6', '\n', 
		'\x21C', '\x3', '\x21D', '\x3', '\x21D', '\x3', '\x21D', '\x3', '\x21E', 
		'\x3', '\x21E', '\x3', '\x21E', '\x3', '\x21E', '\x3', '\x21E', '\x3', 
		'\x21E', '\a', '\x21E', '\x23D1', '\n', '\x21E', '\f', '\x21E', '\xE', 
		'\x21E', '\x23D4', '\v', '\x21E', '\x3', '\x21F', '\x3', '\x21F', '\x3', 
		'\x21F', '\x3', '\x21F', '\x3', '\x21F', '\x3', '\x21F', '\x5', '\x21F', 
		'\x23DC', '\n', '\x21F', '\x3', '\x220', '\x3', '\x220', '\x3', '\x220', 
		'\x5', '\x220', '\x23E1', '\n', '\x220', '\x3', '\x221', '\x3', '\x221', 
		'\x3', '\x221', '\x5', '\x221', '\x23E6', '\n', '\x221', '\x3', '\x222', 
		'\x3', '\x222', '\x3', '\x222', '\x3', '\x222', '\x3', '\x222', '\x3', 
		'\x222', '\x3', '\x222', '\x5', '\x222', '\x23EF', '\n', '\x222', '\x3', 
		'\x223', '\x3', '\x223', '\x5', '\x223', '\x23F3', '\n', '\x223', '\x3', 
		'\x224', '\x3', '\x224', '\x3', '\x224', '\x3', '\x224', '\x3', '\x224', 
		'\x3', '\x224', '\a', '\x224', '\x23FB', '\n', '\x224', '\f', '\x224', 
		'\xE', '\x224', '\x23FE', '\v', '\x224', '\x3', '\x225', '\x3', '\x225', 
		'\x3', '\x225', '\x3', '\x225', '\x3', '\x226', '\x3', '\x226', '\x3', 
		'\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', 
		'\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', 
		'\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', 
		'\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', 
		'\x226', '\x5', '\x226', '\x2419', '\n', '\x226', '\x3', '\x227', '\x3', 
		'\x227', '\x3', '\x227', '\x3', '\x227', '\x3', '\x227', '\x3', '\x227', 
		'\a', '\x227', '\x2421', '\n', '\x227', '\f', '\x227', '\xE', '\x227', 
		'\x2424', '\v', '\x227', '\x3', '\x228', '\x3', '\x228', '\x3', '\x228', 
		'\x3', '\x228', '\x3', '\x228', '\x3', '\x228', '\x3', '\x228', '\x3', 
		'\x228', '\x3', '\x228', '\x3', '\x228', '\x3', '\x228', '\x5', '\x228', 
		'\x2431', '\n', '\x228', '\x3', '\x229', '\x3', '\x229', '\x3', '\x229', 
		'\x3', '\x229', '\x3', '\x229', '\a', '\x229', '\x2438', '\n', '\x229', 
		'\f', '\x229', '\xE', '\x229', '\x243B', '\v', '\x229', '\x3', '\x22A', 
		'\x3', '\x22A', '\x3', '\x22A', '\x3', '\x22A', '\x3', '\x22A', '\x3', 
		'\x22A', '\x3', '\x22A', '\x3', '\x22A', '\x5', '\x22A', '\x2445', '\n', 
		'\x22A', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\a', '\x22B', '\x244D', '\n', '\x22B', 
		'\f', '\x22B', '\xE', '\x22B', '\x2450', '\v', '\x22B', '\x3', '\x22C', 
		'\x3', '\x22C', '\x3', '\x22C', '\x3', '\x22C', '\x3', '\x22C', '\x3', 
		'\x22C', '\x5', '\x22C', '\x2458', '\n', '\x22C', '\x3', '\x22D', '\x3', 
		'\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', 
		'\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', 
		'\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', 
		'\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', 
		'\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', 
		'\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', 
		'\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', '\x3', '\x22D', 
		'\x3', '\x22D', '\x3', '\x22D', '\x5', '\x22D', '\x247D', '\n', '\x22D', 
		'\x3', '\x22E', '\x3', '\x22E', '\x3', '\x22E', '\x3', '\x22E', '\x3', 
		'\x22E', '\x3', '\x22E', '\x3', '\x22E', '\x3', '\x22E', '\x3', '\x22E', 
		'\a', '\x22E', '\x2488', '\n', '\x22E', '\f', '\x22E', '\xE', '\x22E', 
		'\x248B', '\v', '\x22E', '\x3', '\x22F', '\x3', '\x22F', '\x3', '\x22F', 
		'\x3', '\x22F', '\x3', '\x22F', '\x3', '\x22F', '\x3', '\x22F', '\x3', 
		'\x22F', '\x3', '\x22F', '\x3', '\x22F', '\x3', '\x22F', '\x3', '\x22F', 
		'\x3', '\x22F', '\x5', '\x22F', '\x249A', '\n', '\x22F', '\x3', '\x230', 
		'\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x5', '\x230', '\x24A0', 
		'\n', '\x230', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', 
		'\x24A9', '\n', '\x231', '\x3', '\x232', '\x3', '\x232', '\x3', '\x232', 
		'\x3', '\x232', '\x3', '\x232', '\x5', '\x232', '\x24B0', '\n', '\x232', 
		'\x3', '\x233', '\x3', '\x233', '\x3', '\x233', '\x3', '\x233', '\x3', 
		'\x233', '\x3', '\x233', '\x3', '\x233', '\x3', '\x233', '\x3', '\x233', 
		'\x3', '\x233', '\x3', '\x233', '\x3', '\x233', '\x3', '\x233', '\x3', 
		'\x233', '\x3', '\x233', '\x3', '\x233', '\x5', '\x233', '\x24C2', '\n', 
		'\x233', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', 
		'\x3', '\x234', '\x5', '\x234', '\x24C9', '\n', '\x234', '\x3', '\x235', 
		'\x3', '\x235', '\x5', '\x235', '\x24CD', '\n', '\x235', '\x3', '\x236', 
		'\x3', '\x236', '\x5', '\x236', '\x24D1', '\n', '\x236', '\x3', '\x237', 
		'\x3', '\x237', '\x3', '\x237', '\x3', '\x237', '\x3', '\x237', '\x3', 
		'\x237', '\x3', '\x238', '\x3', '\x238', '\x3', '\x238', '\x3', '\x239', 
		'\x3', '\x239', '\x3', '\x239', '\x3', '\x239', '\x3', '\x239', '\x5', 
		'\x239', '\x24E1', '\n', '\x239', '\x3', '\x23A', '\x3', '\x23A', '\x3', 
		'\x23A', '\x3', '\x23A', '\x3', '\x23A', '\x5', '\x23A', '\x24E8', '\n', 
		'\x23A', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', 
		'\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', '\x3', 
		'\x23B', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23B', 
		'\x5', '\x23B', '\x24F7', '\n', '\x23B', '\x3', '\x23C', '\x3', '\x23C', 
		'\x5', '\x23C', '\x24FB', '\n', '\x23C', '\x3', '\x23D', '\x3', '\x23D', 
		'\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23D', '\x3', 
		'\x23D', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23D', 
		'\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23D', '\x3', 
		'\x23D', '\x5', '\x23D', '\x250D', '\n', '\x23D', '\x3', '\x23E', '\x3', 
		'\x23E', '\x3', '\x23F', '\x3', '\x23F', '\x3', '\x23F', '\x3', '\x23F', 
		'\x3', '\x23F', '\x3', '\x23F', '\x3', '\x23F', '\x5', '\x23F', '\x2518', 
		'\n', '\x23F', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', 
		'\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', 
		'\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', 
		'\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', 
		'\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', 
		'\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', '\x3', '\x240', 
		'\x3', '\x240', '\x3', '\x240', '\x5', '\x240', '\x2536', '\n', '\x240', 
		'\x3', '\x241', '\x3', '\x241', '\x3', '\x241', '\x3', '\x241', '\x3', 
		'\x241', '\x3', '\x241', '\x5', '\x241', '\x253E', '\n', '\x241', '\x3', 
		'\x242', '\x3', '\x242', '\x3', '\x242', '\x5', '\x242', '\x2543', '\n', 
		'\x242', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x5', '\x243', '\x2558', '\n', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', 
		'\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', '\x243', '\x3', 
		'\x243', '\x3', '\x243', '\a', '\x243', '\x262B', '\n', '\x243', '\f', 
		'\x243', '\xE', '\x243', '\x262E', '\v', '\x243', '\x3', '\x244', '\x3', 
		'\x244', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x5', '\x245', '\x2639', 
		'\n', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', 
		'\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', 
		'\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', 
		'\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', 
		'\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', 
		'\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', 
		'\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', '\x3', '\x245', 
		'\x3', '\x245', '\a', '\x245', '\x2671', '\n', '\x245', '\f', '\x245', 
		'\xE', '\x245', '\x2674', '\v', '\x245', '\x3', '\x246', '\x3', '\x246', 
		'\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', 
		'\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', 
		'\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x5', '\x246', '\x2684', 
		'\n', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', 
		'\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', 
		'\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', '\x246', '\x3', 
		'\x246', '\x5', '\x246', '\x2693', '\n', '\x246', '\x3', '\x247', '\x3', 
		'\x247', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', 
		'\x3', '\x248', '\x3', '\x248', '\x5', '\x248', '\x269D', '\n', '\x248', 
		'\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\x3', 
		'\x248', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', 
		'\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\x5', '\x248', '\x26AB', 
		'\n', '\x248', '\x3', '\x248', '\x3', '\x248', '\x3', '\x249', '\x3', 
		'\x249', '\x3', '\x249', '\x3', '\x249', '\x3', '\x249', '\x3', '\x249', 
		'\x5', '\x249', '\x26B5', '\n', '\x249', '\x3', '\x24A', '\x3', '\x24A', 
		'\x5', '\x24A', '\x26B9', '\n', '\x24A', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24B', '\x3', 
		'\x24B', '\x5', '\x24B', '\x2791', '\n', '\x24B', '\x3', '\x24C', '\x3', 
		'\x24C', '\x3', '\x24C', '\x3', '\x24C', '\x3', '\x24C', '\x5', '\x24C', 
		'\x2798', '\n', '\x24C', '\x3', '\x24D', '\x3', '\x24D', '\x3', '\x24D', 
		'\x3', '\x24D', '\x3', '\x24D', '\x3', '\x24D', '\x3', '\x24D', '\x3', 
		'\x24D', '\x3', '\x24D', '\x3', '\x24D', '\x3', '\x24D', '\x5', '\x24D', 
		'\x27A5', '\n', '\x24D', '\x3', '\x24E', '\x3', '\x24E', '\x3', '\x24E', 
		'\x3', '\x24E', '\x3', '\x24E', '\x3', '\x24F', '\x3', '\x24F', '\x3', 
		'\x24F', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x24F', '\a', '\x24F', 
		'\x27B2', '\n', '\x24F', '\f', '\x24F', '\xE', '\x24F', '\x27B5', '\v', 
		'\x24F', '\x3', '\x250', '\x3', '\x250', '\x3', '\x250', '\x3', '\x250', 
		'\x3', '\x250', '\x5', '\x250', '\x27BC', '\n', '\x250', '\x3', '\x251', 
		'\x3', '\x251', '\x3', '\x252', '\x3', '\x252', '\x3', '\x252', '\x3', 
		'\x252', '\x3', '\x252', '\x5', '\x252', '\x27C5', '\n', '\x252', '\x3', 
		'\x253', '\x3', '\x253', '\x3', '\x253', '\x3', '\x253', '\x3', '\x253', 
		'\x3', '\x253', '\x3', '\x253', '\x3', '\x253', '\x3', '\x253', '\x3', 
		'\x253', '\x3', '\x253', '\x3', '\x253', '\x3', '\x253', '\x3', '\x253', 
		'\x3', '\x253', '\x5', '\x253', '\x27D6', '\n', '\x253', '\x3', '\x254', 
		'\x3', '\x254', '\x3', '\x254', '\x3', '\x254', '\x5', '\x254', '\x27DC', 
		'\n', '\x254', '\x3', '\x255', '\x3', '\x255', '\x3', '\x255', '\x3', 
		'\x255', '\x3', '\x255', '\x3', '\x255', '\x3', '\x255', '\x5', '\x255', 
		'\x27E5', '\n', '\x255', '\x3', '\x256', '\x3', '\x256', '\x3', '\x256', 
		'\x3', '\x256', '\x3', '\x256', '\x3', '\x256', '\x3', '\x256', '\x5', 
		'\x256', '\x27EE', '\n', '\x256', '\x3', '\x257', '\x3', '\x257', '\x3', 
		'\x257', '\x5', '\x257', '\x27F3', '\n', '\x257', '\x3', '\x258', '\x3', 
		'\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', '\x3', '\x258', 
		'\a', '\x258', '\x27FB', '\n', '\x258', '\f', '\x258', '\xE', '\x258', 
		'\x27FE', '\v', '\x258', '\x3', '\x259', '\x3', '\x259', '\x3', '\x259', 
		'\x3', '\x259', '\x3', '\x25A', '\x3', '\x25A', '\x3', '\x25A', '\x3', 
		'\x25A', '\x3', '\x25A', '\x5', '\x25A', '\x2809', '\n', '\x25A', '\x3', 
		'\x25B', '\x3', '\x25B', '\x3', '\x25B', '\x3', '\x25B', '\x3', '\x25B', 
		'\x3', '\x25B', '\x3', '\x25B', '\x3', '\x25C', '\x3', '\x25C', '\x5', 
		'\x25C', '\x2814', '\n', '\x25C', '\x3', '\x25D', '\x3', '\x25D', '\x3', 
		'\x25D', '\x3', '\x25D', '\x5', '\x25D', '\x281A', '\n', '\x25D', '\x3', 
		'\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x3', '\x25E', 
		'\x3', '\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x3', 
		'\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x3', '\x25E', '\x5', '\x25E', 
		'\x2829', '\n', '\x25E', '\x3', '\x25F', '\x3', '\x25F', '\x3', '\x25F', 
		'\x3', '\x25F', '\x3', '\x25F', '\x3', '\x25F', '\x5', '\x25F', '\x2831', 
		'\n', '\x25F', '\x3', '\x260', '\x3', '\x260', '\x3', '\x260', '\x3', 
		'\x260', '\x3', '\x260', '\x3', '\x260', '\x3', '\x260', '\x3', '\x260', 
		'\x3', '\x260', '\x3', '\x260', '\x3', '\x260', '\x3', '\x260', '\x5', 
		'\x260', '\x283F', '\n', '\x260', '\x3', '\x261', '\x3', '\x261', '\x3', 
		'\x261', '\x3', '\x261', '\x3', '\x261', '\x3', '\x261', '\x3', '\x261', 
		'\x3', '\x261', '\x3', '\x261', '\x3', '\x261', '\x3', '\x261', '\x5', 
		'\x261', '\x284C', '\n', '\x261', '\x3', '\x262', '\x3', '\x262', '\x3', 
		'\x262', '\x3', '\x262', '\x3', '\x262', '\x3', '\x262', '\x3', '\x262', 
		'\x3', '\x262', '\x3', '\x262', '\x3', '\x262', '\x3', '\x262', '\x3', 
		'\x262', '\x3', '\x262', '\x3', '\x262', '\x5', '\x262', '\x285C', '\n', 
		'\x262', '\x3', '\x263', '\x3', '\x263', '\x3', '\x263', '\x3', '\x263', 
		'\x3', '\x263', '\x3', '\x263', '\x3', '\x263', '\x3', '\x263', '\x5', 
		'\x263', '\x2866', '\n', '\x263', '\x3', '\x264', '\x3', '\x264', '\x3', 
		'\x264', '\x3', '\x264', '\x3', '\x264', '\x3', '\x264', '\x3', '\x265', 
		'\x3', '\x265', '\x3', '\x266', '\x3', '\x266', '\x5', '\x266', '\x2872', 
		'\n', '\x266', '\x3', '\x267', '\x3', '\x267', '\x3', '\x268', '\x3', 
		'\x268', '\x3', '\x268', '\x3', '\x268', '\x3', '\x268', '\x3', '\x268', 
		'\x5', '\x268', '\x287C', '\n', '\x268', '\x3', '\x269', '\x3', '\x269', 
		'\x3', '\x269', '\x3', '\x269', '\x3', '\x269', '\x3', '\x269', '\x5', 
		'\x269', '\x2884', '\n', '\x269', '\x3', '\x26A', '\x3', '\x26A', '\x3', 
		'\x26A', '\x3', '\x26A', '\x3', '\x26A', '\x3', '\x26A', '\x3', '\x26A', 
		'\x3', '\x26A', '\x3', '\x26A', '\x3', '\x26A', '\x3', '\x26A', '\x3', 
		'\x26A', '\x5', '\x26A', '\x2892', '\n', '\x26A', '\x3', '\x26B', '\x3', 
		'\x26B', '\x3', '\x26B', '\x3', '\x26B', '\x3', '\x26B', '\x3', '\x26B', 
		'\a', '\x26B', '\x289A', '\n', '\x26B', '\f', '\x26B', '\xE', '\x26B', 
		'\x289D', '\v', '\x26B', '\x3', '\x26C', '\x3', '\x26C', '\x3', '\x26C', 
		'\x3', '\x26C', '\x3', '\x26C', '\x3', '\x26C', '\a', '\x26C', '\x28A5', 
		'\n', '\x26C', '\f', '\x26C', '\xE', '\x26C', '\x28A8', '\v', '\x26C', 
		'\x3', '\x26D', '\x3', '\x26D', '\x3', '\x26D', '\x3', '\x26D', '\x3', 
		'\x26D', '\x3', '\x26D', '\x3', '\x26D', '\x3', '\x26D', '\x3', '\x26D', 
		'\x5', '\x26D', '\x28B3', '\n', '\x26D', '\x3', '\x26E', '\x3', '\x26E', 
		'\x3', '\x26E', '\x3', '\x26E', '\x3', '\x26E', '\x3', '\x26E', '\a', 
		'\x26E', '\x28BB', '\n', '\x26E', '\f', '\x26E', '\xE', '\x26E', '\x28BE', 
		'\v', '\x26E', '\x3', '\x26F', '\x3', '\x26F', '\x3', '\x26F', '\x3', 
		'\x26F', '\x3', '\x26F', '\x3', '\x26F', '\x3', '\x26F', '\x3', '\x26F', 
		'\x3', '\x26F', '\x3', '\x26F', '\x5', '\x26F', '\x28CA', '\n', '\x26F', 
		'\x3', '\x270', '\x3', '\x270', '\x3', '\x270', '\x3', '\x270', '\x3', 
		'\x270', '\x3', '\x270', '\a', '\x270', '\x28D2', '\n', '\x270', '\f', 
		'\x270', '\xE', '\x270', '\x28D5', '\v', '\x270', '\x3', '\x271', '\x3', 
		'\x271', '\x3', '\x271', '\x3', '\x271', '\x3', '\x271', '\x5', '\x271', 
		'\x28DC', '\n', '\x271', '\x3', '\x272', '\x3', '\x272', '\x3', '\x272', 
		'\x3', '\x272', '\x3', '\x272', '\x3', '\x272', '\x3', '\x272', '\x3', 
		'\x272', '\x5', '\x272', '\x28E6', '\n', '\x272', '\x3', '\x273', '\x3', 
		'\x273', '\x3', '\x274', '\x3', '\x274', '\x3', '\x274', '\x3', '\x274', 
		'\x3', '\x274', '\x3', '\x274', '\x3', '\x274', '\x3', '\x274', '\x3', 
		'\x274', '\x3', '\x274', '\x3', '\x274', '\x3', '\x274', '\x3', '\x274', 
		'\x3', '\x274', '\x5', '\x274', '\x28F8', '\n', '\x274', '\x3', '\x275', 
		'\x3', '\x275', '\x3', '\x275', '\x3', '\x275', '\x3', '\x275', '\x5', 
		'\x275', '\x28FF', '\n', '\x275', '\x3', '\x276', '\x3', '\x276', '\x3', 
		'\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', 
		'\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', 
		'\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', 
		'\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', 
		'\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x3', '\x276', 
		'\x3', '\x276', '\x3', '\x276', '\x3', '\x276', '\x5', '\x276', '\x291D', 
		'\n', '\x276', '\x3', '\x277', '\x3', '\x277', '\x3', '\x277', '\x3', 
		'\x277', '\x3', '\x277', '\x3', '\x277', '\x3', '\x277', '\x5', '\x277', 
		'\x2926', '\n', '\x277', '\x3', '\x278', '\x3', '\x278', '\x3', '\x278', 
		'\x3', '\x278', '\x3', '\x278', '\x5', '\x278', '\x292D', '\n', '\x278', 
		'\x3', '\x279', '\x3', '\x279', '\x3', '\x279', '\x3', '\x279', '\x3', 
		'\x279', '\x3', '\x279', '\x3', '\x27A', '\x3', '\x27A', '\x3', '\x27A', 
		'\x3', '\x27A', '\x3', '\x27A', '\a', '\x27A', '\x293A', '\n', '\x27A', 
		'\f', '\x27A', '\xE', '\x27A', '\x293D', '\v', '\x27A', '\x3', '\x27B', 
		'\x3', '\x27B', '\x3', '\x27B', '\x3', '\x27B', '\x3', '\x27B', '\x3', 
		'\x27C', '\x3', '\x27C', '\x3', '\x27C', '\x5', '\x27C', '\x2947', '\n', 
		'\x27C', '\x3', '\x27D', '\x3', '\x27D', '\x5', '\x27D', '\x294B', '\n', 
		'\x27D', '\x3', '\x27E', '\x3', '\x27E', '\x3', '\x27E', '\x3', '\x27E', 
		'\x5', '\x27E', '\x2951', '\n', '\x27E', '\x3', '\x27F', '\x3', '\x27F', 
		'\x3', '\x27F', '\x3', '\x27F', '\x3', '\x27F', '\x3', '\x27F', '\x3', 
		'\x27F', '\x3', '\x27F', '\x3', '\x27F', '\x3', '\x27F', '\x3', '\x27F', 
		'\x3', '\x27F', '\x3', '\x27F', '\x3', '\x27F', '\x5', '\x27F', '\x2961', 
		'\n', '\x27F', '\x3', '\x280', '\x3', '\x280', '\x5', '\x280', '\x2965', 
		'\n', '\x280', '\x3', '\x281', '\x3', '\x281', '\x3', '\x281', '\x3', 
		'\x281', '\x3', '\x281', '\a', '\x281', '\x296C', '\n', '\x281', '\f', 
		'\x281', '\xE', '\x281', '\x296F', '\v', '\x281', '\x3', '\x282', '\x3', 
		'\x282', '\x3', '\x282', '\a', '\x282', '\x2974', '\n', '\x282', '\f', 
		'\x282', '\xE', '\x282', '\x2977', '\v', '\x282', '\x3', '\x283', '\x3', 
		'\x283', '\x5', '\x283', '\x297B', '\n', '\x283', '\x3', '\x284', '\x3', 
		'\x284', '\x5', '\x284', '\x297F', '\n', '\x284', '\x3', '\x285', '\x3', 
		'\x285', '\x3', '\x285', '\a', '\x285', '\x2984', '\n', '\x285', '\f', 
		'\x285', '\xE', '\x285', '\x2987', '\v', '\x285', '\x3', '\x286', '\x3', 
		'\x286', '\x3', '\x286', '\x3', '\x286', '\x3', '\x286', '\x5', '\x286', 
		'\x298E', '\n', '\x286', '\x3', '\x286', '\x5', '\x286', '\x2991', '\n', 
		'\x286', '\x3', '\x287', '\x3', '\x287', '\x3', '\x287', '\x3', '\x287', 
		'\x3', '\x287', '\x3', '\x287', '\a', '\x287', '\x2999', '\n', '\x287', 
		'\f', '\x287', '\xE', '\x287', '\x299C', '\v', '\x287', '\x3', '\x288', 
		'\x3', '\x288', '\x3', '\x288', '\x3', '\x288', '\x5', '\x288', '\x29A2', 
		'\n', '\x288', '\x3', '\x289', '\x3', '\x289', '\x3', '\x289', '\x3', 
		'\x289', '\x3', '\x289', '\x3', '\x289', '\a', '\x289', '\x29AA', '\n', 
		'\x289', '\f', '\x289', '\xE', '\x289', '\x29AD', '\v', '\x289', '\x3', 
		'\x28A', '\x3', '\x28A', '\x3', '\x28B', '\x3', '\x28B', '\x3', '\x28C', 
		'\x3', '\x28C', '\x3', '\x28D', '\x3', '\x28D', '\x3', '\x28D', '\x3', 
		'\x28D', '\x5', '\x28D', '\x29B9', '\n', '\x28D', '\x3', '\x28E', '\x3', 
		'\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', 
		'\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', 
		'\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', 
		'\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', 
		'\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', 
		'\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x3', 
		'\x28E', '\x3', '\x28E', '\x3', '\x28E', '\x5', '\x28E', '\x29DA', '\n', 
		'\x28E', '\x3', '\x28F', '\x3', '\x28F', '\x3', '\x290', '\x3', '\x290', 
		'\x3', '\x291', '\x3', '\x291', '\x3', '\x292', '\x3', '\x292', '\x3', 
		'\x293', '\x3', '\x293', '\x3', '\x293', '\x3', '\x294', '\x3', '\x294', 
		'\x3', '\x294', '\x3', '\x294', '\a', '\x294', '\x29EB', '\n', '\x294', 
		'\f', '\x294', '\xE', '\x294', '\x29EE', '\v', '\x294', '\x3', '\x294', 
		'\x3', '\x294', '\x5', '\x294', '\x29F2', '\n', '\x294', '\x3', '\x295', 
		'\x3', '\x295', '\x3', '\x295', '\x5', '\x295', '\x29F7', '\n', '\x295', 
		'\x3', '\x296', '\x3', '\x296', '\x3', '\x296', '\x3', '\x296', '\x3', 
		'\x296', '\x5', '\x296', '\x29FE', '\n', '\x296', '\x3', '\x297', '\x3', 
		'\x297', '\x3', '\x298', '\x3', '\x298', '\x3', '\x298', '\x5', '\x298', 
		'\x2A05', '\n', '\x298', '\x3', '\x299', '\x3', '\x299', '\x3', '\x299', 
		'\x3', '\x299', '\x3', '\x299', '\x3', '\x299', '\a', '\x299', '\x2A0D', 
		'\n', '\x299', '\f', '\x299', '\xE', '\x299', '\x2A10', '\v', '\x299', 
		'\x3', '\x29A', '\x3', '\x29A', '\x3', '\x29A', '\x3', '\x29A', '\x5', 
		'\x29A', '\x2A16', '\n', '\x29A', '\x3', '\x29B', '\x3', '\x29B', '\x3', 
		'\x29B', '\x3', '\x29B', '\x5', '\x29B', '\x2A1C', '\n', '\x29B', '\x3', 
		'\x29C', '\x3', '\x29C', '\x3', '\x29C', '\x3', '\x29C', '\x5', '\x29C', 
		'\x2A22', '\n', '\x29C', '\x3', '\x29D', '\x3', '\x29D', '\x3', '\x29D', 
		'\x3', '\x29D', '\x3', '\x29D', '\x3', '\x29D', '\x5', '\x29D', '\x2A2A', 
		'\n', '\x29D', '\x3', '\x29E', '\x3', '\x29E', '\x3', '\x29E', '\x3', 
		'\x29E', '\x3', '\x29E', '\x3', '\x29E', '\x3', '\x29E', '\x5', '\x29E', 
		'\x2A33', '\n', '\x29E', '\x3', '\x29F', '\x3', '\x29F', '\x3', '\x2A0', 
		'\x3', '\x2A0', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', 
		'\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', 
		'\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', 
		'\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', 
		'\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', 
		'\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', 
		'\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', 
		'\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', 
		'\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', 
		'\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', 
		'\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x3', 
		'\x2A1', '\x3', '\x2A1', '\x3', '\x2A1', '\x5', '\x2A1', '\x2A6C', '\n', 
		'\x2A1', '\x3', '\x2A2', '\x3', '\x2A2', '\x3', '\x2A3', '\x3', '\x2A3', 
		'\x3', '\x2A4', '\x3', '\x2A4', '\x3', '\x2A4', '\x3', '\x2A4', '\x3', 
		'\x2A5', '\x3', '\x2A5', '\x3', '\x2A5', '\a', '\x2A5', '\x2A79', '\n', 
		'\x2A5', '\f', '\x2A5', '\xE', '\x2A5', '\x2A7C', '\v', '\x2A5', '\x3', 
		'\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', 
		'\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', 
		'\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', 
		'\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', '\x2A6', '\x3', 
		'\x2A6', '\x3', '\x2A6', '\x5', '\x2A6', '\x2A92', '\n', '\x2A6', '\x3', 
		'\x2A7', '\x3', '\x2A7', '\x3', '\x2A8', '\x3', '\x2A8', '\x3', '\x2A8', 
		'\x3', '\x2A8', '\x5', '\x2A8', '\x2A9A', '\n', '\x2A8', '\x3', '\x2A9', 
		'\x3', '\x2A9', '\x5', '\x2A9', '\x2A9E', '\n', '\x2A9', '\x3', '\x2AA', 
		'\x3', '\x2AA', '\x3', '\x2AA', '\x3', '\x2AA', '\x3', '\x2AA', '\x3', 
		'\x2AA', '\x3', '\x2AA', '\x3', '\x2AB', '\x3', '\x2AB', '\x3', '\x2AB', 
		'\x3', '\x2AB', '\x3', '\x2AB', '\x3', '\x2AB', '\x3', '\x2AB', '\x3', 
		'\x2AB', '\x5', '\x2AB', '\x2AAF', '\n', '\x2AB', '\x3', '\x2AC', '\x3', 
		'\x2AC', '\x3', '\x2AD', '\x3', '\x2AD', '\x3', '\x2AD', '\x3', '\x2AD', 
		'\x3', '\x2AD', '\a', '\x2AD', '\x2AB8', '\n', '\x2AD', '\f', '\x2AD', 
		'\xE', '\x2AD', '\x2ABB', '\v', '\x2AD', '\x3', '\x2AE', '\x3', '\x2AE', 
		'\x3', '\x2AE', '\x3', '\x2AE', '\x3', '\x2AF', '\x3', '\x2AF', '\x3', 
		'\x2AF', '\x5', '\x2AF', '\x2AC4', '\n', '\x2AF', '\x3', '\x2B0', '\x3', 
		'\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', 
		'\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', 
		'\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', 
		'\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x3', 
		'\x2B0', '\x3', '\x2B0', '\x3', '\x2B0', '\x5', '\x2B0', '\x2ADC', '\n', 
		'\x2B0', '\x3', '\x2B1', '\x3', '\x2B1', '\x3', '\x2B1', '\x3', '\x2B1', 
		'\x5', '\x2B1', '\x2AE2', '\n', '\x2B1', '\x3', '\x2B2', '\x3', '\x2B2', 
		'\x3', '\x2B3', '\x3', '\x2B3', '\x3', '\x2B3', '\x3', '\x2B3', '\x3', 
		'\x2B3', '\x5', '\x2B3', '\x2AEB', '\n', '\x2B3', '\x3', '\x2B4', '\x3', 
		'\x2B4', '\x3', '\x2B4', '\x3', '\x2B4', '\x3', '\x2B4', '\x3', '\x2B4', 
		'\a', '\x2B4', '\x2AF3', '\n', '\x2B4', '\f', '\x2B4', '\xE', '\x2B4', 
		'\x2AF6', '\v', '\x2B4', '\x3', '\x2B5', '\x3', '\x2B5', '\x3', '\x2B5', 
		'\x3', '\x2B6', '\x3', '\x2B6', '\x3', '\x2B7', '\x3', '\x2B7', '\x5', 
		'\x2B7', '\x2AFF', '\n', '\x2B7', '\x3', '\x2B8', '\x3', '\x2B8', '\x3', 
		'\x2B9', '\x3', '\x2B9', '\x5', '\x2B9', '\x2B05', '\n', '\x2B9', '\x3', 
		'\x2BA', '\x3', '\x2BA', '\x3', '\x2BB', '\x3', '\x2BB', '\x3', '\x2BB', 
		'\x5', '\x2BB', '\x2B0C', '\n', '\x2BB', '\x3', '\x2BC', '\x3', '\x2BC', 
		'\x3', '\x2BC', '\x5', '\x2BC', '\x2B11', '\n', '\x2BC', '\x3', '\x2BD', 
		'\x3', '\x2BD', '\x3', '\x2BD', '\x3', '\x2BD', '\x5', '\x2BD', '\x2B17', 
		'\n', '\x2BD', '\x3', '\x2BE', '\x3', '\x2BE', '\x5', '\x2BE', '\x2B1B', 
		'\n', '\x2BE', '\x3', '\x2BF', '\x3', '\x2BF', '\x3', '\x2C0', '\x3', 
		'\x2C0', '\x3', '\x2C0', '\a', '\x2C0', '\x2B22', '\n', '\x2C0', '\f', 
		'\x2C0', '\xE', '\x2C0', '\x2B25', '\v', '\x2C0', '\x3', '\x2C1', '\x3', 
		'\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', 
		'\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', 
		'\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', 
		'\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', 
		'\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', 
		'\x3', '\x2C1', '\x3', '\x2C1', '\x3', '\x2C1', '\x5', '\x2C1', '\x2B42', 
		'\n', '\x2C1', '\x3', '\x2C2', '\x3', '\x2C2', '\x3', '\x2C2', '\x3', 
		'\x2C2', '\x3', '\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', 
		'\x3', '\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', '\x3', 
		'\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', '\x3', '\x2C3', 
		'\x3', '\x2C3', '\x5', '\x2C3', '\x2B56', '\n', '\x2C3', '\x3', '\x2C4', 
		'\x3', '\x2C4', '\x5', '\x2C4', '\x2B5A', '\n', '\x2C4', '\x3', '\x2C5', 
		'\x3', '\x2C5', '\x3', '\x2C5', '\x3', '\x2C5', '\x3', '\x2C5', '\x3', 
		'\x2C6', '\x3', '\x2C6', '\x3', '\x2C6', '\x3', '\x2C6', '\x3', '\x2C6', 
		'\x3', '\x2C6', '\x3', '\x2C7', '\x3', '\x2C7', '\x3', '\x2C7', '\x5', 
		'\x2C7', '\x2B6A', '\n', '\x2C7', '\x3', '\x2C8', '\x3', '\x2C8', '\x3', 
		'\x2C8', '\x3', '\x2C8', '\x3', '\x2C8', '\x3', '\x2C8', '\a', '\x2C8', 
		'\x2B72', '\n', '\x2C8', '\f', '\x2C8', '\xE', '\x2C8', '\x2B75', '\v', 
		'\x2C8', '\x3', '\x2C9', '\x3', '\x2C9', '\x3', '\x2C9', '\x3', '\x2C9', 
		'\x3', '\x2CA', '\x3', '\x2CA', '\x3', '\x2CB', '\x3', '\x2CB', '\x3', 
		'\x2CC', '\x3', '\x2CC', '\x3', '\x2CC', '\x5', '\x2CC', '\x2B82', '\n', 
		'\x2CC', '\x3', '\x2CC', '\x3', '\x2CC', '\x3', '\x2CC', '\x3', '\x2CC', 
		'\x3', '\x2CC', '\a', '\x2CC', '\x2B89', '\n', '\x2CC', '\f', '\x2CC', 
		'\xE', '\x2CC', '\x2B8C', '\v', '\x2CC', '\x3', '\x2CD', '\x3', '\x2CD', 
		'\x3', '\x2CD', '\x3', '\x2CD', '\x3', '\x2CD', '\x3', '\x2CD', '\x3', 
		'\x2CD', '\x3', '\x2CD', '\x3', '\x2CD', '\x3', '\x2CD', '\x3', '\x2CE', 
		'\x3', '\x2CE', '\x3', '\x2CE', '\x3', '\x2CE', '\x3', '\x2CE', '\x3', 
		'\x2CE', '\x3', '\x2CE', '\a', '\x2CE', '\x2B9F', '\n', '\x2CE', '\f', 
		'\x2CE', '\xE', '\x2CE', '\x2BA2', '\v', '\x2CE', '\x3', '\x2CF', '\x3', 
		'\x2CF', '\x3', '\x2CF', '\x5', '\x2CF', '\x2BA7', '\n', '\x2CF', '\x3', 
		'\x2D0', '\x3', '\x2D0', '\x3', '\x2D0', '\x3', '\x2D0', '\x3', '\x2D0', 
		'\x3', '\x2D0', '\x3', '\x2D0', '\x3', '\x2D0', '\x3', '\x2D1', '\x3', 
		'\x2D1', '\x5', '\x2D1', '\x2BB3', '\n', '\x2D1', '\x3', '\x2D2', '\x3', 
		'\x2D2', '\x3', '\x2D2', '\x3', '\x2D2', '\x3', '\x2D2', '\a', '\x2D2', 
		'\x2BBA', '\n', '\x2D2', '\f', '\x2D2', '\xE', '\x2D2', '\x2BBD', '\v', 
		'\x2D2', '\x3', '\x2D3', '\x3', '\x2D3', '\x3', '\x2D3', '\x3', '\x2D3', 
		'\x3', '\x2D3', '\x3', '\x2D4', '\x3', '\x2D4', '\x3', '\x2D4', '\x5', 
		'\x2D4', '\x2BC7', '\n', '\x2D4', '\x3', '\x2D5', '\x3', '\x2D5', '\x3', 
		'\x2D5', '\x3', '\x2D6', '\x3', '\x2D6', '\x3', '\x2D6', '\x3', '\x2D6', 
		'\x3', '\x2D6', '\x3', '\x2D7', '\x3', '\x2D7', '\x3', '\x2D7', '\x3', 
		'\x2D7', '\x3', '\x2D7', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', 
		'\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', 
		'\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', 
		'\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', 
		'\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', 
		'\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', '\x2D8', '\x3', 
		'\x2D8', '\x3', '\x2D8', '\x5', '\x2D8', '\x2BF1', '\n', '\x2D8', '\x3', 
		'\x2D9', '\x3', '\x2D9', '\x3', '\x2D9', '\x5', '\x2D9', '\x2BF6', '\n', 
		'\x2D9', '\x3', '\x2DA', '\x3', '\x2DA', '\x3', '\x2DA', '\x3', '\x2DA', 
		'\x3', '\x2DA', '\a', '\x2DA', '\x2BFD', '\n', '\x2DA', '\f', '\x2DA', 
		'\xE', '\x2DA', '\x2C00', '\v', '\x2DA', '\x3', '\x2DA', '\x3', '\x2DA', 
		'\x5', '\x2DA', '\x2C04', '\n', '\x2DA', '\x3', '\x2DB', '\x3', '\x2DB', 
		'\x5', '\x2DB', '\x2C08', '\n', '\x2DB', '\x3', '\x2DC', '\x3', '\x2DC', 
		'\x3', '\x2DC', '\x5', '\x2DC', '\x2C0D', '\n', '\x2DC', '\x3', '\x2DD', 
		'\x3', '\x2DD', '\x3', '\x2DE', '\x3', '\x2DE', '\x3', '\x2DE', '\x3', 
		'\x2DE', '\x3', '\x2DE', '\x3', '\x2DE', '\x3', '\x2DE', '\x3', '\x2DE', 
		'\x3', '\x2DE', '\x3', '\x2DF', '\x3', '\x2DF', '\x3', '\x2DF', '\x5', 
		'\x2DF', '\x2C1D', '\n', '\x2DF', '\x3', '\x2E0', '\x3', '\x2E0', '\x3', 
		'\x2E0', '\x3', '\x2E0', '\x3', '\x2E1', '\x3', '\x2E1', '\x3', '\x2E2', 
		'\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', 
		'\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', 
		'\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', 
		'\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', '\x3', '\x2E2', 
		'\x3', '\x2E2', '\x3', '\x2E2', '\x5', '\x2E2', '\x2C3A', '\n', '\x2E2', 
		'\x3', '\x2E3', '\x3', '\x2E3', '\x5', '\x2E3', '\x2C3E', '\n', '\x2E3', 
		'\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', 
		'\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', 
		'\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', 
		'\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', 
		'\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', 
		'\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x3', '\x2E4', '\x5', '\x2E4', 
		'\x2C5A', '\n', '\x2E4', '\x3', '\x2E5', '\x3', '\x2E5', '\x3', '\x2E5', 
		'\x3', '\x2E5', '\x3', '\x2E5', '\x3', '\x2E5', '\x3', '\x2E5', '\x3', 
		'\x2E5', '\x5', '\x2E5', '\x2C64', '\n', '\x2E5', '\x3', '\x2E6', '\x3', 
		'\x2E6', '\x3', '\x2E6', '\x5', '\x2E6', '\x2C69', '\n', '\x2E6', '\x3', 
		'\x2E6', '\x3', '\x2E6', '\x3', '\x2E6', '\a', '\x2E6', '\x2C6E', '\n', 
		'\x2E6', '\f', '\x2E6', '\xE', '\x2E6', '\x2C71', '\v', '\x2E6', '\x3', 
		'\x2E7', '\x3', '\x2E7', '\x3', '\x2E7', '\x5', '\x2E7', '\x2C76', '\n', 
		'\x2E7', '\x3', '\x2E8', '\x3', '\x2E8', '\x3', '\x2E8', '\x3', '\x2E8', 
		'\x3', '\x2E9', '\x3', '\x2E9', '\x3', '\x2E9', '\x3', '\x2E9', '\x3', 
		'\x2E9', '\x5', '\x2E9', '\x2C81', '\n', '\x2E9', '\x3', '\x2EA', '\x3', 
		'\x2EA', '\x3', '\x2EA', '\x3', '\x2EA', '\x3', '\x2EA', '\x3', '\x2EB', 
		'\x3', '\x2EB', '\x3', '\x2EB', '\x5', '\x2EB', '\x2C8B', '\n', '\x2EB', 
		'\x3', '\x2EC', '\x3', '\x2EC', '\x3', '\x2EC', '\x3', '\x2EC', '\x3', 
		'\x2EC', '\x3', '\x2EC', '\x3', '\x2EC', '\x3', '\x2ED', '\x3', '\x2ED', 
		'\x3', '\x2ED', '\x3', '\x2EE', '\x3', '\x2EE', '\x3', '\x2EE', '\x3', 
		'\x2EE', '\x3', '\x2EE', '\x3', '\x2EE', '\x3', '\x2EE', '\x3', '\x2EE', 
		'\x3', '\x2EE', '\x5', '\x2EE', '\x2CA0', '\n', '\x2EE', '\x3', '\x2EE', 
		'\x3', '\x2EE', '\x3', '\x2EF', '\x3', '\x2EF', '\x3', '\x2EF', '\x5', 
		'\x2EF', '\x2CA7', '\n', '\x2EF', '\x3', '\x2F0', '\x3', '\x2F0', '\x3', 
		'\x2F0', '\x3', '\x2F0', '\x3', '\x2F0', '\x3', '\x2F0', '\a', '\x2F0', 
		'\x2CAF', '\n', '\x2F0', '\f', '\x2F0', '\xE', '\x2F0', '\x2CB2', '\v', 
		'\x2F0', '\x3', '\x2F1', '\x3', '\x2F1', '\x3', '\x2F1', '\x3', '\x2F1', 
		'\x3', '\x2F1', '\x3', '\x2F1', '\x5', '\x2F1', '\x2CBA', '\n', '\x2F1', 
		'\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', 
		'\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', 
		'\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', 
		'\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', 
		'\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x3', 
		'\x2F2', '\x3', '\x2F2', '\x3', '\x2F2', '\x5', '\x2F2', '\x2CD5', '\n', 
		'\x2F2', '\x3', '\x2F3', '\x3', '\x2F3', '\x3', '\x2F3', '\x3', '\x2F3', 
		'\x3', '\x2F3', '\x5', '\x2F3', '\x2CDC', '\n', '\x2F3', '\x3', '\x2F4', 
		'\x3', '\x2F4', '\x3', '\x2F4', '\x3', '\x2F4', '\x3', '\x2F4', '\x3', 
		'\x2F4', '\a', '\x2F4', '\x2CE4', '\n', '\x2F4', '\f', '\x2F4', '\xE', 
		'\x2F4', '\x2CE7', '\v', '\x2F4', '\x3', '\x2F5', '\x3', '\x2F5', '\x3', 
		'\x2F5', '\x5', '\x2F5', '\x2CEC', '\n', '\x2F5', '\x3', '\x2F6', '\x3', 
		'\x2F6', '\x3', '\x2F6', '\a', '\x2F6', '\x2CF1', '\n', '\x2F6', '\f', 
		'\x2F6', '\xE', '\x2F6', '\x2CF4', '\v', '\x2F6', '\x3', '\x2F7', '\x3', 
		'\x2F7', '\x3', '\x2F7', '\x3', '\x2F7', '\x5', '\x2F7', '\x2CFA', '\n', 
		'\x2F7', '\x3', '\x2F8', '\x3', '\x2F8', '\x5', '\x2F8', '\x2CFE', '\n', 
		'\x2F8', '\x3', '\x2F9', '\x3', '\x2F9', '\x3', '\x2F9', '\x3', '\x2F9', 
		'\x3', '\x2F9', '\x3', '\x2F9', '\x3', '\x2F9', '\x3', '\x2F9', '\x3', 
		'\x2FA', '\x3', '\x2FA', '\x3', '\x2FB', '\x3', '\x2FB', '\x3', '\x2FB', 
		'\x5', '\x2FB', '\x2D0D', '\n', '\x2FB', '\x3', '\x2FC', '\x3', '\x2FC', 
		'\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', 
		'\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', 
		'\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', 
		'\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', '\x3', '\x2FC', 
		'\x3', '\x2FC', '\x3', '\x2FC', '\x5', '\x2FC', '\x2D25', '\n', '\x2FC', 
		'\x3', '\x2FD', '\x3', '\x2FD', '\x3', '\x2FD', '\x3', '\x2FD', '\x3', 
		'\x2FD', '\x3', '\x2FE', '\x3', '\x2FE', '\x3', '\x2FE', '\x3', '\x2FE', 
		'\x3', '\x2FF', '\x3', '\x2FF', '\x3', '\x2FF', '\x3', '\x300', '\x3', 
		'\x300', '\x3', '\x300', '\x3', '\x300', '\x3', '\x301', '\x3', '\x301', 
		'\x3', '\x301', '\x3', '\x301', '\x3', '\x302', '\x3', '\x302', '\x3', 
		'\x302', '\x3', '\x302', '\x3', '\x302', '\x3', '\x302', '\x5', '\x302', 
		'\x2D41', '\n', '\x302', '\x3', '\x303', '\x3', '\x303', '\x3', '\x303', 
		'\x3', '\x303', '\x3', '\x303', '\x3', '\x303', '\x3', '\x303', '\x3', 
		'\x303', '\x3', '\x303', '\x3', '\x303', '\x3', '\x303', '\x3', '\x303', 
		'\x3', '\x303', '\x5', '\x303', '\x2D50', '\n', '\x303', '\x3', '\x304', 
		'\x3', '\x304', '\x5', '\x304', '\x2D54', '\n', '\x304', '\x3', '\x305', 
		'\x3', '\x305', '\x3', '\x305', '\x5', '\x305', '\x2D59', '\n', '\x305', 
		'\x3', '\x306', '\x3', '\x306', '\x3', '\x306', '\x3', '\x306', '\x3', 
		'\x306', '\a', '\x306', '\x2D60', '\n', '\x306', '\f', '\x306', '\xE', 
		'\x306', '\x2D63', '\v', '\x306', '\x3', '\x307', '\x3', '\x307', '\x3', 
		'\x307', '\x3', '\x307', '\x3', '\x307', '\x3', '\x308', '\x3', '\x308', 
		'\x3', '\x308', '\x3', '\x308', '\x3', '\x308', '\x3', '\x308', '\a', 
		'\x308', '\x2D70', '\n', '\x308', '\f', '\x308', '\xE', '\x308', '\x2D73', 
		'\v', '\x308', '\x3', '\x309', '\x3', '\x309', '\x3', '\x309', '\x5', 
		'\x309', '\x2D78', '\n', '\x309', '\x3', '\x30A', '\x3', '\x30A', '\x5', 
		'\x30A', '\x2D7C', '\n', '\x30A', '\x3', '\x30B', '\x3', '\x30B', '\x5', 
		'\x30B', '\x2D80', '\n', '\x30B', '\x3', '\x30C', '\x3', '\x30C', '\x5', 
		'\x30C', '\x2D84', '\n', '\x30C', '\x3', '\x30D', '\x3', '\x30D', '\x3', 
		'\x30D', '\x5', '\x30D', '\x2D89', '\n', '\x30D', '\x3', '\x30E', '\x3', 
		'\x30E', '\x5', '\x30E', '\x2D8D', '\n', '\x30E', '\x3', '\x30F', '\x3', 
		'\x30F', '\x3', '\x310', '\x3', '\x310', '\x3', '\x310', '\x3', '\x310', 
		'\x3', '\x310', '\x3', '\x310', '\x3', '\x310', '\x3', '\x310', '\x3', 
		'\x311', '\x3', '\x311', '\x3', '\x312', '\x3', '\x312', '\x3', '\x313', 
		'\x3', '\x313', '\x3', '\x314', '\x3', '\x314', '\x3', '\x315', '\x3', 
		'\x315', '\x3', '\x315', '\x3', '\x316', '\x3', '\x316', '\x3', '\x316', 
		'\x3', '\x316', '\x3', '\x316', '\x5', '\x316', '\x2DA9', '\n', '\x316', 
		'\x3', '\x316', '\x2', 'p', '\x14', '\x16', '\x30', '<', '>', '\x64', 
		'z', '~', '\x86', '\x8A', '\x9A', '\xA4', '\xAA', '\xB6', '\xB8', '\xC2', 
		'\xCE', '\xDA', '\xE2', '\xF6', '\x120', '\x128', '\x140', '\x146', '\x150', 
		'\x158', '\x15C', '\x19A', '\x1A0', '\x1B4', '\x1BA', '\x1C0', '\x1C4', 
		'\x1D0', '\x1D8', '\x1DE', '\x1E6', '\x1F6', '\x20C', '\x210', '\x212', 
		'\x230', '\x236', '\x246', '\x258', '\x260', '\x270', '\x272', '\x278', 
		'\x28A', '\x28E', '\x298', '\x29E', '\x2A2', '\x2B0', '\x2B6', '\x2CE', 
		'\x2E2', '\x2F6', '\x302', '\x31A', '\x32A', '\x338', '\x356', '\x36C', 
		'\x374', '\x390', '\x3AA', '\x3B0', '\x3B6', '\x3C2', '\x3CA', '\x3FE', 
		'\x410', '\x418', '\x41E', '\x42E', '\x43A', '\x446', '\x44C', '\x450', 
		'\x454', '\x45A', '\x484', '\x488', '\x49C', '\x4AE', '\x4D4', '\x4D6', 
		'\x4DA', '\x4DE', '\x4F2', '\x500', '\x502', '\x50C', '\x510', '\x530', 
		'\x548', '\x558', '\x566', '\x57E', '\x58E', '\x596', '\x59A', '\x5A2', 
		'\x5CA', '\x5DE', '\x5E6', '\x60A', '\x60E', '\x317', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', 
		'\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', 
		'\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', 
		'\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', 
		'\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', 
		'\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', 
		'\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', 
		'\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', 
		'\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', 
		'\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', 
		'\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', 
		'\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', 
		'\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', 
		'\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', 
		'\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', 
		'\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', 
		'\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', 
		'\x1E0', '\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', 
		'\x1F0', '\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', 
		'\x200', '\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', 
		'\x210', '\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', 
		'\x220', '\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', 
		'\x230', '\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', 
		'\x240', '\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', 
		'\x250', '\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', 
		'\x260', '\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E', 
		'\x270', '\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', '\x27E', 
		'\x280', '\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', '\x28E', 
		'\x290', '\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', '\x29E', 
		'\x2A0', '\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', 
		'\x2B0', '\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', 
		'\x2C0', '\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', 
		'\x2D0', '\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', 
		'\x2E0', '\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', 
		'\x2F0', '\x2F2', '\x2F4', '\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', 
		'\x300', '\x302', '\x304', '\x306', '\x308', '\x30A', '\x30C', '\x30E', 
		'\x310', '\x312', '\x314', '\x316', '\x318', '\x31A', '\x31C', '\x31E', 
		'\x320', '\x322', '\x324', '\x326', '\x328', '\x32A', '\x32C', '\x32E', 
		'\x330', '\x332', '\x334', '\x336', '\x338', '\x33A', '\x33C', '\x33E', 
		'\x340', '\x342', '\x344', '\x346', '\x348', '\x34A', '\x34C', '\x34E', 
		'\x350', '\x352', '\x354', '\x356', '\x358', '\x35A', '\x35C', '\x35E', 
		'\x360', '\x362', '\x364', '\x366', '\x368', '\x36A', '\x36C', '\x36E', 
		'\x370', '\x372', '\x374', '\x376', '\x378', '\x37A', '\x37C', '\x37E', 
		'\x380', '\x382', '\x384', '\x386', '\x388', '\x38A', '\x38C', '\x38E', 
		'\x390', '\x392', '\x394', '\x396', '\x398', '\x39A', '\x39C', '\x39E', 
		'\x3A0', '\x3A2', '\x3A4', '\x3A6', '\x3A8', '\x3AA', '\x3AC', '\x3AE', 
		'\x3B0', '\x3B2', '\x3B4', '\x3B6', '\x3B8', '\x3BA', '\x3BC', '\x3BE', 
		'\x3C0', '\x3C2', '\x3C4', '\x3C6', '\x3C8', '\x3CA', '\x3CC', '\x3CE', 
		'\x3D0', '\x3D2', '\x3D4', '\x3D6', '\x3D8', '\x3DA', '\x3DC', '\x3DE', 
		'\x3E0', '\x3E2', '\x3E4', '\x3E6', '\x3E8', '\x3EA', '\x3EC', '\x3EE', 
		'\x3F0', '\x3F2', '\x3F4', '\x3F6', '\x3F8', '\x3FA', '\x3FC', '\x3FE', 
		'\x400', '\x402', '\x404', '\x406', '\x408', '\x40A', '\x40C', '\x40E', 
		'\x410', '\x412', '\x414', '\x416', '\x418', '\x41A', '\x41C', '\x41E', 
		'\x420', '\x422', '\x424', '\x426', '\x428', '\x42A', '\x42C', '\x42E', 
		'\x430', '\x432', '\x434', '\x436', '\x438', '\x43A', '\x43C', '\x43E', 
		'\x440', '\x442', '\x444', '\x446', '\x448', '\x44A', '\x44C', '\x44E', 
		'\x450', '\x452', '\x454', '\x456', '\x458', '\x45A', '\x45C', '\x45E', 
		'\x460', '\x462', '\x464', '\x466', '\x468', '\x46A', '\x46C', '\x46E', 
		'\x470', '\x472', '\x474', '\x476', '\x478', '\x47A', '\x47C', '\x47E', 
		'\x480', '\x482', '\x484', '\x486', '\x488', '\x48A', '\x48C', '\x48E', 
		'\x490', '\x492', '\x494', '\x496', '\x498', '\x49A', '\x49C', '\x49E', 
		'\x4A0', '\x4A2', '\x4A4', '\x4A6', '\x4A8', '\x4AA', '\x4AC', '\x4AE', 
		'\x4B0', '\x4B2', '\x4B4', '\x4B6', '\x4B8', '\x4BA', '\x4BC', '\x4BE', 
		'\x4C0', '\x4C2', '\x4C4', '\x4C6', '\x4C8', '\x4CA', '\x4CC', '\x4CE', 
		'\x4D0', '\x4D2', '\x4D4', '\x4D6', '\x4D8', '\x4DA', '\x4DC', '\x4DE', 
		'\x4E0', '\x4E2', '\x4E4', '\x4E6', '\x4E8', '\x4EA', '\x4EC', '\x4EE', 
		'\x4F0', '\x4F2', '\x4F4', '\x4F6', '\x4F8', '\x4FA', '\x4FC', '\x4FE', 
		'\x500', '\x502', '\x504', '\x506', '\x508', '\x50A', '\x50C', '\x50E', 
		'\x510', '\x512', '\x514', '\x516', '\x518', '\x51A', '\x51C', '\x51E', 
		'\x520', '\x522', '\x524', '\x526', '\x528', '\x52A', '\x52C', '\x52E', 
		'\x530', '\x532', '\x534', '\x536', '\x538', '\x53A', '\x53C', '\x53E', 
		'\x540', '\x542', '\x544', '\x546', '\x548', '\x54A', '\x54C', '\x54E', 
		'\x550', '\x552', '\x554', '\x556', '\x558', '\x55A', '\x55C', '\x55E', 
		'\x560', '\x562', '\x564', '\x566', '\x568', '\x56A', '\x56C', '\x56E', 
		'\x570', '\x572', '\x574', '\x576', '\x578', '\x57A', '\x57C', '\x57E', 
		'\x580', '\x582', '\x584', '\x586', '\x588', '\x58A', '\x58C', '\x58E', 
		'\x590', '\x592', '\x594', '\x596', '\x598', '\x59A', '\x59C', '\x59E', 
		'\x5A0', '\x5A2', '\x5A4', '\x5A6', '\x5A8', '\x5AA', '\x5AC', '\x5AE', 
		'\x5B0', '\x5B2', '\x5B4', '\x5B6', '\x5B8', '\x5BA', '\x5BC', '\x5BE', 
		'\x5C0', '\x5C2', '\x5C4', '\x5C6', '\x5C8', '\x5CA', '\x5CC', '\x5CE', 
		'\x5D0', '\x5D2', '\x5D4', '\x5D6', '\x5D8', '\x5DA', '\x5DC', '\x5DE', 
		'\x5E0', '\x5E2', '\x5E4', '\x5E6', '\x5E8', '\x5EA', '\x5EC', '\x5EE', 
		'\x5F0', '\x5F2', '\x5F4', '\x5F6', '\x5F8', '\x5FA', '\x5FC', '\x5FE', 
		'\x600', '\x602', '\x604', '\x606', '\x608', '\x60A', '\x60C', '\x60E', 
		'\x610', '\x612', '\x614', '\x616', '\x618', '\x61A', '\x61C', '\x61E', 
		'\x620', '\x622', '\x624', '\x626', '\x628', '\x62A', '\x2', '$', '\x4', 
		'\x2', '\x87', '\x87', '\xC1', '\xC1', '\x4', '\x2', '\xB6', '\xB6', '\xDF', 
		'\xDF', '\x4', '\x2', '\x42', '\x42', '`', '`', '\v', '\x2', ' ', ' ', 
		'\xA2', '\xA2', '\xA7', '\xA7', '\xB5', '\xB5', '\xDD', '\xDD', '\xE5', 
		'\xE5', '\x14F', '\x14F', '\x152', '\x152', '\x1B0', '\x1B0', '\a', '\x2', 
		' ', ' ', 'Z', 'Z', '\xB8', '\xB8', '\xEA', '\xEA', '\x16A', '\x16A', 
		'\x4', '\x2', '^', '^', '\xE4', '\xE4', '\x3', '\x2', '\x1BA', '\x1BB', 
		'\x4', '\x2', '^', '^', '\x197', '\x197', '\x4', '\x2', '\x14E', '\x14E', 
		'\x197', '\x197', '\x4', '\x2', '\xD5', '\xD5', '\x121', '\x121', '\x5', 
		'\x2', '\x13A', '\x13A', '\x15E', '\x15E', '\x1B7', '\x1B7', '\x4', '\x2', 
		'\x42', '\x42', '\x46', '\x46', '\a', '\x2', '\xD6', '\xD6', '\x142', 
		'\x142', '\x157', '\x157', '\x162', '\x162', '\x1C1', '\x1C2', '\x5', 
		'\x2', '\xB1', '\xB1', '\x13C', '\x13C', '\x156', '\x156', '\x6', '\x2', 
		'Z', 'Z', '\xB8', '\xB8', '\xEA', '\xEA', '\x16A', '\x16A', '\x3', '\x2', 
		'!', '\"', '\x4', '\x2', '\x65', '\x65', '\x156', '\x156', '\x4', '\x2', 
		'\x139', '\x139', '\x197', '\x197', '\x4', '\x2', '\xD1', '\xD1', '\x105', 
		'\x105', '\x3', '\x2', '\xE', '\xF', '\x5', '\x2', '\v', '\v', '\x10', 
		'\x10', '\x1D', '\x1D', '\a', '\x2', '\f', '\f', '\x12', '\x13', '\x17', 
		'\x17', '\x19', '\x19', '\x1B', '\x1B', '\x4', '\x2', ' ', ' ', ':', ':', 
		'\x4', '\x2', '\xA8', '\xA8', '\xBE', '\xBE', '\x5', '\x2', ' ', ' ', 
		'$', '$', '\\', '\\', '\b', '\x2', '\v', '\f', '\xE', '\x13', '\x17', 
		'\x17', '\x19', '\x19', '\x1B', '\x1B', '\x1D', '\x1D', '\x3', '\x2', 
		'\x1DD', '\x1E0', '\v', '\x2', '~', '~', '\x83', '\x99', '\x9B', '\x17B', 
		'\x1AA', '\x1BE', '\x1C1', '\x1CF', '\x1D1', '\x1D1', '\x1D3', '\x1D3', 
		'\x1D5', '\x1D5', '\x1D8', '\x1E2', '\x5', '\x2', 'l', '}', '\x7F', '\x82', 
		'\x1D2', '\x1D2', '\x5', '\x2', ' ', 'H', 'J', 'k', '\x1C0', '\x1C0', 
		'\x4', '\x2', '@', '@', 'v', 'v', '\x4', '\x2', '\f', '\f', '\x16', '\x16', 
		'\x4', '\x2', '\xA9', '\xA9', '\x1F5', '\x1F5', '&', '\x2', '#', '#', 
		'%', '%', '-', '/', '\x37', '\x37', ';', ';', '?', '?', '^', '^', 'v', 
		'v', '}', '}', '\x84', '\x84', '\x92', '\x92', '\x9B', '\x9B', '\x9F', 
		'\x9F', '\xA3', '\xA3', '\xA9', '\xA9', '\xAE', '\xAE', '\xD1', '\xD1', 
		'\xD4', '\xD4', '\xEA', '\xEA', '\xF2', '\xF2', '\x102', '\x102', '\x105', 
		'\x106', '\x110', '\x110', '\x11E', '\x11E', '\x12C', '\x12C', '\x132', 
		'\x132', '\x138', '\x138', '\x13C', '\x13D', '\x146', '\x146', '\x161', 
		'\x161', '\x1AA', '\x1AB', '\x1D7', '\x1D7', '\x1E4', '\x1F0', '\x1F2', 
		'\x1F2', '\x1F4', '\x200', '\x202', '\x202', '\x2', '\x3159', '\x2', '\x62C', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x62F', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x631', '\x3', '\x2', '\x2', '\x2', '\b', '\x638', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\f', '\x6BB', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x6BF', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x6C2', '\x3', '\x2', '\x2', '\x2', '\x12', '\x6CA', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x16', '\x6D4', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x6F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x6FF', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x701', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x713', '\x3', '\x2', '\x2', '\x2', ' ', '\x719', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x733', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x74D', '\x3', '\x2', '\x2', '\x2', '&', '\x74F', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x755', '\x3', '\x2', '\x2', '\x2', '*', '\x75C', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x77C', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x780', '\x3', '\x2', '\x2', '\x2', '\x30', '\x782', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x790', '\x3', '\x2', '\x2', '\x2', '\x34', '\x79A', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x7A4', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x7B6', '\x3', '\x2', '\x2', '\x2', ':', '\x7D4', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x7D6', '\x3', '\x2', '\x2', '\x2', '>', '\x7E1', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x7EE', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x44', '\x7FD', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x80E', '\x3', '\x2', '\x2', '\x2', 'H', '\x813', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x817', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x819', '\x3', '\x2', '\x2', '\x2', 'N', '\x824', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x828', '\x3', '\x2', '\x2', '\x2', 'R', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x832', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x842', '\x3', '\x2', '\x2', '\x2', 'X', '\x844', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x84B', '\x3', '\x2', '\x2', '\x2', '\\', '\x84D', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x84F', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x85B', '\x3', '\x2', '\x2', '\x2', '\x62', '\x907', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x909', '\x3', '\x2', '\x2', '\x2', '\x66', '\x91C', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x91E', '\x3', '\x2', '\x2', '\x2', 
		'j', '\xA1E', '\x3', '\x2', '\x2', '\x2', 'l', '\xA25', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\xA2A', '\x3', '\x2', '\x2', '\x2', 'p', '\xA2F', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\xA34', '\x3', '\x2', '\x2', '\x2', 
		't', '\xA3C', '\x3', '\x2', '\x2', '\x2', 'v', '\xA3E', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\xA45', '\x3', '\x2', '\x2', '\x2', 'z', '\xA47', 
		'\x3', '\x2', '\x2', '\x2', '|', '\xA61', '\x3', '\x2', '\x2', '\x2', 
		'~', '\xA63', '\x3', '\x2', '\x2', '\x2', '\x80', '\xA77', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\xA93', '\x3', '\x2', '\x2', '\x2', '\x84', '\xA95', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\xA98', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\x8A', '\xAA8', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\xACD', '\x3', '\x2', '\x2', '\x2', '\x8E', '\xAD3', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\xAEB', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\xAED', '\x3', '\x2', '\x2', '\x2', '\x94', '\xAF1', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\xAF6', '\x3', '\x2', '\x2', '\x2', '\x98', '\xAFD', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\xAFF', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\xB2A', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xB2E', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xB35', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xB39', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xB3B', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xB46', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xB51', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xB53', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xB5E', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xBBD', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xBCB', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xBCF', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xBD6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xBD8', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xBE3', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF5', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF7', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC04', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC06', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC16', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC40', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC45', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC4E', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC50', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xC54', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC60', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xC67', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCA2', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xCA7', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xCAE', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xCB0', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xCBB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xCC3', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xCCC', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xCCE', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xCE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xCEC', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xCF7', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xCF9', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xCFD', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xD09', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xD11', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xD15', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xD17', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xD1E', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xD37', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xD3C', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xD43', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xD51', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\xD56', '\x3', '\x2', '\x2', '\x2', '\x102', '\xD5D', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\xD5F', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\xD78', '\x3', '\x2', '\x2', '\x2', '\x108', '\xD8A', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\xD9F', '\x3', '\x2', '\x2', '\x2', '\x10C', '\xDA1', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\xDAE', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\xDC5', '\x3', '\x2', '\x2', '\x2', '\x112', '\xDC7', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\xDCF', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\xDD1', '\x3', '\x2', '\x2', '\x2', '\x118', '\xDE7', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\xDF5', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xDF9', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\xE00', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\xE02', '\x3', '\x2', '\x2', '\x2', '\x122', '\xE2E', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\xE32', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\xE3A', '\x3', '\x2', '\x2', '\x2', '\x128', '\xE3C', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\xE59', '\x3', '\x2', '\x2', '\x2', '\x12C', '\xE5D', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\xE63', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\xE68', '\x3', '\x2', '\x2', '\x2', '\x132', '\xE6E', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\xE72', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\xE76', '\x3', '\x2', '\x2', '\x2', '\x138', '\xE78', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\xE83', '\x3', '\x2', '\x2', '\x2', '\x13C', '\xE8D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\xE9E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\xEA0', '\x3', '\x2', '\x2', '\x2', '\x142', '\xEAF', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\xEB1', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\xEB7', '\x3', '\x2', '\x2', '\x2', '\x148', '\xEBF', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\xF2A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\xF2C', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\xF3C', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\xF3E', '\x3', '\x2', '\x2', '\x2', '\x152', '\xF4A', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\xF5B', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\xF63', '\x3', '\x2', '\x2', '\x2', '\x158', '\xF65', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\xF70', '\x3', '\x2', '\x2', '\x2', '\x15C', '\xF75', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\xF87', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\xF89', '\x3', '\x2', '\x2', '\x2', '\x162', '\xF8C', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\xF8E', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\xFA9', '\x3', '\x2', '\x2', '\x2', '\x168', '\xFAE', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\xFB4', '\x3', '\x2', '\x2', '\x2', '\x16C', '\xFB8', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\xFCA', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x1004', '\x3', '\x2', '\x2', '\x2', '\x172', '\x1006', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x1015', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x101D', '\x3', '\x2', '\x2', '\x2', '\x178', '\x1034', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x1038', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x104C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x104E', '\x3', '\x2', 
		'\x2', '\x2', '\x180', '\x1057', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x1062', '\x3', '\x2', '\x2', '\x2', '\x184', '\x1071', '\x3', '\x2', 
		'\x2', '\x2', '\x186', '\x107A', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x107F', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x1084', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x1089', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x108E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x1090', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x1092', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x109B', '\x3', '\x2', '\x2', '\x2', '\x196', '\x10C3', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x10C9', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x10CB', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x10DD', '\x3', '\x2', 
		'\x2', '\x2', '\x19E', '\x10E2', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x10E4', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x10EE', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4', '\x10F3', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x10F5', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x10F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA', '\x10FE', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1102', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1104', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x110C', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x110E', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1113', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6', '\x1121', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1126', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1128', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC', '\x113B', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1157', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1159', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1164', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x116A', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1175', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x1181', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1183', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x11F6', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE', '\x11F8', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x11FC', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x120C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4', '\x1214', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1216', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x121A', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA', '\x1225', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x122B', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x122D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x125D', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1263', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1265', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6', '\x1273', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1297', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x129B', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x12A0', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x12A9', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x12AD', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2', '\x12AF', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x12C8', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x12CA', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8', '\x12E1', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x12F5', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1309', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x130B', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1311', '\x3', '\x2', '\x2', '\x2', '\x202', '\x1366', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x137F', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x1386', '\x3', '\x2', '\x2', '\x2', '\x208', '\x1396', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x1398', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x139A', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x13A9', '\x3', '\x2', 
		'\x2', '\x2', '\x210', '\x13AB', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x13B7', '\x3', '\x2', '\x2', '\x2', '\x214', '\x13C2', '\x3', '\x2', 
		'\x2', '\x2', '\x216', '\x13CD', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x1462', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x1466', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x14C3', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x14C8', '\x3', '\x2', '\x2', '\x2', '\x220', '\x14CC', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x14D2', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x1516', '\x3', '\x2', '\x2', '\x2', '\x226', '\x1518', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x151C', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x151E', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1539', '\x3', '\x2', 
		'\x2', '\x2', '\x22E', '\x154A', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x154C', '\x3', '\x2', '\x2', '\x2', '\x232', '\x1560', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x159C', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x159E', '\x3', '\x2', '\x2', '\x2', '\x238', '\x15AC', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x15B2', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x15B4', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x15CC', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x15D2', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x15D8', '\x3', '\x2', '\x2', '\x2', '\x244', '\x15DA', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x15E0', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x15F1', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x160E', '\x3', '\x2', 
		'\x2', '\x2', '\x24C', '\x1610', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x1635', '\x3', '\x2', '\x2', '\x2', '\x250', '\x1639', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x163D', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x1641', '\x3', '\x2', '\x2', '\x2', '\x256', '\x1646', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x1648', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x165E', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x166B', '\x3', '\x2', 
		'\x2', '\x2', '\x25E', '\x1673', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x1675', '\x3', '\x2', '\x2', '\x2', '\x262', '\x1683', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x1687', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x168C', '\x3', '\x2', '\x2', '\x2', '\x268', '\x1693', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x16B8', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x16BD', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x16C5', '\x3', '\x2', 
		'\x2', '\x2', '\x270', '\x16C7', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x16D2', '\x3', '\x2', '\x2', '\x2', '\x274', '\x16E5', '\x3', '\x2', 
		'\x2', '\x2', '\x276', '\x16ED', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x16EF', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x1709', '\x3', '\x2', 
		'\x2', '\x2', '\x27C', '\x1711', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x1713', '\x3', '\x2', '\x2', '\x2', '\x280', '\x1715', '\x3', '\x2', 
		'\x2', '\x2', '\x282', '\x1723', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x172E', '\x3', '\x2', '\x2', '\x2', '\x286', '\x1730', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x1746', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x1748', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x1753', '\x3', '\x2', 
		'\x2', '\x2', '\x28E', '\x1756', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x1762', '\x3', '\x2', '\x2', '\x2', '\x292', '\x178B', '\x3', '\x2', 
		'\x2', '\x2', '\x294', '\x1795', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x179E', '\x3', '\x2', '\x2', '\x2', '\x298', '\x17A0', '\x3', '\x2', 
		'\x2', '\x2', '\x29A', '\x17B2', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x17B4', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x17B7', '\x3', '\x2', 
		'\x2', '\x2', '\x2A0', '\x17D4', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'\x17D6', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x17E2', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6', '\x1808', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x1816', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x1824', '\x3', '\x2', 
		'\x2', '\x2', '\x2AC', '\x183C', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x1843', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x1845', '\x3', '\x2', 
		'\x2', '\x2', '\x2B2', '\x1850', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x1853', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x1856', '\x3', '\x2', 
		'\x2', '\x2', '\x2B8', '\x1863', '\x3', '\x2', '\x2', '\x2', '\x2BA', 
		'\x1887', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x188E', '\x3', '\x2', 
		'\x2', '\x2', '\x2BE', '\x1890', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x189D', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x189F', '\x3', '\x2', 
		'\x2', '\x2', '\x2C4', '\x18CC', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x18CE', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x18F1', '\x3', '\x2', 
		'\x2', '\x2', '\x2CA', '\x18F3', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x18F5', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x18F7', '\x3', '\x2', 
		'\x2', '\x2', '\x2D0', '\x1902', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x1910', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x1AE6', '\x3', '\x2', 
		'\x2', '\x2', '\x2D6', '\x1AEA', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x1AEF', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x1B2A', '\x3', '\x2', 
		'\x2', '\x2', '\x2DC', '\x1B2E', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x1C09', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x1C0B', '\x3', '\x2', 
		'\x2', '\x2', '\x2E2', '\x1C13', '\x3', '\x2', '\x2', '\x2', '\x2E4', 
		'\x1C26', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x1C2D', '\x3', '\x2', 
		'\x2', '\x2', '\x2E8', '\x1C2F', '\x3', '\x2', '\x2', '\x2', '\x2EA', 
		'\x1CEE', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x1CF0', '\x3', '\x2', 
		'\x2', '\x2', '\x2EE', '\x1CF8', '\x3', '\x2', '\x2', '\x2', '\x2F0', 
		'\x1D00', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x1D1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2F4', '\x1D1F', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\x1D28', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x1D33', '\x3', '\x2', 
		'\x2', '\x2', '\x2FA', '\x1D5A', '\x3', '\x2', '\x2', '\x2', '\x2FC', 
		'\x1D68', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x1D6A', '\x3', '\x2', 
		'\x2', '\x2', '\x300', '\x1D7E', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x1D80', '\x3', '\x2', '\x2', '\x2', '\x304', '\x1D90', '\x3', '\x2', 
		'\x2', '\x2', '\x306', '\x1D94', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x1D96', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x1D9B', '\x3', '\x2', 
		'\x2', '\x2', '\x30C', '\x1D9D', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x1DA4', '\x3', '\x2', '\x2', '\x2', '\x310', '\x1DA6', '\x3', '\x2', 
		'\x2', '\x2', '\x312', '\x1DAD', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x1DE1', '\x3', '\x2', '\x2', '\x2', '\x316', '\x1DE6', '\x3', '\x2', 
		'\x2', '\x2', '\x318', '\x1DF2', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x1DF4', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x1E03', '\x3', '\x2', 
		'\x2', '\x2', '\x31E', '\x1E0B', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x1E3F', '\x3', '\x2', '\x2', '\x2', '\x322', '\x1E4D', '\x3', '\x2', 
		'\x2', '\x2', '\x324', '\x1E4F', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x1E52', '\x3', '\x2', '\x2', '\x2', '\x328', '\x1E5A', '\x3', '\x2', 
		'\x2', '\x2', '\x32A', '\x1E5C', '\x3', '\x2', '\x2', '\x2', '\x32C', 
		'\x1E72', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x1E7C', '\x3', '\x2', 
		'\x2', '\x2', '\x330', '\x1E80', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x1E94', '\x3', '\x2', '\x2', '\x2', '\x334', '\x1E96', '\x3', '\x2', 
		'\x2', '\x2', '\x336', '\x1EB5', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x1EB7', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x1EC2', '\x3', '\x2', 
		'\x2', '\x2', '\x33C', '\x1EC4', '\x3', '\x2', '\x2', '\x2', '\x33E', 
		'\x1ED2', '\x3', '\x2', '\x2', '\x2', '\x340', '\x1ED4', '\x3', '\x2', 
		'\x2', '\x2', '\x342', '\x1F0D', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x1F11', '\x3', '\x2', '\x2', '\x2', '\x346', '\x1F13', '\x3', '\x2', 
		'\x2', '\x2', '\x348', '\x1F62', '\x3', '\x2', '\x2', '\x2', '\x34A', 
		'\x1F64', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x1F66', '\x3', '\x2', 
		'\x2', '\x2', '\x34E', '\x1F7E', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x1F83', '\x3', '\x2', '\x2', '\x2', '\x352', '\x1F92', '\x3', '\x2', 
		'\x2', '\x2', '\x354', '\x1F9E', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x1FA0', '\x3', '\x2', '\x2', '\x2', '\x358', '\x1FAB', '\x3', '\x2', 
		'\x2', '\x2', '\x35A', '\x1FAD', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x1FB2', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x1FB7', '\x3', '\x2', 
		'\x2', '\x2', '\x360', '\x1FBB', '\x3', '\x2', '\x2', '\x2', '\x362', 
		'\x1FBF', '\x3', '\x2', '\x2', '\x2', '\x364', '\x1FC3', '\x3', '\x2', 
		'\x2', '\x2', '\x366', '\x1FC7', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x1FCE', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x1FD0', '\x3', '\x2', 
		'\x2', '\x2', '\x36C', '\x1FD3', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x1FE0', '\x3', '\x2', '\x2', '\x2', '\x370', '\x1FF2', '\x3', '\x2', 
		'\x2', '\x2', '\x372', '\x1FFD', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x1FFF', '\x3', '\x2', '\x2', '\x2', '\x376', '\x200A', '\x3', '\x2', 
		'\x2', '\x2', '\x378', '\x200F', '\x3', '\x2', '\x2', '\x2', '\x37A', 
		'\x2014', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x2016', '\x3', '\x2', 
		'\x2', '\x2', '\x37E', '\x2021', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'\x2027', '\x3', '\x2', '\x2', '\x2', '\x382', '\x2044', '\x3', '\x2', 
		'\x2', '\x2', '\x384', '\x204B', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\x2057', '\x3', '\x2', '\x2', '\x2', '\x388', '\x2059', '\x3', '\x2', 
		'\x2', '\x2', '\x38A', '\x2066', '\x3', '\x2', '\x2', '\x2', '\x38C', 
		'\x207D', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x207F', '\x3', '\x2', 
		'\x2', '\x2', '\x390', '\x2081', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x208C', '\x3', '\x2', '\x2', '\x2', '\x394', '\x209F', '\x3', '\x2', 
		'\x2', '\x2', '\x396', '\x20AA', '\x3', '\x2', '\x2', '\x2', '\x398', 
		'\x20AF', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x20B1', '\x3', '\x2', 
		'\x2', '\x2', '\x39C', '\x20BC', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x20BE', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x20C9', '\x3', '\x2', 
		'\x2', '\x2', '\x3A2', '\x20DB', '\x3', '\x2', '\x2', '\x2', '\x3A4', 
		'\x20DF', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x20E5', '\x3', '\x2', 
		'\x2', '\x2', '\x3A8', '\x20E7', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x20F0', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x2105', '\x3', '\x2', 
		'\x2', '\x2', '\x3AE', '\x2107', '\x3', '\x2', '\x2', '\x2', '\x3B0', 
		'\x210A', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x2115', '\x3', '\x2', 
		'\x2', '\x2', '\x3B4', '\x211D', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x211F', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x2133', '\x3', '\x2', 
		'\x2', '\x2', '\x3BA', '\x2137', '\x3', '\x2', '\x2', '\x2', '\x3BC', 
		'\x2141', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x2164', '\x3', '\x2', 
		'\x2', '\x2', '\x3C0', '\x2168', '\x3', '\x2', '\x2', '\x2', '\x3C2', 
		'\x2189', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x2199', '\x3', '\x2', 
		'\x2', '\x2', '\x3C6', '\x219B', '\x3', '\x2', '\x2', '\x2', '\x3C8', 
		'\x21A3', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x21A5', '\x3', '\x2', 
		'\x2', '\x2', '\x3CC', '\x21B0', '\x3', '\x2', '\x2', '\x2', '\x3CE', 
		'\x21BC', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x21C0', '\x3', '\x2', 
		'\x2', '\x2', '\x3D2', '\x21C9', '\x3', '\x2', '\x2', '\x2', '\x3D4', 
		'\x21CD', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x21F2', '\x3', '\x2', 
		'\x2', '\x2', '\x3D8', '\x21F6', '\x3', '\x2', '\x2', '\x2', '\x3DA', 
		'\x21FB', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x2204', '\x3', '\x2', 
		'\x2', '\x2', '\x3DE', '\x2208', '\x3', '\x2', '\x2', '\x2', '\x3E0', 
		'\x220C', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x220E', '\x3', '\x2', 
		'\x2', '\x2', '\x3E4', '\x2212', '\x3', '\x2', '\x2', '\x2', '\x3E6', 
		'\x2223', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x222D', '\x3', '\x2', 
		'\x2', '\x2', '\x3EA', '\x2231', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x2252', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x225A', '\x3', '\x2', 
		'\x2', '\x2', '\x3F0', '\x225E', '\x3', '\x2', '\x2', '\x2', '\x3F2', 
		'\x2260', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x2267', '\x3', '\x2', 
		'\x2', '\x2', '\x3F6', '\x226B', '\x3', '\x2', '\x2', '\x2', '\x3F8', 
		'\x226D', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x226F', '\x3', '\x2', 
		'\x2', '\x2', '\x3FC', '\x2275', '\x3', '\x2', '\x2', '\x2', '\x3FE', 
		'\x2277', '\x3', '\x2', '\x2', '\x2', '\x400', '\x2287', '\x3', '\x2', 
		'\x2', '\x2', '\x402', '\x2289', '\x3', '\x2', '\x2', '\x2', '\x404', 
		'\x228C', '\x3', '\x2', '\x2', '\x2', '\x406', '\x2291', '\x3', '\x2', 
		'\x2', '\x2', '\x408', '\x2296', '\x3', '\x2', '\x2', '\x2', '\x40A', 
		'\x229F', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x22A5', '\x3', '\x2', 
		'\x2', '\x2', '\x40E', '\x22A9', '\x3', '\x2', '\x2', '\x2', '\x410', 
		'\x22AB', '\x3', '\x2', '\x2', '\x2', '\x412', '\x22B5', '\x3', '\x2', 
		'\x2', '\x2', '\x414', '\x22C4', '\x3', '\x2', '\x2', '\x2', '\x416', 
		'\x22C9', '\x3', '\x2', '\x2', '\x2', '\x418', '\x22CB', '\x3', '\x2', 
		'\x2', '\x2', '\x41A', '\x22DF', '\x3', '\x2', '\x2', '\x2', '\x41C', 
		'\x22E1', '\x3', '\x2', '\x2', '\x2', '\x41E', '\x232C', '\x3', '\x2', 
		'\x2', '\x2', '\x420', '\x235A', '\x3', '\x2', '\x2', '\x2', '\x422', 
		'\x235E', '\x3', '\x2', '\x2', '\x2', '\x424', '\x2372', '\x3', '\x2', 
		'\x2', '\x2', '\x426', '\x237B', '\x3', '\x2', '\x2', '\x2', '\x428', 
		'\x237F', '\x3', '\x2', '\x2', '\x2', '\x42A', '\x2388', '\x3', '\x2', 
		'\x2', '\x2', '\x42C', '\x2395', '\x3', '\x2', '\x2', '\x2', '\x42E', 
		'\x2397', '\x3', '\x2', '\x2', '\x2', '\x430', '\x23AA', '\x3', '\x2', 
		'\x2', '\x2', '\x432', '\x23AC', '\x3', '\x2', '\x2', '\x2', '\x434', 
		'\x23B9', '\x3', '\x2', '\x2', '\x2', '\x436', '\x23C5', '\x3', '\x2', 
		'\x2', '\x2', '\x438', '\x23C7', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x23CA', '\x3', '\x2', '\x2', '\x2', '\x43C', '\x23DB', '\x3', '\x2', 
		'\x2', '\x2', '\x43E', '\x23E0', '\x3', '\x2', '\x2', '\x2', '\x440', 
		'\x23E5', '\x3', '\x2', '\x2', '\x2', '\x442', '\x23EE', '\x3', '\x2', 
		'\x2', '\x2', '\x444', '\x23F2', '\x3', '\x2', '\x2', '\x2', '\x446', 
		'\x23F4', '\x3', '\x2', '\x2', '\x2', '\x448', '\x23FF', '\x3', '\x2', 
		'\x2', '\x2', '\x44A', '\x2418', '\x3', '\x2', '\x2', '\x2', '\x44C', 
		'\x241A', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x2430', '\x3', '\x2', 
		'\x2', '\x2', '\x450', '\x2432', '\x3', '\x2', '\x2', '\x2', '\x452', 
		'\x2444', '\x3', '\x2', '\x2', '\x2', '\x454', '\x2446', '\x3', '\x2', 
		'\x2', '\x2', '\x456', '\x2457', '\x3', '\x2', '\x2', '\x2', '\x458', 
		'\x247C', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x247E', '\x3', '\x2', 
		'\x2', '\x2', '\x45C', '\x2499', '\x3', '\x2', '\x2', '\x2', '\x45E', 
		'\x249F', '\x3', '\x2', '\x2', '\x2', '\x460', '\x24A8', '\x3', '\x2', 
		'\x2', '\x2', '\x462', '\x24AF', '\x3', '\x2', '\x2', '\x2', '\x464', 
		'\x24C1', '\x3', '\x2', '\x2', '\x2', '\x466', '\x24C8', '\x3', '\x2', 
		'\x2', '\x2', '\x468', '\x24CC', '\x3', '\x2', '\x2', '\x2', '\x46A', 
		'\x24D0', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x24D2', '\x3', '\x2', 
		'\x2', '\x2', '\x46E', '\x24D8', '\x3', '\x2', '\x2', '\x2', '\x470', 
		'\x24DB', '\x3', '\x2', '\x2', '\x2', '\x472', '\x24E2', '\x3', '\x2', 
		'\x2', '\x2', '\x474', '\x24F6', '\x3', '\x2', '\x2', '\x2', '\x476', 
		'\x24FA', '\x3', '\x2', '\x2', '\x2', '\x478', '\x250C', '\x3', '\x2', 
		'\x2', '\x2', '\x47A', '\x250E', '\x3', '\x2', '\x2', '\x2', '\x47C', 
		'\x2517', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x2535', '\x3', '\x2', 
		'\x2', '\x2', '\x480', '\x253D', '\x3', '\x2', '\x2', '\x2', '\x482', 
		'\x2542', '\x3', '\x2', '\x2', '\x2', '\x484', '\x2557', '\x3', '\x2', 
		'\x2', '\x2', '\x486', '\x262F', '\x3', '\x2', '\x2', '\x2', '\x488', 
		'\x2638', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x2692', '\x3', '\x2', 
		'\x2', '\x2', '\x48C', '\x2694', '\x3', '\x2', '\x2', '\x2', '\x48E', 
		'\x2696', '\x3', '\x2', '\x2', '\x2', '\x490', '\x26B4', '\x3', '\x2', 
		'\x2', '\x2', '\x492', '\x26B8', '\x3', '\x2', '\x2', '\x2', '\x494', 
		'\x2790', '\x3', '\x2', '\x2', '\x2', '\x496', '\x2797', '\x3', '\x2', 
		'\x2', '\x2', '\x498', '\x27A4', '\x3', '\x2', '\x2', '\x2', '\x49A', 
		'\x27A6', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x27AB', '\x3', '\x2', 
		'\x2', '\x2', '\x49E', '\x27BB', '\x3', '\x2', '\x2', '\x2', '\x4A0', 
		'\x27BD', '\x3', '\x2', '\x2', '\x2', '\x4A2', '\x27C4', '\x3', '\x2', 
		'\x2', '\x2', '\x4A4', '\x27D5', '\x3', '\x2', '\x2', '\x2', '\x4A6', 
		'\x27DB', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x27E4', '\x3', '\x2', 
		'\x2', '\x2', '\x4AA', '\x27ED', '\x3', '\x2', '\x2', '\x2', '\x4AC', 
		'\x27F2', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x27F4', '\x3', '\x2', 
		'\x2', '\x2', '\x4B0', '\x27FF', '\x3', '\x2', '\x2', '\x2', '\x4B2', 
		'\x2808', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x280A', '\x3', '\x2', 
		'\x2', '\x2', '\x4B6', '\x2813', '\x3', '\x2', '\x2', '\x2', '\x4B8', 
		'\x2819', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x2828', '\x3', '\x2', 
		'\x2', '\x2', '\x4BC', '\x2830', '\x3', '\x2', '\x2', '\x2', '\x4BE', 
		'\x283E', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x284B', '\x3', '\x2', 
		'\x2', '\x2', '\x4C2', '\x285B', '\x3', '\x2', '\x2', '\x2', '\x4C4', 
		'\x2865', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x2867', '\x3', '\x2', 
		'\x2', '\x2', '\x4C8', '\x286D', '\x3', '\x2', '\x2', '\x2', '\x4CA', 
		'\x2871', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x2873', '\x3', '\x2', 
		'\x2', '\x2', '\x4CE', '\x287B', '\x3', '\x2', '\x2', '\x2', '\x4D0', 
		'\x2883', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x2891', '\x3', '\x2', 
		'\x2', '\x2', '\x4D4', '\x2893', '\x3', '\x2', '\x2', '\x2', '\x4D6', 
		'\x289E', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x28B2', '\x3', '\x2', 
		'\x2', '\x2', '\x4DA', '\x28B4', '\x3', '\x2', '\x2', '\x2', '\x4DC', 
		'\x28C9', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x28CB', '\x3', '\x2', 
		'\x2', '\x2', '\x4E0', '\x28DB', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x28E5', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x28E7', '\x3', '\x2', 
		'\x2', '\x2', '\x4E6', '\x28F7', '\x3', '\x2', '\x2', '\x2', '\x4E8', 
		'\x28FE', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x291C', '\x3', '\x2', 
		'\x2', '\x2', '\x4EC', '\x2925', '\x3', '\x2', '\x2', '\x2', '\x4EE', 
		'\x292C', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x292E', '\x3', '\x2', 
		'\x2', '\x2', '\x4F2', '\x2934', '\x3', '\x2', '\x2', '\x2', '\x4F4', 
		'\x293E', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x2946', '\x3', '\x2', 
		'\x2', '\x2', '\x4F8', '\x294A', '\x3', '\x2', '\x2', '\x2', '\x4FA', 
		'\x2950', '\x3', '\x2', '\x2', '\x2', '\x4FC', '\x2960', '\x3', '\x2', 
		'\x2', '\x2', '\x4FE', '\x2964', '\x3', '\x2', '\x2', '\x2', '\x500', 
		'\x2966', '\x3', '\x2', '\x2', '\x2', '\x502', '\x2970', '\x3', '\x2', 
		'\x2', '\x2', '\x504', '\x297A', '\x3', '\x2', '\x2', '\x2', '\x506', 
		'\x297E', '\x3', '\x2', '\x2', '\x2', '\x508', '\x2980', '\x3', '\x2', 
		'\x2', '\x2', '\x50A', '\x2990', '\x3', '\x2', '\x2', '\x2', '\x50C', 
		'\x2992', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x29A1', '\x3', '\x2', 
		'\x2', '\x2', '\x510', '\x29A3', '\x3', '\x2', '\x2', '\x2', '\x512', 
		'\x29AE', '\x3', '\x2', '\x2', '\x2', '\x514', '\x29B0', '\x3', '\x2', 
		'\x2', '\x2', '\x516', '\x29B2', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x29B8', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x29D9', '\x3', '\x2', 
		'\x2', '\x2', '\x51C', '\x29DB', '\x3', '\x2', '\x2', '\x2', '\x51E', 
		'\x29DD', '\x3', '\x2', '\x2', '\x2', '\x520', '\x29DF', '\x3', '\x2', 
		'\x2', '\x2', '\x522', '\x29E1', '\x3', '\x2', '\x2', '\x2', '\x524', 
		'\x29E3', '\x3', '\x2', '\x2', '\x2', '\x526', '\x29F1', '\x3', '\x2', 
		'\x2', '\x2', '\x528', '\x29F6', '\x3', '\x2', '\x2', '\x2', '\x52A', 
		'\x29FD', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x29FF', '\x3', '\x2', 
		'\x2', '\x2', '\x52E', '\x2A04', '\x3', '\x2', '\x2', '\x2', '\x530', 
		'\x2A06', '\x3', '\x2', '\x2', '\x2', '\x532', '\x2A15', '\x3', '\x2', 
		'\x2', '\x2', '\x534', '\x2A1B', '\x3', '\x2', '\x2', '\x2', '\x536', 
		'\x2A21', '\x3', '\x2', '\x2', '\x2', '\x538', '\x2A29', '\x3', '\x2', 
		'\x2', '\x2', '\x53A', '\x2A32', '\x3', '\x2', '\x2', '\x2', '\x53C', 
		'\x2A34', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x2A36', '\x3', '\x2', 
		'\x2', '\x2', '\x540', '\x2A6B', '\x3', '\x2', '\x2', '\x2', '\x542', 
		'\x2A6D', '\x3', '\x2', '\x2', '\x2', '\x544', '\x2A6F', '\x3', '\x2', 
		'\x2', '\x2', '\x546', '\x2A71', '\x3', '\x2', '\x2', '\x2', '\x548', 
		'\x2A75', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x2A91', '\x3', '\x2', 
		'\x2', '\x2', '\x54C', '\x2A93', '\x3', '\x2', '\x2', '\x2', '\x54E', 
		'\x2A99', '\x3', '\x2', '\x2', '\x2', '\x550', '\x2A9D', '\x3', '\x2', 
		'\x2', '\x2', '\x552', '\x2A9F', '\x3', '\x2', '\x2', '\x2', '\x554', 
		'\x2AAE', '\x3', '\x2', '\x2', '\x2', '\x556', '\x2AB0', '\x3', '\x2', 
		'\x2', '\x2', '\x558', '\x2AB2', '\x3', '\x2', '\x2', '\x2', '\x55A', 
		'\x2ABC', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x2AC3', '\x3', '\x2', 
		'\x2', '\x2', '\x55E', '\x2ADB', '\x3', '\x2', '\x2', '\x2', '\x560', 
		'\x2AE1', '\x3', '\x2', '\x2', '\x2', '\x562', '\x2AE3', '\x3', '\x2', 
		'\x2', '\x2', '\x564', '\x2AEA', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x2AEC', '\x3', '\x2', '\x2', '\x2', '\x568', '\x2AF7', '\x3', '\x2', 
		'\x2', '\x2', '\x56A', '\x2AFA', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x2AFE', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x2B00', '\x3', '\x2', 
		'\x2', '\x2', '\x570', '\x2B04', '\x3', '\x2', '\x2', '\x2', '\x572', 
		'\x2B06', '\x3', '\x2', '\x2', '\x2', '\x574', '\x2B0B', '\x3', '\x2', 
		'\x2', '\x2', '\x576', '\x2B10', '\x3', '\x2', '\x2', '\x2', '\x578', 
		'\x2B16', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x2B1A', '\x3', '\x2', 
		'\x2', '\x2', '\x57C', '\x2B1C', '\x3', '\x2', '\x2', '\x2', '\x57E', 
		'\x2B1E', '\x3', '\x2', '\x2', '\x2', '\x580', '\x2B41', '\x3', '\x2', 
		'\x2', '\x2', '\x582', '\x2B43', '\x3', '\x2', '\x2', '\x2', '\x584', 
		'\x2B55', '\x3', '\x2', '\x2', '\x2', '\x586', '\x2B59', '\x3', '\x2', 
		'\x2', '\x2', '\x588', '\x2B5B', '\x3', '\x2', '\x2', '\x2', '\x58A', 
		'\x2B60', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x2B69', '\x3', '\x2', 
		'\x2', '\x2', '\x58E', '\x2B6B', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x2B76', '\x3', '\x2', '\x2', '\x2', '\x592', '\x2B7A', '\x3', '\x2', 
		'\x2', '\x2', '\x594', '\x2B7C', '\x3', '\x2', '\x2', '\x2', '\x596', 
		'\x2B81', '\x3', '\x2', '\x2', '\x2', '\x598', '\x2B8D', '\x3', '\x2', 
		'\x2', '\x2', '\x59A', '\x2B97', '\x3', '\x2', '\x2', '\x2', '\x59C', 
		'\x2BA6', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x2BA8', '\x3', '\x2', 
		'\x2', '\x2', '\x5A0', '\x2BB2', '\x3', '\x2', '\x2', '\x2', '\x5A2', 
		'\x2BB4', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x2BBE', '\x3', '\x2', 
		'\x2', '\x2', '\x5A6', '\x2BC6', '\x3', '\x2', '\x2', '\x2', '\x5A8', 
		'\x2BC8', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x2BCB', '\x3', '\x2', 
		'\x2', '\x2', '\x5AC', '\x2BD0', '\x3', '\x2', '\x2', '\x2', '\x5AE', 
		'\x2BF0', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x2BF5', '\x3', '\x2', 
		'\x2', '\x2', '\x5B2', '\x2C03', '\x3', '\x2', '\x2', '\x2', '\x5B4', 
		'\x2C07', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x2C0C', '\x3', '\x2', 
		'\x2', '\x2', '\x5B8', '\x2C0E', '\x3', '\x2', '\x2', '\x2', '\x5BA', 
		'\x2C10', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x2C1C', '\x3', '\x2', 
		'\x2', '\x2', '\x5BE', '\x2C1E', '\x3', '\x2', '\x2', '\x2', '\x5C0', 
		'\x2C22', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x2C39', '\x3', '\x2', 
		'\x2', '\x2', '\x5C4', '\x2C3D', '\x3', '\x2', '\x2', '\x2', '\x5C6', 
		'\x2C59', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x2C63', '\x3', '\x2', 
		'\x2', '\x2', '\x5CA', '\x2C68', '\x3', '\x2', '\x2', '\x2', '\x5CC', 
		'\x2C75', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x2C77', '\x3', '\x2', 
		'\x2', '\x2', '\x5D0', '\x2C80', '\x3', '\x2', '\x2', '\x2', '\x5D2', 
		'\x2C82', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x2C8A', '\x3', '\x2', 
		'\x2', '\x2', '\x5D6', '\x2C8C', '\x3', '\x2', '\x2', '\x2', '\x5D8', 
		'\x2C93', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x2C96', '\x3', '\x2', 
		'\x2', '\x2', '\x5DC', '\x2CA6', '\x3', '\x2', '\x2', '\x2', '\x5DE', 
		'\x2CA8', '\x3', '\x2', '\x2', '\x2', '\x5E0', '\x2CB9', '\x3', '\x2', 
		'\x2', '\x2', '\x5E2', '\x2CD4', '\x3', '\x2', '\x2', '\x2', '\x5E4', 
		'\x2CDB', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x2CDD', '\x3', '\x2', 
		'\x2', '\x2', '\x5E8', '\x2CEB', '\x3', '\x2', '\x2', '\x2', '\x5EA', 
		'\x2CED', '\x3', '\x2', '\x2', '\x2', '\x5EC', '\x2CF9', '\x3', '\x2', 
		'\x2', '\x2', '\x5EE', '\x2CFD', '\x3', '\x2', '\x2', '\x2', '\x5F0', 
		'\x2CFF', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x2D07', '\x3', '\x2', 
		'\x2', '\x2', '\x5F4', '\x2D0C', '\x3', '\x2', '\x2', '\x2', '\x5F6', 
		'\x2D24', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x2D26', '\x3', '\x2', 
		'\x2', '\x2', '\x5FA', '\x2D2B', '\x3', '\x2', '\x2', '\x2', '\x5FC', 
		'\x2D2F', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x2D32', '\x3', '\x2', 
		'\x2', '\x2', '\x600', '\x2D36', '\x3', '\x2', '\x2', '\x2', '\x602', 
		'\x2D40', '\x3', '\x2', '\x2', '\x2', '\x604', '\x2D4F', '\x3', '\x2', 
		'\x2', '\x2', '\x606', '\x2D53', '\x3', '\x2', '\x2', '\x2', '\x608', 
		'\x2D58', '\x3', '\x2', '\x2', '\x2', '\x60A', '\x2D5A', '\x3', '\x2', 
		'\x2', '\x2', '\x60C', '\x2D64', '\x3', '\x2', '\x2', '\x2', '\x60E', 
		'\x2D69', '\x3', '\x2', '\x2', '\x2', '\x610', '\x2D77', '\x3', '\x2', 
		'\x2', '\x2', '\x612', '\x2D7B', '\x3', '\x2', '\x2', '\x2', '\x614', 
		'\x2D7F', '\x3', '\x2', '\x2', '\x2', '\x616', '\x2D83', '\x3', '\x2', 
		'\x2', '\x2', '\x618', '\x2D88', '\x3', '\x2', '\x2', '\x2', '\x61A', 
		'\x2D8C', '\x3', '\x2', '\x2', '\x2', '\x61C', '\x2D8E', '\x3', '\x2', 
		'\x2', '\x2', '\x61E', '\x2D90', '\x3', '\x2', '\x2', '\x2', '\x620', 
		'\x2D98', '\x3', '\x2', '\x2', '\x2', '\x622', '\x2D9A', '\x3', '\x2', 
		'\x2', '\x2', '\x624', '\x2D9C', '\x3', '\x2', '\x2', '\x2', '\x626', 
		'\x2D9E', '\x3', '\x2', '\x2', '\x2', '\x628', '\x2DA0', '\x3', '\x2', 
		'\x2', '\x2', '\x62A', '\x2DA8', '\x3', '\x2', '\x2', '\x2', '\x62C', 
		'\x62D', '\x5', '\x6', '\x4', '\x2', '\x62D', '\x62E', '\a', '\x2', '\x2', 
		'\x3', '\x62E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x630', '\x5', 
		'\x546', '\x2A4', '\x2', '\x630', '\x5', '\x3', '\x2', '\x2', '\x2', '\x631', 
		'\x632', '\x5', '\b', '\x5', '\x2', '\x632', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x633', '\x636', '\x5', '\n', '\x6', '\x2', '\x634', '\x637', 
		'\a', '\t', '\x2', '\x2', '\x635', '\x637', '\x5', '\f', '\a', '\x2', 
		'\x636', '\x634', '\x3', '\x2', '\x2', '\x2', '\x636', '\x635', '\x3', 
		'\x2', '\x2', '\x2', '\x637', '\x639', '\x3', '\x2', '\x2', '\x2', '\x638', 
		'\x633', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', '\x3', '\x2', '\x2', 
		'\x2', '\x63A', '\x638', '\x3', '\x2', '\x2', '\x2', '\x63A', '\x63B', 
		'\x3', '\x2', '\x2', '\x2', '\x63B', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x63C', '\x6BA', '\x5', '\x1C6', '\xE4', '\x2', '\x63D', '\x6BA', '\x5', 
		'\x33C', '\x19F', '\x2', '\x63E', '\x6BA', '\x5', '\x332', '\x19A', '\x2', 
		'\x63F', '\x6BA', '\x5', '\x334', '\x19B', '\x2', '\x640', '\x6BA', '\x5', 
		'\x244', '\x123', '\x2', '\x641', '\x6BA', '\x5', '\x342', '\x1A2', '\x2', 
		'\x642', '\x6BA', '\x5', '\x1E0', '\xF1', '\x2', '\x643', '\x6BA', '\x5', 
		'\x144', '\xA3', '\x2', '\x644', '\x6BA', '\x5', '\x14A', '\xA6', '\x2', 
		'\x645', '\x6BA', '\x5', '\x154', '\xAB', '\x2', '\x646', '\x6BA', '\x5', 
		'\x16E', '\xB8', '\x2', '\x647', '\x6BA', '\x5', '\x2A0', '\x151', '\x2', 
		'\x648', '\x6BA', '\x5', '(', '\x15', '\x2', '\x649', '\x6BA', '\x5', 
		'\x2DA', '\x16E', '\x2', '\x64A', '\x6BA', '\x5', '\x2DE', '\x170', '\x2', 
		'\x64B', '\x6BA', '\x5', '\x2EA', '\x176', '\x2', '\x64C', '\x6BA', '\x5', 
		'\x2E0', '\x171', '\x2', '\x64D', '\x6BA', '\x5', '\x2E8', '\x175', '\x2', 
		'\x64E', '\x6BA', '\x5', '\x182', '\xC2', '\x2', '\x64F', '\x6BA', '\x5', 
		'\x11A', '\x8E', '\x2', '\x650', '\x6BA', '\x5', '\x33E', '\x1A0', '\x2', 
		'\x651', '\x6BA', '\x5', '\x62', '\x32', '\x2', '\x652', '\x6BA', '\x5', 
		'\x2D2', '\x16A', '\x2', '\x653', '\x6BA', '\x5', '\x88', '\x45', '\x2', 
		'\x654', '\x6BA', '\x5', '\x2F2', '\x17A', '\x2', '\x655', '\x6BA', '\x5', 
		'\"', '\x12', '\x2', '\x656', '\x6BA', '\x5', '\x1E', '\x10', '\x2', '\x657', 
		'\x6BA', '\x5', '\x2FA', '\x17E', '\x2', '\x658', '\x6BA', '\x5', '\x108', 
		'\x85', '\x2', '\x659', '\x6BA', '\x5', '\x348', '\x1A5', '\x2', '\x65A', 
		'\x6BA', '\x5', '\x346', '\x1A4', '\x2', '\x65B', '\x6BA', '\x5', '\x17E', 
		'\xC0', '\x2', '\x65C', '\x6BA', '\x5', '\x354', '\x1AB', '\x2', '\x65D', 
		'\x6BA', '\x5', '\xE', '\b', '\x2', '\x65E', '\x6BA', '\x5', '^', '\x30', 
		'\x2', '\x65F', '\x6BA', '\x5', '\x8E', 'H', '\x2', '\x660', '\x6BA', 
		'\x5', '\x34E', '\x1A8', '\x2', '\x661', '\x6BA', '\x5', '\x218', '\x10D', 
		'\x2', '\x662', '\x6BA', '\x5', 'X', '-', '\x2', '\x663', '\x6BA', '\x5', 
		'\x90', 'I', '\x2', '\x664', '\x6BA', '\x5', '\x192', '\xCA', '\x2', '\x665', 
		'\x6BA', '\x5', '\x10A', '\x86', '\x2', '\x666', '\x6BA', '\x5', '\x1CA', 
		'\xE6', '\x2', '\x667', '\x6BA', '\x5', '\x2BA', '\x15E', '\x2', '\x668', 
		'\x6BA', '\x5', '\x34C', '\x1A7', '\x2', '\x669', '\x6BA', '\x5', '\x340', 
		'\x1A1', '\x2', '\x66A', '\x6BA', '\x5', '\x13E', '\xA0', '\x2', '\x66B', 
		'\x6BA', '\x5', '\x14C', '\xA7', '\x2', '\x66C', '\x6BA', '\x5', '\x166', 
		'\xB4', '\x2', '\x66D', '\x6BA', '\x5', '\x170', '\xB9', '\x2', '\x66E', 
		'\x6BA', '\x5', '\x26A', '\x136', '\x2', '\x66F', '\x6BA', '\x5', '&', 
		'\x14', '\x2', '\x670', '\x6BA', '\x5', '\x110', '\x89', '\x2', '\x671', 
		'\x6BA', '\x5', '\x1E4', '\xF3', '\x2', '\x672', '\x6BA', '\x5', '\x1F2', 
		'\xFA', '\x2', '\x673', '\x6BA', '\x5', '\x2EC', '\x177', '\x2', '\x674', 
		'\x6BA', '\x5', '\x1F4', '\xFB', '\x2', '\x675', '\x6BA', '\x5', '\x180', 
		'\xC1', '\x2', '\x676', '\x6BA', '\x5', '\x12A', '\x96', '\x2', '\x677', 
		'\x6BA', '\x5', ',', '\x17', '\x2', '\x678', '\x6BA', '\x5', '\x118', 
		'\x8D', '\x2', '\x679', '\x6BA', '\x5', '\xAE', 'X', '\x2', '\x67A', '\x6BA', 
		'\x5', '\x2F4', '\x17B', '\x2', '\x67B', '\x6BA', '\x5', '\x106', '\x84', 
		'\x2', '\x67C', '\x6BA', '\x5', '\x138', '\x9D', '\x2', '\x67D', '\x6BA', 
		'\x5', '\x2C2', '\x162', '\x2', '\x67E', '\x6BA', '\x5', '\x196', '\xCC', 
		'\x2', '\x67F', '\x6BA', '\x5', '\x1BE', '\xE0', '\x2', '\x680', '\x6BA', 
		'\x5', '\x10', '\t', '\x2', '\x681', '\x6BA', '\x5', '\x1C', '\xF', '\x2', 
		'\x682', '\x6BA', '\x5', '\x178', '\xBD', '\x2', '\x683', '\x6BA', '\x5', 
		'\x326', '\x194', '\x2', '\x684', '\x6BA', '\x5', '\x386', '\x1C4', '\x2', 
		'\x685', '\x6BA', '\x5', '\x3B2', '\x1DA', '\x2', '\x686', '\x6BA', '\x5', 
		'\x1CC', '\xE7', '\x2', '\x687', '\x6BA', '\x5', '\x39A', '\x1CE', '\x2', 
		'\x688', '\x6BA', '\x5', '`', '\x31', '\x2', '\x689', '\x6BA', '\x5', 
		'\x2B4', '\x15B', '\x2', '\x68A', '\x6BA', '\x5', '\x2BE', '\x160', '\x2', 
		'\x68B', '\x6BA', '\x5', '\x1FA', '\xFE', '\x2', '\x68C', '\x6BA', '\x5', 
		'\x1FC', '\xFF', '\x2', '\x68D', '\x6BA', '\x5', '\x1FE', '\x100', '\x2', 
		'\x68E', '\x6BA', '\x5', '\x202', '\x102', '\x2', '\x68F', '\x6BA', '\x5', 
		'\x2FC', '\x17F', '\x2', '\x690', '\x6BA', '\x5', '\x13C', '\x9F', '\x2', 
		'\x691', '\x6BA', '\x5', '\x2C6', '\x164', '\x2', '\x692', '\x6BA', '\x5', 
		'$', '\x13', '\x2', '\x693', '\x6BA', '\x5', '\x17C', '\xBF', '\x2', '\x694', 
		'\x6BA', '\x5', '\x336', '\x19C', '\x2', '\x695', '\x6BA', '\x5', '\x382', 
		'\x1C2', '\x2', '\x696', '\x6BA', '\x5', '\x370', '\x1B9', '\x2', '\x697', 
		'\x6BA', '\x5', '\x222', '\x112', '\x2', '\x698', '\x6BA', '\x5', '\x22A', 
		'\x116', '\x2', '\x699', '\x6BA', '\x5', '\x23C', '\x11F', '\x2', '\x69A', 
		'\x6BA', '\x5', '\x172', '\xBA', '\x2', '\x69B', '\x6BA', '\x5', '\x24E', 
		'\x128', '\x2', '\x69C', '\x6BA', '\x5', '\x388', '\x1C5', '\x2', '\x69D', 
		'\x6BA', '\x5', '\x310', '\x189', '\x2', '\x69E', '\x6BA', '\x5', '\x116', 
		'\x8C', '\x2', '\x69F', '\x6BA', '\x5', '\x324', '\x193', '\x2', '\x6A0', 
		'\x6BA', '\x5', '\x39E', '\x1D0', '\x2', '\x6A1', '\x6BA', '\x5', '\x30C', 
		'\x187', '\x2', '\x6A2', '\x6BA', '\x5', '\x37C', '\x1BF', '\x2', '\x6A3', 
		'\x6BA', '\x5', '\x200', '\x101', '\x2', '\x6A4', '\x6BA', '\x5', '\x2C8', 
		'\x165', '\x2', '\x6A5', '\x6BA', '\x5', '\x2A8', '\x155', '\x2', '\x6A6', 
		'\x6BA', '\x5', '\x2A6', '\x154', '\x2', '\x6A7', '\x6BA', '\x5', '\x2AA', 
		'\x156', '\x2', '\x6A8', '\x6BA', '\x5', '\x2D4', '\x16B', '\x2', '\x6A9', 
		'\x6BA', '\x5', '\x22C', '\x117', '\x2', '\x6AA', '\x6BA', '\x5', '\x23E', 
		'\x120', '\x2', '\x6AB', '\x6BA', '\x5', '\x2FE', '\x180', '\x2', '\x6AC', 
		'\x6BA', '\x5', '\x21C', '\x10F', '\x2', '\x6AD', '\x6BA', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x6AE', '\x6BA', '\x5', '\x314', '\x18B', '\x2', '\x6AF', 
		'\x6BA', '\x5', '\x214', '\x10B', '\x2', '\x6B0', '\x6BA', '\x5', '\x312', 
		'\x18A', '\x2', '\x6B1', '\x6BA', '\x5', '\x3A8', '\x1D5', '\x2', '\x6B2', 
		'\x6BA', '\x5', '\x352', '\x1AA', '\x2', '\x6B3', '\x6BA', '\x5', 'L', 
		'\'', '\x2', '\x6B4', '\x6BA', '\x5', '\x34', '\x1B', '\x2', '\x6B5', 
		'\x6BA', '\x5', 'V', ',', '\x2', '\x6B6', '\x6BA', '\x5', '\x320', '\x191', 
		'\x2', '\x6B7', '\x6BA', '\x5', '\f', '\a', '\x2', '\x6B8', '\x6BA', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x63C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x63D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x63E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x640', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x641', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x642', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x643', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x644', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x645', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x646', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x647', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x648', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x649', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x64A', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x64B', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x64D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x64E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x650', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x651', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x652', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x653', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x654', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x655', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x656', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x657', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x658', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x659', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x65A', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x65B', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x65C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x65D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x65E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x660', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x661', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x662', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x663', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x664', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x665', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x666', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x667', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x668', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x669', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x66A', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x66B', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x66D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x66E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x670', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x671', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x672', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x673', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x674', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x675', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x676', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x677', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x678', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x679', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x67B', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x67D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x67E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x680', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x681', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x682', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x683', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x684', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x685', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x686', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x687', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x688', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x689', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x68A', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x68B', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x68D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x68E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x691', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x692', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x694', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x695', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x696', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x697', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x698', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x699', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x69B', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x69D', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x69E', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x69F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6A0', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6A1', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6A3', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x6A4', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x6A5', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6A6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6A9', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6AB', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6AE', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6B0', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6B1', '\x3', '\x2', '\x2', '\x2', 
		'\x6B9', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6B3', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6B8', 
		'\x3', '\x2', '\x2', '\x2', '\x6BA', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x6BB', '\x6BD', '\a', '\x223', '\x2', '\x2', '\x6BC', '\x6BE', '\a', 
		'\x224', '\x2', '\x2', '\x6BD', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BD', 
		'\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x6BF', '\x6C0', '\a', '\x1AA', '\x2', '\x2', '\x6C0', '\x6C1', 
		'\x5', '\x48E', '\x248', '\x2', '\x6C1', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x6C2', '\x6C3', '\a', '\x30', '\x2', '\x2', '\x6C3', '\x6C4', '\a', 
		'\x137', '\x2', '\x2', '\x6C4', '\x6C5', '\x5', '\x52C', '\x297', '\x2', 
		'\x6C5', '\x6C6', '\x5', '\x12', '\n', '\x2', '\x6C6', '\x6C7', '\x5', 
		'\x14', '\v', '\x2', '\x6C7', '\x11', '\x3', '\x2', '\x2', '\x2', '\x6C8', 
		'\x6CB', '\a', 'k', '\x2', '\x2', '\x6C9', '\x6CB', '\x3', '\x2', '\x2', 
		'\x2', '\x6CA', '\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6C9', 
		'\x3', '\x2', '\x2', '\x2', '\x6CB', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x6CC', '\x6D1', '\b', '\v', '\x1', '\x2', '\x6CD', '\x6CE', '\f', '\x4', 
		'\x2', '\x2', '\x6CE', '\x6D0', '\x5', '\x1A', '\xE', '\x2', '\x6CF', 
		'\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6D0', '\x6D3', '\x3', '\x2', '\x2', 
		'\x2', '\x6D1', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D2', 
		'\x3', '\x2', '\x2', '\x2', '\x6D2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x6D3', '\x6D1', '\x3', '\x2', '\x2', '\x2', '\x6D4', '\x6D9', '\b', 
		'\f', '\x1', '\x2', '\x6D5', '\x6D6', '\f', '\x4', '\x2', '\x2', '\x6D6', 
		'\x6D8', '\x5', '\x18', '\r', '\x2', '\x6D7', '\x6D5', '\x3', '\x2', '\x2', 
		'\x2', '\x6D8', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6D7', 
		'\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x17', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D9', '\x3', 
		'\x2', '\x2', '\x2', '\x6DC', '\x6DD', '\a', '\x118', '\x2', '\x2', '\x6DD', 
		'\x6F1', '\x5', '\x524', '\x293', '\x2', '\x6DE', '\x6DF', '\a', '\x118', 
		'\x2', '\x2', '\x6DF', '\x6F1', '\a', 'P', '\x2', '\x2', '\x6E0', '\x6E1', 
		'\a', '\xC5', '\x2', '\x2', '\x6E1', '\x6E2', '\a', '\x118', '\x2', '\x2', 
		'\x6E2', '\x6F1', '\x5', '\x524', '\x293', '\x2', '\x6E3', '\x6E4', '\a', 
		'\x165', '\x2', '\x2', '\x6E4', '\x6E5', '\a', '\x118', '\x2', '\x2', 
		'\x6E5', '\x6F1', '\x5', '\x524', '\x293', '\x2', '\x6E6', '\x6F1', '\a', 
		'\xE6', '\x2', '\x2', '\x6E7', '\x6E8', '\a', '\xA6', '\x2', '\x2', '\x6E8', 
		'\x6E9', '\a', 'L', '\x2', '\x2', '\x6E9', '\x6F1', '\x5', '\x52A', '\x296', 
		'\x2', '\x6EA', '\x6EB', '\a', '\x16C', '\x2', '\x2', '\x6EB', '\x6EC', 
		'\a', '\x169', '\x2', '\x2', '\x6EC', '\x6F1', '\x5', '\x524', '\x293', 
		'\x2', '\x6ED', '\x6EE', '\a', '\x65', '\x2', '\x2', '\x6EE', '\x6F1', 
		'\x5', '\x530', '\x299', '\x2', '\x6EF', '\x6F1', '\x5', '\x53A', '\x29E', 
		'\x2', '\x6F0', '\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6DE', 
		'\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6E0', '\x3', '\x2', '\x2', '\x2', 
		'\x6F0', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6E6', '\x3', 
		'\x2', '\x2', '\x2', '\x6F0', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6F0', 
		'\x6EA', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6ED', '\x3', '\x2', '\x2', 
		'\x2', '\x6F0', '\x6EF', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x6F2', '\x700', '\x5', '\x18', '\r', '\x2', 
		'\x6F3', '\x6F4', '\a', '\x155', '\x2', '\x2', '\x6F4', '\x700', '\x5', 
		'\x522', '\x292', '\x2', '\x6F5', '\x6F6', '\a', '\x88', '\x2', '\x2', 
		'\x6F6', '\x700', '\x5', '\x530', '\x299', '\x2', '\x6F7', '\x6F8', '\a', 
		'\x137', '\x2', '\x2', '\x6F8', '\x700', '\x5', '\x530', '\x299', '\x2', 
		'\x6F9', '\x6FA', '\a', '\x46', '\x2', '\x2', '\x6FA', '\x6FB', '\a', 
		'\x137', '\x2', '\x2', '\x6FB', '\x700', '\x5', '\x530', '\x299', '\x2', 
		'\x6FC', '\x6FD', '\a', '\x46', '\x2', '\x2', '\x6FD', '\x6FE', '\a', 
		'\x44', '\x2', '\x2', '\x6FE', '\x700', '\x5', '\x530', '\x299', '\x2', 
		'\x6FF', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x6F3', '\x3', 
		'\x2', '\x2', '\x2', '\x6FF', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6FF', 
		'\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x6F9', '\x3', '\x2', '\x2', 
		'\x2', '\x6FF', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x700', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x701', '\x702', '\a', '\x30', '\x2', '\x2', 
		'\x702', '\x703', '\a', '\x65', '\x2', '\x2', '\x703', '\x704', '\x5', 
		'\x52C', '\x297', '\x2', '\x704', '\x705', '\x5', '\x12', '\n', '\x2', 
		'\x705', '\x706', '\x5', '\x14', '\v', '\x2', '\x706', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x707', '\x708', '\a', '\x8C', '\x2', '\x2', '\x708', 
		'\x709', '\a', '\x137', '\x2', '\x2', '\x709', '\x70A', '\x5', '\x52E', 
		'\x298', '\x2', '\x70A', '\x70B', '\x5', '\x12', '\n', '\x2', '\x70B', 
		'\x70C', '\x5', '\x16', '\f', '\x2', '\x70C', '\x714', '\x3', '\x2', '\x2', 
		'\x2', '\x70D', '\x70E', '\a', '\x8C', '\x2', '\x2', '\x70E', '\x70F', 
		'\a', '\x65', '\x2', '\x2', '\x70F', '\x710', '\x5', '\x52E', '\x298', 
		'\x2', '\x710', '\x711', '\x5', '\x12', '\n', '\x2', '\x711', '\x712', 
		'\x5', '\x16', '\f', '\x2', '\x712', '\x714', '\x3', '\x2', '\x2', '\x2', 
		'\x713', '\x707', '\x3', '\x2', '\x2', '\x2', '\x713', '\x70D', '\x3', 
		'\x2', '\x2', '\x2', '\x714', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x715', 
		'\x71A', '\x3', '\x2', '\x2', '\x2', '\x716', '\x717', '\a', '\x46', '\x2', 
		'\x2', '\x717', '\x718', '\a', '\xB1', '\x2', '\x2', '\x718', '\x71A', 
		'\x5', '\x512', '\x28A', '\x2', '\x719', '\x715', '\x3', '\x2', '\x2', 
		'\x2', '\x719', '\x716', '\x3', '\x2', '\x2', '\x2', '\x71A', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x71B', '\x71C', '\a', '\x8C', '\x2', '\x2', '\x71C', 
		'\x71D', '\a', '\x137', '\x2', '\x2', '\x71D', '\x71E', '\x5', '\x52E', 
		'\x298', '\x2', '\x71E', '\x71F', '\x5', ' ', '\x11', '\x2', '\x71F', 
		'\x720', '\x5', 'R', '*', '\x2', '\x720', '\x734', '\x3', '\x2', '\x2', 
		'\x2', '\x721', '\x722', '\a', '\x8C', '\x2', '\x2', '\x722', '\x723', 
		'\a', '\x137', '\x2', '\x2', '\x723', '\x724', '\a', ' ', '\x2', '\x2', 
		'\x724', '\x725', '\x5', ' ', '\x11', '\x2', '\x725', '\x726', '\x5', 
		'R', '*', '\x2', '\x726', '\x734', '\x3', '\x2', '\x2', '\x2', '\x727', 
		'\x728', '\a', '\x8C', '\x2', '\x2', '\x728', '\x729', '\a', '\x65', '\x2', 
		'\x2', '\x729', '\x72A', '\x5', '\x52E', '\x298', '\x2', '\x72A', '\x72B', 
		'\x5', ' ', '\x11', '\x2', '\x72B', '\x72C', '\x5', 'R', '*', '\x2', '\x72C', 
		'\x734', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72E', '\a', '\x8C', '\x2', 
		'\x2', '\x72E', '\x72F', '\a', '\x65', '\x2', '\x2', '\x72F', '\x730', 
		'\a', ' ', '\x2', '\x2', '\x730', '\x731', '\x5', ' ', '\x11', '\x2', 
		'\x731', '\x732', '\x5', 'R', '*', '\x2', '\x732', '\x734', '\x3', '\x2', 
		'\x2', '\x2', '\x733', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x733', '\x721', 
		'\x3', '\x2', '\x2', '\x2', '\x733', '\x727', '\x3', '\x2', '\x2', '\x2', 
		'\x733', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x734', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x735', '\x736', '\a', '\xC1', '\x2', '\x2', '\x736', '\x737', 
		'\a', '\x137', '\x2', '\x2', '\x737', '\x74E', '\x5', '\x530', '\x299', 
		'\x2', '\x738', '\x739', '\a', '\xC1', '\x2', '\x2', '\x739', '\x73A', 
		'\a', '\x137', '\x2', '\x2', '\x73A', '\x73B', '\a', '\xDE', '\x2', '\x2', 
		'\x73B', '\x73C', '\a', '\x185', '\x2', '\x2', '\x73C', '\x74E', '\x5', 
		'\x530', '\x299', '\x2', '\x73D', '\x73E', '\a', '\xC1', '\x2', '\x2', 
		'\x73E', '\x73F', '\a', '\x65', '\x2', '\x2', '\x73F', '\x74E', '\x5', 
		'\x530', '\x299', '\x2', '\x740', '\x741', '\a', '\xC1', '\x2', '\x2', 
		'\x741', '\x742', '\a', '\x65', '\x2', '\x2', '\x742', '\x743', '\a', 
		'\xDE', '\x2', '\x2', '\x743', '\x744', '\a', '\x185', '\x2', '\x2', '\x744', 
		'\x74E', '\x5', '\x530', '\x299', '\x2', '\x745', '\x746', '\a', '\xC1', 
		'\x2', '\x2', '\x746', '\x747', '\a', '\x44', '\x2', '\x2', '\x747', '\x74E', 
		'\x5', '\x530', '\x299', '\x2', '\x748', '\x749', '\a', '\xC1', '\x2', 
		'\x2', '\x749', '\x74A', '\a', '\x44', '\x2', '\x2', '\x74A', '\x74B', 
		'\a', '\xDE', '\x2', '\x2', '\x74B', '\x74C', '\a', '\x185', '\x2', '\x2', 
		'\x74C', '\x74E', '\x5', '\x530', '\x299', '\x2', '\x74D', '\x735', '\x3', 
		'\x2', '\x2', '\x2', '\x74D', '\x738', '\x3', '\x2', '\x2', '\x2', '\x74D', 
		'\x73D', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x740', '\x3', '\x2', '\x2', 
		'\x2', '\x74D', '\x745', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x748', 
		'\x3', '\x2', '\x2', '\x2', '\x74E', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x74F', '\x750', '\a', '\x30', '\x2', '\x2', '\x750', '\x751', '\a', 
		'\x44', '\x2', '\x2', '\x751', '\x752', '\x5', '\x52C', '\x297', '\x2', 
		'\x752', '\x753', '\x5', '\x12', '\n', '\x2', '\x753', '\x754', '\x5', 
		'\x14', '\v', '\x2', '\x754', '\'', '\x3', '\x2', '\x2', '\x2', '\x755', 
		'\x756', '\a', '\x8C', '\x2', '\x2', '\x756', '\x757', '\a', '\x44', '\x2', 
		'\x2', '\x757', '\x758', '\x5', '\x52E', '\x298', '\x2', '\x758', '\x759', 
		'\x5', '*', '\x16', '\x2', '\x759', '\x75A', '\a', '\x65', '\x2', '\x2', 
		'\x75A', '\x75B', '\x5', '\x530', '\x299', '\x2', '\x75B', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x75C', '\x75D', '\t', '\x2', '\x2', '\x2', '\x75D', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x75E', '\x75F', '\a', '\x30', '\x2', 
		'\x2', '\x75F', '\x760', '\a', '\x13C', '\x2', '\x2', '\x760', '\x761', 
		'\x5', '.', '\x18', '\x2', '\x761', '\x762', '\a', 'l', '\x2', '\x2', 
		'\x762', '\x763', '\x5', '\x52E', '\x298', '\x2', '\x763', '\x764', '\x5', 
		'\x30', '\x19', '\x2', '\x764', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x765', 
		'\x766', '\a', '\x30', '\x2', '\x2', '\x766', '\x767', '\a', '\x13C', 
		'\x2', '\x2', '\x767', '\x768', '\x5', '\x532', '\x29A', '\x2', '\x768', 
		'\x769', '\x5', '\x30', '\x19', '\x2', '\x769', '\x77D', '\x3', '\x2', 
		'\x2', '\x2', '\x76A', '\x76B', '\a', '\x30', '\x2', '\x2', '\x76B', '\x76C', 
		'\a', '\x13C', '\x2', '\x2', '\x76C', '\x76D', '\a', '\xDE', '\x2', '\x2', 
		'\x76D', '\x76E', '\a', 'O', '\x2', '\x2', '\x76E', '\x76F', '\a', '\x185', 
		'\x2', '\x2', '\x76F', '\x770', '\x5', '.', '\x18', '\x2', '\x770', '\x771', 
		'\a', 'l', '\x2', '\x2', '\x771', '\x772', '\x5', '\x52E', '\x298', '\x2', 
		'\x772', '\x773', '\x5', '\x30', '\x19', '\x2', '\x773', '\x77D', '\x3', 
		'\x2', '\x2', '\x2', '\x774', '\x775', '\a', '\x30', '\x2', '\x2', '\x775', 
		'\x776', '\a', '\x13C', '\x2', '\x2', '\x776', '\x777', '\a', '\xDE', 
		'\x2', '\x2', '\x777', '\x778', '\a', 'O', '\x2', '\x2', '\x778', '\x779', 
		'\a', '\x185', '\x2', '\x2', '\x779', '\x77A', '\x5', '\x532', '\x29A', 
		'\x2', '\x77A', '\x77B', '\x5', '\x30', '\x19', '\x2', '\x77B', '\x77D', 
		'\x3', '\x2', '\x2', '\x2', '\x77C', '\x75E', '\x3', '\x2', '\x2', '\x2', 
		'\x77C', '\x765', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x76A', '\x3', 
		'\x2', '\x2', '\x2', '\x77C', '\x774', '\x3', '\x2', '\x2', '\x2', '\x77D', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x77E', '\x781', '\x5', '\x532', '\x29A', 
		'\x2', '\x77F', '\x781', '\x3', '\x2', '\x2', '\x2', '\x780', '\x77E', 
		'\x3', '\x2', '\x2', '\x2', '\x780', '\x77F', '\x3', '\x2', '\x2', '\x2', 
		'\x781', '/', '\x3', '\x2', '\x2', '\x2', '\x782', '\x787', '\b', '\x19', 
		'\x1', '\x2', '\x783', '\x784', '\f', '\x4', '\x2', '\x2', '\x784', '\x786', 
		'\x5', '\x32', '\x1A', '\x2', '\x785', '\x783', '\x3', '\x2', '\x2', '\x2', 
		'\x786', '\x789', '\x3', '\x2', '\x2', '\x2', '\x787', '\x785', '\x3', 
		'\x2', '\x2', '\x2', '\x787', '\x788', '\x3', '\x2', '\x2', '\x2', '\x788', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x789', '\x787', '\x3', '\x2', '\x2', 
		'\x2', '\x78A', '\x791', '\x5', '\xAE', 'X', '\x2', '\x78B', '\x791', 
		'\x5', '\x24E', '\x128', '\x2', '\x78C', '\x791', '\x5', '\x118', '\x8D', 
		'\x2', '\x78D', '\x791', '\x5', '\x196', '\xCC', '\x2', '\x78E', '\x791', 
		'\x5', '\x22A', '\x116', '\x2', '\x78F', '\x791', '\x5', '\x320', '\x191', 
		'\x2', '\x790', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x790', '\x78B', 
		'\x3', '\x2', '\x2', '\x2', '\x790', '\x78C', '\x3', '\x2', '\x2', '\x2', 
		'\x790', '\x78D', '\x3', '\x2', '\x2', '\x2', '\x790', '\x78E', '\x3', 
		'\x2', '\x2', '\x2', '\x790', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x791', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x792', '\x793', '\a', '\x146', '\x2', 
		'\x2', '\x793', '\x79B', '\x5', '\x36', '\x1C', '\x2', '\x794', '\x795', 
		'\a', '\x146', '\x2', '\x2', '\x795', '\x796', '\a', '\xF7', '\x2', '\x2', 
		'\x796', '\x79B', '\x5', '\x36', '\x1C', '\x2', '\x797', '\x798', '\a', 
		'\x146', '\x2', '\x2', '\x798', '\x799', '\a', '\x145', '\x2', '\x2', 
		'\x799', '\x79B', '\x5', '\x36', '\x1C', '\x2', '\x79A', '\x792', '\x3', 
		'\x2', '\x2', '\x2', '\x79A', '\x794', '\x3', '\x2', '\x2', '\x2', '\x79A', 
		'\x797', '\x3', '\x2', '\x2', '\x2', '\x79B', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x79C', '\x79D', '\a', '\x15D', '\x2', '\x2', '\x79D', '\x7A5', 
		'\x5', '\x31A', '\x18E', '\x2', '\x79E', '\x79F', '\a', '\x145', '\x2', 
		'\x2', '\x79F', '\x7A0', '\a', '\x9C', '\x2', '\x2', '\x7A0', '\x7A1', 
		'\a', '&', '\x2', '\x2', '\x7A1', '\x7A2', '\a', '\x15D', '\x2', '\x2', 
		'\x7A2', '\x7A5', '\x5', '\x31A', '\x18E', '\x2', '\x7A3', '\x7A5', '\x5', 
		':', '\x1E', '\x2', '\x7A4', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x7A4', 
		'\x79E', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A3', '\x3', '\x2', '\x2', 
		'\x2', '\x7A5', '\x37', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A7', 
		'\x5', '<', '\x1F', '\x2', '\x7A7', '\x7A8', '\a', '`', '\x2', '\x2', 
		'\x7A8', '\x7A9', '\x5', '>', ' ', '\x2', '\x7A9', '\x7B7', '\x3', '\x2', 
		'\x2', '\x2', '\x7AA', '\x7AB', '\x5', '<', '\x1F', '\x2', '\x7AB', '\x7AC', 
		'\a', '\f', '\x2', '\x2', '\x7AC', '\x7AD', '\x5', '>', ' ', '\x2', '\x7AD', 
		'\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\x5', '<', '\x1F', 
		'\x2', '\x7AF', '\x7B0', '\a', '`', '\x2', '\x2', '\x7B0', '\x7B1', '\a', 
		'\x37', '\x2', '\x2', '\x7B1', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7B2', 
		'\x7B3', '\x5', '<', '\x1F', '\x2', '\x7B3', '\x7B4', '\a', '\f', '\x2', 
		'\x2', '\x7B4', '\x7B5', '\a', '\x37', '\x2', '\x2', '\x7B5', '\x7B7', 
		'\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7A6', '\x3', '\x2', '\x2', '\x2', 
		'\x7B6', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7AE', '\x3', 
		'\x2', '\x2', '\x2', '\x7B6', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7B7', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x7B8', '\x7D5', '\x5', '\x38', '\x1D', 
		'\x2', '\x7B9', '\x7BA', '\x5', '<', '\x1F', '\x2', '\x7BA', '\x7BB', 
		'\a', '\x42', '\x2', '\x2', '\x7BB', '\x7BC', '\a', '\x1AB', '\x2', '\x2', 
		'\x7BC', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7BE', '\a', 
		'\x19B', '\x2', '\x2', '\x7BE', '\x7BF', '\a', '\x17B', '\x2', '\x2', 
		'\x7BF', '\x7D5', '\x5', '\x46', '$', '\x2', '\x7C0', '\x7C1', '\a', '\x1AC', 
		'\x2', '\x2', '\x7C1', '\x7D5', '\x5', '\x524', '\x293', '\x2', '\x7C2', 
		'\x7C3', '\a', '\x13C', '\x2', '\x2', '\x7C3', '\x7D5', '\x5', '\x524', 
		'\x293', '\x2', '\x7C4', '\x7C5', '\a', '\x104', '\x2', '\x2', '\x7C5', 
		'\x7D5', '\x5', 'H', '%', '\x2', '\x7C6', '\x7C7', '\a', '\x137', '\x2', 
		'\x2', '\x7C7', '\x7D5', '\x5', 'J', '&', '\x2', '\x7C8', '\x7C9', '\a', 
		'\x145', '\x2', '\x2', '\x7C9', '\x7CA', '\a', 'l', '\x2', '\x2', '\x7CA', 
		'\x7D5', '\x5', 'J', '&', '\x2', '\x7CB', '\x7CC', '\a', '\x145', '\x2', 
		'\x2', '\x7CC', '\x7CD', '\a', 'l', '\x2', '\x2', '\x7CD', '\x7D5', '\a', 
		'\x37', '\x2', '\x2', '\x7CE', '\x7CF', '\a', '\x178', '\x2', '\x2', '\x7CF', 
		'\x7D0', '\a', '\x110', '\x2', '\x2', '\x7D0', '\x7D5', '\x5', '\x4A0', 
		'\x251', '\x2', '\x7D1', '\x7D2', '\a', '\x15D', '\x2', '\x2', '\x7D2', 
		'\x7D3', '\a', '\x14A', '\x2', '\x2', '\x7D3', '\x7D5', '\x5', '\x524', 
		'\x293', '\x2', '\x7D4', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7D4', 
		'\x7B9', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7BD', '\x3', '\x2', '\x2', 
		'\x2', '\x7D4', '\x7C0', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7C2', 
		'\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7C4', '\x3', '\x2', '\x2', '\x2', 
		'\x7D4', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7C8', '\x3', 
		'\x2', '\x2', '\x2', '\x7D4', '\x7CB', '\x3', '\x2', '\x2', '\x2', '\x7D4', 
		'\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7D1', '\x3', '\x2', '\x2', 
		'\x2', '\x7D5', ';', '\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D7', '\b', 
		'\x1F', '\x1', '\x2', '\x7D7', '\x7D8', '\x5', '\x532', '\x29A', '\x2', 
		'\x7D8', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DA', '\f', 
		'\x3', '\x2', '\x2', '\x7DA', '\x7DB', '\a', '\r', '\x2', '\x2', '\x7DB', 
		'\x7DD', '\x5', '\x532', '\x29A', '\x2', '\x7DC', '\x7D9', '\x3', '\x2', 
		'\x2', '\x2', '\x7DD', '\x7E0', '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DC', 
		'\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DF', '\x3', '\x2', '\x2', '\x2', 
		'\x7DF', '=', '\x3', '\x2', '\x2', '\x2', '\x7E0', '\x7DE', '\x3', '\x2', 
		'\x2', '\x2', '\x7E1', '\x7E2', '\b', ' ', '\x1', '\x2', '\x7E2', '\x7E3', 
		'\x5', '@', '!', '\x2', '\x7E3', '\x7E9', '\x3', '\x2', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\f', '\x3', '\x2', '\x2', '\x7E5', '\x7E6', '\a', '\b', 
		'\x2', '\x2', '\x7E6', '\x7E8', '\x5', '@', '!', '\x2', '\x7E7', '\x7E4', 
		'\x3', '\x2', '\x2', '\x2', '\x7E8', '\x7EB', '\x3', '\x2', '\x2', '\x2', 
		'\x7E9', '\x7E7', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x3', 
		'\x2', '\x2', '\x2', '\x7EA', '?', '\x3', '\x2', '\x2', '\x2', '\x7EB', 
		'\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7EF', '\x5', '\x44', 
		'#', '\x2', '\x7ED', '\x7EF', '\x5', '\x126', '\x94', '\x2', '\x7EE', 
		'\x7EC', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7ED', '\x3', '\x2', '\x2', 
		'\x2', '\x7EF', '\x41', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F1', 
		'\a', '\x125', '\x2', '\x2', '\x7F1', '\x7F8', '\a', '\x164', '\x2', '\x2', 
		'\x7F2', '\x7F3', '\a', '\x125', '\x2', '\x2', '\x7F3', '\x7F8', '\a', 
		'\xA4', '\x2', '\x2', '\x7F4', '\x7F5', '\a', '\x12F', '\x2', '\x2', '\x7F5', 
		'\x7F8', '\a', '\x125', '\x2', '\x2', '\x7F6', '\x7F8', '\a', '\x143', 
		'\x2', '\x2', '\x7F7', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F2', 
		'\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F4', '\x3', '\x2', '\x2', '\x2', 
		'\x7F7', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x7F9', '\x7FE', '\a', '\x62', '\x2', '\x2', '\x7FA', 
		'\x7FE', '\a', '>', '\x2', '\x2', '\x7FB', '\x7FE', '\a', 'R', '\x2', 
		'\x2', '\x7FC', '\x7FE', '\x5', 'J', '&', '\x2', '\x7FD', '\x7F9', '\x3', 
		'\x2', '\x2', '\x2', '\x7FD', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x7FD', 
		'\x7FB', '\x3', '\x2', '\x2', '\x2', '\x7FD', '\x7FC', '\x3', '\x2', '\x2', 
		'\x2', '\x7FE', '\x45', '\x3', '\x2', '\x2', '\x2', '\x7FF', '\x80F', 
		'\x5', '\x524', '\x293', '\x2', '\x800', '\x80F', '\x5', '\x53A', '\x29E', 
		'\x2', '\x801', '\x802', '\x5', '\x47A', '\x23E', '\x2', '\x802', '\x803', 
		'\x5', '\x524', '\x293', '\x2', '\x803', '\x804', '\x5', '\x47E', '\x240', 
		'\x2', '\x804', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x805', '\x806', 
		'\x5', '\x47A', '\x23E', '\x2', '\x806', '\x807', '\a', '\x4', '\x2', 
		'\x2', '\x807', '\x808', '\x5', '\x522', '\x292', '\x2', '\x808', '\x809', 
		'\a', '\x5', '\x2', '\x2', '\x809', '\x80A', '\x5', '\x524', '\x293', 
		'\x2', '\x80A', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80F', 
		'\x5', '\x126', '\x94', '\x2', '\x80C', '\x80F', '\a', '\x37', '\x2', 
		'\x2', '\x80D', '\x80F', '\a', '\xF7', '\x2', '\x2', '\x80E', '\x7FF', 
		'\x3', '\x2', '\x2', '\x2', '\x80E', '\x800', '\x3', '\x2', '\x2', '\x2', 
		'\x80E', '\x801', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x805', '\x3', 
		'\x2', '\x2', '\x2', '\x80E', '\x80B', '\x3', '\x2', '\x2', '\x2', '\x80E', 
		'\x80C', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x80D', '\x3', '\x2', '\x2', 
		'\x2', '\x80F', 'G', '\x3', '\x2', '\x2', '\x2', '\x810', '\x814', '\x5', 
		'\x524', '\x293', '\x2', '\x811', '\x814', '\a', '\x37', '\x2', '\x2', 
		'\x812', '\x814', '\x3', '\x2', '\x2', '\x2', '\x813', '\x810', '\x3', 
		'\x2', '\x2', '\x2', '\x813', '\x811', '\x3', '\x2', '\x2', '\x2', '\x813', 
		'\x812', '\x3', '\x2', '\x2', '\x2', '\x814', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x815', '\x818', '\x5', '\x536', '\x29C', '\x2', '\x816', '\x818', 
		'\x5', '\x524', '\x293', '\x2', '\x817', '\x815', '\x3', '\x2', '\x2', 
		'\x2', '\x817', '\x816', '\x3', '\x2', '\x2', '\x2', '\x818', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x819', '\x81A', '\a', '\x132', '\x2', '\x2', '\x81A', 
		'\x81B', '\x5', 'N', '(', '\x2', '\x81B', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x81C', '\x825', '\x5', 'P', ')', '\x2', '\x81D', '\x81E', '\a', '\x19B', 
		'\x2', '\x2', '\x81E', '\x825', '\a', '\x17B', '\x2', '\x2', '\x81F', 
		'\x820', '\a', '\x15D', '\x2', '\x2', '\x820', '\x821', '\a', '\xED', 
		'\x2', '\x2', '\x821', '\x825', '\a', '\xF4', '\x2', '\x2', '\x822', '\x823', 
		'\a', '\x145', '\x2', '\x2', '\x823', '\x825', '\a', 'l', '\x2', '\x2', 
		'\x824', '\x81C', '\x3', '\x2', '\x2', '\x2', '\x824', '\x81D', '\x3', 
		'\x2', '\x2', '\x2', '\x824', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x824', 
		'\x822', '\x3', '\x2', '\x2', '\x2', '\x825', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x826', '\x829', '\x5', '<', '\x1F', '\x2', '\x827', '\x829', 
		'\a', ' ', '\x2', '\x2', '\x828', '\x826', '\x3', '\x2', '\x2', '\x2', 
		'\x828', '\x827', '\x3', '\x2', '\x2', '\x2', '\x829', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x82A', '\x82B', '\a', '\x146', '\x2', '\x2', '\x82B', 
		'\x82E', '\x5', '\x36', '\x1C', '\x2', '\x82C', '\x82E', '\x5', 'L', '\'', 
		'\x2', '\x82D', '\x82A', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x82C', 
		'\x3', '\x2', '\x2', '\x2', '\x82E', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x82F', '\x830', '\a', '\x146', '\x2', '\x2', '\x830', '\x833', '\x5', 
		':', '\x1E', '\x2', '\x831', '\x833', '\x5', 'L', '\'', '\x2', '\x832', 
		'\x82F', '\x3', '\x2', '\x2', '\x2', '\x832', '\x831', '\x3', '\x2', '\x2', 
		'\x2', '\x833', 'U', '\x3', '\x2', '\x2', '\x2', '\x834', '\x835', '\a', 
		'\x148', '\x2', '\x2', '\x835', '\x843', '\x5', '<', '\x1F', '\x2', '\x836', 
		'\x837', '\a', '\x148', '\x2', '\x2', '\x837', '\x838', '\a', '\x19B', 
		'\x2', '\x2', '\x838', '\x843', '\a', '\x17B', '\x2', '\x2', '\x839', 
		'\x83A', '\a', '\x148', '\x2', '\x2', '\x83A', '\x83B', '\a', '\x15D', 
		'\x2', '\x2', '\x83B', '\x83C', '\a', '\xED', '\x2', '\x2', '\x83C', '\x843', 
		'\a', '\xF4', '\x2', '\x2', '\x83D', '\x83E', '\a', '\x148', '\x2', '\x2', 
		'\x83E', '\x83F', '\a', '\x145', '\x2', '\x2', '\x83F', '\x843', '\a', 
		'l', '\x2', '\x2', '\x840', '\x841', '\a', '\x148', '\x2', '\x2', '\x841', 
		'\x843', '\a', ' ', '\x2', '\x2', '\x842', '\x834', '\x3', '\x2', '\x2', 
		'\x2', '\x842', '\x836', '\x3', '\x2', '\x2', '\x2', '\x842', '\x839', 
		'\x3', '\x2', '\x2', '\x2', '\x842', '\x83D', '\x3', '\x2', '\x2', '\x2', 
		'\x842', '\x840', '\x3', '\x2', '\x2', '\x2', '\x843', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x844', '\x845', '\a', '\x146', '\x2', '\x2', '\x845', 
		'\x846', '\a', '\xA7', '\x2', '\x2', '\x846', '\x847', '\x5', 'Z', '.', 
		'\x2', '\x847', '\x848', '\x5', '\\', '/', '\x2', '\x848', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x849', '\x84C', '\a', ' ', '\x2', '\x2', '\x84A', 
		'\x84C', '\x5', '\x50C', '\x287', '\x2', '\x84B', '\x849', '\x3', '\x2', 
		'\x2', '\x2', '\x84B', '\x84A', '\x3', '\x2', '\x2', '\x2', '\x84C', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x84D', '\x84E', '\t', '\x3', '\x2', '\x2', 
		'\x84E', ']', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x850', '\a', '\x9D', 
		'\x2', '\x2', '\x850', '_', '\x3', '\x2', '\x2', '\x2', '\x851', '\x852', 
		'\a', '\xBD', '\x2', '\x2', '\x852', '\x85C', '\a', ' ', '\x2', '\x2', 
		'\x853', '\x854', '\a', '\xBD', '\x2', '\x2', '\x854', '\x85C', '\a', 
		'\x159', '\x2', '\x2', '\x855', '\x856', '\a', '\xBD', '\x2', '\x2', '\x856', 
		'\x85C', '\a', '\x15B', '\x2', '\x2', '\x857', '\x858', '\a', '\xBD', 
		'\x2', '\x2', '\x858', '\x85C', '\a', '\x119', '\x2', '\x2', '\x859', 
		'\x85A', '\a', '\xBD', '\x2', '\x2', '\x85A', '\x85C', '\a', '\x142', 
		'\x2', '\x2', '\x85B', '\x851', '\x3', '\x2', '\x2', '\x2', '\x85B', '\x853', 
		'\x3', '\x2', '\x2', '\x2', '\x85B', '\x855', '\x3', '\x2', '\x2', '\x2', 
		'\x85B', '\x857', '\x3', '\x2', '\x2', '\x2', '\x85B', '\x859', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x61', '\x3', '\x2', '\x2', '\x2', '\x85D', 
		'\x85E', '\a', '\x8C', '\x2', '\x2', '\x85E', '\x85F', '\a', '^', '\x2', 
		'\x2', '\x85F', '\x860', '\x5', '\x42C', '\x217', '\x2', '\x860', '\x861', 
		'\x5', '\x64', '\x33', '\x2', '\x861', '\x908', '\x3', '\x2', '\x2', '\x2', 
		'\x862', '\x863', '\a', '\x8C', '\x2', '\x2', '\x863', '\x864', '\a', 
		'^', '\x2', '\x2', '\x864', '\x865', '\a', '\xDE', '\x2', '\x2', '\x865', 
		'\x866', '\a', '\x185', '\x2', '\x2', '\x866', '\x867', '\x5', '\x42C', 
		'\x217', '\x2', '\x867', '\x868', '\x5', '\x64', '\x33', '\x2', '\x868', 
		'\x908', '\x3', '\x2', '\x2', '\x2', '\x869', '\x86A', '\a', '\x8C', '\x2', 
		'\x2', '\x86A', '\x86B', '\a', '^', '\x2', '\x2', '\x86B', '\x86C', '\x5', 
		'\x42C', '\x217', '\x2', '\x86C', '\x86D', '\x5', '\x66', '\x34', '\x2', 
		'\x86D', '\x908', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x86F', '\a', 
		'\x8C', '\x2', '\x2', '\x86F', '\x870', '\a', '^', '\x2', '\x2', '\x870', 
		'\x871', '\a', '\xDE', '\x2', '\x2', '\x871', '\x872', '\a', '\x185', 
		'\x2', '\x2', '\x872', '\x873', '\x5', '\x42C', '\x217', '\x2', '\x873', 
		'\x874', '\x5', '\x66', '\x34', '\x2', '\x874', '\x908', '\x3', '\x2', 
		'\x2', '\x2', '\x875', '\x876', '\a', '\x8C', '\x2', '\x2', '\x876', '\x877', 
		'\a', '^', '\x2', '\x2', '\x877', '\x878', '\a', ' ', '\x2', '\x2', '\x878', 
		'\x879', '\a', '\x46', '\x2', '\x2', '\x879', '\x87A', '\a', '\x158', 
		'\x2', '\x2', '\x87A', '\x87B', '\x5', '\x512', '\x28A', '\x2', '\x87B', 
		'\x87C', '\a', '\x146', '\x2', '\x2', '\x87C', '\x87D', '\a', '\x158', 
		'\x2', '\x2', '\x87D', '\x87E', '\x5', '\x512', '\x28A', '\x2', '\x87E', 
		'\x87F', '\x5', '\x3A4', '\x1D3', '\x2', '\x87F', '\x908', '\x3', '\x2', 
		'\x2', '\x2', '\x880', '\x881', '\a', '\x8C', '\x2', '\x2', '\x881', '\x882', 
		'\a', '^', '\x2', '\x2', '\x882', '\x883', '\a', ' ', '\x2', '\x2', '\x883', 
		'\x884', '\a', '\x46', '\x2', '\x2', '\x884', '\x885', '\a', '\x158', 
		'\x2', '\x2', '\x885', '\x886', '\x5', '\x512', '\x28A', '\x2', '\x886', 
		'\x887', '\a', '\x112', '\x2', '\x2', '\x887', '\x888', '\a', '\x95', 
		'\x2', '\x2', '\x888', '\x889', '\x5', '\x530', '\x299', '\x2', '\x889', 
		'\x88A', '\a', '\x146', '\x2', '\x2', '\x88A', '\x88B', '\a', '\x158', 
		'\x2', '\x2', '\x88B', '\x88C', '\x5', '\x512', '\x28A', '\x2', '\x88C', 
		'\x88D', '\x5', '\x3A4', '\x1D3', '\x2', '\x88D', '\x908', '\x3', '\x2', 
		'\x2', '\x2', '\x88E', '\x88F', '\a', '\x8C', '\x2', '\x2', '\x88F', '\x890', 
		'\a', '\xE4', '\x2', '\x2', '\x890', '\x891', '\x5', '\x50E', '\x288', 
		'\x2', '\x891', '\x892', '\x5', '\x64', '\x33', '\x2', '\x892', '\x908', 
		'\x3', '\x2', '\x2', '\x2', '\x893', '\x894', '\a', '\x8C', '\x2', '\x2', 
		'\x894', '\x895', '\a', '\xE4', '\x2', '\x2', '\x895', '\x896', '\a', 
		'\xDE', '\x2', '\x2', '\x896', '\x897', '\a', '\x185', '\x2', '\x2', '\x897', 
		'\x898', '\x5', '\x50E', '\x288', '\x2', '\x898', '\x899', '\x5', '\x64', 
		'\x33', '\x2', '\x899', '\x908', '\x3', '\x2', '\x2', '\x2', '\x89A', 
		'\x89B', '\a', '\x8C', '\x2', '\x2', '\x89B', '\x89C', '\a', '\xE4', '\x2', 
		'\x2', '\x89C', '\x89D', '\x5', '\x50E', '\x288', '\x2', '\x89D', '\x89E', 
		'\x5', 'h', '\x35', '\x2', '\x89E', '\x908', '\x3', '\x2', '\x2', '\x2', 
		'\x89F', '\x8A0', '\a', '\x8C', '\x2', '\x2', '\x8A0', '\x8A1', '\a', 
		'\xE4', '\x2', '\x2', '\x8A1', '\x8A2', '\a', ' ', '\x2', '\x2', '\x8A2', 
		'\x8A3', '\a', '\x46', '\x2', '\x2', '\x8A3', '\x8A4', '\a', '\x158', 
		'\x2', '\x2', '\x8A4', '\x8A5', '\x5', '\x512', '\x28A', '\x2', '\x8A5', 
		'\x8A6', '\a', '\x146', '\x2', '\x2', '\x8A6', '\x8A7', '\a', '\x158', 
		'\x2', '\x2', '\x8A7', '\x8A8', '\x5', '\x512', '\x28A', '\x2', '\x8A8', 
		'\x8A9', '\x5', '\x3A4', '\x1D3', '\x2', '\x8A9', '\x908', '\x3', '\x2', 
		'\x2', '\x2', '\x8AA', '\x8AB', '\a', '\x8C', '\x2', '\x2', '\x8AB', '\x8AC', 
		'\a', '\xE4', '\x2', '\x2', '\x8AC', '\x8AD', '\a', ' ', '\x2', '\x2', 
		'\x8AD', '\x8AE', '\a', '\x46', '\x2', '\x2', '\x8AE', '\x8AF', '\a', 
		'\x158', '\x2', '\x2', '\x8AF', '\x8B0', '\x5', '\x512', '\x28A', '\x2', 
		'\x8B0', '\x8B1', '\a', '\x112', '\x2', '\x2', '\x8B1', '\x8B2', '\a', 
		'\x95', '\x2', '\x2', '\x8B2', '\x8B3', '\x5', '\x530', '\x299', '\x2', 
		'\x8B3', '\x8B4', '\a', '\x146', '\x2', '\x2', '\x8B4', '\x8B5', '\a', 
		'\x158', '\x2', '\x2', '\x8B5', '\x8B6', '\x5', '\x512', '\x28A', '\x2', 
		'\x8B6', '\x8B7', '\x5', '\x3A4', '\x1D3', '\x2', '\x8B7', '\x908', '\x3', 
		'\x2', '\x2', '\x2', '\x8B8', '\x8B9', '\a', '\x8C', '\x2', '\x2', '\x8B9', 
		'\x8BA', '\a', '\x141', '\x2', '\x2', '\x8BA', '\x8BB', '\x5', '\x50E', 
		'\x288', '\x2', '\x8BB', '\x8BC', '\x5', '\x64', '\x33', '\x2', '\x8BC', 
		'\x908', '\x3', '\x2', '\x2', '\x2', '\x8BD', '\x8BE', '\a', '\x8C', '\x2', 
		'\x2', '\x8BE', '\x8BF', '\a', '\x141', '\x2', '\x2', '\x8BF', '\x8C0', 
		'\a', '\xDE', '\x2', '\x2', '\x8C0', '\x8C1', '\a', '\x185', '\x2', '\x2', 
		'\x8C1', '\x8C2', '\x5', '\x50E', '\x288', '\x2', '\x8C2', '\x8C3', '\x5', 
		'\x64', '\x33', '\x2', '\x8C3', '\x908', '\x3', '\x2', '\x2', '\x2', '\x8C4', 
		'\x8C5', '\a', '\x8C', '\x2', '\x2', '\x8C5', '\x8C6', '\a', '\x171', 
		'\x2', '\x2', '\x8C6', '\x8C7', '\x5', '\x50E', '\x288', '\x2', '\x8C7', 
		'\x8C8', '\x5', '\x64', '\x33', '\x2', '\x8C8', '\x908', '\x3', '\x2', 
		'\x2', '\x2', '\x8C9', '\x8CA', '\a', '\x8C', '\x2', '\x2', '\x8CA', '\x8CB', 
		'\a', '\x171', '\x2', '\x2', '\x8CB', '\x8CC', '\a', '\xDE', '\x2', '\x2', 
		'\x8CC', '\x8CD', '\a', '\x185', '\x2', '\x2', '\x8CD', '\x8CE', '\x5', 
		'\x50E', '\x288', '\x2', '\x8CE', '\x8CF', '\x5', '\x64', '\x33', '\x2', 
		'\x8CF', '\x908', '\x3', '\x2', '\x2', '\x2', '\x8D0', '\x8D1', '\a', 
		'\x8C', '\x2', '\x2', '\x8D1', '\x8D2', '\a', '\xFC', '\x2', '\x2', '\x8D2', 
		'\x8D3', '\a', '\x171', '\x2', '\x2', '\x8D3', '\x8D4', '\x5', '\x50E', 
		'\x288', '\x2', '\x8D4', '\x8D5', '\x5', '\x64', '\x33', '\x2', '\x8D5', 
		'\x908', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\a', '\x8C', '\x2', 
		'\x2', '\x8D7', '\x8D8', '\a', '\xFC', '\x2', '\x2', '\x8D8', '\x8D9', 
		'\a', '\x171', '\x2', '\x2', '\x8D9', '\x8DA', '\a', '\xDE', '\x2', '\x2', 
		'\x8DA', '\x8DB', '\a', '\x185', '\x2', '\x2', '\x8DB', '\x8DC', '\x5', 
		'\x50E', '\x288', '\x2', '\x8DC', '\x8DD', '\x5', '\x64', '\x33', '\x2', 
		'\x8DD', '\x908', '\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8DF', '\a', 
		'\x8C', '\x2', '\x2', '\x8DF', '\x8E0', '\a', '\xFC', '\x2', '\x2', '\x8E0', 
		'\x8E1', '\a', '\x171', '\x2', '\x2', '\x8E1', '\x8E2', '\a', ' ', '\x2', 
		'\x2', '\x8E2', '\x8E3', '\a', '\x46', '\x2', '\x2', '\x8E3', '\x8E4', 
		'\a', '\x158', '\x2', '\x2', '\x8E4', '\x8E5', '\x5', '\x512', '\x28A', 
		'\x2', '\x8E5', '\x8E6', '\a', '\x146', '\x2', '\x2', '\x8E6', '\x8E7', 
		'\a', '\x158', '\x2', '\x2', '\x8E7', '\x8E8', '\x5', '\x512', '\x28A', 
		'\x2', '\x8E8', '\x8E9', '\x5', '\x3A4', '\x1D3', '\x2', '\x8E9', '\x908', 
		'\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8EB', '\a', '\x8C', '\x2', '\x2', 
		'\x8EB', '\x8EC', '\a', '\xFC', '\x2', '\x2', '\x8EC', '\x8ED', '\a', 
		'\x171', '\x2', '\x2', '\x8ED', '\x8EE', '\a', ' ', '\x2', '\x2', '\x8EE', 
		'\x8EF', '\a', '\x46', '\x2', '\x2', '\x8EF', '\x8F0', '\a', '\x158', 
		'\x2', '\x2', '\x8F0', '\x8F1', '\x5', '\x512', '\x28A', '\x2', '\x8F1', 
		'\x8F2', '\a', '\x112', '\x2', '\x2', '\x8F2', '\x8F3', '\a', '\x95', 
		'\x2', '\x2', '\x8F3', '\x8F4', '\x5', '\x530', '\x299', '\x2', '\x8F4', 
		'\x8F5', '\a', '\x146', '\x2', '\x2', '\x8F5', '\x8F6', '\a', '\x158', 
		'\x2', '\x2', '\x8F6', '\x8F7', '\x5', '\x512', '\x28A', '\x2', '\x8F7', 
		'\x8F8', '\x5', '\x3A4', '\x1D3', '\x2', '\x8F8', '\x908', '\x3', '\x2', 
		'\x2', '\x2', '\x8F9', '\x8FA', '\a', '\x8C', '\x2', '\x2', '\x8FA', '\x8FB', 
		'\a', '\x41', '\x2', '\x2', '\x8FB', '\x8FC', '\a', '^', '\x2', '\x2', 
		'\x8FC', '\x8FD', '\x5', '\x42C', '\x217', '\x2', '\x8FD', '\x8FE', '\x5', 
		'\x64', '\x33', '\x2', '\x8FE', '\x908', '\x3', '\x2', '\x2', '\x2', '\x8FF', 
		'\x900', '\a', '\x8C', '\x2', '\x2', '\x900', '\x901', '\a', '\x41', '\x2', 
		'\x2', '\x901', '\x902', '\a', '^', '\x2', '\x2', '\x902', '\x903', '\a', 
		'\xDE', '\x2', '\x2', '\x903', '\x904', '\a', '\x185', '\x2', '\x2', '\x904', 
		'\x905', '\x5', '\x42C', '\x217', '\x2', '\x905', '\x906', '\x5', '\x64', 
		'\x33', '\x2', '\x906', '\x908', '\x3', '\x2', '\x2', '\x2', '\x907', 
		'\x85D', '\x3', '\x2', '\x2', '\x2', '\x907', '\x862', '\x3', '\x2', '\x2', 
		'\x2', '\x907', '\x869', '\x3', '\x2', '\x2', '\x2', '\x907', '\x86E', 
		'\x3', '\x2', '\x2', '\x2', '\x907', '\x875', '\x3', '\x2', '\x2', '\x2', 
		'\x907', '\x880', '\x3', '\x2', '\x2', '\x2', '\x907', '\x88E', '\x3', 
		'\x2', '\x2', '\x2', '\x907', '\x893', '\x3', '\x2', '\x2', '\x2', '\x907', 
		'\x89A', '\x3', '\x2', '\x2', '\x2', '\x907', '\x89F', '\x3', '\x2', '\x2', 
		'\x2', '\x907', '\x8AA', '\x3', '\x2', '\x2', '\x2', '\x907', '\x8B8', 
		'\x3', '\x2', '\x2', '\x2', '\x907', '\x8BD', '\x3', '\x2', '\x2', '\x2', 
		'\x907', '\x8C4', '\x3', '\x2', '\x2', '\x2', '\x907', '\x8C9', '\x3', 
		'\x2', '\x2', '\x2', '\x907', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x907', 
		'\x8D6', '\x3', '\x2', '\x2', '\x2', '\x907', '\x8DE', '\x3', '\x2', '\x2', 
		'\x2', '\x907', '\x8EA', '\x3', '\x2', '\x2', '\x2', '\x907', '\x8F9', 
		'\x3', '\x2', '\x2', '\x2', '\x907', '\x8FF', '\x3', '\x2', '\x2', '\x2', 
		'\x908', '\x63', '\x3', '\x2', '\x2', '\x2', '\x909', '\x90A', '\b', '\x33', 
		'\x1', '\x2', '\x90A', '\x90B', '\x5', 'j', '\x36', '\x2', '\x90B', '\x911', 
		'\x3', '\x2', '\x2', '\x2', '\x90C', '\x90D', '\f', '\x3', '\x2', '\x2', 
		'\x90D', '\x90E', '\a', '\b', '\x2', '\x2', '\x90E', '\x910', '\x5', 'j', 
		'\x36', '\x2', '\x90F', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x910', 
		'\x913', '\x3', '\x2', '\x2', '\x2', '\x911', '\x90F', '\x3', '\x2', '\x2', 
		'\x2', '\x911', '\x912', '\x3', '\x2', '\x2', '\x2', '\x912', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x913', '\x911', '\x3', '\x2', '\x2', '\x2', 
		'\x914', '\x915', '\a', '\x1AD', '\x2', '\x2', '\x915', '\x916', '\a', 
		'\x116', '\x2', '\x2', '\x916', '\x917', '\x5', '\x50E', '\x288', '\x2', 
		'\x917', '\x918', '\x5', '\x82', '\x42', '\x2', '\x918', '\x91D', '\x3', 
		'\x2', '\x2', '\x2', '\x919', '\x91A', '\a', '\x1AE', '\x2', '\x2', '\x91A', 
		'\x91B', '\a', '\x116', '\x2', '\x2', '\x91B', '\x91D', '\x5', '\x50E', 
		'\x288', '\x2', '\x91C', '\x914', '\x3', '\x2', '\x2', '\x2', '\x91C', 
		'\x919', '\x3', '\x2', '\x2', '\x2', '\x91D', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x91E', '\x91F', '\a', '\x1AD', '\x2', '\x2', '\x91F', '\x920', 
		'\a', '\x116', '\x2', '\x2', '\x920', '\x921', '\x5', '\x50E', '\x288', 
		'\x2', '\x921', 'i', '\x3', '\x2', '\x2', '\x2', '\x922', '\x923', '\a', 
		'\x87', '\x2', '\x2', '\x923', '\xA1F', '\x5', '\xBE', '`', '\x2', '\x924', 
		'\x925', '\a', '\x87', '\x2', '\x2', '\x925', '\x926', '\a', '\xDE', '\x2', 
		'\x2', '\x926', '\x927', '\a', 'O', '\x2', '\x2', '\x927', '\x928', '\a', 
		'\x185', '\x2', '\x2', '\x928', '\xA1F', '\x5', '\xBE', '`', '\x2', '\x929', 
		'\x92A', '\a', '\x87', '\x2', '\x2', '\x92A', '\x92B', '\a', '.', '\x2', 
		'\x2', '\x92B', '\xA1F', '\x5', '\xBE', '`', '\x2', '\x92C', '\x92D', 
		'\a', '\x87', '\x2', '\x2', '\x92D', '\x92E', '\a', '.', '\x2', '\x2', 
		'\x92E', '\x92F', '\a', '\xDE', '\x2', '\x2', '\x92F', '\x930', '\a', 
		'O', '\x2', '\x2', '\x930', '\x931', '\a', '\x185', '\x2', '\x2', '\x931', 
		'\xA1F', '\x5', '\xBE', '`', '\x2', '\x932', '\x933', '\a', '\x8C', '\x2', 
		'\x2', '\x933', '\x934', '\x5', '\x2D6', '\x16C', '\x2', '\x934', '\x935', 
		'\x5', '\x532', '\x29A', '\x2', '\x935', '\x936', '\x5', 'l', '\x37', 
		'\x2', '\x936', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x937', '\x938', 
		'\a', '\x8C', '\x2', '\x2', '\x938', '\x939', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x939', '\x93A', '\x5', '\x532', '\x29A', '\x2', '\x93A', '\x93B', 
		'\a', '\xC1', '\x2', '\x2', '\x93B', '\x93C', '\a', 'O', '\x2', '\x2', 
		'\x93C', '\x93D', '\a', 'P', '\x2', '\x2', '\x93D', '\xA1F', '\x3', '\x2', 
		'\x2', '\x2', '\x93E', '\x93F', '\a', '\x8C', '\x2', '\x2', '\x93F', '\x940', 
		'\x5', '\x2D6', '\x16C', '\x2', '\x940', '\x941', '\x5', '\x532', '\x29A', 
		'\x2', '\x941', '\x942', '\a', '\x146', '\x2', '\x2', '\x942', '\x943', 
		'\a', 'O', '\x2', '\x2', '\x943', '\x944', '\a', 'P', '\x2', '\x2', '\x944', 
		'\xA1F', '\x3', '\x2', '\x2', '\x2', '\x945', '\x946', '\a', '\x8C', '\x2', 
		'\x2', '\x946', '\x947', '\x5', '\x2D6', '\x16C', '\x2', '\x947', '\x948', 
		'\x5', '\x532', '\x29A', '\x2', '\x948', '\x949', '\a', '\xC1', '\x2', 
		'\x2', '\x949', '\x94A', '\a', '\x1AF', '\x2', '\x2', '\x94A', '\xA1F', 
		'\x3', '\x2', '\x2', '\x2', '\x94B', '\x94C', '\a', '\x8C', '\x2', '\x2', 
		'\x94C', '\x94D', '\x5', '\x2D6', '\x16C', '\x2', '\x94D', '\x94E', '\x5', 
		'\x532', '\x29A', '\x2', '\x94E', '\x94F', '\a', '\xC1', '\x2', '\x2', 
		'\x94F', '\x950', '\a', '\x1AF', '\x2', '\x2', '\x950', '\x951', '\a', 
		'\xDE', '\x2', '\x2', '\x951', '\x952', '\a', '\x185', '\x2', '\x2', '\x952', 
		'\xA1F', '\x3', '\x2', '\x2', '\x2', '\x953', '\x954', '\a', '\x8C', '\x2', 
		'\x2', '\x954', '\x955', '\x5', '\x2D6', '\x16C', '\x2', '\x955', '\x956', 
		'\x5', '\x532', '\x29A', '\x2', '\x956', '\x957', '\a', '\x146', '\x2', 
		'\x2', '\x957', '\x958', '\a', '\x14F', '\x2', '\x2', '\x958', '\x959', 
		'\x5', '\x52A', '\x296', '\x2', '\x959', '\xA1F', '\x3', '\x2', '\x2', 
		'\x2', '\x95A', '\x95B', '\a', '\x8C', '\x2', '\x2', '\x95B', '\x95C', 
		'\x5', '\x2D6', '\x16C', '\x2', '\x95C', '\x95D', '\x5', '\x522', '\x292', 
		'\x2', '\x95D', '\x95E', '\a', '\x146', '\x2', '\x2', '\x95E', '\x95F', 
		'\a', '\x14F', '\x2', '\x2', '\x95F', '\x960', '\x5', '\x52A', '\x296', 
		'\x2', '\x960', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x961', '\x962', 
		'\a', '\x8C', '\x2', '\x2', '\x962', '\x963', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x963', '\x964', '\x5', '\x532', '\x29A', '\x2', '\x964', '\x965', 
		'\a', '\x146', '\x2', '\x2', '\x965', '\x966', '\x5', 'v', '<', '\x2', 
		'\x966', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x967', '\x968', '\a', 
		'\x8C', '\x2', '\x2', '\x968', '\x969', '\x5', '\x2D6', '\x16C', '\x2', 
		'\x969', '\x96A', '\x5', '\x532', '\x29A', '\x2', '\x96A', '\x96B', '\a', 
		'\x132', '\x2', '\x2', '\x96B', '\x96C', '\x5', 'v', '<', '\x2', '\x96C', 
		'\xA1F', '\x3', '\x2', '\x2', '\x2', '\x96D', '\x96E', '\a', '\x8C', '\x2', 
		'\x2', '\x96E', '\x96F', '\x5', '\x2D6', '\x16C', '\x2', '\x96F', '\x970', 
		'\x5', '\x532', '\x29A', '\x2', '\x970', '\x971', '\a', '\x146', '\x2', 
		'\x2', '\x971', '\x972', '\a', '\x152', '\x2', '\x2', '\x972', '\x973', 
		'\x5', '\x532', '\x29A', '\x2', '\x973', '\xA1F', '\x3', '\x2', '\x2', 
		'\x2', '\x974', '\x975', '\a', '\x8C', '\x2', '\x2', '\x975', '\x976', 
		'\x5', '\x2D6', '\x16C', '\x2', '\x976', '\x977', '\x5', '\x532', '\x29A', 
		'\x2', '\x977', '\x978', '\a', '\x87', '\x2', '\x2', '\x978', '\x979', 
		'\a', '\x1B0', '\x2', '\x2', '\x979', '\x97A', '\x5', '\xC8', '\x65', 
		'\x2', '\x97A', '\x97B', '\a', '&', '\x2', '\x2', '\x97B', '\x97C', '\a', 
		'\xDD', '\x2', '\x2', '\x97C', '\x97D', '\x5', '\x11E', '\x90', '\x2', 
		'\x97D', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x97F', '\a', 
		'\x8C', '\x2', '\x2', '\x97F', '\x980', '\x5', '\x2D6', '\x16C', '\x2', 
		'\x980', '\x981', '\x5', '\x532', '\x29A', '\x2', '\x981', '\x982', '\x5', 
		'~', '@', '\x2', '\x982', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x983', 
		'\x984', '\a', '\x8C', '\x2', '\x2', '\x984', '\x985', '\x5', '\x2D6', 
		'\x16C', '\x2', '\x985', '\x986', '\x5', '\x532', '\x29A', '\x2', '\x986', 
		'\x987', '\a', '\xC1', '\x2', '\x2', '\x987', '\x988', '\a', '\xDD', '\x2', 
		'\x2', '\x988', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x989', '\x98A', 
		'\a', '\x8C', '\x2', '\x2', '\x98A', '\x98B', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x98B', '\x98C', '\x5', '\x532', '\x29A', '\x2', '\x98C', '\x98D', 
		'\a', '\xC1', '\x2', '\x2', '\x98D', '\x98E', '\a', '\xDD', '\x2', '\x2', 
		'\x98E', '\x98F', '\a', '\xDE', '\x2', '\x2', '\x98F', '\x990', '\a', 
		'\x185', '\x2', '\x2', '\x990', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x991', 
		'\x992', '\a', '\xC1', '\x2', '\x2', '\x992', '\x993', '\x5', '\x2D6', 
		'\x16C', '\x2', '\x993', '\x994', '\a', '\xDE', '\x2', '\x2', '\x994', 
		'\x995', '\a', '\x185', '\x2', '\x2', '\x995', '\x996', '\x5', '\x532', 
		'\x29A', '\x2', '\x996', '\x997', '\x5', 'n', '\x38', '\x2', '\x997', 
		'\xA1F', '\x3', '\x2', '\x2', '\x2', '\x998', '\x999', '\a', '\xC1', '\x2', 
		'\x2', '\x999', '\x99A', '\x5', '\x2D6', '\x16C', '\x2', '\x99A', '\x99B', 
		'\x5', '\x532', '\x29A', '\x2', '\x99B', '\x99C', '\x5', 'n', '\x38', 
		'\x2', '\x99C', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x99D', '\x99E', 
		'\a', '\x8C', '\x2', '\x2', '\x99E', '\x99F', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x99F', '\x9A0', '\x5', '\x532', '\x29A', '\x2', '\x9A0', '\x9A1', 
		'\x5', '\x2D8', '\x16D', '\x2', '\x9A1', '\x9A2', '\a', '\x161', '\x2', 
		'\x2', '\x9A2', '\x9A3', '\x5', '\x458', '\x22D', '\x2', '\x9A3', '\x9A4', 
		'\x5', 'p', '\x39', '\x2', '\x9A4', '\x9A5', '\x5', 'r', ':', '\x2', '\x9A5', 
		'\xA1F', '\x3', '\x2', '\x2', '\x2', '\x9A6', '\x9A7', '\a', '\x8C', '\x2', 
		'\x2', '\x9A7', '\x9A8', '\x5', '\x2D6', '\x16C', '\x2', '\x9A8', '\x9A9', 
		'\x5', '\x532', '\x29A', '\x2', '\x9A9', '\x9AA', '\x5', '\x15A', '\xAE', 
		'\x2', '\x9AA', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9AC', 
		'\a', '\x87', '\x2', '\x2', '\x9AC', '\xA1F', '\x5', '\xD2', 'j', '\x2', 
		'\x9AD', '\x9AE', '\a', '\x8C', '\x2', '\x2', '\x9AE', '\x9AF', '\a', 
		'/', '\x2', '\x2', '\x9AF', '\x9B0', '\x5', '\x512', '\x28A', '\x2', '\x9B0', 
		'\x9B1', '\x5', '\x1BA', '\xDE', '\x2', '\x9B1', '\xA1F', '\x3', '\x2', 
		'\x2', '\x2', '\x9B2', '\x9B3', '\a', '\x16D', '\x2', '\x2', '\x9B3', 
		'\x9B4', '\a', '/', '\x2', '\x2', '\x9B4', '\xA1F', '\x5', '\x512', '\x28A', 
		'\x2', '\x9B5', '\x9B6', '\a', '\xC1', '\x2', '\x2', '\x9B6', '\x9B7', 
		'\a', '/', '\x2', '\x2', '\x9B7', '\x9B8', '\a', '\xDE', '\x2', '\x2', 
		'\x9B8', '\x9B9', '\a', '\x185', '\x2', '\x2', '\x9B9', '\x9BA', '\x5', 
		'\x512', '\x28A', '\x2', '\x9BA', '\x9BB', '\x5', 'n', '\x38', '\x2', 
		'\x9BB', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x9BC', '\x9BD', '\a', 
		'\xC1', '\x2', '\x2', '\x9BD', '\x9BE', '\a', '/', '\x2', '\x2', '\x9BE', 
		'\x9BF', '\x5', '\x512', '\x28A', '\x2', '\x9BF', '\x9C0', '\x5', 'n', 
		'\x38', '\x2', '\x9C0', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\x9C1', 
		'\x9C2', '\a', '\x146', '\x2', '\x2', '\x9C2', '\x9C3', '\a', '\x174', 
		'\x2', '\x2', '\x9C3', '\xA1F', '\a', '\x10E', '\x2', '\x2', '\x9C4', 
		'\x9C5', '\a', '\xA0', '\x2', '\x2', '\x9C5', '\x9C6', '\a', 'R', '\x2', 
		'\x2', '\x9C6', '\xA1F', '\x5', '\x512', '\x28A', '\x2', '\x9C7', '\x9C8', 
		'\a', '\x146', '\x2', '\x2', '\x9C8', '\x9C9', '\a', '\x174', '\x2', '\x2', 
		'\x9C9', '\xA1F', '\a', '\xA0', '\x2', '\x2', '\x9CA', '\x9CB', '\a', 
		'\x146', '\x2', '\x2', '\x9CB', '\xA1F', '\a', '\x1B1', '\x2', '\x2', 
		'\x9CC', '\x9CD', '\a', '\x146', '\x2', '\x2', '\x9CD', '\xA1F', '\a', 
		'\x168', '\x2', '\x2', '\x9CE', '\x9CF', '\a', '\xC3', '\x2', '\x2', '\x9CF', 
		'\x9D0', '\a', '\x15E', '\x2', '\x2', '\x9D0', '\xA1F', '\x5', '\x512', 
		'\x28A', '\x2', '\x9D1', '\x9D2', '\a', '\xC3', '\x2', '\x2', '\x9D2', 
		'\x9D3', '\a', '\x8D', '\x2', '\x2', '\x9D3', '\x9D4', '\a', '\x15E', 
		'\x2', '\x2', '\x9D4', '\xA1F', '\x5', '\x512', '\x28A', '\x2', '\x9D5', 
		'\x9D6', '\a', '\xC3', '\x2', '\x2', '\x9D6', '\x9D7', '\a', '\x131', 
		'\x2', '\x2', '\x9D7', '\x9D8', '\a', '\x15E', '\x2', '\x2', '\x9D8', 
		'\xA1F', '\x5', '\x512', '\x28A', '\x2', '\x9D9', '\x9DA', '\a', '\xC3', 
		'\x2', '\x2', '\x9DA', '\x9DB', '\a', '\x15E', '\x2', '\x2', '\x9DB', 
		'\xA1F', '\a', ' ', '\x2', '\x2', '\x9DC', '\x9DD', '\a', '\xC3', '\x2', 
		'\x2', '\x9DD', '\x9DE', '\a', '\x15E', '\x2', '\x2', '\x9DE', '\xA1F', 
		'\a', '\x65', '\x2', '\x2', '\x9DF', '\x9E0', '\a', '\xBC', '\x2', '\x2', 
		'\x9E0', '\x9E1', '\a', '\x15E', '\x2', '\x2', '\x9E1', '\xA1F', '\x5', 
		'\x512', '\x28A', '\x2', '\x9E2', '\x9E3', '\a', '\xBC', '\x2', '\x2', 
		'\x9E3', '\x9E4', '\a', '\x15E', '\x2', '\x2', '\x9E4', '\xA1F', '\a', 
		' ', '\x2', '\x2', '\x9E5', '\x9E6', '\a', '\xBC', '\x2', '\x2', '\x9E6', 
		'\x9E7', '\a', '\x15E', '\x2', '\x2', '\x9E7', '\xA1F', '\a', '\x65', 
		'\x2', '\x2', '\x9E8', '\x9E9', '\a', '\xC3', '\x2', '\x2', '\x9E9', '\x9EA', 
		'\a', '\x13A', '\x2', '\x2', '\x9EA', '\xA1F', '\x5', '\x512', '\x28A', 
		'\x2', '\x9EB', '\x9EC', '\a', '\xC3', '\x2', '\x2', '\x9EC', '\x9ED', 
		'\a', '\x8D', '\x2', '\x2', '\x9ED', '\x9EE', '\a', '\x13A', '\x2', '\x2', 
		'\x9EE', '\xA1F', '\x5', '\x512', '\x28A', '\x2', '\x9EF', '\x9F0', '\a', 
		'\xC3', '\x2', '\x2', '\x9F0', '\x9F1', '\a', '\x131', '\x2', '\x2', '\x9F1', 
		'\x9F2', '\a', '\x13A', '\x2', '\x2', '\x9F2', '\xA1F', '\x5', '\x512', 
		'\x28A', '\x2', '\x9F3', '\x9F4', '\a', '\xBC', '\x2', '\x2', '\x9F4', 
		'\x9F5', '\a', '\x13A', '\x2', '\x2', '\x9F5', '\xA1F', '\x5', '\x512', 
		'\x28A', '\x2', '\x9F6', '\x9F7', '\a', '\xE6', '\x2', '\x2', '\x9F7', 
		'\xA1F', '\x5', '\x50E', '\x288', '\x2', '\x9F8', '\x9F9', '\a', '\x106', 
		'\x2', '\x2', '\x9F9', '\x9FA', '\a', '\xE6', '\x2', '\x2', '\x9FA', '\xA1F', 
		'\x5', '\x50E', '\x288', '\x2', '\x9FB', '\x9FC', '\a', '\x10C', '\x2', 
		'\x2', '\x9FC', '\xA1F', '\x5', '\x20E', '\x108', '\x2', '\x9FD', '\x9FE', 
		'\a', 'O', '\x2', '\x2', '\x9FE', '\xA1F', '\a', '\x10C', '\x2', '\x2', 
		'\x9FF', '\xA00', '\a', '\x113', '\x2', '\x2', '\xA00', '\xA01', '\a', 
		'`', '\x2', '\x2', '\xA01', '\xA1F', '\x5', '\x52E', '\x298', '\x2', '\xA02', 
		'\xA03', '\a', '\x146', '\x2', '\x2', '\xA03', '\xA04', '\a', '\x158', 
		'\x2', '\x2', '\xA04', '\xA1F', '\x5', '\x512', '\x28A', '\x2', '\xA05', 
		'\xA06', '\a', '\x146', '\x2', '\x2', '\xA06', '\xA1F', '\x5', 'v', '<', 
		'\x2', '\xA07', '\xA08', '\a', '\x132', '\x2', '\x2', '\xA08', '\xA1F', 
		'\x5', 'v', '<', '\x2', '\xA09', '\xA0A', '\a', '\x131', '\x2', '\x2', 
		'\xA0A', '\xA0B', '\a', '\xDD', '\x2', '\x2', '\xA0B', '\xA1F', '\x5', 
		't', ';', '\x2', '\xA0C', '\xA0D', '\a', '\xC3', '\x2', '\x2', '\xA0D', 
		'\xA0E', '\a', '\x197', '\x2', '\x2', '\xA0E', '\xA0F', '\a', '\xF4', 
		'\x2', '\x2', '\xA0F', '\xA1F', '\a', '\x140', '\x2', '\x2', '\xA10', 
		'\xA11', '\a', '\xBC', '\x2', '\x2', '\xA11', '\xA12', '\a', '\x197', 
		'\x2', '\x2', '\xA12', '\xA13', '\a', '\xF4', '\x2', '\x2', '\xA13', '\xA1F', 
		'\a', '\x140', '\x2', '\x2', '\xA14', '\xA15', '\a', '\xD3', '\x2', '\x2', 
		'\xA15', '\xA16', '\a', '\x197', '\x2', '\x2', '\xA16', '\xA17', '\a', 
		'\xF4', '\x2', '\x2', '\xA17', '\xA1F', '\a', '\x140', '\x2', '\x2', '\xA18', 
		'\xA19', '\a', '\x106', '\x2', '\x2', '\xA19', '\xA1A', '\a', '\xD3', 
		'\x2', '\x2', '\xA1A', '\xA1B', '\a', '\x197', '\x2', '\x2', '\xA1B', 
		'\xA1C', '\a', '\xF4', '\x2', '\x2', '\xA1C', '\xA1F', '\a', '\x140', 
		'\x2', '\x2', '\xA1D', '\xA1F', '\x5', '\x15A', '\xAE', '\x2', '\xA1E', 
		'\x922', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x924', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\x929', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x92C', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\x932', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\x937', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x93E', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\x945', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\x94B', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x953', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\x95A', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x961', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\x967', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\x96D', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x974', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\x97E', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\x983', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x989', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\x991', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x998', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\x99D', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9AB', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\x9AD', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\x9B2', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9B5', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\x9BC', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9C1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9C4', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\x9C7', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9CA', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\x9CC', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\x9CE', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9D1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\x9D5', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9D9', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9DC', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\x9DF', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9E2', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\x9E8', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9EB', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\x9EF', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9F3', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9F6', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\x9F8', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\x9FB', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\x9FD', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\x9FF', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA02', '\x3', '\x2', '\x2', 
		'\x2', '\xA1E', '\xA05', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA07', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA09', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\xA0C', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA10', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\xA14', '\x3', '\x2', '\x2', '\x2', '\xA1E', 
		'\xA18', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA1D', '\x3', '\x2', '\x2', 
		'\x2', '\xA1F', 'k', '\x3', '\x2', '\x2', '\x2', '\xA20', '\xA21', '\a', 
		'\x146', '\x2', '\x2', '\xA21', '\xA22', '\a', '\x37', '\x2', '\x2', '\xA22', 
		'\xA26', '\x5', '\x484', '\x243', '\x2', '\xA23', '\xA24', '\a', '\xC1', 
		'\x2', '\x2', '\xA24', '\xA26', '\a', '\x37', '\x2', '\x2', '\xA25', '\xA20', 
		'\x3', '\x2', '\x2', '\x2', '\xA25', '\xA23', '\x3', '\x2', '\x2', '\x2', 
		'\xA26', 'm', '\x3', '\x2', '\x2', '\x2', '\xA27', '\xA2B', '\a', '\x98', 
		'\x2', '\x2', '\xA28', '\xA2B', '\a', '\x134', '\x2', '\x2', '\xA29', 
		'\xA2B', '\x3', '\x2', '\x2', '\x2', '\xA2A', '\xA27', '\x3', '\x2', '\x2', 
		'\x2', '\xA2A', '\xA28', '\x3', '\x2', '\x2', '\x2', '\xA2A', '\xA29', 
		'\x3', '\x2', '\x2', '\x2', '\xA2B', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\xA2C', '\xA2D', '\a', '-', '\x2', '\x2', '\xA2D', '\xA30', '\x5', '\x20E', 
		'\x108', '\x2', '\xA2E', '\xA30', '\x3', '\x2', '\x2', '\x2', '\xA2F', 
		'\xA2C', '\x3', '\x2', '\x2', '\x2', '\xA2F', '\xA2E', '\x3', '\x2', '\x2', 
		'\x2', '\xA30', 'q', '\x3', '\x2', '\x2', '\x2', '\xA31', '\xA32', '\a', 
		'\x66', '\x2', '\x2', '\xA32', '\xA35', '\x5', '\x484', '\x243', '\x2', 
		'\xA33', '\xA35', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA31', '\x3', 
		'\x2', '\x2', '\x2', '\xA34', '\xA33', '\x3', '\x2', '\x2', '\x2', '\xA35', 
		's', '\x3', '\x2', '\x2', '\x2', '\xA36', '\xA3D', '\a', '\x107', '\x2', 
		'\x2', '\xA37', '\xA3D', '\a', 's', '\x2', '\x2', '\xA38', '\xA3D', '\a', 
		'\x37', '\x2', '\x2', '\xA39', '\xA3A', '\a', '\x66', '\x2', '\x2', '\xA3A', 
		'\xA3B', '\a', '\xE4', '\x2', '\x2', '\xA3B', '\xA3D', '\x5', '\x512', 
		'\x28A', '\x2', '\xA3C', '\xA36', '\x3', '\x2', '\x2', '\x2', '\xA3C', 
		'\xA37', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA38', '\x3', '\x2', '\x2', 
		'\x2', '\xA3C', '\xA39', '\x3', '\x2', '\x2', '\x2', '\xA3D', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\xA3E', '\xA3F', '\a', '\x4', '\x2', '\x2', '\xA3F', 
		'\xA40', '\x5', 'z', '>', '\x2', '\xA40', '\xA41', '\a', '\x5', '\x2', 
		'\x2', '\xA41', 'w', '\x3', '\x2', '\x2', '\x2', '\xA42', '\xA43', '\a', 
		'k', '\x2', '\x2', '\xA43', '\xA46', '\x5', 'v', '<', '\x2', '\xA44', 
		'\xA46', '\x3', '\x2', '\x2', '\x2', '\xA45', '\xA42', '\x3', '\x2', '\x2', 
		'\x2', '\xA45', '\xA44', '\x3', '\x2', '\x2', '\x2', '\xA46', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\xA47', '\xA48', '\b', '>', '\x1', '\x2', '\xA48', 
		'\xA49', '\x5', '|', '?', '\x2', '\xA49', '\xA4F', '\x3', '\x2', '\x2', 
		'\x2', '\xA4A', '\xA4B', '\f', '\x3', '\x2', '\x2', '\xA4B', '\xA4C', 
		'\a', '\b', '\x2', '\x2', '\xA4C', '\xA4E', '\x5', '|', '?', '\x2', '\xA4D', 
		'\xA4A', '\x3', '\x2', '\x2', '\x2', '\xA4E', '\xA51', '\x3', '\x2', '\x2', 
		'\x2', '\xA4F', '\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA50', 
		'\x3', '\x2', '\x2', '\x2', '\xA50', '{', '\x3', '\x2', '\x2', '\x2', 
		'\xA51', '\xA4F', '\x3', '\x2', '\x2', '\x2', '\xA52', '\xA53', '\x5', 
		'\x538', '\x29D', '\x2', '\xA53', '\xA54', '\a', '\f', '\x2', '\x2', '\xA54', 
		'\xA55', '\x5', '\x1D4', '\xEB', '\x2', '\xA55', '\xA62', '\x3', '\x2', 
		'\x2', '\x2', '\xA56', '\xA62', '\x5', '\x538', '\x29D', '\x2', '\xA57', 
		'\xA58', '\x5', '\x538', '\x29D', '\x2', '\xA58', '\xA59', '\a', '\r', 
		'\x2', '\x2', '\xA59', '\xA5A', '\x5', '\x538', '\x29D', '\x2', '\xA5A', 
		'\xA5B', '\a', '\f', '\x2', '\x2', '\xA5B', '\xA5C', '\x5', '\x1D4', '\xEB', 
		'\x2', '\xA5C', '\xA62', '\x3', '\x2', '\x2', '\x2', '\xA5D', '\xA5E', 
		'\x5', '\x538', '\x29D', '\x2', '\xA5E', '\xA5F', '\a', '\r', '\x2', '\x2', 
		'\xA5F', '\xA60', '\x5', '\x538', '\x29D', '\x2', '\xA60', '\xA62', '\x3', 
		'\x2', '\x2', '\x2', '\xA61', '\xA52', '\x3', '\x2', '\x2', '\x2', '\xA61', 
		'\xA56', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA57', '\x3', '\x2', '\x2', 
		'\x2', '\xA61', '\xA5D', '\x3', '\x2', '\x2', '\x2', '\xA62', '}', '\x3', 
		'\x2', '\x2', '\x2', '\xA63', '\xA64', '\b', '@', '\x1', '\x2', '\xA64', 
		'\xA65', '\x5', '\x80', '\x41', '\x2', '\xA65', '\xA6A', '\x3', '\x2', 
		'\x2', '\x2', '\xA66', '\xA67', '\f', '\x3', '\x2', '\x2', '\xA67', '\xA69', 
		'\x5', '\x80', '\x41', '\x2', '\xA68', '\xA66', '\x3', '\x2', '\x2', '\x2', 
		'\xA69', '\xA6C', '\x3', '\x2', '\x2', '\x2', '\xA6A', '\xA68', '\x3', 
		'\x2', '\x2', '\x2', '\xA6A', '\xA6B', '\x3', '\x2', '\x2', '\x2', '\xA6B', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\xA6C', '\xA6A', '\x3', '\x2', '\x2', 
		'\x2', '\xA6D', '\xA78', '\a', '\x133', '\x2', '\x2', '\xA6E', '\xA6F', 
		'\a', '\x133', '\x2', '\x2', '\xA6F', '\xA70', '\x5', '\x12', '\n', '\x2', 
		'\xA70', '\xA71', '\x5', '\x126', '\x94', '\x2', '\xA71', '\xA78', '\x3', 
		'\x2', '\x2', '\x2', '\xA72', '\xA73', '\a', '\x146', '\x2', '\x2', '\xA73', 
		'\xA78', '\x5', '\x122', '\x92', '\x2', '\xA74', '\xA75', '\a', '\x146', 
		'\x2', '\x2', '\xA75', '\xA76', '\a', '\x1B0', '\x2', '\x2', '\xA76', 
		'\xA78', '\x5', '\xC8', '\x65', '\x2', '\xA77', '\xA6D', '\x3', '\x2', 
		'\x2', '\x2', '\xA77', '\xA6E', '\x3', '\x2', '\x2', '\x2', '\xA77', '\xA72', 
		'\x3', '\x2', '\x2', '\x2', '\xA77', '\xA74', '\x3', '\x2', '\x2', '\x2', 
		'\xA78', '\x81', '\x3', '\x2', '\x2', '\x2', '\xA79', '\xA7A', '\a', '@', 
		'\x2', '\x2', '\xA7A', '\xA7B', '\a', '\x19F', '\x2', '\x2', '\xA7B', 
		'\xA7C', '\a', 'k', '\x2', '\x2', '\xA7C', '\xA7D', '\a', '\x4', '\x2', 
		'\x2', '\xA7D', '\xA7E', '\x5', '\x86', '\x44', '\x2', '\xA7E', '\xA7F', 
		'\a', '\x5', '\x2', '\x2', '\xA7F', '\xA94', '\x3', '\x2', '\x2', '\x2', 
		'\xA80', '\xA81', '\a', '@', '\x2', '\x2', '\xA81', '\xA82', '\a', '\x19F', 
		'\x2', '\x2', '\xA82', '\xA83', '\a', '\x46', '\x2', '\x2', '\xA83', '\xA84', 
		'\a', '\x4', '\x2', '\x2', '\xA84', '\xA85', '\x5', '\x4D4', '\x26B', 
		'\x2', '\xA85', '\xA86', '\a', '\x5', '\x2', '\x2', '\xA86', '\xA94', 
		'\x3', '\x2', '\x2', '\x2', '\xA87', '\xA88', '\a', '@', '\x2', '\x2', 
		'\xA88', '\xA89', '\a', '\x19F', '\x2', '\x2', '\xA89', '\xA8A', '\a', 
		'\x42', '\x2', '\x2', '\xA8A', '\xA8B', '\a', '\x4', '\x2', '\x2', '\xA8B', 
		'\xA8C', '\x5', '\x4D4', '\x26B', '\x2', '\xA8C', '\xA8D', '\a', '\x5', 
		'\x2', '\x2', '\xA8D', '\xA8E', '\a', '`', '\x2', '\x2', '\xA8E', '\xA8F', 
		'\a', '\x4', '\x2', '\x2', '\xA8F', '\xA90', '\x5', '\x4D4', '\x26B', 
		'\x2', '\xA90', '\xA91', '\a', '\x5', '\x2', '\x2', '\xA91', '\xA94', 
		'\x3', '\x2', '\x2', '\x2', '\xA92', '\xA94', '\a', '\x37', '\x2', '\x2', 
		'\xA93', '\xA79', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xA80', '\x3', 
		'\x2', '\x2', '\x2', '\xA93', '\xA87', '\x3', '\x2', '\x2', '\x2', '\xA93', 
		'\xA92', '\x3', '\x2', '\x2', '\x2', '\xA94', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\xA95', '\xA96', '\x5', '\x536', '\x29C', '\x2', '\xA96', '\xA97', 
		'\x5', '\x522', '\x292', '\x2', '\xA97', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\xA98', '\xA99', '\b', '\x44', '\x1', '\x2', '\xA99', '\xA9A', 
		'\x5', '\x84', '\x43', '\x2', '\xA9A', '\xAA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA9B', '\xA9C', '\f', '\x3', '\x2', '\x2', '\xA9C', '\xA9D', '\a', '\b', 
		'\x2', '\x2', '\xA9D', '\xA9F', '\x5', '\x84', '\x43', '\x2', '\xA9E', 
		'\xA9B', '\x3', '\x2', '\x2', '\x2', '\xA9F', '\xAA2', '\x3', '\x2', '\x2', 
		'\x2', '\xAA0', '\xA9E', '\x3', '\x2', '\x2', '\x2', '\xAA0', '\xAA1', 
		'\x3', '\x2', '\x2', '\x2', '\xAA1', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\xAA2', '\xAA0', '\x3', '\x2', '\x2', '\x2', '\xAA3', '\xAA4', '\a', 
		'\x8C', '\x2', '\x2', '\xAA4', '\xAA5', '\a', '\x161', '\x2', '\x2', '\xAA5', 
		'\xAA6', '\x5', '\x20E', '\x108', '\x2', '\xAA6', '\xAA7', '\x5', '\x8A', 
		'\x46', '\x2', '\xAA7', '\x89', '\x3', '\x2', '\x2', '\x2', '\xAA8', '\xAA9', 
		'\b', '\x46', '\x1', '\x2', '\xAA9', '\xAAA', '\x5', '\x8C', 'G', '\x2', 
		'\xAAA', '\xAB0', '\x3', '\x2', '\x2', '\x2', '\xAAB', '\xAAC', '\f', 
		'\x3', '\x2', '\x2', '\xAAC', '\xAAD', '\a', '\b', '\x2', '\x2', '\xAAD', 
		'\xAAF', '\x5', '\x8C', 'G', '\x2', '\xAAE', '\xAAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAAF', '\xAB2', '\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAB1', '\x3', '\x2', '\x2', '\x2', 
		'\xAB1', '\x8B', '\x3', '\x2', '\x2', '\x2', '\xAB2', '\xAB0', '\x3', 
		'\x2', '\x2', '\x2', '\xAB3', '\xAB4', '\a', '\x87', '\x2', '\x2', '\xAB4', 
		'\xAB5', '\a', '\x91', '\x2', '\x2', '\xAB5', '\xAB6', '\x5', '\x448', 
		'\x225', '\x2', '\xAB6', '\xAB7', '\x5', 'n', '\x38', '\x2', '\xAB7', 
		'\xACE', '\x3', '\x2', '\x2', '\x2', '\xAB8', '\xAB9', '\a', '\xC1', '\x2', 
		'\x2', '\xAB9', '\xABA', '\a', '\x91', '\x2', '\x2', '\xABA', '\xABB', 
		'\a', '\xDE', '\x2', '\x2', '\xABB', '\xABC', '\a', '\x185', '\x2', '\x2', 
		'\xABC', '\xABD', '\x5', '\x532', '\x29A', '\x2', '\xABD', '\xABE', '\x5', 
		'n', '\x38', '\x2', '\xABE', '\xACE', '\x3', '\x2', '\x2', '\x2', '\xABF', 
		'\xAC0', '\a', '\xC1', '\x2', '\x2', '\xAC0', '\xAC1', '\a', '\x91', '\x2', 
		'\x2', '\xAC1', '\xAC2', '\x5', '\x532', '\x29A', '\x2', '\xAC2', '\xAC3', 
		'\x5', 'n', '\x38', '\x2', '\xAC3', '\xACE', '\x3', '\x2', '\x2', '\x2', 
		'\xAC4', '\xAC5', '\a', '\x8C', '\x2', '\x2', '\xAC5', '\xAC6', '\a', 
		'\x91', '\x2', '\x2', '\xAC6', '\xAC7', '\x5', '\x532', '\x29A', '\x2', 
		'\xAC7', '\xAC8', '\x5', '\x2D8', '\x16D', '\x2', '\xAC8', '\xAC9', '\a', 
		'\x161', '\x2', '\x2', '\xAC9', '\xACA', '\x5', '\x458', '\x22D', '\x2', 
		'\xACA', '\xACB', '\x5', 'p', '\x39', '\x2', '\xACB', '\xACC', '\x5', 
		'n', '\x38', '\x2', '\xACC', '\xACE', '\x3', '\x2', '\x2', '\x2', '\xACD', 
		'\xAB3', '\x3', '\x2', '\x2', '\x2', '\xACD', '\xAB8', '\x3', '\x2', '\x2', 
		'\x2', '\xACD', '\xABF', '\x3', '\x2', '\x2', '\x2', '\xACD', '\xAC4', 
		'\x3', '\x2', '\x2', '\x2', '\xACE', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\xACF', '\xAD0', '\a', '\x9F', '\x2', '\x2', '\xAD0', '\xAD4', '\x5', 
		'\x3B4', '\x1DB', '\x2', '\xAD1', '\xAD2', '\a', '\x9F', '\x2', '\x2', 
		'\xAD2', '\xAD4', '\a', ' ', '\x2', '\x2', '\xAD3', '\xACF', '\x3', '\x2', 
		'\x2', '\x2', '\xAD3', '\xAD1', '\x3', '\x2', '\x2', '\x2', '\xAD4', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD6', '\a', '\xAB', '\x2', '\x2', 
		'\xAD6', '\xAD7', '\x5', '\x9E', 'P', '\x2', '\xAD7', '\xAD8', '\x5', 
		'\x50E', '\x288', '\x2', '\xAD8', '\xAD9', '\x5', '\xD8', 'm', '\x2', 
		'\xAD9', '\xADA', '\x5', '\x92', 'J', '\x2', '\xADA', '\xADB', '\x5', 
		'\x94', 'K', '\x2', '\xADB', '\xADC', '\x5', '\x96', 'L', '\x2', '\xADC', 
		'\xADD', '\x5', '\xA0', 'Q', '\x2', '\xADD', '\xADE', '\x5', '\x12', '\n', 
		'\x2', '\xADE', '\xADF', '\x5', '\x98', 'M', '\x2', '\xADF', '\xAE0', 
		'\x5', '\x440', '\x221', '\x2', '\xAE0', '\xAEC', '\x3', '\x2', '\x2', 
		'\x2', '\xAE1', '\xAE2', '\a', '\xAB', '\x2', '\x2', '\xAE2', '\xAE3', 
		'\a', '\x4', '\x2', '\x2', '\xAE3', '\xAE4', '\x5', '\x380', '\x1C1', 
		'\x2', '\xAE4', '\xAE5', '\a', '\x5', '\x2', '\x2', '\xAE5', '\xAE6', 
		'\a', '`', '\x2', '\x2', '\xAE6', '\xAE7', '\x5', '\x94', 'K', '\x2', 
		'\xAE7', '\xAE8', '\x5', '\x96', 'L', '\x2', '\xAE8', '\xAE9', '\x5', 
		'\x12', '\n', '\x2', '\xAE9', '\xAEA', '\x5', '\x98', 'M', '\x2', '\xAEA', 
		'\xAEC', '\x3', '\x2', '\x2', '\x2', '\xAEB', '\xAD5', '\x3', '\x2', '\x2', 
		'\x2', '\xAEB', '\xAE1', '\x3', '\x2', '\x2', '\x2', '\xAEC', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\xAED', '\xAEE', '\t', '\x4', '\x2', '\x2', 
		'\xAEE', '\x93', '\x3', '\x2', '\x2', '\x2', '\xAEF', '\xAF2', '\a', '\x122', 
		'\x2', '\x2', '\xAF0', '\xAF2', '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAEF', 
		'\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF0', '\x3', '\x2', '\x2', '\x2', 
		'\xAF2', '\x95', '\x3', '\x2', '\x2', '\x2', '\xAF3', '\xAF7', '\x5', 
		'\x524', '\x293', '\x2', '\xAF4', '\xAF7', '\a', '\x150', '\x2', '\x2', 
		'\xAF5', '\xAF7', '\a', '\x151', '\x2', '\x2', '\xAF6', '\xAF3', '\x3', 
		'\x2', '\x2', '\x2', '\xAF6', '\xAF4', '\x3', '\x2', '\x2', '\x2', '\xAF6', 
		'\xAF5', '\x3', '\x2', '\x2', '\x2', '\xAF7', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\xAF8', '\xAFE', '\x5', '\x9A', 'N', '\x2', '\xAF9', '\xAFA', 
		'\a', '\x4', '\x2', '\x2', '\xAFA', '\xAFB', '\x5', '\xA4', 'S', '\x2', 
		'\xAFB', '\xAFC', '\a', '\x5', '\x2', '\x2', '\xAFC', '\xAFE', '\x3', 
		'\x2', '\x2', '\x2', '\xAFD', '\xAF8', '\x3', '\x2', '\x2', '\x2', '\xAFD', 
		'\xAF9', '\x3', '\x2', '\x2', '\x2', '\xAFE', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\xAFF', '\xB04', '\b', 'N', '\x1', '\x2', '\xB00', '\xB01', '\f', 
		'\x4', '\x2', '\x2', '\xB01', '\xB03', '\x5', '\x9C', 'O', '\x2', '\xB02', 
		'\xB00', '\x3', '\x2', '\x2', '\x2', '\xB03', '\xB06', '\x3', '\x2', '\x2', 
		'\x2', '\xB04', '\xB02', '\x3', '\x2', '\x2', '\x2', '\xB04', '\xB05', 
		'\x3', '\x2', '\x2', '\x2', '\xB05', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\xB06', '\xB04', '\x3', '\x2', '\x2', '\x2', '\xB07', '\xB2B', '\a', 
		'm', '\x2', '\x2', '\xB08', '\xB2B', '\a', 'r', '\x2', '\x2', '\xB09', 
		'\xB0A', '\a', '\xB9', '\x2', '\x2', '\xB0A', '\xB0B', '\x5', '\x344', 
		'\x1A3', '\x2', '\xB0B', '\xB0C', '\x5', '\x524', '\x293', '\x2', '\xB0C', 
		'\xB2B', '\x3', '\x2', '\x2', '\x2', '\xB0D', '\xB0E', '\a', 'P', '\x2', 
		'\x2', '\xB0E', '\xB0F', '\x5', '\x344', '\x1A3', '\x2', '\xB0F', '\xB10', 
		'\x5', '\x524', '\x293', '\x2', '\xB10', '\xB2B', '\x3', '\x2', '\x2', 
		'\x2', '\xB11', '\xB2B', '\a', '\xAD', '\x2', '\x2', '\xB12', '\xB2B', 
		'\a', '\xDA', '\x2', '\x2', '\xB13', '\xB14', '\a', '\x123', '\x2', '\x2', 
		'\xB14', '\xB15', '\x5', '\x344', '\x1A3', '\x2', '\xB15', '\xB16', '\x5', 
		'\x524', '\x293', '\x2', '\xB16', '\xB2B', '\x3', '\x2', '\x2', '\x2', 
		'\xB17', '\xB18', '\a', '\xC7', '\x2', '\x2', '\xB18', '\xB19', '\x5', 
		'\x344', '\x1A3', '\x2', '\xB19', '\xB1A', '\x5', '\x524', '\x293', '\x2', 
		'\xB1A', '\xB2B', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB1C', '\a', 
		'\xD3', '\x2', '\x2', '\xB1C', '\xB1D', '\a', '\x123', '\x2', '\x2', '\xB1D', 
		'\xB2B', '\x5', '\xDA', 'n', '\x2', '\xB1E', '\xB1F', '\a', '\xD3', '\x2', 
		'\x2', '\xB1F', '\xB20', '\a', '\x123', '\x2', '\x2', '\xB20', '\xB2B', 
		'\a', '\v', '\x2', '\x2', '\xB21', '\xB22', '\a', '\xD3', '\x2', '\x2', 
		'\xB22', '\xB23', '\a', 'O', '\x2', '\x2', '\xB23', '\xB24', '\a', 'P', 
		'\x2', '\x2', '\xB24', '\xB2B', '\x5', '\xDA', 'n', '\x2', '\xB25', '\xB26', 
		'\a', '\xD3', '\x2', '\x2', '\xB26', '\xB27', '\a', 'P', '\x2', '\x2', 
		'\xB27', '\xB2B', '\x5', '\xDA', 'n', '\x2', '\xB28', '\xB29', '\a', '\xC4', 
		'\x2', '\x2', '\xB29', '\xB2B', '\x5', '\x524', '\x293', '\x2', '\xB2A', 
		'\xB07', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB08', '\x3', '\x2', '\x2', 
		'\x2', '\xB2A', '\xB09', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB0D', 
		'\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB11', '\x3', '\x2', '\x2', '\x2', 
		'\xB2A', '\xB12', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB13', '\x3', 
		'\x2', '\x2', '\x2', '\xB2A', '\xB17', '\x3', '\x2', '\x2', '\x2', '\xB2A', 
		'\xB1B', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB1E', '\x3', '\x2', '\x2', 
		'\x2', '\xB2A', '\xB21', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB25', 
		'\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB28', '\x3', '\x2', '\x2', '\x2', 
		'\xB2B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xB2C', '\xB2F', '\a', 'm', 
		'\x2', '\x2', '\xB2D', '\xB2F', '\x3', '\x2', '\x2', '\x2', '\xB2E', '\xB2C', 
		'\x3', '\x2', '\x2', '\x2', '\xB2E', '\xB2D', '\x3', '\x2', '\x2', '\x2', 
		'\xB2F', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xB30', '\xB31', '\x5', 
		'\xA2', 'R', '\x2', '\xB31', '\xB32', '\a', '\xBA', '\x2', '\x2', '\xB32', 
		'\xB33', '\x5', '\x524', '\x293', '\x2', '\xB33', '\xB36', '\x3', '\x2', 
		'\x2', '\x2', '\xB34', '\xB36', '\x3', '\x2', '\x2', '\x2', '\xB35', '\xB30', 
		'\x3', '\x2', '\x2', '\x2', '\xB35', '\xB34', '\x3', '\x2', '\x2', '\x2', 
		'\xB36', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xB37', '\xB3A', '\a', '\x66', 
		'\x2', '\x2', '\xB38', '\xB3A', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB37', 
		'\x3', '\x2', '\x2', '\x2', '\xB39', '\xB38', '\x3', '\x2', '\x2', '\x2', 
		'\xB3A', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB3C', '\b', 'S', 
		'\x1', '\x2', '\xB3C', '\xB3D', '\x5', '\xA6', 'T', '\x2', '\xB3D', '\xB43', 
		'\x3', '\x2', '\x2', '\x2', '\xB3E', '\xB3F', '\f', '\x3', '\x2', '\x2', 
		'\xB3F', '\xB40', '\a', '\b', '\x2', '\x2', '\xB40', '\xB42', '\x5', '\xA6', 
		'T', '\x2', '\xB41', '\xB3E', '\x3', '\x2', '\x2', '\x2', '\xB42', '\xB45', 
		'\x3', '\x2', '\x2', '\x2', '\xB43', '\xB41', '\x3', '\x2', '\x2', '\x2', 
		'\xB43', '\xB44', '\x3', '\x2', '\x2', '\x2', '\xB44', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xB45', '\xB43', '\x3', '\x2', '\x2', '\x2', '\xB46', 
		'\xB47', '\x5', '\x538', '\x29D', '\x2', '\xB47', '\xB48', '\x5', '\xA8', 
		'U', '\x2', '\xB48', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB49', '\xB52', 
		'\x5', '\x44', '#', '\x2', '\xB4A', '\xB52', '\x5', '\x126', '\x94', '\x2', 
		'\xB4B', '\xB52', '\a', '\v', '\x2', '\x2', '\xB4C', '\xB4D', '\a', '\x4', 
		'\x2', '\x2', '\xB4D', '\xB4E', '\x5', '\xAA', 'V', '\x2', '\xB4E', '\xB4F', 
		'\a', '\x5', '\x2', '\x2', '\xB4F', '\xB52', '\x3', '\x2', '\x2', '\x2', 
		'\xB50', '\xB52', '\x3', '\x2', '\x2', '\x2', '\xB51', '\xB49', '\x3', 
		'\x2', '\x2', '\x2', '\xB51', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB51', 
		'\xB4B', '\x3', '\x2', '\x2', '\x2', '\xB51', '\xB4C', '\x3', '\x2', '\x2', 
		'\x2', '\xB51', '\xB50', '\x3', '\x2', '\x2', '\x2', '\xB52', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xB53', '\xB54', '\b', 'V', '\x1', '\x2', 
		'\xB54', '\xB55', '\x5', '\xAC', 'W', '\x2', '\xB55', '\xB5B', '\x3', 
		'\x2', '\x2', '\x2', '\xB56', '\xB57', '\f', '\x3', '\x2', '\x2', '\xB57', 
		'\xB58', '\a', '\b', '\x2', '\x2', '\xB58', '\xB5A', '\x5', '\xAC', 'W', 
		'\x2', '\xB59', '\xB56', '\x3', '\x2', '\x2', '\x2', '\xB5A', '\xB5D', 
		'\x3', '\x2', '\x2', '\x2', '\xB5B', '\xB59', '\x3', '\x2', '\x2', '\x2', 
		'\xB5B', '\xB5C', '\x3', '\x2', '\x2', '\x2', '\xB5C', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB5D', '\xB5B', '\x3', '\x2', '\x2', '\x2', '\xB5E', 
		'\xB5F', '\x5', '\x44', '#', '\x2', '\xB5F', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB60', '\xB61', '\a', '\x30', '\x2', '\x2', '\xB61', '\xB62', 
		'\x5', '\xB0', 'Y', '\x2', '\xB62', '\xB63', '\a', '^', '\x2', '\x2', 
		'\xB63', '\xB64', '\x5', '\x50E', '\x288', '\x2', '\xB64', '\xB65', '\a', 
		'\x4', '\x2', '\x2', '\xB65', '\xB66', '\x5', '\xB2', 'Z', '\x2', '\xB66', 
		'\xB67', '\a', '\x5', '\x2', '\x2', '\xB67', '\xB68', '\x5', '\xF0', 'y', 
		'\x2', '\xB68', '\xB69', '\x5', '\xF2', 'z', '\x2', '\xB69', '\xB6A', 
		'\x5', '\xFA', '~', '\x2', '\xB6A', '\xB6B', '\x5', '\xFC', '\x7F', '\x2', 
		'\xB6B', '\xB6C', '\x5', '\xFE', '\x80', '\x2', '\xB6C', '\xB6D', '\x5', 
		'\x100', '\x81', '\x2', '\xB6D', '\xBBE', '\x3', '\x2', '\x2', '\x2', 
		'\xB6E', '\xB6F', '\a', '\x30', '\x2', '\x2', '\xB6F', '\xB70', '\x5', 
		'\xB0', 'Y', '\x2', '\xB70', '\xB71', '\a', '^', '\x2', '\x2', '\xB71', 
		'\xB72', '\a', '\xDE', '\x2', '\x2', '\xB72', '\xB73', '\a', 'O', '\x2', 
		'\x2', '\xB73', '\xB74', '\a', '\x185', '\x2', '\x2', '\xB74', '\xB75', 
		'\x5', '\x50E', '\x288', '\x2', '\xB75', '\xB76', '\a', '\x4', '\x2', 
		'\x2', '\xB76', '\xB77', '\x5', '\xB2', 'Z', '\x2', '\xB77', '\xB78', 
		'\a', '\x5', '\x2', '\x2', '\xB78', '\xB79', '\x5', '\xF0', 'y', '\x2', 
		'\xB79', '\xB7A', '\x5', '\xF2', 'z', '\x2', '\xB7A', '\xB7B', '\x5', 
		'\xFA', '~', '\x2', '\xB7B', '\xB7C', '\x5', '\xFC', '\x7F', '\x2', '\xB7C', 
		'\xB7D', '\x5', '\xFE', '\x80', '\x2', '\xB7D', '\xB7E', '\x5', '\x100', 
		'\x81', '\x2', '\xB7E', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xB7F', 
		'\xB80', '\a', '\x30', '\x2', '\x2', '\xB80', '\xB81', '\x5', '\xB0', 
		'Y', '\x2', '\xB81', '\xB82', '\a', '^', '\x2', '\x2', '\xB82', '\xB83', 
		'\x5', '\x50E', '\x288', '\x2', '\xB83', '\xB84', '\a', '\x10C', '\x2', 
		'\x2', '\xB84', '\xB85', '\x5', '\x20E', '\x108', '\x2', '\xB85', '\xB86', 
		'\x5', '\xB4', '[', '\x2', '\xB86', '\xB87', '\x5', '\xF2', 'z', '\x2', 
		'\xB87', '\xB88', '\x5', '\xFA', '~', '\x2', '\xB88', '\xB89', '\x5', 
		'\xFC', '\x7F', '\x2', '\xB89', '\xB8A', '\x5', '\xFE', '\x80', '\x2', 
		'\xB8A', '\xB8B', '\x5', '\x100', '\x81', '\x2', '\xB8B', '\xBBE', '\x3', 
		'\x2', '\x2', '\x2', '\xB8C', '\xB8D', '\a', '\x30', '\x2', '\x2', '\xB8D', 
		'\xB8E', '\x5', '\xB0', 'Y', '\x2', '\xB8E', '\xB8F', '\a', '^', '\x2', 
		'\x2', '\xB8F', '\xB90', '\a', '\xDE', '\x2', '\x2', '\xB90', '\xB91', 
		'\a', 'O', '\x2', '\x2', '\xB91', '\xB92', '\a', '\x185', '\x2', '\x2', 
		'\xB92', '\xB93', '\x5', '\x50E', '\x288', '\x2', '\xB93', '\xB94', '\a', 
		'\x10C', '\x2', '\x2', '\xB94', '\xB95', '\x5', '\x20E', '\x108', '\x2', 
		'\xB95', '\xB96', '\x5', '\xB4', '[', '\x2', '\xB96', '\xB97', '\x5', 
		'\xF2', 'z', '\x2', '\xB97', '\xB98', '\x5', '\xFA', '~', '\x2', '\xB98', 
		'\xB99', '\x5', '\xFC', '\x7F', '\x2', '\xB99', '\xB9A', '\x5', '\xFE', 
		'\x80', '\x2', '\xB9A', '\xB9B', '\x5', '\x100', '\x81', '\x2', '\xB9B', 
		'\xBBE', '\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9D', '\a', '\x30', '\x2', 
		'\x2', '\xB9D', '\xB9E', '\x5', '\xB0', 'Y', '\x2', '\xB9E', '\xB9F', 
		'\a', '^', '\x2', '\x2', '\xB9F', '\xBA0', '\x5', '\x50E', '\x288', '\x2', 
		'\xBA0', '\xBA1', '\a', '\x116', '\x2', '\x2', '\xBA1', '\xBA2', '\a', 
		'\x10C', '\x2', '\x2', '\xBA2', '\xBA3', '\x5', '\x50E', '\x288', '\x2', 
		'\xBA3', '\xBA4', '\x5', '\xB4', '[', '\x2', '\xBA4', '\xBA5', '\x5', 
		'\x82', '\x42', '\x2', '\xBA5', '\xBA6', '\x5', '\xF2', 'z', '\x2', '\xBA6', 
		'\xBA7', '\x5', '\xFA', '~', '\x2', '\xBA7', '\xBA8', '\x5', '\xFC', '\x7F', 
		'\x2', '\xBA8', '\xBA9', '\x5', '\xFE', '\x80', '\x2', '\xBA9', '\xBAA', 
		'\x5', '\x100', '\x81', '\x2', '\xBAA', '\xBBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBAB', '\xBAC', '\a', '\x30', '\x2', '\x2', '\xBAC', '\xBAD', 
		'\x5', '\xB0', 'Y', '\x2', '\xBAD', '\xBAE', '\a', '^', '\x2', '\x2', 
		'\xBAE', '\xBAF', '\a', '\xDE', '\x2', '\x2', '\xBAF', '\xBB0', '\a', 
		'O', '\x2', '\x2', '\xBB0', '\xBB1', '\a', '\x185', '\x2', '\x2', '\xBB1', 
		'\xBB2', '\x5', '\x50E', '\x288', '\x2', '\xBB2', '\xBB3', '\a', '\x116', 
		'\x2', '\x2', '\xBB3', '\xBB4', '\a', '\x10C', '\x2', '\x2', '\xBB4', 
		'\xBB5', '\x5', '\x50E', '\x288', '\x2', '\xBB5', '\xBB6', '\x5', '\xB4', 
		'[', '\x2', '\xBB6', '\xBB7', '\x5', '\x82', '\x42', '\x2', '\xBB7', '\xBB8', 
		'\x5', '\xF2', 'z', '\x2', '\xBB8', '\xBB9', '\x5', '\xFA', '~', '\x2', 
		'\xBB9', '\xBBA', '\x5', '\xFC', '\x7F', '\x2', '\xBBA', '\xBBB', '\x5', 
		'\xFE', '\x80', '\x2', '\xBBB', '\xBBC', '\x5', '\x100', '\x81', '\x2', 
		'\xBBC', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBBD', '\xB60', '\x3', 
		'\x2', '\x2', '\x2', '\xBBD', '\xB6E', '\x3', '\x2', '\x2', '\x2', '\xBBD', 
		'\xB7F', '\x3', '\x2', '\x2', '\x2', '\xBBD', '\xB8C', '\x3', '\x2', '\x2', 
		'\x2', '\xBBD', '\xB9C', '\x3', '\x2', '\x2', '\x2', '\xBBD', '\xBAB', 
		'\x3', '\x2', '\x2', '\x2', '\xBBE', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xBBF', '\xBCC', '\a', '\x15B', '\x2', '\x2', '\xBC0', '\xBCC', '\a', 
		'\x159', '\x2', '\x2', '\xBC1', '\xBC2', '\a', '\xF7', '\x2', '\x2', '\xBC2', 
		'\xBCC', '\a', '\x15B', '\x2', '\x2', '\xBC3', '\xBC4', '\a', '\xF7', 
		'\x2', '\x2', '\xBC4', '\xBCC', '\a', '\x159', '\x2', '\x2', '\xBC5', 
		'\xBC6', '\a', '\xD7', '\x2', '\x2', '\xBC6', '\xBCC', '\a', '\x15B', 
		'\x2', '\x2', '\xBC7', '\xBC8', '\a', '\xD7', '\x2', '\x2', '\xBC8', '\xBCC', 
		'\a', '\x159', '\x2', '\x2', '\xBC9', '\xBCC', '\a', '\x168', '\x2', '\x2', 
		'\xBCA', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBCB', '\xBC0', '\x3', '\x2', '\x2', '\x2', '\xBCB', 
		'\xBC1', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBC3', '\x3', '\x2', '\x2', 
		'\x2', '\xBCB', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBC7', 
		'\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBC9', '\x3', '\x2', '\x2', '\x2', 
		'\xBCB', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBCC', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xBCD', '\xBD0', '\x5', '\xB6', '\\', '\x2', '\xBCE', 
		'\xBD0', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBCD', '\x3', '\x2', '\x2', 
		'\x2', '\xBCF', '\xBCE', '\x3', '\x2', '\x2', '\x2', '\xBD0', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xBD1', '\xBD2', '\a', '\x4', '\x2', '\x2', 
		'\xBD2', '\xBD3', '\x5', '\xB8', ']', '\x2', '\xBD3', '\xBD4', '\a', '\x5', 
		'\x2', '\x2', '\xBD4', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD5', '\xBD7', 
		'\x3', '\x2', '\x2', '\x2', '\xBD6', '\xBD1', '\x3', '\x2', '\x2', '\x2', 
		'\xBD6', '\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBD7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xBD8', '\xBD9', '\b', '\\', '\x1', '\x2', '\xBD9', 
		'\xBDA', '\x5', '\xBA', '^', '\x2', '\xBDA', '\xBE0', '\x3', '\x2', '\x2', 
		'\x2', '\xBDB', '\xBDC', '\f', '\x3', '\x2', '\x2', '\xBDC', '\xBDD', 
		'\a', '\b', '\x2', '\x2', '\xBDD', '\xBDF', '\x5', '\xBA', '^', '\x2', 
		'\xBDE', '\xBDB', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBE2', '\x3', 
		'\x2', '\x2', '\x2', '\xBE0', '\xBDE', '\x3', '\x2', '\x2', '\x2', '\xBE0', 
		'\xBE1', '\x3', '\x2', '\x2', '\x2', '\xBE1', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBE2', '\xBE0', '\x3', '\x2', '\x2', '\x2', '\xBE3', '\xBE4', 
		'\b', ']', '\x1', '\x2', '\xBE4', '\xBE5', '\x5', '\xBC', '_', '\x2', 
		'\xBE5', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\xBE6', '\xBE7', '\f', 
		'\x3', '\x2', '\x2', '\xBE7', '\xBE8', '\a', '\b', '\x2', '\x2', '\xBE8', 
		'\xBEA', '\x5', '\xBC', '_', '\x2', '\xBE9', '\xBE6', '\x3', '\x2', '\x2', 
		'\x2', '\xBEA', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBE9', 
		'\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBEC', '\x3', '\x2', '\x2', '\x2', 
		'\xBEC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEB', '\x3', 
		'\x2', '\x2', '\x2', '\xBEE', '\xBF2', '\x5', '\xBE', '`', '\x2', '\xBEF', 
		'\xBF2', '\x5', '\xCC', 'g', '\x2', '\xBF0', '\xBF2', '\x5', '\xD2', 'j', 
		'\x2', '\xBF1', '\xBEE', '\x3', '\x2', '\x2', '\x2', '\xBF1', '\xBEF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF1', '\xBF0', '\x3', '\x2', '\x2', '\x2', 
		'\xBF2', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBF3', '\xBF6', '\x5', 
		'\xC0', '\x61', '\x2', '\xBF4', '\xBF6', '\x5', '\xD2', 'j', '\x2', '\xBF5', 
		'\xBF3', '\x3', '\x2', '\x2', '\x2', '\xBF5', '\xBF4', '\x3', '\x2', '\x2', 
		'\x2', '\xBF6', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF7', '\xBF8', 
		'\x5', '\x532', '\x29A', '\x2', '\xBF8', '\xBF9', '\x5', '\x458', '\x22D', 
		'\x2', '\xBF9', '\xBFA', '\x5', '\x156', '\xAC', '\x2', '\xBFA', '\xBFB', 
		'\x5', '\xC2', '\x62', '\x2', '\xBFB', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBFC', '\xBFD', '\x5', '\x532', '\x29A', '\x2', '\xBFD', '\xBFE', '\x5', 
		'\xC2', '\x62', '\x2', '\xBFE', '\xC05', '\x3', '\x2', '\x2', '\x2', '\xBFF', 
		'\xC00', '\x5', '\x532', '\x29A', '\x2', '\xC00', '\xC01', '\a', 'k', 
		'\x2', '\x2', '\xC01', '\xC02', '\a', '\x111', '\x2', '\x2', '\xC02', 
		'\xC03', '\x5', '\xC2', '\x62', '\x2', '\xC03', '\xC05', '\x3', '\x2', 
		'\x2', '\x2', '\xC04', '\xBFC', '\x3', '\x2', '\x2', '\x2', '\xC04', '\xBFF', 
		'\x3', '\x2', '\x2', '\x2', '\xC05', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC06', '\xC0B', '\b', '\x62', '\x1', '\x2', '\xC07', '\xC08', '\f', 
		'\x4', '\x2', '\x2', '\xC08', '\xC0A', '\x5', '\xC4', '\x63', '\x2', '\xC09', 
		'\xC07', '\x3', '\x2', '\x2', '\x2', '\xC0A', '\xC0D', '\x3', '\x2', '\x2', 
		'\x2', '\xC0B', '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC0B', '\xC0C', 
		'\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC0D', '\xC0B', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', '\a', 
		'/', '\x2', '\x2', '\xC0F', '\xC10', '\x5', '\x512', '\x28A', '\x2', '\xC10', 
		'\xC11', '\x5', '\xC6', '\x64', '\x2', '\xC11', '\xC17', '\x3', '\x2', 
		'\x2', '\x2', '\xC12', '\xC17', '\x5', '\xC6', '\x64', '\x2', '\xC13', 
		'\xC17', '\x5', '\xCA', '\x66', '\x2', '\xC14', '\xC15', '\a', '-', '\x2', 
		'\x2', '\xC15', '\xC17', '\x5', '\x20E', '\x108', '\x2', '\xC16', '\xC0E', 
		'\x3', '\x2', '\x2', '\x2', '\xC16', '\xC12', '\x3', '\x2', '\x2', '\x2', 
		'\xC16', '\xC13', '\x3', '\x2', '\x2', '\x2', '\xC16', '\xC14', '\x3', 
		'\x2', '\x2', '\x2', '\xC17', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC18', 
		'\xC19', '\a', 'O', '\x2', '\x2', '\xC19', '\xC41', '\a', 'P', '\x2', 
		'\x2', '\xC1A', '\xC41', '\a', 'P', '\x2', '\x2', '\xC1B', '\xC1C', '\a', 
		'\x64', '\x2', '\x2', '\xC1C', '\xC1D', '\x5', '\x29A', '\x14E', '\x2', 
		'\xC1D', '\xC1E', '\x5', '\x102', '\x82', '\x2', '\xC1E', '\xC41', '\x3', 
		'\x2', '\x2', '\x2', '\xC1F', '\xC20', '\a', 'W', '\x2', '\x2', '\xC20', 
		'\xC21', '\a', '\xEE', '\x2', '\x2', '\xC21', '\xC22', '\x5', '\x29A', 
		'\x14E', '\x2', '\xC22', '\xC23', '\x5', '\x102', '\x82', '\x2', '\xC23', 
		'\xC41', '\x3', '\x2', '\x2', '\x2', '\xC24', '\xC25', '\a', ',', '\x2', 
		'\x2', '\xC25', '\xC26', '\a', '\x4', '\x2', '\x2', '\xC26', '\xC27', 
		'\x5', '\x484', '\x243', '\x2', '\xC27', '\xC28', '\a', '\x5', '\x2', 
		'\x2', '\xC28', '\xC29', '\x5', '\xD6', 'l', '\x2', '\xC29', '\xC41', 
		'\x3', '\x2', '\x2', '\x2', '\xC2A', '\xC2B', '\a', '\x37', '\x2', '\x2', 
		'\xC2B', '\xC41', '\x5', '\x488', '\x245', '\x2', '\xC2C', '\xC2D', '\a', 
		'\x1B0', '\x2', '\x2', '\xC2D', '\xC2E', '\x5', '\xC8', '\x65', '\x2', 
		'\xC2E', '\xC2F', '\a', '&', '\x2', '\x2', '\xC2F', '\xC30', '\a', '\xDD', 
		'\x2', '\x2', '\xC30', '\xC31', '\x5', '\x11E', '\x90', '\x2', '\xC31', 
		'\xC41', '\x3', '\x2', '\x2', '\x2', '\xC32', '\xC33', '\a', '\x1B0', 
		'\x2', '\x2', '\xC33', '\xC34', '\x5', '\xC8', '\x65', '\x2', '\xC34', 
		'\xC35', '\a', '&', '\x2', '\x2', '\xC35', '\xC36', '\a', '\x4', '\x2', 
		'\x2', '\xC36', '\xC37', '\x5', '\x484', '\x243', '\x2', '\xC37', '\xC38', 
		'\a', '\x5', '\x2', '\x2', '\xC38', '\xC39', '\a', '\x1B2', '\x2', '\x2', 
		'\xC39', '\xC41', '\x3', '\x2', '\x2', '\x2', '\xC3A', '\xC3B', '\a', 
		'X', '\x2', '\x2', '\xC3B', '\xC3C', '\x5', '\x50E', '\x288', '\x2', '\xC3C', 
		'\xC3D', '\x5', '\xD8', 'm', '\x2', '\xC3D', '\xC3E', '\x5', '\xE0', 'q', 
		'\x2', '\xC3E', '\xC3F', '\x5', '\xE8', 'u', '\x2', '\xC3F', '\xC41', 
		'\x3', '\x2', '\x2', '\x2', '\xC40', '\xC18', '\x3', '\x2', '\x2', '\x2', 
		'\xC40', '\xC1A', '\x3', '\x2', '\x2', '\x2', '\xC40', '\xC1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC40', '\xC1F', '\x3', '\x2', '\x2', '\x2', '\xC40', 
		'\xC24', '\x3', '\x2', '\x2', '\x2', '\xC40', '\xC2A', '\x3', '\x2', '\x2', 
		'\x2', '\xC40', '\xC2C', '\x3', '\x2', '\x2', '\x2', '\xC40', '\xC32', 
		'\x3', '\x2', '\x2', '\x2', '\xC40', '\xC3A', '\x3', '\x2', '\x2', '\x2', 
		'\xC41', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC42', '\xC46', '\a', '\x8D', 
		'\x2', '\x2', '\xC43', '\xC44', '\a', '\x95', '\x2', '\x2', '\xC44', '\xC46', 
		'\a', '\x37', '\x2', '\x2', '\xC45', '\xC42', '\x3', '\x2', '\x2', '\x2', 
		'\xC45', '\xC43', '\x3', '\x2', '\x2', '\x2', '\xC46', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC47', '\xC4F', '\a', '\x38', '\x2', '\x2', '\xC48', 
		'\xC49', '\a', 'O', '\x2', '\x2', '\xC49', '\xC4F', '\a', '\x38', '\x2', 
		'\x2', '\xC4A', '\xC4B', '\a', 'G', '\x2', '\x2', '\xC4B', '\xC4F', '\a', 
		'\xB6', '\x2', '\x2', '\xC4C', '\xC4D', '\a', 'G', '\x2', '\x2', '\xC4D', 
		'\xC4F', '\a', '\xDF', '\x2', '\x2', '\xC4E', '\xC47', '\x3', '\x2', '\x2', 
		'\x2', '\xC4E', '\xC48', '\x3', '\x2', '\x2', '\x2', '\xC4E', '\xC4A', 
		'\x3', '\x2', '\x2', '\x2', '\xC4E', '\xC4C', '\x3', '\x2', '\x2', '\x2', 
		'\xC4F', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC50', '\xC51', '\a', 'z', 
		'\x2', '\x2', '\xC51', '\xC52', '\x5', '\x50E', '\x288', '\x2', '\xC52', 
		'\xC53', '\x5', '\xCE', 'h', '\x2', '\xC53', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xC54', '\xC5D', '\b', 'h', '\x1', '\x2', '\xC55', '\xC56', '\f', 
		'\x5', '\x2', '\x2', '\xC56', '\xC57', '\a', '\xE2', '\x2', '\x2', '\xC57', 
		'\xC5C', '\x5', '\xD0', 'i', '\x2', '\xC58', '\xC59', '\f', '\x4', '\x2', 
		'\x2', '\xC59', '\xC5A', '\a', '\xCA', '\x2', '\x2', '\xC5A', '\xC5C', 
		'\x5', '\xD0', 'i', '\x2', '\xC5B', '\xC55', '\x3', '\x2', '\x2', '\x2', 
		'\xC5B', '\xC58', '\x3', '\x2', '\x2', '\x2', '\xC5C', '\xC5F', '\x3', 
		'\x2', '\x2', '\x2', '\xC5D', '\xC5B', '\x3', '\x2', '\x2', '\x2', '\xC5D', 
		'\xC5E', '\x3', '\x2', '\x2', '\x2', '\xC5E', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xC5F', '\xC5D', '\x3', '\x2', '\x2', '\x2', '\xC60', '\xC61', 
		'\t', '\x5', '\x2', '\x2', '\xC61', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xC62', '\xC63', '\a', '/', '\x2', '\x2', '\xC63', '\xC64', '\x5', '\x512', 
		'\x28A', '\x2', '\xC64', '\xC65', '\x5', '\xD4', 'k', '\x2', '\xC65', 
		'\xC68', '\x3', '\x2', '\x2', '\x2', '\xC66', '\xC68', '\x5', '\xD4', 
		'k', '\x2', '\xC67', '\xC62', '\x3', '\x2', '\x2', '\x2', '\xC67', '\xC66', 
		'\x3', '\x2', '\x2', '\x2', '\xC68', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xC69', '\xC6A', '\a', ',', '\x2', '\x2', '\xC6A', '\xC6B', '\a', '\x4', 
		'\x2', '\x2', '\xC6B', '\xC6C', '\x5', '\x484', '\x243', '\x2', '\xC6C', 
		'\xC6D', '\a', '\x5', '\x2', '\x2', '\xC6D', '\xC6E', '\x5', '\x1BA', 
		'\xDE', '\x2', '\xC6E', '\xCA3', '\x3', '\x2', '\x2', '\x2', '\xC6F', 
		'\xC70', '\a', '\x64', '\x2', '\x2', '\xC70', '\xC71', '\a', '\x4', '\x2', 
		'\x2', '\xC71', '\xC72', '\x5', '\xDA', 'n', '\x2', '\xC72', '\xC73', 
		'\a', '\x5', '\x2', '\x2', '\xC73', '\xC74', '\x5', '\xDE', 'p', '\x2', 
		'\xC74', '\xC75', '\x5', '\x29A', '\x14E', '\x2', '\xC75', '\xC76', '\x5', 
		'\x102', '\x82', '\x2', '\xC76', '\xC77', '\x5', '\x1BA', '\xDE', '\x2', 
		'\xC77', '\xCA3', '\x3', '\x2', '\x2', '\x2', '\xC78', '\xC79', '\a', 
		'\x64', '\x2', '\x2', '\xC79', '\xC7A', '\x5', '\x104', '\x83', '\x2', 
		'\xC7A', '\xC7B', '\x5', '\x1BA', '\xDE', '\x2', '\xC7B', '\xCA3', '\x3', 
		'\x2', '\x2', '\x2', '\xC7C', '\xC7D', '\a', 'W', '\x2', '\x2', '\xC7D', 
		'\xC7E', '\a', '\xEE', '\x2', '\x2', '\xC7E', '\xC7F', '\a', '\x4', '\x2', 
		'\x2', '\xC7F', '\xC80', '\x5', '\xDA', 'n', '\x2', '\xC80', '\xC81', 
		'\a', '\x5', '\x2', '\x2', '\xC81', '\xC82', '\x5', '\xDE', 'p', '\x2', 
		'\xC82', '\xC83', '\x5', '\x29A', '\x14E', '\x2', '\xC83', '\xC84', '\x5', 
		'\x102', '\x82', '\x2', '\xC84', '\xC85', '\x5', '\x1BA', '\xDE', '\x2', 
		'\xC85', '\xCA3', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC87', '\a', 
		'W', '\x2', '\x2', '\xC87', '\xC88', '\a', '\xEE', '\x2', '\x2', '\xC88', 
		'\xC89', '\x5', '\x104', '\x83', '\x2', '\xC89', '\xC8A', '\x5', '\x1BA', 
		'\xDE', '\x2', '\xC8A', '\xCA3', '\x3', '\x2', '\x2', '\x2', '\xC8B', 
		'\xC8C', '\a', '\xC9', '\x2', '\x2', '\xC8C', '\xC8D', '\x5', '\x256', 
		'\x12C', '\x2', '\xC8D', '\xC8E', '\a', '\x4', '\x2', '\x2', '\xC8E', 
		'\xC8F', '\x5', '\xE2', 'r', '\x2', '\xC8F', '\xC90', '\a', '\x5', '\x2', 
		'\x2', '\xC90', '\xC91', '\x5', '\xDE', 'p', '\x2', '\xC91', '\xC92', 
		'\x5', '\x29A', '\x14E', '\x2', '\xC92', '\xC93', '\x5', '\x102', '\x82', 
		'\x2', '\xC93', '\xC94', '\x5', '\xE6', 't', '\x2', '\xC94', '\xC95', 
		'\x5', '\x1BA', '\xDE', '\x2', '\xC95', '\xCA3', '\x3', '\x2', '\x2', 
		'\x2', '\xC96', '\xC97', '\a', '\x41', '\x2', '\x2', '\xC97', '\xC98', 
		'\a', '\xEE', '\x2', '\x2', '\xC98', '\xC99', '\a', '\x4', '\x2', '\x2', 
		'\xC99', '\xC9A', '\x5', '\xDA', 'n', '\x2', '\xC9A', '\xC9B', '\a', '\x5', 
		'\x2', '\x2', '\xC9B', '\xC9C', '\a', 'X', '\x2', '\x2', '\xC9C', '\xC9D', 
		'\x5', '\x50E', '\x288', '\x2', '\xC9D', '\xC9E', '\x5', '\xD8', 'm', 
		'\x2', '\xC9E', '\xC9F', '\x5', '\xE0', 'q', '\x2', '\xC9F', '\xCA0', 
		'\x5', '\xE8', 'u', '\x2', '\xCA0', '\xCA1', '\x5', '\x1BA', '\xDE', '\x2', 
		'\xCA1', '\xCA3', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xC69', '\x3', 
		'\x2', '\x2', '\x2', '\xCA2', '\xC6F', '\x3', '\x2', '\x2', '\x2', '\xCA2', 
		'\xC78', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xC7C', '\x3', '\x2', '\x2', 
		'\x2', '\xCA2', '\xC86', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xC8B', 
		'\x3', '\x2', '\x2', '\x2', '\xCA2', '\xC96', '\x3', '\x2', '\x2', '\x2', 
		'\xCA3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xCA4', '\xCA5', '\a', '\x106', 
		'\x2', '\x2', '\xCA5', '\xCA8', '\a', '\xE6', '\x2', '\x2', '\xCA6', '\xCA8', 
		'\x3', '\x2', '\x2', '\x2', '\xCA7', '\xCA4', '\x3', '\x2', '\x2', '\x2', 
		'\xCA7', '\xCA6', '\x3', '\x2', '\x2', '\x2', '\xCA8', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA9', '\xCAA', '\a', '\x4', '\x2', '\x2', '\xCAA', 
		'\xCAB', '\x5', '\xDA', 'n', '\x2', '\xCAB', '\xCAC', '\a', '\x5', '\x2', 
		'\x2', '\xCAC', '\xCAF', '\x3', '\x2', '\x2', '\x2', '\xCAD', '\xCAF', 
		'\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCA9', '\x3', '\x2', '\x2', '\x2', 
		'\xCAE', '\xCAD', '\x3', '\x2', '\x2', '\x2', '\xCAF', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xCB0', '\xCB1', '\b', 'n', '\x1', '\x2', '\xCB1', 
		'\xCB2', '\x5', '\xDC', 'o', '\x2', '\xCB2', '\xCB8', '\x3', '\x2', '\x2', 
		'\x2', '\xCB3', '\xCB4', '\f', '\x3', '\x2', '\x2', '\xCB4', '\xCB5', 
		'\a', '\b', '\x2', '\x2', '\xCB5', '\xCB7', '\x5', '\xDC', 'o', '\x2', 
		'\xCB6', '\xCB3', '\x3', '\x2', '\x2', '\x2', '\xCB7', '\xCBA', '\x3', 
		'\x2', '\x2', '\x2', '\xCB8', '\xCB6', '\x3', '\x2', '\x2', '\x2', '\xCB8', 
		'\xCB9', '\x3', '\x2', '\x2', '\x2', '\xCB9', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xCBA', '\xCB8', '\x3', '\x2', '\x2', '\x2', '\xCBB', '\xCBC', 
		'\x5', '\x532', '\x29A', '\x2', '\xCBC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xCBD', '\xCBE', '\a', '\x1B3', '\x2', '\x2', '\xCBE', '\xCBF', 
		'\a', '\x4', '\x2', '\x2', '\xCBF', '\xCC0', '\x5', '\xDA', 'n', '\x2', 
		'\xCC0', '\xCC1', '\a', '\x5', '\x2', '\x2', '\xCC1', '\xCC4', '\x3', 
		'\x2', '\x2', '\x2', '\xCC2', '\xCC4', '\x3', '\x2', '\x2', '\x2', '\xCC3', 
		'\xCBD', '\x3', '\x2', '\x2', '\x2', '\xCC3', '\xCC2', '\x3', '\x2', '\x2', 
		'\x2', '\xCC4', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xCC5', '\xCC6', 
		'\a', '\xFB', '\x2', '\x2', '\xCC6', '\xCCD', '\a', 's', '\x2', '\x2', 
		'\xCC7', '\xCC8', '\a', '\xFB', '\x2', '\x2', '\xCC8', '\xCCD', '\a', 
		'\x115', '\x2', '\x2', '\xCC9', '\xCCA', '\a', '\xFB', '\x2', '\x2', '\xCCA', 
		'\xCCD', '\a', '\x149', '\x2', '\x2', '\xCCB', '\xCCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCCC', '\xCC5', '\x3', '\x2', '\x2', '\x2', '\xCCC', '\xCC7', 
		'\x3', '\x2', '\x2', '\x2', '\xCCC', '\xCC9', '\x3', '\x2', '\x2', '\x2', 
		'\xCCC', '\xCCB', '\x3', '\x2', '\x2', '\x2', '\xCCD', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xCCE', '\xCCF', '\b', 'r', '\x1', '\x2', '\xCCF', 
		'\xCD0', '\x5', '\xE4', 's', '\x2', '\xCD0', '\xCD6', '\x3', '\x2', '\x2', 
		'\x2', '\xCD1', '\xCD2', '\f', '\x3', '\x2', '\x2', '\xCD2', '\xCD3', 
		'\a', '\b', '\x2', '\x2', '\xCD3', '\xCD5', '\x5', '\xE4', 's', '\x2', 
		'\xCD4', '\xCD1', '\x3', '\x2', '\x2', '\x2', '\xCD5', '\xCD8', '\x3', 
		'\x2', '\x2', '\x2', '\xCD6', '\xCD4', '\x3', '\x2', '\x2', '\x2', '\xCD6', 
		'\xCD7', '\x3', '\x2', '\x2', '\x2', '\xCD7', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xCD8', '\xCD6', '\x3', '\x2', '\x2', '\x2', '\xCD9', '\xCDA', 
		'\x5', '\x25C', '\x12F', '\x2', '\xCDA', '\xCDB', '\a', 'k', '\x2', '\x2', 
		'\xCDB', '\xCDC', '\x5', '\x2AE', '\x158', '\x2', '\xCDC', '\xCE5', '\x3', 
		'\x2', '\x2', '\x2', '\xCDD', '\xCDE', '\x5', '\x25C', '\x12F', '\x2', 
		'\xCDE', '\xCDF', '\a', 'k', '\x2', '\x2', '\xCDF', '\xCE0', '\a', '\x10F', 
		'\x2', '\x2', '\xCE0', '\xCE1', '\a', '\x4', '\x2', '\x2', '\xCE1', '\xCE2', 
		'\x5', '\x2AE', '\x158', '\x2', '\xCE2', '\xCE3', '\a', '\x5', '\x2', 
		'\x2', '\xCE3', '\xCE5', '\x3', '\x2', '\x2', '\x2', '\xCE4', '\xCD9', 
		'\x3', '\x2', '\x2', '\x2', '\xCE4', '\xCDD', '\x3', '\x2', '\x2', '\x2', 
		'\xCE5', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xCE6', '\xCE7', '\a', 'i', 
		'\x2', '\x2', '\xCE7', '\xCE8', '\a', '\x4', '\x2', '\x2', '\xCE8', '\xCE9', 
		'\x5', '\x484', '\x243', '\x2', '\xCE9', '\xCEA', '\a', '\x5', '\x2', 
		'\x2', '\xCEA', '\xCED', '\x3', '\x2', '\x2', '\x2', '\xCEB', '\xCED', 
		'\x3', '\x2', '\x2', '\x2', '\xCEC', '\xCE6', '\x3', '\x2', '\x2', '\x2', 
		'\xCEC', '\xCEB', '\x3', '\x2', '\x2', '\x2', '\xCED', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xCEE', '\xCF8', '\x5', '\xEA', 'v', '\x2', '\xCEF', 
		'\xCF8', '\x5', '\xEC', 'w', '\x2', '\xCF0', '\xCF1', '\x5', '\xEA', 'v', 
		'\x2', '\xCF1', '\xCF2', '\x5', '\xEC', 'w', '\x2', '\xCF2', '\xCF8', 
		'\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCF4', '\x5', '\xEC', 'w', '\x2', 
		'\xCF4', '\xCF5', '\x5', '\xEA', 'v', '\x2', '\xCF5', '\xCF8', '\x3', 
		'\x2', '\x2', '\x2', '\xCF6', '\xCF8', '\x3', '\x2', '\x2', '\x2', '\xCF7', 
		'\xCEE', '\x3', '\x2', '\x2', '\x2', '\xCF7', '\xCEF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF7', '\xCF0', '\x3', '\x2', '\x2', '\x2', '\xCF7', '\xCF3', 
		'\x3', '\x2', '\x2', '\x2', '\xCF7', '\xCF6', '\x3', '\x2', '\x2', '\x2', 
		'\xCF8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xCF9', '\xCFA', '\a', 'R', 
		'\x2', '\x2', '\xCFA', '\xCFB', '\a', '\x16A', '\x2', '\x2', '\xCFB', 
		'\xCFC', '\x5', '\xEE', 'x', '\x2', '\xCFC', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xCFD', '\xCFE', '\a', 'R', '\x2', '\x2', '\xCFE', '\xCFF', '\a', 
		'\xB8', '\x2', '\x2', '\xCFF', '\xD00', '\x5', '\xEE', 'x', '\x2', '\xD00', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xD01', '\xD02', '\a', '\x106', '\x2', 
		'\x2', '\xD02', '\xD0A', '\a', '\x86', '\x2', '\x2', '\xD03', '\xD0A', 
		'\a', '\x134', '\x2', '\x2', '\xD04', '\xD0A', '\a', '\x98', '\x2', '\x2', 
		'\xD05', '\xD06', '\a', '\x146', '\x2', '\x2', '\xD06', '\xD0A', '\a', 
		'P', '\x2', '\x2', '\xD07', '\xD08', '\a', '\x146', '\x2', '\x2', '\xD08', 
		'\xD0A', '\a', '\x37', '\x2', '\x2', '\xD09', '\xD01', '\x3', '\x2', '\x2', 
		'\x2', '\xD09', '\xD03', '\x3', '\x2', '\x2', '\x2', '\xD09', '\xD04', 
		'\x3', '\x2', '\x2', '\x2', '\xD09', '\xD05', '\x3', '\x2', '\x2', '\x2', 
		'\xD09', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xD0A', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xD0B', '\xD0C', '\a', '\xE7', '\x2', '\x2', '\xD0C', 
		'\xD0D', '\a', '\x4', '\x2', '\x2', '\xD0D', '\xD0E', '\x5', '\x50C', 
		'\x287', '\x2', '\xD0E', '\xD0F', '\a', '\x5', '\x2', '\x2', '\xD0F', 
		'\xD12', '\x3', '\x2', '\x2', '\x2', '\xD10', '\xD12', '\x3', '\x2', '\x2', 
		'\x2', '\xD11', '\xD0B', '\x3', '\x2', '\x2', '\x2', '\xD11', '\xD10', 
		'\x3', '\x2', '\x2', '\x2', '\xD12', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xD13', '\xD16', '\x5', '\xF4', '{', '\x2', '\xD14', '\xD16', '\x3', 
		'\x2', '\x2', '\x2', '\xD15', '\xD13', '\x3', '\x2', '\x2', '\x2', '\xD15', 
		'\xD14', '\x3', '\x2', '\x2', '\x2', '\xD16', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xD17', '\xD18', '\a', '\x116', '\x2', '\x2', '\xD18', '\xD19', 
		'\a', '\x95', '\x2', '\x2', '\xD19', '\xD1A', '\x5', '\x532', '\x29A', 
		'\x2', '\xD1A', '\xD1B', '\a', '\x4', '\x2', '\x2', '\xD1B', '\xD1C', 
		'\x5', '\xF6', '|', '\x2', '\xD1C', '\xD1D', '\a', '\x5', '\x2', '\x2', 
		'\xD1D', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xD1E', '\xD1F', '\b', '|', 
		'\x1', '\x2', '\xD1F', '\xD20', '\x5', '\xF8', '}', '\x2', '\xD20', '\xD26', 
		'\x3', '\x2', '\x2', '\x2', '\xD21', '\xD22', '\f', '\x3', '\x2', '\x2', 
		'\xD22', '\xD23', '\a', '\b', '\x2', '\x2', '\xD23', '\xD25', '\x5', '\xF8', 
		'}', '\x2', '\xD24', '\xD21', '\x3', '\x2', '\x2', '\x2', '\xD25', '\xD28', 
		'\x3', '\x2', '\x2', '\x2', '\xD26', '\xD24', '\x3', '\x2', '\x2', '\x2', 
		'\xD26', '\xD27', '\x3', '\x2', '\x2', '\x2', '\xD27', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xD28', '\xD26', '\x3', '\x2', '\x2', '\x2', '\xD29', 
		'\xD2A', '\x5', '\x532', '\x29A', '\x2', '\xD2A', '\xD2B', '\x5', '\x262', 
		'\x132', '\x2', '\xD2B', '\xD2C', '\x5', '\x264', '\x133', '\x2', '\xD2C', 
		'\xD38', '\x3', '\x2', '\x2', '\x2', '\xD2D', '\xD2E', '\x5', '\x492', 
		'\x24A', '\x2', '\xD2E', '\xD2F', '\x5', '\x262', '\x132', '\x2', '\xD2F', 
		'\xD30', '\x5', '\x264', '\x133', '\x2', '\xD30', '\xD38', '\x3', '\x2', 
		'\x2', '\x2', '\xD31', '\xD32', '\a', '\x4', '\x2', '\x2', '\xD32', '\xD33', 
		'\x5', '\x484', '\x243', '\x2', '\xD33', '\xD34', '\a', '\x5', '\x2', 
		'\x2', '\xD34', '\xD35', '\x5', '\x262', '\x132', '\x2', '\xD35', '\xD36', 
		'\x5', '\x264', '\x133', '\x2', '\xD36', '\xD38', '\x3', '\x2', '\x2', 
		'\x2', '\xD37', '\xD29', '\x3', '\x2', '\x2', '\x2', '\xD37', '\xD2D', 
		'\x3', '\x2', '\x2', '\x2', '\xD37', '\xD31', '\x3', '\x2', '\x2', '\x2', 
		'\xD38', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xD39', '\xD3A', '\a', '\x66', 
		'\x2', '\x2', '\xD3A', '\xD3D', '\x5', '\x512', '\x28A', '\x2', '\xD3B', 
		'\xD3D', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD39', '\x3', '\x2', '\x2', 
		'\x2', '\xD3C', '\xD3B', '\x3', '\x2', '\x2', '\x2', '\xD3D', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xD3E', '\xD3F', '\a', 'k', '\x2', '\x2', 
		'\xD3F', '\xD44', '\x5', 'v', '<', '\x2', '\xD40', '\xD41', '\a', '\x174', 
		'\x2', '\x2', '\xD41', '\xD44', '\a', '\x10E', '\x2', '\x2', '\xD42', 
		'\xD44', '\x3', '\x2', '\x2', '\x2', '\xD43', '\xD3E', '\x3', '\x2', '\x2', 
		'\x2', '\xD43', '\xD40', '\x3', '\x2', '\x2', '\x2', '\xD43', '\xD42', 
		'\x3', '\x2', '\x2', '\x2', '\xD44', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xD45', '\xD46', '\a', 'R', '\x2', '\x2', '\xD46', '\xD47', '\a', '\xA3', 
		'\x2', '\x2', '\xD47', '\xD52', '\a', '\xC1', '\x2', '\x2', '\xD48', '\xD49', 
		'\a', 'R', '\x2', '\x2', '\xD49', '\xD4A', '\a', '\xA3', '\x2', '\x2', 
		'\xD4A', '\xD4B', '\a', '\xB8', '\x2', '\x2', '\xD4B', '\xD52', '\a', 
		'\x139', '\x2', '\x2', '\xD4C', '\xD4D', '\a', 'R', '\x2', '\x2', '\xD4D', 
		'\xD4E', '\a', '\xA3', '\x2', '\x2', '\xD4E', '\xD4F', '\a', '\x11D', 
		'\x2', '\x2', '\xD4F', '\xD52', '\a', '\x139', '\x2', '\x2', '\xD50', 
		'\xD52', '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD45', '\x3', '\x2', '\x2', 
		'\x2', '\xD51', '\xD48', '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD4C', 
		'\x3', '\x2', '\x2', '\x2', '\xD51', '\xD50', '\x3', '\x2', '\x2', '\x2', 
		'\xD52', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xD53', '\xD54', '\a', '\x158', 
		'\x2', '\x2', '\xD54', '\xD57', '\x5', '\x512', '\x28A', '\x2', '\xD55', 
		'\xD57', '\x3', '\x2', '\x2', '\x2', '\xD56', '\xD53', '\x3', '\x2', '\x2', 
		'\x2', '\xD56', '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD57', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\xD58', '\xD59', '\a', '\x66', '\x2', '\x2', 
		'\xD59', '\xD5A', '\a', '\xE4', '\x2', '\x2', '\xD5A', '\xD5B', '\a', 
		'\x158', '\x2', '\x2', '\xD5B', '\xD5E', '\x5', '\x512', '\x28A', '\x2', 
		'\xD5C', '\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD5D', '\xD58', '\x3', 
		'\x2', '\x2', '\x2', '\xD5D', '\xD5C', '\x3', '\x2', '\x2', '\x2', '\xD5E', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\xD5F', '\xD60', '\a', '\x66', '\x2', 
		'\x2', '\xD60', '\xD61', '\a', '\xE4', '\x2', '\x2', '\xD61', '\xD62', 
		'\x5', '\x512', '\x28A', '\x2', '\xD62', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\xD63', '\xD64', '\a', '\x30', '\x2', '\x2', '\xD64', '\xD65', 
		'\a', '\x14F', '\x2', '\x2', '\xD65', '\xD66', '\x5', '\x20E', '\x108', 
		'\x2', '\xD66', '\xD67', '\x5', '\x368', '\x1B5', '\x2', '\xD67', '\xD68', 
		'\a', 'R', '\x2', '\x2', '\xD68', '\xD69', '\x5', '\x4D4', '\x26B', '\x2', 
		'\xD69', '\xD6A', '\a', '\x42', '\x2', '\x2', '\xD6A', '\xD6B', '\x5', 
		'\x41C', '\x20F', '\x2', '\xD6B', '\xD79', '\x3', '\x2', '\x2', '\x2', 
		'\xD6C', '\xD6D', '\a', '\x30', '\x2', '\x2', '\xD6D', '\xD6E', '\a', 
		'\x14F', '\x2', '\x2', '\xD6E', '\xD6F', '\a', '\xDE', '\x2', '\x2', '\xD6F', 
		'\xD70', '\a', 'O', '\x2', '\x2', '\xD70', '\xD71', '\a', '\x185', '\x2', 
		'\x2', '\xD71', '\xD72', '\x5', '\x20E', '\x108', '\x2', '\xD72', '\xD73', 
		'\x5', '\x368', '\x1B5', '\x2', '\xD73', '\xD74', '\a', 'R', '\x2', '\x2', 
		'\xD74', '\xD75', '\x5', '\x4D4', '\x26B', '\x2', '\xD75', '\xD76', '\a', 
		'\x42', '\x2', '\x2', '\xD76', '\xD77', '\x5', '\x41C', '\x20F', '\x2', 
		'\xD77', '\xD79', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD63', '\x3', 
		'\x2', '\x2', '\x2', '\xD78', '\xD6C', '\x3', '\x2', '\x2', '\x2', '\xD79', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\xD7A', '\xD7B', '\a', '\x8C', '\x2', 
		'\x2', '\xD7B', '\xD7C', '\a', '\x14F', '\x2', '\x2', '\xD7C', '\xD7D', 
		'\x5', '\x20E', '\x108', '\x2', '\xD7D', '\xD7E', '\a', '\x146', '\x2', 
		'\x2', '\xD7E', '\xD7F', '\a', '\x14F', '\x2', '\x2', '\xD7F', '\xD80', 
		'\x5', '\x52A', '\x296', '\x2', '\xD80', '\xD8B', '\x3', '\x2', '\x2', 
		'\x2', '\xD81', '\xD82', '\a', '\x8C', '\x2', '\x2', '\xD82', '\xD83', 
		'\a', '\x14F', '\x2', '\x2', '\xD83', '\xD84', '\a', '\xDE', '\x2', '\x2', 
		'\xD84', '\xD85', '\a', '\x185', '\x2', '\x2', '\xD85', '\xD86', '\x5', 
		'\x20E', '\x108', '\x2', '\xD86', '\xD87', '\a', '\x146', '\x2', '\x2', 
		'\xD87', '\xD88', '\a', '\x14F', '\x2', '\x2', '\xD88', '\xD89', '\x5', 
		'\x52A', '\x296', '\x2', '\xD89', '\xD8B', '\x3', '\x2', '\x2', '\x2', 
		'\xD8A', '\xD7A', '\x3', '\x2', '\x2', '\x2', '\xD8A', '\xD81', '\x3', 
		'\x2', '\x2', '\x2', '\xD8B', '\x109', '\x3', '\x2', '\x2', '\x2', '\xD8C', 
		'\xD8D', '\a', '\x30', '\x2', '\x2', '\xD8D', '\xD8E', '\x5', '\xB0', 
		'Y', '\x2', '\xD8E', '\xD8F', '\a', '^', '\x2', '\x2', '\xD8F', '\xD90', 
		'\x5', '\x10C', '\x87', '\x2', '\xD90', '\xD91', '\a', '&', '\x2', '\x2', 
		'\xD91', '\xD92', '\x5', '\x3BA', '\x1DE', '\x2', '\xD92', '\xD93', '\x5', 
		'\x10E', '\x88', '\x2', '\xD93', '\xDA0', '\x3', '\x2', '\x2', '\x2', 
		'\xD94', '\xD95', '\a', '\x30', '\x2', '\x2', '\xD95', '\xD96', '\x5', 
		'\xB0', 'Y', '\x2', '\xD96', '\xD97', '\a', '^', '\x2', '\x2', '\xD97', 
		'\xD98', '\a', '\xDE', '\x2', '\x2', '\xD98', '\xD99', '\a', 'O', '\x2', 
		'\x2', '\xD99', '\xD9A', '\a', '\x185', '\x2', '\x2', '\xD9A', '\xD9B', 
		'\x5', '\x10C', '\x87', '\x2', '\xD9B', '\xD9C', '\a', '&', '\x2', '\x2', 
		'\xD9C', '\xD9D', '\x5', '\x3BA', '\x1DE', '\x2', '\xD9D', '\xD9E', '\x5', 
		'\x10E', '\x88', '\x2', '\xD9E', '\xDA0', '\x3', '\x2', '\x2', '\x2', 
		'\xD9F', '\xD8C', '\x3', '\x2', '\x2', '\x2', '\xD9F', '\xD94', '\x3', 
		'\x2', '\x2', '\x2', '\xDA0', '\x10B', '\x3', '\x2', '\x2', '\x2', '\xDA1', 
		'\xDA2', '\x5', '\x50E', '\x288', '\x2', '\xDA2', '\xDA3', '\x5', '\xD8', 
		'm', '\x2', '\xDA3', '\xDA4', '\x5', '\xFA', '~', '\x2', '\xDA4', '\xDA5', 
		'\x5', '\xFC', '\x7F', '\x2', '\xDA5', '\xDA6', '\x5', '\xFE', '\x80', 
		'\x2', '\xDA6', '\xDA7', '\x5', '\x100', '\x81', '\x2', '\xDA7', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\xDA8', '\xDA9', '\a', 'k', '\x2', '\x2', 
		'\xDA9', '\xDAF', '\a', '\xB0', '\x2', '\x2', '\xDAA', '\xDAB', '\a', 
		'k', '\x2', '\x2', '\xDAB', '\xDAC', '\a', '\x106', '\x2', '\x2', '\xDAC', 
		'\xDAF', '\a', '\xB0', '\x2', '\x2', '\xDAD', '\xDAF', '\x3', '\x2', '\x2', 
		'\x2', '\xDAE', '\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDAE', '\xDAA', 
		'\x3', '\x2', '\x2', '\x2', '\xDAE', '\xDAD', '\x3', '\x2', '\x2', '\x2', 
		'\xDAF', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xDB0', '\xDB1', '\a', 
		'\x30', '\x2', '\x2', '\xDB1', '\xDB2', '\x5', '\x114', '\x8B', '\x2', 
		'\xDB2', '\xDB3', '\a', '\xFC', '\x2', '\x2', '\xDB3', '\xDB4', '\a', 
		'\x171', '\x2', '\x2', '\xDB4', '\xDB5', '\x5', '\x112', '\x8A', '\x2', 
		'\xDB5', '\xDB6', '\a', '&', '\x2', '\x2', '\xDB6', '\xDB7', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xDB7', '\xDB8', '\x5', '\x10E', '\x88', '\x2', '\xDB8', 
		'\xDC6', '\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDBA', '\a', '\x30', '\x2', 
		'\x2', '\xDBA', '\xDBB', '\x5', '\x114', '\x8B', '\x2', '\xDBB', '\xDBC', 
		'\a', '\xFC', '\x2', '\x2', '\xDBC', '\xDBD', '\a', '\x171', '\x2', '\x2', 
		'\xDBD', '\xDBE', '\a', '\xDE', '\x2', '\x2', '\xDBE', '\xDBF', '\a', 
		'O', '\x2', '\x2', '\xDBF', '\xDC0', '\a', '\x185', '\x2', '\x2', '\xDC0', 
		'\xDC1', '\x5', '\x112', '\x8A', '\x2', '\xDC1', '\xDC2', '\a', '&', '\x2', 
		'\x2', '\xDC2', '\xDC3', '\x5', '\x3BA', '\x1DE', '\x2', '\xDC3', '\xDC4', 
		'\x5', '\x10E', '\x88', '\x2', '\xDC4', '\xDC6', '\x3', '\x2', '\x2', 
		'\x2', '\xDC5', '\xDB0', '\x3', '\x2', '\x2', '\x2', '\xDC5', '\xDB9', 
		'\x3', '\x2', '\x2', '\x2', '\xDC6', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\xDC7', '\xDC8', '\x5', '\x50E', '\x288', '\x2', '\xDC8', '\xDC9', '\x5', 
		'\xD8', 'm', '\x2', '\xDC9', '\xDCA', '\x5', '\xFA', '~', '\x2', '\xDCA', 
		'\xDCB', '\x5', 'x', '=', '\x2', '\xDCB', '\xDCC', '\x5', '\x100', '\x81', 
		'\x2', '\xDCC', '\x113', '\x3', '\x2', '\x2', '\x2', '\xDCD', '\xDD0', 
		'\a', '\x168', '\x2', '\x2', '\xDCE', '\xDD0', '\x3', '\x2', '\x2', '\x2', 
		'\xDCF', '\xDCD', '\x3', '\x2', '\x2', '\x2', '\xDCF', '\xDCE', '\x3', 
		'\x2', '\x2', '\x2', '\xDD0', '\x115', '\x3', '\x2', '\x2', '\x2', '\xDD1', 
		'\xDD2', '\a', '\x12A', '\x2', '\x2', '\xDD2', '\xDD3', '\a', '\xFC', 
		'\x2', '\x2', '\xDD3', '\xDD4', '\a', '\x171', '\x2', '\x2', '\xDD4', 
		'\xDD5', '\x5', '\x252', '\x12A', '\x2', '\xDD5', '\xDD6', '\x5', '\x50E', 
		'\x288', '\x2', '\xDD6', '\xDD7', '\x5', '\x10E', '\x88', '\x2', '\xDD7', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\xDD8', '\xDD9', '\a', '\x30', '\x2', 
		'\x2', '\xDD9', '\xDDA', '\x5', '\xB0', 'Y', '\x2', '\xDDA', '\xDDB', 
		'\a', '\x141', '\x2', '\x2', '\xDDB', '\xDDC', '\x5', '\x50E', '\x288', 
		'\x2', '\xDDC', '\xDDD', '\x5', '\x11C', '\x8F', '\x2', '\xDDD', '\xDE8', 
		'\x3', '\x2', '\x2', '\x2', '\xDDE', '\xDDF', '\a', '\x30', '\x2', '\x2', 
		'\xDDF', '\xDE0', '\x5', '\xB0', 'Y', '\x2', '\xDE0', '\xDE1', '\a', '\x141', 
		'\x2', '\x2', '\xDE1', '\xDE2', '\a', '\xDE', '\x2', '\x2', '\xDE2', '\xDE3', 
		'\a', 'O', '\x2', '\x2', '\xDE3', '\xDE4', '\a', '\x185', '\x2', '\x2', 
		'\xDE4', '\xDE5', '\x5', '\x50E', '\x288', '\x2', '\xDE5', '\xDE6', '\x5', 
		'\x11C', '\x8F', '\x2', '\xDE6', '\xDE8', '\x3', '\x2', '\x2', '\x2', 
		'\xDE7', '\xDD8', '\x3', '\x2', '\x2', '\x2', '\xDE7', '\xDDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDE8', '\x119', '\x3', '\x2', '\x2', '\x2', '\xDE9', 
		'\xDEA', '\a', '\x8C', '\x2', '\x2', '\xDEA', '\xDEB', '\a', '\x141', 
		'\x2', '\x2', '\xDEB', '\xDEC', '\x5', '\x50E', '\x288', '\x2', '\xDEC', 
		'\xDED', '\x5', '\x120', '\x91', '\x2', '\xDED', '\xDF6', '\x3', '\x2', 
		'\x2', '\x2', '\xDEE', '\xDEF', '\a', '\x8C', '\x2', '\x2', '\xDEF', '\xDF0', 
		'\a', '\x141', '\x2', '\x2', '\xDF0', '\xDF1', '\a', '\xDE', '\x2', '\x2', 
		'\xDF1', '\xDF2', '\a', '\x185', '\x2', '\x2', '\xDF2', '\xDF3', '\x5', 
		'\x50E', '\x288', '\x2', '\xDF3', '\xDF4', '\x5', '\x120', '\x91', '\x2', 
		'\xDF4', '\xDF6', '\x3', '\x2', '\x2', '\x2', '\xDF5', '\xDE9', '\x3', 
		'\x2', '\x2', '\x2', '\xDF5', '\xDEE', '\x3', '\x2', '\x2', '\x2', '\xDF6', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\xDF7', '\xDFA', '\x5', '\x120', 
		'\x91', '\x2', '\xDF8', '\xDFA', '\x3', '\x2', '\x2', '\x2', '\xDF9', 
		'\xDF7', '\x3', '\x2', '\x2', '\x2', '\xDF9', '\xDF8', '\x3', '\x2', '\x2', 
		'\x2', '\xDFA', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xDFB', '\xDFC', 
		'\a', '\x4', '\x2', '\x2', '\xDFC', '\xDFD', '\x5', '\x120', '\x91', '\x2', 
		'\xDFD', '\xDFE', '\a', '\x5', '\x2', '\x2', '\xDFE', '\xE01', '\x3', 
		'\x2', '\x2', '\x2', '\xDFF', '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE00', 
		'\xDFB', '\x3', '\x2', '\x2', '\x2', '\xE00', '\xDFF', '\x3', '\x2', '\x2', 
		'\x2', '\xE01', '\x11F', '\x3', '\x2', '\x2', '\x2', '\xE02', '\xE03', 
		'\b', '\x91', '\x1', '\x2', '\xE03', '\xE04', '\x5', '\x122', '\x92', 
		'\x2', '\xE04', '\xE09', '\x3', '\x2', '\x2', '\x2', '\xE05', '\xE06', 
		'\f', '\x3', '\x2', '\x2', '\xE06', '\xE08', '\x5', '\x122', '\x92', '\x2', 
		'\xE07', '\xE05', '\x3', '\x2', '\x2', '\x2', '\xE08', '\xE0B', '\x3', 
		'\x2', '\x2', '\x2', '\xE09', '\xE07', '\x3', '\x2', '\x2', '\x2', '\xE09', 
		'\xE0A', '\x3', '\x2', '\x2', '\x2', '\xE0A', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\xE0B', '\xE09', '\x3', '\x2', '\x2', '\x2', '\xE0C', '\xE0D', 
		'\a', '&', '\x2', '\x2', '\xE0D', '\xE2F', '\x5', '\x45C', '\x22F', '\x2', 
		'\xE0E', '\xE0F', '\a', '\x96', '\x2', '\x2', '\xE0F', '\xE2F', '\x5', 
		'\x126', '\x94', '\x2', '\xE10', '\xE2F', '\a', '\xAF', '\x2', '\x2', 
		'\xE11', '\xE12', '\a', '\x106', '\x2', '\x2', '\xE12', '\xE2F', '\a', 
		'\xAF', '\x2', '\x2', '\xE13', '\xE14', '\a', '\xE3', '\x2', '\x2', '\xE14', 
		'\xE15', '\x5', '\x124', '\x93', '\x2', '\xE15', '\xE16', '\x5', '\x126', 
		'\x94', '\x2', '\xE16', '\xE2F', '\x3', '\x2', '\x2', '\x2', '\xE17', 
		'\xE18', '\a', '\xFD', '\x2', '\x2', '\xE18', '\xE2F', '\x5', '\x126', 
		'\x94', '\x2', '\xE19', '\xE1A', '\a', '\xFF', '\x2', '\x2', '\xE1A', 
		'\xE2F', '\x5', '\x126', '\x94', '\x2', '\xE1B', '\xE1C', '\a', '\x106', 
		'\x2', '\x2', '\xE1C', '\xE2F', '\a', '\xFD', '\x2', '\x2', '\xE1D', '\xE1E', 
		'\a', '\x106', '\x2', '\x2', '\xE1E', '\xE2F', '\a', '\xFF', '\x2', '\x2', 
		'\xE1F', '\xE20', '\a', '\x112', '\x2', '\x2', '\xE20', '\xE21', '\a', 
		'\x95', '\x2', '\x2', '\xE21', '\xE2F', '\x5', '\x20E', '\x108', '\x2', 
		'\xE22', '\xE23', '\a', '\x141', '\x2', '\x2', '\xE23', '\xE24', '\a', 
		'\x103', '\x2', '\x2', '\xE24', '\xE2F', '\x5', '\x20E', '\x108', '\x2', 
		'\xE25', '\xE26', '\a', '\x14D', '\x2', '\x2', '\xE26', '\xE27', '\x5', 
		'\x12', '\n', '\x2', '\xE27', '\xE28', '\x5', '\x126', '\x94', '\x2', 
		'\xE28', '\xE2F', '\x3', '\x2', '\x2', '\x2', '\xE29', '\xE2F', '\a', 
		'\x133', '\x2', '\x2', '\xE2A', '\xE2B', '\a', '\x133', '\x2', '\x2', 
		'\xE2B', '\xE2C', '\x5', '\x12', '\n', '\x2', '\xE2C', '\xE2D', '\x5', 
		'\x126', '\x94', '\x2', '\xE2D', '\xE2F', '\x3', '\x2', '\x2', '\x2', 
		'\xE2E', '\xE0C', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE0E', '\x3', 
		'\x2', '\x2', '\x2', '\xE2E', '\xE10', '\x3', '\x2', '\x2', '\x2', '\xE2E', 
		'\xE11', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE13', '\x3', '\x2', '\x2', 
		'\x2', '\xE2E', '\xE17', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE19', 
		'\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE1B', '\x3', '\x2', '\x2', '\x2', 
		'\xE2E', '\xE1D', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE1F', '\x3', 
		'\x2', '\x2', '\x2', '\xE2E', '\xE22', '\x3', '\x2', '\x2', '\x2', '\xE2E', 
		'\xE25', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE29', '\x3', '\x2', '\x2', 
		'\x2', '\xE2E', '\xE2A', '\x3', '\x2', '\x2', '\x2', '\xE2F', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\xE30', '\xE33', '\a', '\x95', '\x2', '\x2', 
		'\xE31', '\xE33', '\x3', '\x2', '\x2', '\x2', '\xE32', '\xE30', '\x3', 
		'\x2', '\x2', '\x2', '\xE32', '\xE31', '\x3', '\x2', '\x2', '\x2', '\xE33', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\xE34', '\xE3B', '\x5', '\x520', 
		'\x291', '\x2', '\xE35', '\xE36', '\a', '\xE', '\x2', '\x2', '\xE36', 
		'\xE3B', '\x5', '\x520', '\x291', '\x2', '\xE37', '\xE38', '\a', '\xF', 
		'\x2', '\x2', '\xE38', '\xE3B', '\x5', '\x520', '\x291', '\x2', '\xE39', 
		'\xE3B', '\x5', '\x52A', '\x296', '\x2', '\xE3A', '\xE34', '\x3', '\x2', 
		'\x2', '\x2', '\xE3A', '\xE35', '\x3', '\x2', '\x2', '\x2', '\xE3A', '\xE37', 
		'\x3', '\x2', '\x2', '\x2', '\xE3A', '\xE39', '\x3', '\x2', '\x2', '\x2', 
		'\xE3B', '\x127', '\x3', '\x2', '\x2', '\x2', '\xE3C', '\xE3D', '\b', 
		'\x95', '\x1', '\x2', '\xE3D', '\xE3E', '\x5', '\x126', '\x94', '\x2', 
		'\xE3E', '\xE44', '\x3', '\x2', '\x2', '\x2', '\xE3F', '\xE40', '\f', 
		'\x3', '\x2', '\x2', '\xE40', '\xE41', '\a', '\b', '\x2', '\x2', '\xE41', 
		'\xE43', '\x5', '\x126', '\x94', '\x2', '\xE42', '\xE3F', '\x3', '\x2', 
		'\x2', '\x2', '\xE43', '\xE46', '\x3', '\x2', '\x2', '\x2', '\xE44', '\xE42', 
		'\x3', '\x2', '\x2', '\x2', '\xE44', '\xE45', '\x3', '\x2', '\x2', '\x2', 
		'\xE45', '\x129', '\x3', '\x2', '\x2', '\x2', '\xE46', '\xE44', '\x3', 
		'\x2', '\x2', '\x2', '\xE47', '\xE48', '\a', '\x30', '\x2', '\x2', '\xE48', 
		'\xE49', '\x5', '\x26C', '\x137', '\x2', '\xE49', '\xE4A', '\x5', '\x12C', 
		'\x97', '\x2', '\xE4A', '\xE4B', '\x5', '\x136', '\x9C', '\x2', '\xE4B', 
		'\xE4C', '\a', '\xF0', '\x2', '\x2', '\xE4C', '\xE4D', '\x5', '\x512', 
		'\x28A', '\x2', '\xE4D', '\xE5A', '\x3', '\x2', '\x2', '\x2', '\xE4E', 
		'\xE4F', '\a', '\x30', '\x2', '\x2', '\xE4F', '\xE50', '\x5', '\x26C', 
		'\x137', '\x2', '\xE50', '\xE51', '\x5', '\x12C', '\x97', '\x2', '\xE51', 
		'\xE52', '\x5', '\x136', '\x9C', '\x2', '\xE52', '\xE53', '\a', '\xF0', 
		'\x2', '\x2', '\xE53', '\xE54', '\x5', '\x512', '\x28A', '\x2', '\xE54', 
		'\xE55', '\a', '\xD9', '\x2', '\x2', '\xE55', '\xE56', '\x5', '\x12E', 
		'\x98', '\x2', '\xE56', '\xE57', '\x5', '\x130', '\x99', '\x2', '\xE57', 
		'\xE58', '\x5', '\x134', '\x9B', '\x2', '\xE58', '\xE5A', '\x3', '\x2', 
		'\x2', '\x2', '\xE59', '\xE47', '\x3', '\x2', '\x2', '\x2', '\xE59', '\xE4E', 
		'\x3', '\x2', '\x2', '\x2', '\xE5A', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\xE5B', '\xE5E', '\a', '\x160', '\x2', '\x2', '\xE5C', '\xE5E', '\x3', 
		'\x2', '\x2', '\x2', '\xE5D', '\xE5B', '\x3', '\x2', '\x2', '\x2', '\xE5D', 
		'\xE5C', '\x3', '\x2', '\x2', '\x2', '\xE5E', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\xE5F', '\xE64', '\x5', '\x512', '\x28A', '\x2', '\xE60', '\xE61', 
		'\x5', '\x512', '\x28A', '\x2', '\xE61', '\xE62', '\x5', '\x210', '\x109', 
		'\x2', '\xE62', '\xE64', '\x3', '\x2', '\x2', '\x2', '\xE63', '\xE5F', 
		'\x3', '\x2', '\x2', '\x2', '\xE63', '\xE60', '\x3', '\x2', '\x2', '\x2', 
		'\xE64', '\x12F', '\x3', '\x2', '\x2', '\x2', '\xE65', '\xE66', '\a', 
		'\xE8', '\x2', '\x2', '\xE66', '\xE69', '\x5', '\x12E', '\x98', '\x2', 
		'\xE67', '\xE69', '\x3', '\x2', '\x2', '\x2', '\xE68', '\xE65', '\x3', 
		'\x2', '\x2', '\x2', '\xE68', '\xE67', '\x3', '\x2', '\x2', '\x2', '\xE69', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\xE6A', '\xE6B', '\a', '\x16E', 
		'\x2', '\x2', '\xE6B', '\xE6F', '\x5', '\x12E', '\x98', '\x2', '\xE6C', 
		'\xE6D', '\a', '\x106', '\x2', '\x2', '\xE6D', '\xE6F', '\a', '\x16E', 
		'\x2', '\x2', '\xE6E', '\xE6A', '\x3', '\x2', '\x2', '\x2', '\xE6E', '\xE6C', 
		'\x3', '\x2', '\x2', '\x2', '\xE6F', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\xE70', '\xE73', '\x5', '\x132', '\x9A', '\x2', '\xE71', '\xE73', '\x3', 
		'\x2', '\x2', '\x2', '\xE72', '\xE70', '\x3', '\x2', '\x2', '\x2', '\xE72', 
		'\xE71', '\x3', '\x2', '\x2', '\x2', '\xE73', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\xE74', '\xE77', '\a', '\x120', '\x2', '\x2', '\xE75', '\xE77', 
		'\x3', '\x2', '\x2', '\x2', '\xE76', '\xE74', '\x3', '\x2', '\x2', '\x2', 
		'\xE76', '\xE75', '\x3', '\x2', '\x2', '\x2', '\xE77', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\xE78', '\xE79', '\a', '\x30', '\x2', '\x2', '\xE79', 
		'\xE7A', '\a', '\x158', '\x2', '\x2', '\xE7A', '\xE7B', '\x5', '\x512', 
		'\x28A', '\x2', '\xE7B', '\xE7C', '\x5', '\x13A', '\x9E', '\x2', '\xE7C', 
		'\xE7D', '\a', '\xF8', '\x2', '\x2', '\xE7D', '\xE7E', '\x5', '\x524', 
		'\x293', '\x2', '\xE7E', '\xE7F', '\x5', 'x', '=', '\x2', '\xE7F', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\xE80', '\xE81', '\a', '\x113', '\x2', '\x2', 
		'\xE81', '\xE84', '\x5', '\x52E', '\x298', '\x2', '\xE82', '\xE84', '\x3', 
		'\x2', '\x2', '\x2', '\xE83', '\xE80', '\x3', '\x2', '\x2', '\x2', '\xE83', 
		'\xE82', '\x3', '\x2', '\x2', '\x2', '\xE84', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\xE85', '\xE86', '\a', '\xC1', '\x2', '\x2', '\xE86', '\xE87', 
		'\a', '\x158', '\x2', '\x2', '\xE87', '\xE8E', '\x5', '\x512', '\x28A', 
		'\x2', '\xE88', '\xE89', '\a', '\xC1', '\x2', '\x2', '\xE89', '\xE8A', 
		'\a', '\x158', '\x2', '\x2', '\xE8A', '\xE8B', '\a', '\xDE', '\x2', '\x2', 
		'\xE8B', '\xE8C', '\a', '\x185', '\x2', '\x2', '\xE8C', '\xE8E', '\x5', 
		'\x512', '\x28A', '\x2', '\xE8D', '\xE85', '\x3', '\x2', '\x2', '\x2', 
		'\xE8D', '\xE88', '\x3', '\x2', '\x2', '\x2', '\xE8E', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\xE8F', '\xE90', '\a', '\x30', '\x2', '\x2', '\xE90', 
		'\xE91', '\a', '\xCE', '\x2', '\x2', '\xE91', '\xE92', '\x5', '\x512', 
		'\x28A', '\x2', '\xE92', '\xE93', '\x5', '\x12', '\n', '\x2', '\xE93', 
		'\xE94', '\x5', '\x140', '\xA1', '\x2', '\xE94', '\xE9F', '\x3', '\x2', 
		'\x2', '\x2', '\xE95', '\xE96', '\a', '\x30', '\x2', '\x2', '\xE96', '\xE97', 
		'\a', '\xCE', '\x2', '\x2', '\xE97', '\xE98', '\a', '\xDE', '\x2', '\x2', 
		'\xE98', '\xE99', '\a', 'O', '\x2', '\x2', '\xE99', '\xE9A', '\a', '\x185', 
		'\x2', '\x2', '\xE9A', '\xE9B', '\x5', '\x512', '\x28A', '\x2', '\xE9B', 
		'\xE9C', '\x5', '\x12', '\n', '\x2', '\xE9C', '\xE9D', '\x5', '\x140', 
		'\xA1', '\x2', '\xE9D', '\xE9F', '\x3', '\x2', '\x2', '\x2', '\xE9E', 
		'\xE8F', '\x3', '\x2', '\x2', '\x2', '\xE9E', '\xE95', '\x3', '\x2', '\x2', 
		'\x2', '\xE9F', '\x13F', '\x3', '\x2', '\x2', '\x2', '\xEA0', '\xEA5', 
		'\b', '\xA1', '\x1', '\x2', '\xEA1', '\xEA2', '\f', '\x4', '\x2', '\x2', 
		'\xEA2', '\xEA4', '\x5', '\x142', '\xA2', '\x2', '\xEA3', '\xEA1', '\x3', 
		'\x2', '\x2', '\x2', '\xEA4', '\xEA7', '\x3', '\x2', '\x2', '\x2', '\xEA5', 
		'\xEA3', '\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA6', '\x3', '\x2', '\x2', 
		'\x2', '\xEA6', '\x141', '\x3', '\x2', '\x2', '\x2', '\xEA7', '\xEA5', 
		'\x3', '\x2', '\x2', '\x2', '\xEA8', '\xEA9', '\a', '\x13C', '\x2', '\x2', 
		'\xEA9', '\xEB0', '\x5', '\x512', '\x28A', '\x2', '\xEAA', '\xEAB', '\a', 
		'\x170', '\x2', '\x2', '\xEAB', '\xEB0', '\x5', 'J', '&', '\x2', '\xEAC', 
		'\xEAD', '\a', '\x42', '\x2', '\x2', '\xEAD', '\xEB0', '\x5', 'J', '&', 
		'\x2', '\xEAE', '\xEB0', '\a', '\x98', '\x2', '\x2', '\xEAF', '\xEA8', 
		'\x3', '\x2', '\x2', '\x2', '\xEAF', '\xEAA', '\x3', '\x2', '\x2', '\x2', 
		'\xEAF', '\xEAC', '\x3', '\x2', '\x2', '\x2', '\xEAF', '\xEAE', '\x3', 
		'\x2', '\x2', '\x2', '\xEB0', '\x143', '\x3', '\x2', '\x2', '\x2', '\xEB1', 
		'\xEB2', '\a', '\x8C', '\x2', '\x2', '\xEB2', '\xEB3', '\a', '\xCE', '\x2', 
		'\x2', '\xEB3', '\xEB4', '\x5', '\x512', '\x28A', '\x2', '\xEB4', '\xEB5', 
		'\a', '\x16A', '\x2', '\x2', '\xEB5', '\xEB6', '\x5', '\x146', '\xA4', 
		'\x2', '\xEB6', '\x145', '\x3', '\x2', '\x2', '\x2', '\xEB7', '\xEBC', 
		'\b', '\xA4', '\x1', '\x2', '\xEB8', '\xEB9', '\f', '\x4', '\x2', '\x2', 
		'\xEB9', '\xEBB', '\x5', '\x148', '\xA5', '\x2', '\xEBA', '\xEB8', '\x3', 
		'\x2', '\x2', '\x2', '\xEBB', '\xEBE', '\x3', '\x2', '\x2', '\x2', '\xEBC', 
		'\xEBA', '\x3', '\x2', '\x2', '\x2', '\xEBC', '\xEBD', '\x3', '\x2', '\x2', 
		'\x2', '\xEBD', '\x147', '\x3', '\x2', '\x2', '\x2', '\xEBE', '\xEBC', 
		'\x3', '\x2', '\x2', '\x2', '\xEBF', '\xEC0', '\a', '`', '\x2', '\x2', 
		'\xEC0', '\xEC1', '\x5', 'J', '&', '\x2', '\xEC1', '\x149', '\x3', '\x2', 
		'\x2', '\x2', '\xEC2', '\xEC3', '\a', '\x8C', '\x2', '\x2', '\xEC3', '\xEC4', 
		'\a', '\xCE', '\x2', '\x2', '\xEC4', '\xEC5', '\x5', '\x512', '\x28A', 
		'\x2', '\xEC5', '\xEC6', '\x5', '*', '\x16', '\x2', '\xEC6', '\xEC7', 
		'\x5', '\x206', '\x104', '\x2', '\xEC7', '\xEC8', '\x5', '\x512', '\x28A', 
		'\x2', '\xEC8', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xEC9', '\xECA', 
		'\a', '\x8C', '\x2', '\x2', '\xECA', '\xECB', '\a', '\xCE', '\x2', '\x2', 
		'\xECB', '\xECC', '\x5', '\x512', '\x28A', '\x2', '\xECC', '\xECD', '\x5', 
		'*', '\x16', '\x2', '\xECD', '\xECE', '\x5', '\x204', '\x103', '\x2', 
		'\xECE', '\xECF', '\x5', '\x20E', '\x108', '\x2', '\xECF', '\xF2B', '\x3', 
		'\x2', '\x2', '\x2', '\xED0', '\xED1', '\a', '\x8C', '\x2', '\x2', '\xED1', 
		'\xED2', '\a', '\xCE', '\x2', '\x2', '\xED2', '\xED3', '\x5', '\x512', 
		'\x28A', '\x2', '\xED3', '\xED4', '\x5', '*', '\x16', '\x2', '\xED4', 
		'\xED5', '\a', '\x8A', '\x2', '\x2', '\xED5', '\xED6', '\x5', '\x28C', 
		'\x147', '\x2', '\xED6', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xED7', 
		'\xED8', '\a', '\x8C', '\x2', '\x2', '\xED8', '\xED9', '\a', '\xCE', '\x2', 
		'\x2', '\xED9', '\xEDA', '\x5', '\x512', '\x28A', '\x2', '\xEDA', '\xEDB', 
		'\x5', '*', '\x16', '\x2', '\xEDB', '\xEDC', '\a', '+', '\x2', '\x2', 
		'\xEDC', '\xEDD', '\a', '\x4', '\x2', '\x2', '\xEDD', '\xEDE', '\x5', 
		'\x458', '\x22D', '\x2', '\xEDE', '\xEDF', '\a', '&', '\x2', '\x2', '\xEDF', 
		'\xEE0', '\x5', '\x458', '\x22D', '\x2', '\xEE0', '\xEE1', '\a', '\x5', 
		'\x2', '\x2', '\xEE1', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xEE2', '\xEE3', 
		'\a', '\x8C', '\x2', '\x2', '\xEE3', '\xEE4', '\a', '\xCE', '\x2', '\x2', 
		'\xEE4', '\xEE5', '\x5', '\x512', '\x28A', '\x2', '\xEE5', '\xEE6', '\x5', 
		'*', '\x16', '\x2', '\xEE6', '\xEE7', '\a', '\xBF', '\x2', '\x2', '\xEE7', 
		'\xEE8', '\x5', '\x458', '\x22D', '\x2', '\xEE8', '\xF2B', '\x3', '\x2', 
		'\x2', '\x2', '\xEE9', '\xEEA', '\a', '\x8C', '\x2', '\x2', '\xEEA', '\xEEB', 
		'\a', '\xCE', '\x2', '\x2', '\xEEB', '\xEEC', '\x5', '\x512', '\x28A', 
		'\x2', '\xEEC', '\xEED', '\x5', '*', '\x16', '\x2', '\xEED', '\xEEE', 
		'\a', '\xD5', '\x2', '\x2', '\xEEE', '\xEEF', '\x5', '\x274', '\x13B', 
		'\x2', '\xEEF', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xEF0', '\xEF1', 
		'\a', '\x8C', '\x2', '\x2', '\xEF1', '\xEF2', '\a', '\xCE', '\x2', '\x2', 
		'\xEF2', '\xEF3', '\x5', '\x512', '\x28A', '\x2', '\xEF3', '\xEF4', '\x5', 
		'*', '\x16', '\x2', '\xEF4', '\xEF5', '\a', '\x10F', '\x2', '\x2', '\xEF5', 
		'\xEF6', '\x5', '\x2B2', '\x15A', '\x2', '\xEF6', '\xF2B', '\x3', '\x2', 
		'\x2', '\x2', '\xEF7', '\xEF8', '\a', '\x8C', '\x2', '\x2', '\xEF8', '\xEF9', 
		'\a', '\xCE', '\x2', '\x2', '\xEF9', '\xEFA', '\x5', '\x512', '\x28A', 
		'\x2', '\xEFA', '\xEFB', '\x5', '*', '\x16', '\x2', '\xEFB', '\xEFC', 
		'\a', '\x10F', '\x2', '\x2', '\xEFC', '\xEFD', '\a', '\x9E', '\x2', '\x2', 
		'\xEFD', '\xEFE', '\x5', '\x20E', '\x108', '\x2', '\xEFE', '\xEFF', '\a', 
		'\x66', '\x2', '\x2', '\xEFF', '\xF00', '\x5', '\x512', '\x28A', '\x2', 
		'\xF00', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF01', '\xF02', '\a', 
		'\x8C', '\x2', '\x2', '\xF02', '\xF03', '\a', '\xCE', '\x2', '\x2', '\xF03', 
		'\xF04', '\x5', '\x512', '\x28A', '\x2', '\xF04', '\xF05', '\x5', '*', 
		'\x16', '\x2', '\xF05', '\xF06', '\a', '\x10F', '\x2', '\x2', '\xF06', 
		'\xF07', '\a', '\xD0', '\x2', '\x2', '\xF07', '\xF08', '\x5', '\x20E', 
		'\x108', '\x2', '\xF08', '\xF09', '\a', '\x66', '\x2', '\x2', '\xF09', 
		'\xF0A', '\x5', '\x512', '\x28A', '\x2', '\xF0A', '\xF2B', '\x3', '\x2', 
		'\x2', '\x2', '\xF0B', '\xF0C', '\a', '\x8C', '\x2', '\x2', '\xF0C', '\xF0D', 
		'\a', '\xCE', '\x2', '\x2', '\xF0D', '\xF0E', '\x5', '\x512', '\x28A', 
		'\x2', '\xF0E', '\xF0F', '\x5', '*', '\x16', '\x2', '\xF0F', '\xF10', 
		'\a', '\x121', '\x2', '\x2', '\xF10', '\xF11', '\x5', '\x274', '\x13B', 
		'\x2', '\xF11', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF12', '\xF13', 
		'\a', '\x8C', '\x2', '\x2', '\xF13', '\xF14', '\a', '\xCE', '\x2', '\x2', 
		'\xF14', '\xF15', '\x5', '\x512', '\x28A', '\x2', '\xF15', '\xF16', '\x5', 
		'*', '\x16', '\x2', '\xF16', '\xF17', '\a', '\x1B4', '\x2', '\x2', '\xF17', 
		'\xF18', '\x5', '\x274', '\x13B', '\x2', '\xF18', '\xF2B', '\x3', '\x2', 
		'\x2', '\x2', '\xF19', '\xF1A', '\a', '\x8C', '\x2', '\x2', '\xF1A', '\xF1B', 
		'\a', '\xCE', '\x2', '\x2', '\xF1B', '\xF1C', '\x5', '\x512', '\x28A', 
		'\x2', '\xF1C', '\xF1D', '\x5', '*', '\x16', '\x2', '\xF1D', '\xF1E', 
		'\a', '\x1B5', '\x2', '\x2', '\xF1E', '\xF1F', '\a', '@', '\x2', '\x2', 
		'\xF1F', '\xF20', '\x5', '\x458', '\x22D', '\x2', '\xF20', '\xF21', '\a', 
		'\xF0', '\x2', '\x2', '\xF21', '\xF22', '\x5', '\x512', '\x28A', '\x2', 
		'\xF22', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF23', '\xF24', '\a', 
		'\x8C', '\x2', '\x2', '\xF24', '\xF25', '\a', '\xCE', '\x2', '\x2', '\xF25', 
		'\xF26', '\x5', '\x512', '\x28A', '\x2', '\xF26', '\xF27', '\x5', '*', 
		'\x16', '\x2', '\xF27', '\xF28', '\a', '\x161', '\x2', '\x2', '\xF28', 
		'\xF29', '\x5', '\x458', '\x22D', '\x2', '\xF29', '\xF2B', '\x3', '\x2', 
		'\x2', '\x2', '\xF2A', '\xEC2', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xEC9', 
		'\x3', '\x2', '\x2', '\x2', '\xF2A', '\xED0', '\x3', '\x2', '\x2', '\x2', 
		'\xF2A', '\xED7', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xEE2', '\x3', 
		'\x2', '\x2', '\x2', '\xF2A', '\xEE9', '\x3', '\x2', '\x2', '\x2', '\xF2A', 
		'\xEF0', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xEF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF2A', '\xF01', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xF0B', 
		'\x3', '\x2', '\x2', '\x2', '\xF2A', '\xF12', '\x3', '\x2', '\x2', '\x2', 
		'\xF2A', '\xF19', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xF23', '\x3', 
		'\x2', '\x2', '\x2', '\xF2B', '\x14B', '\x3', '\x2', '\x2', '\x2', '\xF2C', 
		'\xF2D', '\a', '\x30', '\x2', '\x2', '\xF2D', '\xF2E', '\a', '\x41', '\x2', 
		'\x2', '\xF2E', '\xF2F', '\a', '\xB0', '\x2', '\x2', '\xF2F', '\xF30', 
		'\a', '\x176', '\x2', '\x2', '\xF30', '\xF31', '\x5', '\x512', '\x28A', 
		'\x2', '\xF31', '\xF32', '\x5', '\x152', '\xAA', '\x2', '\xF32', '\xF33', 
		'\x5', '\x156', '\xAC', '\x2', '\xF33', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\xF34', '\xF35', '\a', '\xD9', '\x2', '\x2', '\xF35', '\xF3D', 
		'\x5', '\x12E', '\x98', '\x2', '\xF36', '\xF37', '\a', '\x106', '\x2', 
		'\x2', '\xF37', '\xF3D', '\a', '\xD9', '\x2', '\x2', '\xF38', '\xF39', 
		'\a', '\x16E', '\x2', '\x2', '\xF39', '\xF3D', '\x5', '\x12E', '\x98', 
		'\x2', '\xF3A', '\xF3B', '\a', '\x106', '\x2', '\x2', '\xF3B', '\xF3D', 
		'\a', '\x16E', '\x2', '\x2', '\xF3C', '\xF34', '\x3', '\x2', '\x2', '\x2', 
		'\xF3C', '\xF36', '\x3', '\x2', '\x2', '\x2', '\xF3C', '\xF38', '\x3', 
		'\x2', '\x2', '\x2', '\xF3C', '\xF3A', '\x3', '\x2', '\x2', '\x2', '\xF3D', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\xF3E', '\xF3F', '\b', '\xA9', '\x1', 
		'\x2', '\xF3F', '\xF40', '\x5', '\x14E', '\xA8', '\x2', '\xF40', '\xF45', 
		'\x3', '\x2', '\x2', '\x2', '\xF41', '\xF42', '\f', '\x3', '\x2', '\x2', 
		'\xF42', '\xF44', '\x5', '\x14E', '\xA8', '\x2', '\xF43', '\xF41', '\x3', 
		'\x2', '\x2', '\x2', '\xF44', '\xF47', '\x3', '\x2', '\x2', '\x2', '\xF45', 
		'\xF43', '\x3', '\x2', '\x2', '\x2', '\xF45', '\xF46', '\x3', '\x2', '\x2', 
		'\x2', '\xF46', '\x151', '\x3', '\x2', '\x2', '\x2', '\xF47', '\xF45', 
		'\x3', '\x2', '\x2', '\x2', '\xF48', '\xF4B', '\x5', '\x150', '\xA9', 
		'\x2', '\xF49', '\xF4B', '\x3', '\x2', '\x2', '\x2', '\xF4A', '\xF48', 
		'\x3', '\x2', '\x2', '\x2', '\xF4A', '\xF49', '\x3', '\x2', '\x2', '\x2', 
		'\xF4B', '\x153', '\x3', '\x2', '\x2', '\x2', '\xF4C', '\xF4D', '\a', 
		'\x8C', '\x2', '\x2', '\xF4D', '\xF4E', '\a', '\x41', '\x2', '\x2', '\xF4E', 
		'\xF4F', '\a', '\xB0', '\x2', '\x2', '\xF4F', '\xF50', '\a', '\x176', 
		'\x2', '\x2', '\xF50', '\xF51', '\x5', '\x512', '\x28A', '\x2', '\xF51', 
		'\xF52', '\x5', '\x152', '\xAA', '\x2', '\xF52', '\xF53', '\x5', '\x15A', 
		'\xAE', '\x2', '\xF53', '\xF5C', '\x3', '\x2', '\x2', '\x2', '\xF54', 
		'\xF55', '\a', '\x8C', '\x2', '\x2', '\xF55', '\xF56', '\a', '\x41', '\x2', 
		'\x2', '\xF56', '\xF57', '\a', '\xB0', '\x2', '\x2', '\xF57', '\xF58', 
		'\a', '\x176', '\x2', '\x2', '\xF58', '\xF59', '\x5', '\x512', '\x28A', 
		'\x2', '\xF59', '\xF5A', '\x5', '\x150', '\xA9', '\x2', '\xF5A', '\xF5C', 
		'\x3', '\x2', '\x2', '\x2', '\xF5B', '\xF4C', '\x3', '\x2', '\x2', '\x2', 
		'\xF5B', '\xF54', '\x3', '\x2', '\x2', '\x2', '\xF5C', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\xF5D', '\xF5E', '\a', '\x111', '\x2', '\x2', '\xF5E', 
		'\xF5F', '\a', '\x4', '\x2', '\x2', '\xF5F', '\xF60', '\x5', '\x158', 
		'\xAD', '\x2', '\xF60', '\xF61', '\a', '\x5', '\x2', '\x2', '\xF61', '\xF64', 
		'\x3', '\x2', '\x2', '\x2', '\xF62', '\xF64', '\x3', '\x2', '\x2', '\x2', 
		'\xF63', '\xF5D', '\x3', '\x2', '\x2', '\x2', '\xF63', '\xF62', '\x3', 
		'\x2', '\x2', '\x2', '\xF64', '\x157', '\x3', '\x2', '\x2', '\x2', '\xF65', 
		'\xF66', '\b', '\xAD', '\x1', '\x2', '\xF66', '\xF67', '\x5', '\x160', 
		'\xB1', '\x2', '\xF67', '\xF6D', '\x3', '\x2', '\x2', '\x2', '\xF68', 
		'\xF69', '\f', '\x3', '\x2', '\x2', '\xF69', '\xF6A', '\a', '\b', '\x2', 
		'\x2', '\xF6A', '\xF6C', '\x5', '\x160', '\xB1', '\x2', '\xF6B', '\xF68', 
		'\x3', '\x2', '\x2', '\x2', '\xF6C', '\xF6F', '\x3', '\x2', '\x2', '\x2', 
		'\xF6D', '\xF6B', '\x3', '\x2', '\x2', '\x2', '\xF6D', '\xF6E', '\x3', 
		'\x2', '\x2', '\x2', '\xF6E', '\x159', '\x3', '\x2', '\x2', '\x2', '\xF6F', 
		'\xF6D', '\x3', '\x2', '\x2', '\x2', '\xF70', '\xF71', '\a', '\x111', 
		'\x2', '\x2', '\xF71', '\xF72', '\a', '\x4', '\x2', '\x2', '\xF72', '\xF73', 
		'\x5', '\x15C', '\xAF', '\x2', '\xF73', '\xF74', '\a', '\x5', '\x2', '\x2', 
		'\xF74', '\x15B', '\x3', '\x2', '\x2', '\x2', '\xF75', '\xF76', '\b', 
		'\xAF', '\x1', '\x2', '\xF76', '\xF77', '\x5', '\x15E', '\xB0', '\x2', 
		'\xF77', '\xF7D', '\x3', '\x2', '\x2', '\x2', '\xF78', '\xF79', '\f', 
		'\x3', '\x2', '\x2', '\xF79', '\xF7A', '\a', '\b', '\x2', '\x2', '\xF7A', 
		'\xF7C', '\x5', '\x15E', '\xB0', '\x2', '\xF7B', '\xF78', '\x3', '\x2', 
		'\x2', '\x2', '\xF7C', '\xF7F', '\x3', '\x2', '\x2', '\x2', '\xF7D', '\xF7B', 
		'\x3', '\x2', '\x2', '\x2', '\xF7D', '\xF7E', '\x3', '\x2', '\x2', '\x2', 
		'\xF7E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\xF7F', '\xF7D', '\x3', 
		'\x2', '\x2', '\x2', '\xF80', '\xF88', '\x5', '\x160', '\xB1', '\x2', 
		'\xF81', '\xF82', '\a', '\x146', '\x2', '\x2', '\xF82', '\xF88', '\x5', 
		'\x160', '\xB1', '\x2', '\xF83', '\xF84', '\a', '\x87', '\x2', '\x2', 
		'\xF84', '\xF88', '\x5', '\x160', '\xB1', '\x2', '\xF85', '\xF86', '\a', 
		'\xC1', '\x2', '\x2', '\xF86', '\xF88', '\x5', '\x162', '\xB2', '\x2', 
		'\xF87', '\xF80', '\x3', '\x2', '\x2', '\x2', '\xF87', '\xF81', '\x3', 
		'\x2', '\x2', '\x2', '\xF87', '\xF83', '\x3', '\x2', '\x2', '\x2', '\xF87', 
		'\xF85', '\x3', '\x2', '\x2', '\x2', '\xF88', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\xF89', '\xF8A', '\x5', '\x162', '\xB2', '\x2', '\xF8A', '\xF8B', 
		'\x5', '\x164', '\xB3', '\x2', '\xF8B', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\xF8C', '\xF8D', '\x5', '\x538', '\x29D', '\x2', '\xF8D', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\xF8E', '\xF8F', '\x5', '\x524', '\x293', 
		'\x2', '\xF8F', '\x165', '\x3', '\x2', '\x2', '\x2', '\xF90', '\xF91', 
		'\a', '\x30', '\x2', '\x2', '\xF91', '\xF92', '\a', '\x144', '\x2', '\x2', 
		'\xF92', '\xF93', '\x5', '\x512', '\x28A', '\x2', '\xF93', '\xF94', '\x5', 
		'\x168', '\xB5', '\x2', '\xF94', '\xF95', '\x5', '\x16C', '\xB7', '\x2', 
		'\xF95', '\xF96', '\a', '\x41', '\x2', '\x2', '\xF96', '\xF97', '\a', 
		'\xB0', '\x2', '\x2', '\xF97', '\xF98', '\a', '\x176', '\x2', '\x2', '\xF98', 
		'\xF99', '\x5', '\x512', '\x28A', '\x2', '\xF99', '\xF9A', '\x5', '\x156', 
		'\xAC', '\x2', '\xF9A', '\xFAA', '\x3', '\x2', '\x2', '\x2', '\xF9B', 
		'\xF9C', '\a', '\x30', '\x2', '\x2', '\xF9C', '\xF9D', '\a', '\x144', 
		'\x2', '\x2', '\xF9D', '\xF9E', '\a', '\xDE', '\x2', '\x2', '\xF9E', '\xF9F', 
		'\a', 'O', '\x2', '\x2', '\xF9F', '\xFA0', '\a', '\x185', '\x2', '\x2', 
		'\xFA0', '\xFA1', '\x5', '\x512', '\x28A', '\x2', '\xFA1', '\xFA2', '\x5', 
		'\x168', '\xB5', '\x2', '\xFA2', '\xFA3', '\x5', '\x16C', '\xB7', '\x2', 
		'\xFA3', '\xFA4', '\a', '\x41', '\x2', '\x2', '\xFA4', '\xFA5', '\a', 
		'\xB0', '\x2', '\x2', '\xFA5', '\xFA6', '\a', '\x176', '\x2', '\x2', '\xFA6', 
		'\xFA7', '\x5', '\x512', '\x28A', '\x2', '\xFA7', '\xFA8', '\x5', '\x156', 
		'\xAC', '\x2', '\xFA8', '\xFAA', '\x3', '\x2', '\x2', '\x2', '\xFA9', 
		'\xF90', '\x3', '\x2', '\x2', '\x2', '\xFA9', '\xF9B', '\x3', '\x2', '\x2', 
		'\x2', '\xFAA', '\x167', '\x3', '\x2', '\x2', '\x2', '\xFAB', '\xFAC', 
		'\a', '\x161', '\x2', '\x2', '\xFAC', '\xFAF', '\x5', '\x524', '\x293', 
		'\x2', '\xFAD', '\xFAF', '\x3', '\x2', '\x2', '\x2', '\xFAE', '\xFAB', 
		'\x3', '\x2', '\x2', '\x2', '\xFAE', '\xFAD', '\x3', '\x2', '\x2', '\x2', 
		'\xFAF', '\x169', '\x3', '\x2', '\x2', '\x2', '\xFB0', '\xFB1', '\a', 
		'\x170', '\x2', '\x2', '\xFB1', '\xFB5', '\x5', '\x524', '\x293', '\x2', 
		'\xFB2', '\xFB3', '\a', '\x170', '\x2', '\x2', '\xFB3', '\xFB5', '\a', 
		'P', '\x2', '\x2', '\xFB4', '\xFB0', '\x3', '\x2', '\x2', '\x2', '\xFB4', 
		'\xFB2', '\x3', '\x2', '\x2', '\x2', '\xFB5', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\xFB6', '\xFB9', '\x5', '\x16A', '\xB6', '\x2', '\xFB7', '\xFB9', 
		'\x3', '\x2', '\x2', '\x2', '\xFB8', '\xFB6', '\x3', '\x2', '\x2', '\x2', 
		'\xFB8', '\xFB7', '\x3', '\x2', '\x2', '\x2', '\xFB9', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\xFBA', '\xFBB', '\a', '\x8C', '\x2', '\x2', '\xFBB', 
		'\xFBC', '\a', '\x144', '\x2', '\x2', '\xFBC', '\xFBD', '\x5', '\x512', 
		'\x28A', '\x2', '\xFBD', '\xFBE', '\x5', '\x16A', '\xB6', '\x2', '\xFBE', 
		'\xFBF', '\x5', '\x15A', '\xAE', '\x2', '\xFBF', '\xFCB', '\x3', '\x2', 
		'\x2', '\x2', '\xFC0', '\xFC1', '\a', '\x8C', '\x2', '\x2', '\xFC1', '\xFC2', 
		'\a', '\x144', '\x2', '\x2', '\xFC2', '\xFC3', '\x5', '\x512', '\x28A', 
		'\x2', '\xFC3', '\xFC4', '\x5', '\x16A', '\xB6', '\x2', '\xFC4', '\xFCB', 
		'\x3', '\x2', '\x2', '\x2', '\xFC5', '\xFC6', '\a', '\x8C', '\x2', '\x2', 
		'\xFC6', '\xFC7', '\a', '\x144', '\x2', '\x2', '\xFC7', '\xFC8', '\x5', 
		'\x512', '\x28A', '\x2', '\xFC8', '\xFC9', '\x5', '\x15A', '\xAE', '\x2', 
		'\xFC9', '\xFCB', '\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFBA', '\x3', 
		'\x2', '\x2', '\x2', '\xFCA', '\xFC0', '\x3', '\x2', '\x2', '\x2', '\xFCA', 
		'\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFCB', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\xFCC', '\xFCD', '\a', '\x30', '\x2', '\x2', '\xFCD', '\xFCE', 
		'\a', '\x41', '\x2', '\x2', '\xFCE', '\xFCF', '\a', '^', '\x2', '\x2', 
		'\xFCF', '\xFD0', '\x5', '\x50E', '\x288', '\x2', '\xFD0', '\xFD1', '\a', 
		'\x4', '\x2', '\x2', '\xFD1', '\xFD2', '\x5', '\xB2', 'Z', '\x2', '\xFD2', 
		'\xFD3', '\a', '\x5', '\x2', '\x2', '\xFD3', '\xFD4', '\x5', '\xF0', 'y', 
		'\x2', '\xFD4', '\xFD5', '\a', '\x144', '\x2', '\x2', '\xFD5', '\xFD6', 
		'\x5', '\x512', '\x28A', '\x2', '\xFD6', '\xFD7', '\x5', '\x156', '\xAC', 
		'\x2', '\xFD7', '\x1005', '\x3', '\x2', '\x2', '\x2', '\xFD8', '\xFD9', 
		'\a', '\x30', '\x2', '\x2', '\xFD9', '\xFDA', '\a', '\x41', '\x2', '\x2', 
		'\xFDA', '\xFDB', '\a', '^', '\x2', '\x2', '\xFDB', '\xFDC', '\a', '\xDE', 
		'\x2', '\x2', '\xFDC', '\xFDD', '\a', 'O', '\x2', '\x2', '\xFDD', '\xFDE', 
		'\a', '\x185', '\x2', '\x2', '\xFDE', '\xFDF', '\x5', '\x50E', '\x288', 
		'\x2', '\xFDF', '\xFE0', '\a', '\x4', '\x2', '\x2', '\xFE0', '\xFE1', 
		'\x5', '\xB2', 'Z', '\x2', '\xFE1', '\xFE2', '\a', '\x5', '\x2', '\x2', 
		'\xFE2', '\xFE3', '\x5', '\xF0', 'y', '\x2', '\xFE3', '\xFE4', '\a', '\x144', 
		'\x2', '\x2', '\xFE4', '\xFE5', '\x5', '\x512', '\x28A', '\x2', '\xFE5', 
		'\xFE6', '\x5', '\x156', '\xAC', '\x2', '\xFE6', '\x1005', '\x3', '\x2', 
		'\x2', '\x2', '\xFE7', '\xFE8', '\a', '\x30', '\x2', '\x2', '\xFE8', '\xFE9', 
		'\a', '\x41', '\x2', '\x2', '\xFE9', '\xFEA', '\a', '^', '\x2', '\x2', 
		'\xFEA', '\xFEB', '\x5', '\x50E', '\x288', '\x2', '\xFEB', '\xFEC', '\a', 
		'\x116', '\x2', '\x2', '\xFEC', '\xFED', '\a', '\x10C', '\x2', '\x2', 
		'\xFED', '\xFEE', '\x5', '\x50E', '\x288', '\x2', '\xFEE', '\xFEF', '\x5', 
		'\xB4', '[', '\x2', '\xFEF', '\xFF0', '\x5', '\x82', '\x42', '\x2', '\xFF0', 
		'\xFF1', '\a', '\x144', '\x2', '\x2', '\xFF1', '\xFF2', '\x5', '\x512', 
		'\x28A', '\x2', '\xFF2', '\xFF3', '\x5', '\x156', '\xAC', '\x2', '\xFF3', 
		'\x1005', '\x3', '\x2', '\x2', '\x2', '\xFF4', '\xFF5', '\a', '\x30', 
		'\x2', '\x2', '\xFF5', '\xFF6', '\a', '\x41', '\x2', '\x2', '\xFF6', '\xFF7', 
		'\a', '^', '\x2', '\x2', '\xFF7', '\xFF8', '\a', '\xDE', '\x2', '\x2', 
		'\xFF8', '\xFF9', '\a', 'O', '\x2', '\x2', '\xFF9', '\xFFA', '\a', '\x185', 
		'\x2', '\x2', '\xFFA', '\xFFB', '\x5', '\x50E', '\x288', '\x2', '\xFFB', 
		'\xFFC', '\a', '\x116', '\x2', '\x2', '\xFFC', '\xFFD', '\a', '\x10C', 
		'\x2', '\x2', '\xFFD', '\xFFE', '\x5', '\x50E', '\x288', '\x2', '\xFFE', 
		'\xFFF', '\x5', '\xB4', '[', '\x2', '\xFFF', '\x1000', '\x5', '\x82', 
		'\x42', '\x2', '\x1000', '\x1001', '\a', '\x144', '\x2', '\x2', '\x1001', 
		'\x1002', '\x5', '\x512', '\x28A', '\x2', '\x1002', '\x1003', '\x5', '\x156', 
		'\xAC', '\x2', '\x1003', '\x1005', '\x3', '\x2', '\x2', '\x2', '\x1004', 
		'\xFCC', '\x3', '\x2', '\x2', '\x2', '\x1004', '\xFD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1004', '\xFE7', '\x3', '\x2', '\x2', '\x2', '\x1004', 
		'\xFF4', '\x3', '\x2', '\x2', '\x2', '\x1005', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\x1006', '\x1007', '\a', '\x1B6', '\x2', '\x2', '\x1007', 
		'\x1008', '\a', '\x41', '\x2', '\x2', '\x1008', '\x1009', '\a', '\x13C', 
		'\x2', '\x2', '\x1009', '\x100A', '\x5', '\x512', '\x28A', '\x2', '\x100A', 
		'\x100B', '\x5', '\x176', '\xBC', '\x2', '\x100B', '\x100C', '\a', '\x42', 
		'\x2', '\x2', '\x100C', '\x100D', '\a', '\x144', '\x2', '\x2', '\x100D', 
		'\x100E', '\x5', '\x512', '\x28A', '\x2', '\x100E', '\x100F', '\a', 'I', 
		'\x2', '\x2', '\x100F', '\x1010', '\x5', '\x512', '\x28A', '\x2', '\x1010', 
		'\x1011', '\x5', '\x156', '\xAC', '\x2', '\x1011', '\x173', '\x3', '\x2', 
		'\x2', '\x2', '\x1012', '\x1013', '\a', 'L', '\x2', '\x2', '\x1013', '\x1016', 
		'\a', '`', '\x2', '\x2', '\x1014', '\x1016', '\a', '=', '\x2', '\x2', 
		'\x1015', '\x1012', '\x3', '\x2', '\x2', '\x2', '\x1015', '\x1014', '\x3', 
		'\x2', '\x2', '\x2', '\x1016', '\x175', '\x3', '\x2', '\x2', '\x2', '\x1017', 
		'\x1018', '\x5', '\x174', '\xBB', '\x2', '\x1018', '\x1019', '\a', '\x4', 
		'\x2', '\x2', '\x1019', '\x101A', '\x5', '\x42E', '\x218', '\x2', '\x101A', 
		'\x101B', '\a', '\x5', '\x2', '\x2', '\x101B', '\x101E', '\x3', '\x2', 
		'\x2', '\x2', '\x101C', '\x101E', '\x3', '\x2', '\x2', '\x2', '\x101D', 
		'\x1017', '\x3', '\x2', '\x2', '\x2', '\x101D', '\x101C', '\x3', '\x2', 
		'\x2', '\x2', '\x101E', '\x177', '\x3', '\x2', '\x2', '\x2', '\x101F', 
		'\x1020', '\a', '\x30', '\x2', '\x2', '\x1020', '\x1021', '\a', '\x65', 
		'\x2', '\x2', '\x1021', '\x1022', '\a', '\xFA', '\x2', '\x2', '\x1022', 
		'\x1023', '\a', '@', '\x2', '\x2', '\x1023', '\x1024', '\x5', '\x17A', 
		'\xBE', '\x2', '\x1024', '\x1025', '\a', '\x144', '\x2', '\x2', '\x1025', 
		'\x1026', '\x5', '\x512', '\x28A', '\x2', '\x1026', '\x1027', '\x5', '\x156', 
		'\xAC', '\x2', '\x1027', '\x1035', '\x3', '\x2', '\x2', '\x2', '\x1028', 
		'\x1029', '\a', '\x30', '\x2', '\x2', '\x1029', '\x102A', '\a', '\x65', 
		'\x2', '\x2', '\x102A', '\x102B', '\a', '\xFA', '\x2', '\x2', '\x102B', 
		'\x102C', '\a', '\xDE', '\x2', '\x2', '\x102C', '\x102D', '\a', 'O', '\x2', 
		'\x2', '\x102D', '\x102E', '\a', '\x185', '\x2', '\x2', '\x102E', '\x102F', 
		'\a', '@', '\x2', '\x2', '\x102F', '\x1030', '\x5', '\x17A', '\xBE', '\x2', 
		'\x1030', '\x1031', '\a', '\x144', '\x2', '\x2', '\x1031', '\x1032', '\x5', 
		'\x512', '\x28A', '\x2', '\x1032', '\x1033', '\x5', '\x156', '\xAC', '\x2', 
		'\x1033', '\x1035', '\x3', '\x2', '\x2', '\x2', '\x1034', '\x101F', '\x3', 
		'\x2', '\x2', '\x2', '\x1034', '\x1028', '\x3', '\x2', '\x2', '\x2', '\x1035', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x1036', '\x1039', '\x5', '\x52E', 
		'\x298', '\x2', '\x1037', '\x1039', '\a', '\x65', '\x2', '\x2', '\x1038', 
		'\x1036', '\x3', '\x2', '\x2', '\x2', '\x1038', '\x1037', '\x3', '\x2', 
		'\x2', '\x2', '\x1039', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x103A', 
		'\x103B', '\a', '\xC1', '\x2', '\x2', '\x103B', '\x103C', '\a', '\x65', 
		'\x2', '\x2', '\x103C', '\x103D', '\a', '\xFA', '\x2', '\x2', '\x103D', 
		'\x103E', '\a', '@', '\x2', '\x2', '\x103E', '\x103F', '\x5', '\x17A', 
		'\xBE', '\x2', '\x103F', '\x1040', '\a', '\x144', '\x2', '\x2', '\x1040', 
		'\x1041', '\x5', '\x512', '\x28A', '\x2', '\x1041', '\x104D', '\x3', '\x2', 
		'\x2', '\x2', '\x1042', '\x1043', '\a', '\xC1', '\x2', '\x2', '\x1043', 
		'\x1044', '\a', '\x65', '\x2', '\x2', '\x1044', '\x1045', '\a', '\xFA', 
		'\x2', '\x2', '\x1045', '\x1046', '\a', '\xDE', '\x2', '\x2', '\x1046', 
		'\x1047', '\a', '\x185', '\x2', '\x2', '\x1047', '\x1048', '\a', '@', 
		'\x2', '\x2', '\x1048', '\x1049', '\x5', '\x17A', '\xBE', '\x2', '\x1049', 
		'\x104A', '\a', '\x144', '\x2', '\x2', '\x104A', '\x104B', '\x5', '\x512', 
		'\x28A', '\x2', '\x104B', '\x104D', '\x3', '\x2', '\x2', '\x2', '\x104C', 
		'\x103A', '\x3', '\x2', '\x2', '\x2', '\x104C', '\x1042', '\x3', '\x2', 
		'\x2', '\x2', '\x104D', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x104E', 
		'\x104F', '\a', '\x8C', '\x2', '\x2', '\x104F', '\x1050', '\a', '\x65', 
		'\x2', '\x2', '\x1050', '\x1051', '\a', '\xFA', '\x2', '\x2', '\x1051', 
		'\x1052', '\a', '@', '\x2', '\x2', '\x1052', '\x1053', '\x5', '\x17A', 
		'\xBE', '\x2', '\x1053', '\x1054', '\a', '\x144', '\x2', '\x2', '\x1054', 
		'\x1055', '\x5', '\x512', '\x28A', '\x2', '\x1055', '\x1056', '\x5', '\x15A', 
		'\xAE', '\x2', '\x1056', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x1057', 
		'\x1058', '\a', '\x30', '\x2', '\x2', '\x1058', '\x1059', '\a', '\x1B7', 
		'\x2', '\x2', '\x1059', '\x105A', '\x5', '\x512', '\x28A', '\x2', '\x105A', 
		'\x105B', '\a', 'R', '\x2', '\x2', '\x105B', '\x105C', '\x5', '\x50E', 
		'\x288', '\x2', '\x105C', '\x105D', '\x5', '\x18C', '\xC7', '\x2', '\x105D', 
		'\x105E', '\x5', '\x18E', '\xC8', '\x2', '\x105E', '\x105F', '\x5', '\x188', 
		'\xC5', '\x2', '\x105F', '\x1060', '\x5', '\x184', '\xC3', '\x2', '\x1060', 
		'\x1061', '\x5', '\x186', '\xC4', '\x2', '\x1061', '\x181', '\x3', '\x2', 
		'\x2', '\x2', '\x1062', '\x1063', '\a', '\x8C', '\x2', '\x2', '\x1063', 
		'\x1064', '\a', '\x1B7', '\x2', '\x2', '\x1064', '\x1065', '\x5', '\x512', 
		'\x28A', '\x2', '\x1065', '\x1066', '\a', 'R', '\x2', '\x2', '\x1066', 
		'\x1067', '\x5', '\x50E', '\x288', '\x2', '\x1067', '\x1068', '\x5', '\x18A', 
		'\xC6', '\x2', '\x1068', '\x1069', '\x5', '\x184', '\xC3', '\x2', '\x1069', 
		'\x106A', '\x5', '\x186', '\xC4', '\x2', '\x106A', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '\x106B', '\x106C', '\a', '\x66', '\x2', '\x2', '\x106C', 
		'\x106D', '\a', '\x4', '\x2', '\x2', '\x106D', '\x106E', '\x5', '\x484', 
		'\x243', '\x2', '\x106E', '\x106F', '\a', '\x5', '\x2', '\x2', '\x106F', 
		'\x1072', '\x3', '\x2', '\x2', '\x2', '\x1070', '\x1072', '\x3', '\x2', 
		'\x2', '\x2', '\x1071', '\x106B', '\x3', '\x2', '\x2', '\x2', '\x1071', 
		'\x1070', '\x3', '\x2', '\x2', '\x2', '\x1072', '\x185', '\x3', '\x2', 
		'\x2', '\x2', '\x1073', '\x1074', '\a', 'k', '\x2', '\x2', '\x1074', '\x1075', 
		'\a', ',', '\x2', '\x2', '\x1075', '\x1076', '\a', '\x4', '\x2', '\x2', 
		'\x1076', '\x1077', '\x5', '\x484', '\x243', '\x2', '\x1077', '\x1078', 
		'\a', '\x5', '\x2', '\x2', '\x1078', '\x107B', '\x3', '\x2', '\x2', '\x2', 
		'\x1079', '\x107B', '\x3', '\x2', '\x2', '\x2', '\x107A', '\x1073', '\x3', 
		'\x2', '\x2', '\x2', '\x107A', '\x1079', '\x3', '\x2', '\x2', '\x2', '\x107B', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x107C', '\x107D', '\a', '`', '\x2', 
		'\x2', '\x107D', '\x1080', '\x5', '\x530', '\x299', '\x2', '\x107E', '\x1080', 
		'\x3', '\x2', '\x2', '\x2', '\x107F', '\x107C', '\x3', '\x2', '\x2', '\x2', 
		'\x107F', '\x107E', '\x3', '\x2', '\x2', '\x2', '\x1080', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x1081', '\x1082', '\a', '`', '\x2', '\x2', '\x1082', 
		'\x1085', '\x5', '\x530', '\x299', '\x2', '\x1083', '\x1085', '\x3', '\x2', 
		'\x2', '\x2', '\x1084', '\x1081', '\x3', '\x2', '\x2', '\x2', '\x1084', 
		'\x1083', '\x3', '\x2', '\x2', '\x2', '\x1085', '\x18B', '\x3', '\x2', 
		'\x2', '\x2', '\x1086', '\x1087', '\a', '&', '\x2', '\x2', '\x1087', '\x108A', 
		'\x5', '\x53A', '\x29E', '\x2', '\x1088', '\x108A', '\x3', '\x2', '\x2', 
		'\x2', '\x1089', '\x1086', '\x3', '\x2', '\x2', '\x2', '\x1089', '\x1088', 
		'\x3', '\x2', '\x2', '\x2', '\x108A', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x108B', '\x108C', '\a', '@', '\x2', '\x2', '\x108C', '\x108F', '\x5', 
		'\x190', '\xC9', '\x2', '\x108D', '\x108F', '\x3', '\x2', '\x2', '\x2', 
		'\x108E', '\x108B', '\x3', '\x2', '\x2', '\x2', '\x108E', '\x108D', '\x3', 
		'\x2', '\x2', '\x2', '\x108F', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x1090', 
		'\x1091', '\t', '\x6', '\x2', '\x2', '\x1091', '\x191', '\x3', '\x2', 
		'\x2', '\x2', '\x1092', '\x1093', '\a', '\x30', '\x2', '\x2', '\x1093', 
		'\x1094', '\a', '\x85', '\x2', '\x2', '\x1094', '\x1095', '\a', '\x1B8', 
		'\x2', '\x2', '\x1095', '\x1096', '\x5', '\x512', '\x28A', '\x2', '\x1096', 
		'\x1097', '\a', '\x161', '\x2', '\x2', '\x1097', '\x1098', '\x5', '\x194', 
		'\xCB', '\x2', '\x1098', '\x1099', '\a', '\xD9', '\x2', '\x2', '\x1099', 
		'\x109A', '\x5', '\x12E', '\x98', '\x2', '\x109A', '\x193', '\x3', '\x2', 
		'\x2', '\x2', '\x109B', '\x109C', '\t', '\a', '\x2', '\x2', '\x109C', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x109D', '\x109E', '\a', '\x30', 
		'\x2', '\x2', '\x109E', '\x109F', '\a', '\x15E', '\x2', '\x2', '\x109F', 
		'\x10A0', '\x5', '\x512', '\x28A', '\x2', '\x10A0', '\x10A1', '\x5', '\x198', 
		'\xCD', '\x2', '\x10A1', '\x10A2', '\x5', '\x19A', '\xCE', '\x2', '\x10A2', 
		'\x10A3', '\a', 'R', '\x2', '\x2', '\x10A3', '\x10A4', '\x5', '\x50E', 
		'\x288', '\x2', '\x10A4', '\x10A5', '\x5', '\x19E', '\xD0', '\x2', '\x10A5', 
		'\x10A6', '\x5', '\x1AA', '\xD6', '\x2', '\x10A6', '\x10A7', '\x5', '\x1B0', 
		'\xD9', '\x2', '\x10A7', '\x10A8', '\a', '\xCC', '\x2', '\x2', '\x10A8', 
		'\x10A9', '\x5', '\x1B2', '\xDA', '\x2', '\x10A9', '\x10AA', '\x5', '\x518', 
		'\x28D', '\x2', '\x10AA', '\x10AB', '\a', '\x4', '\x2', '\x2', '\x10AB', 
		'\x10AC', '\x5', '\x1B4', '\xDB', '\x2', '\x10AC', '\x10AD', '\a', '\x5', 
		'\x2', '\x2', '\x10AD', '\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10AE', 
		'\x10AF', '\a', '\x30', '\x2', '\x2', '\x10AF', '\x10B0', '\a', '/', '\x2', 
		'\x2', '\x10B0', '\x10B1', '\a', '\x15E', '\x2', '\x2', '\x10B1', '\x10B2', 
		'\x5', '\x512', '\x28A', '\x2', '\x10B2', '\x10B3', '\a', '\x89', '\x2', 
		'\x2', '\x10B3', '\x10B4', '\x5', '\x19A', '\xCE', '\x2', '\x10B4', '\x10B5', 
		'\a', 'R', '\x2', '\x2', '\x10B5', '\x10B6', '\x5', '\x50E', '\x288', 
		'\x2', '\x10B6', '\x10B7', '\x5', '\x1B8', '\xDD', '\x2', '\x10B7', '\x10B8', 
		'\x5', '\x1BA', '\xDE', '\x2', '\x10B8', '\x10B9', '\a', '@', '\x2', '\x2', 
		'\x10B9', '\x10BA', '\a', '\xC2', '\x2', '\x2', '\x10BA', '\x10BB', '\a', 
		'\x197', '\x2', '\x2', '\x10BB', '\x10BC', '\x5', '\x1B0', '\xD9', '\x2', 
		'\x10BC', '\x10BD', '\a', '\xCC', '\x2', '\x2', '\x10BD', '\x10BE', '\x5', 
		'\x1B2', '\xDA', '\x2', '\x10BE', '\x10BF', '\x5', '\x518', '\x28D', '\x2', 
		'\x10BF', '\x10C0', '\a', '\x4', '\x2', '\x2', '\x10C0', '\x10C1', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x10C1', '\x10C2', '\a', '\x5', '\x2', '\x2', 
		'\x10C2', '\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10C3', '\x109D', '\x3', 
		'\x2', '\x2', '\x2', '\x10C3', '\x10AE', '\x3', '\x2', '\x2', '\x2', '\x10C4', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x10C5', '\x10CA', '\a', '\x93', 
		'\x2', '\x2', '\x10C6', '\x10CA', '\a', '\x89', '\x2', '\x2', '\x10C7', 
		'\x10C8', '\a', '\xEB', '\x2', '\x2', '\x10C8', '\x10CA', '\a', '\x10C', 
		'\x2', '\x2', '\x10C9', '\x10C5', '\x3', '\x2', '\x2', '\x2', '\x10C9', 
		'\x10C6', '\x3', '\x2', '\x2', '\x2', '\x10C9', '\x10C7', '\x3', '\x2', 
		'\x2', '\x2', '\x10CA', '\x199', '\x3', '\x2', '\x2', '\x2', '\x10CB', 
		'\x10CC', '\b', '\xCE', '\x1', '\x2', '\x10CC', '\x10CD', '\x5', '\x19C', 
		'\xCF', '\x2', '\x10CD', '\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10CE', 
		'\x10CF', '\f', '\x3', '\x2', '\x2', '\x10CF', '\x10D0', '\a', 'T', '\x2', 
		'\x2', '\x10D0', '\x10D2', '\x5', '\x19C', '\xCF', '\x2', '\x10D1', '\x10CE', 
		'\x3', '\x2', '\x2', '\x2', '\x10D2', '\x10D5', '\x3', '\x2', '\x2', '\x2', 
		'\x10D3', '\x10D1', '\x3', '\x2', '\x2', '\x2', '\x10D3', '\x10D4', '\x3', 
		'\x2', '\x2', '\x2', '\x10D4', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x10D5', 
		'\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10D6', '\x10DE', '\a', '\xEA', 
		'\x2', '\x2', '\x10D7', '\x10DE', '\a', '\xB8', '\x2', '\x2', '\x10D8', 
		'\x10DE', '\a', '\x16A', '\x2', '\x2', '\x10D9', '\x10DA', '\a', '\x16A', 
		'\x2', '\x2', '\x10DA', '\x10DB', '\a', '\x10C', '\x2', '\x2', '\x10DB', 
		'\x10DE', '\x5', '\xDA', 'n', '\x2', '\x10DC', '\x10DE', '\a', '\x15F', 
		'\x2', '\x2', '\x10DD', '\x10D6', '\x3', '\x2', '\x2', '\x2', '\x10DD', 
		'\x10D7', '\x3', '\x2', '\x2', '\x2', '\x10DD', '\x10D8', '\x3', '\x2', 
		'\x2', '\x2', '\x10DD', '\x10D9', '\x3', '\x2', '\x2', '\x2', '\x10DD', 
		'\x10DC', '\x3', '\x2', '\x2', '\x2', '\x10DE', '\x19D', '\x3', '\x2', 
		'\x2', '\x2', '\x10DF', '\x10E0', '\a', '\x1B9', '\x2', '\x2', '\x10E0', 
		'\x10E3', '\x5', '\x1A0', '\xD1', '\x2', '\x10E1', '\x10E3', '\x3', '\x2', 
		'\x2', '\x2', '\x10E2', '\x10DF', '\x3', '\x2', '\x2', '\x2', '\x10E2', 
		'\x10E1', '\x3', '\x2', '\x2', '\x2', '\x10E3', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', '\x10E4', '\x10E5', '\b', '\xD1', '\x1', '\x2', '\x10E5', 
		'\x10E6', '\x5', '\x1A2', '\xD2', '\x2', '\x10E6', '\x10EB', '\x3', '\x2', 
		'\x2', '\x2', '\x10E7', '\x10E8', '\f', '\x3', '\x2', '\x2', '\x10E8', 
		'\x10EA', '\x5', '\x1A2', '\xD2', '\x2', '\x10E9', '\x10E7', '\x3', '\x2', 
		'\x2', '\x2', '\x10EA', '\x10ED', '\x3', '\x2', '\x2', '\x2', '\x10EB', 
		'\x10E9', '\x3', '\x2', '\x2', '\x2', '\x10EB', '\x10EC', '\x3', '\x2', 
		'\x2', '\x2', '\x10EC', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x10ED', 
		'\x10EB', '\x3', '\x2', '\x2', '\x2', '\x10EE', '\x10EF', '\x5', '\x1A4', 
		'\xD3', '\x2', '\x10EF', '\x10F0', '\x5', '\x1A6', '\xD4', '\x2', '\x10F0', 
		'\x10F1', '\x5', '\x344', '\x1A3', '\x2', '\x10F1', '\x10F2', '\x5', '\x1A8', 
		'\xD5', '\x2', '\x10F2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x10F3', 
		'\x10F4', '\t', '\b', '\x2', '\x2', '\x10F4', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x10F5', '\x10F6', '\t', '\t', '\x2', '\x2', '\x10F6', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x10F7', '\x10F8', '\x5', '\x532', '\x29A', 
		'\x2', '\x10F8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x10F9', '\x10FA', 
		'\a', '@', '\x2', '\x2', '\x10FA', '\x10FB', '\x5', '\x1AC', '\xD7', '\x2', 
		'\x10FB', '\x10FC', '\x5', '\x1AE', '\xD8', '\x2', '\x10FC', '\x10FF', 
		'\x3', '\x2', '\x2', '\x2', '\x10FD', '\x10FF', '\x3', '\x2', '\x2', '\x2', 
		'\x10FE', '\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10FE', '\x10FD', '\x3', 
		'\x2', '\x2', '\x2', '\x10FF', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1100', 
		'\x1103', '\a', '\xC2', '\x2', '\x2', '\x1101', '\x1103', '\x3', '\x2', 
		'\x2', '\x2', '\x1102', '\x1100', '\x3', '\x2', '\x2', '\x2', '\x1102', 
		'\x1101', '\x3', '\x2', '\x2', '\x2', '\x1103', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', '\x1104', '\x1105', '\t', '\n', '\x2', '\x2', '\x1105', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1106', '\x1107', '\a', 'h', '\x2', 
		'\x2', '\x1107', '\x1108', '\a', '\x4', '\x2', '\x2', '\x1108', '\x1109', 
		'\x5', '\x484', '\x243', '\x2', '\x1109', '\x110A', '\a', '\x5', '\x2', 
		'\x2', '\x110A', '\x110D', '\x3', '\x2', '\x2', '\x2', '\x110B', '\x110D', 
		'\x3', '\x2', '\x2', '\x2', '\x110C', '\x1106', '\x3', '\x2', '\x2', '\x2', 
		'\x110C', '\x110B', '\x3', '\x2', '\x2', '\x2', '\x110D', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x110E', '\x110F', '\t', '\v', '\x2', '\x2', '\x110F', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1110', '\x1111', '\b', '\xDB', 
		'\x1', '\x2', '\x1111', '\x1114', '\x5', '\x1B6', '\xDC', '\x2', '\x1112', 
		'\x1114', '\x3', '\x2', '\x2', '\x2', '\x1113', '\x1110', '\x3', '\x2', 
		'\x2', '\x2', '\x1113', '\x1112', '\x3', '\x2', '\x2', '\x2', '\x1114', 
		'\x111A', '\x3', '\x2', '\x2', '\x2', '\x1115', '\x1116', '\f', '\x4', 
		'\x2', '\x2', '\x1116', '\x1117', '\a', '\b', '\x2', '\x2', '\x1117', 
		'\x1119', '\x5', '\x1B6', '\xDC', '\x2', '\x1118', '\x1115', '\x3', '\x2', 
		'\x2', '\x2', '\x1119', '\x111C', '\x3', '\x2', '\x2', '\x2', '\x111A', 
		'\x1118', '\x3', '\x2', '\x2', '\x2', '\x111A', '\x111B', '\x3', '\x2', 
		'\x2', '\x2', '\x111B', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x111C', 
		'\x111A', '\x3', '\x2', '\x2', '\x2', '\x111D', '\x1122', '\x5', '\x522', 
		'\x292', '\x2', '\x111E', '\x1122', '\x5', '\x520', '\x291', '\x2', '\x111F', 
		'\x1122', '\x5', '\x524', '\x293', '\x2', '\x1120', '\x1122', '\x5', '\x538', 
		'\x29D', '\x2', '\x1121', '\x111D', '\x3', '\x2', '\x2', '\x2', '\x1121', 
		'\x111E', '\x3', '\x2', '\x2', '\x2', '\x1121', '\x111F', '\x3', '\x2', 
		'\x2', '\x2', '\x1121', '\x1120', '\x3', '\x2', '\x2', '\x2', '\x1122', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1123', '\x1124', '\a', '\x42', 
		'\x2', '\x2', '\x1124', '\x1127', '\x5', '\x50E', '\x288', '\x2', '\x1125', 
		'\x1127', '\x3', '\x2', '\x2', '\x2', '\x1126', '\x1123', '\x3', '\x2', 
		'\x2', '\x2', '\x1126', '\x1125', '\x3', '\x2', '\x2', '\x2', '\x1127', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1128', '\x112D', '\b', '\xDE', 
		'\x1', '\x2', '\x1129', '\x112A', '\f', '\x3', '\x2', '\x2', '\x112A', 
		'\x112C', '\x5', '\x1BC', '\xDF', '\x2', '\x112B', '\x1129', '\x3', '\x2', 
		'\x2', '\x2', '\x112C', '\x112F', '\x3', '\x2', '\x2', '\x2', '\x112D', 
		'\x112B', '\x3', '\x2', '\x2', '\x2', '\x112D', '\x112E', '\x3', '\x2', 
		'\x2', '\x2', '\x112E', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x112F', 
		'\x112D', '\x3', '\x2', '\x2', '\x2', '\x1130', '\x1131', '\a', 'O', '\x2', 
		'\x2', '\x1131', '\x113C', '\a', '\x38', '\x2', '\x2', '\x1132', '\x113C', 
		'\a', '\x38', '\x2', '\x2', '\x1133', '\x1134', '\a', 'G', '\x2', '\x2', 
		'\x1134', '\x113C', '\a', '\xDF', '\x2', '\x2', '\x1135', '\x1136', '\a', 
		'G', '\x2', '\x2', '\x1136', '\x113C', '\a', '\xB6', '\x2', '\x2', '\x1137', 
		'\x1138', '\a', 'O', '\x2', '\x2', '\x1138', '\x113C', '\a', '\x16C', 
		'\x2', '\x2', '\x1139', '\x113A', '\a', '\x106', '\x2', '\x2', '\x113A', 
		'\x113C', '\a', '\xE6', '\x2', '\x2', '\x113B', '\x1130', '\x3', '\x2', 
		'\x2', '\x2', '\x113B', '\x1132', '\x3', '\x2', '\x2', '\x2', '\x113B', 
		'\x1133', '\x3', '\x2', '\x2', '\x2', '\x113B', '\x1135', '\x3', '\x2', 
		'\x2', '\x2', '\x113B', '\x1137', '\x3', '\x2', '\x2', '\x2', '\x113B', 
		'\x1139', '\x3', '\x2', '\x2', '\x2', '\x113C', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '\x113D', '\x113E', '\a', '\x30', '\x2', '\x2', '\x113E', 
		'\x113F', '\a', '\xC8', '\x2', '\x2', '\x113F', '\x1140', '\a', '\x15E', 
		'\x2', '\x2', '\x1140', '\x1141', '\x5', '\x512', '\x28A', '\x2', '\x1141', 
		'\x1142', '\a', 'R', '\x2', '\x2', '\x1142', '\x1143', '\x5', '\x538', 
		'\x29D', '\x2', '\x1143', '\x1144', '\a', '\xCC', '\x2', '\x2', '\x1144', 
		'\x1145', '\x5', '\x1B2', '\xDA', '\x2', '\x1145', '\x1146', '\x5', '\x518', 
		'\x28D', '\x2', '\x1146', '\x1147', '\a', '\x4', '\x2', '\x2', '\x1147', 
		'\x1148', '\a', '\x5', '\x2', '\x2', '\x1148', '\x1158', '\x3', '\x2', 
		'\x2', '\x2', '\x1149', '\x114A', '\a', '\x30', '\x2', '\x2', '\x114A', 
		'\x114B', '\a', '\xC8', '\x2', '\x2', '\x114B', '\x114C', '\a', '\x15E', 
		'\x2', '\x2', '\x114C', '\x114D', '\x5', '\x512', '\x28A', '\x2', '\x114D', 
		'\x114E', '\a', 'R', '\x2', '\x2', '\x114E', '\x114F', '\x5', '\x538', 
		'\x29D', '\x2', '\x114F', '\x1150', '\a', 'h', '\x2', '\x2', '\x1150', 
		'\x1151', '\x5', '\x1C0', '\xE1', '\x2', '\x1151', '\x1152', '\a', '\xCC', 
		'\x2', '\x2', '\x1152', '\x1153', '\x5', '\x1B2', '\xDA', '\x2', '\x1153', 
		'\x1154', '\x5', '\x518', '\x28D', '\x2', '\x1154', '\x1155', '\a', '\x4', 
		'\x2', '\x2', '\x1155', '\x1156', '\a', '\x5', '\x2', '\x2', '\x1156', 
		'\x1158', '\x3', '\x2', '\x2', '\x2', '\x1157', '\x113D', '\x3', '\x2', 
		'\x2', '\x2', '\x1157', '\x1149', '\x3', '\x2', '\x2', '\x2', '\x1158', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1159', '\x115A', '\b', '\xE1', 
		'\x1', '\x2', '\x115A', '\x115B', '\x5', '\x1C2', '\xE2', '\x2', '\x115B', 
		'\x1161', '\x3', '\x2', '\x2', '\x2', '\x115C', '\x115D', '\f', '\x3', 
		'\x2', '\x2', '\x115D', '\x115E', '\a', '#', '\x2', '\x2', '\x115E', '\x1160', 
		'\x5', '\x1C2', '\xE2', '\x2', '\x115F', '\x115C', '\x3', '\x2', '\x2', 
		'\x2', '\x1160', '\x1163', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x115F', 
		'\x3', '\x2', '\x2', '\x2', '\x1161', '\x1162', '\x3', '\x2', '\x2', '\x2', 
		'\x1162', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1163', '\x1161', '\x3', 
		'\x2', '\x2', '\x2', '\x1164', '\x1165', '\x5', '\x532', '\x29A', '\x2', 
		'\x1165', '\x1166', '\a', '\x46', '\x2', '\x2', '\x1166', '\x1167', '\a', 
		'\x4', '\x2', '\x2', '\x1167', '\x1168', '\x5', '\x1C4', '\xE3', '\x2', 
		'\x1168', '\x1169', '\a', '\x5', '\x2', '\x2', '\x1169', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x116A', '\x116B', '\b', '\xE3', '\x1', '\x2', '\x116B', 
		'\x116C', '\x5', '\x524', '\x293', '\x2', '\x116C', '\x1172', '\x3', '\x2', 
		'\x2', '\x2', '\x116D', '\x116E', '\f', '\x3', '\x2', '\x2', '\x116E', 
		'\x116F', '\a', '\b', '\x2', '\x2', '\x116F', '\x1171', '\x5', '\x524', 
		'\x293', '\x2', '\x1170', '\x116D', '\x3', '\x2', '\x2', '\x2', '\x1171', 
		'\x1174', '\x3', '\x2', '\x2', '\x2', '\x1172', '\x1170', '\x3', '\x2', 
		'\x2', '\x2', '\x1172', '\x1173', '\x3', '\x2', '\x2', '\x2', '\x1173', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1174', '\x1172', '\x3', '\x2', 
		'\x2', '\x2', '\x1175', '\x1176', '\a', '\x8C', '\x2', '\x2', '\x1176', 
		'\x1177', '\a', '\xC8', '\x2', '\x2', '\x1177', '\x1178', '\a', '\x15E', 
		'\x2', '\x2', '\x1178', '\x1179', '\x5', '\x512', '\x28A', '\x2', '\x1179', 
		'\x117A', '\x5', '\x1C8', '\xE5', '\x2', '\x117A', '\x1C7', '\x3', '\x2', 
		'\x2', '\x2', '\x117B', '\x1182', '\a', '\xC3', '\x2', '\x2', '\x117C', 
		'\x117D', '\a', '\xC3', '\x2', '\x2', '\x117D', '\x1182', '\a', '\x131', 
		'\x2', '\x2', '\x117E', '\x117F', '\a', '\xC3', '\x2', '\x2', '\x117F', 
		'\x1182', '\a', '\x8D', '\x2', '\x2', '\x1180', '\x1182', '\a', '\xBC', 
		'\x2', '\x2', '\x1181', '\x117B', '\x3', '\x2', '\x2', '\x2', '\x1181', 
		'\x117C', '\x3', '\x2', '\x2', '\x2', '\x1181', '\x117E', '\x3', '\x2', 
		'\x2', '\x2', '\x1181', '\x1180', '\x3', '\x2', '\x2', '\x2', '\x1182', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1183', '\x1184', '\a', '\x30', 
		'\x2', '\x2', '\x1184', '\x1185', '\a', '\x8E', '\x2', '\x2', '\x1185', 
		'\x1186', '\x5', '\x20E', '\x108', '\x2', '\x1186', '\x1187', '\a', ',', 
		'\x2', '\x2', '\x1187', '\x1188', '\a', '\x4', '\x2', '\x2', '\x1188', 
		'\x1189', '\x5', '\x484', '\x243', '\x2', '\x1189', '\x118A', '\a', '\x5', 
		'\x2', '\x2', '\x118A', '\x118B', '\x5', '\x1BA', '\xDE', '\x2', '\x118B', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x118C', '\x118D', '\a', '\x30', 
		'\x2', '\x2', '\x118D', '\x118E', '\x5', '\x26C', '\x137', '\x2', '\x118E', 
		'\x118F', '\a', '\x8A', '\x2', '\x2', '\x118F', '\x1190', '\x5', '\x518', 
		'\x28D', '\x2', '\x1190', '\x1191', '\x5', '\x288', '\x145', '\x2', '\x1191', 
		'\x1192', '\x5', '\x1CE', '\xE8', '\x2', '\x1192', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1193', '\x1194', '\a', '\x30', '\x2', '\x2', '\x1194', 
		'\x1195', '\x5', '\x26C', '\x137', '\x2', '\x1195', '\x1196', '\a', '\x8A', 
		'\x2', '\x2', '\x1196', '\x1197', '\x5', '\x518', '\x28D', '\x2', '\x1197', 
		'\x1198', '\x5', '\x1D6', '\xEC', '\x2', '\x1198', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1199', '\x119A', '\a', '\x30', '\x2', '\x2', '\x119A', 
		'\x119B', '\a', '\x10F', '\x2', '\x2', '\x119B', '\x119C', '\x5', '\x2AE', 
		'\x158', '\x2', '\x119C', '\x119D', '\x5', '\x1CE', '\xE8', '\x2', '\x119D', 
		'\x11F7', '\x3', '\x2', '\x2', '\x2', '\x119E', '\x119F', '\a', '\x30', 
		'\x2', '\x2', '\x119F', '\x11A0', '\a', '\x161', '\x2', '\x2', '\x11A0', 
		'\x11A1', '\x5', '\x20E', '\x108', '\x2', '\x11A1', '\x11A2', '\x5', '\x1CE', 
		'\xE8', '\x2', '\x11A2', '\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11A3', 
		'\x11A4', '\a', '\x30', '\x2', '\x2', '\x11A4', '\x11A5', '\a', '\x161', 
		'\x2', '\x2', '\x11A5', '\x11F7', '\x5', '\x20E', '\x108', '\x2', '\x11A6', 
		'\x11A7', '\a', '\x30', '\x2', '\x2', '\x11A7', '\x11A8', '\a', '\x161', 
		'\x2', '\x2', '\x11A8', '\x11A9', '\x5', '\x20E', '\x108', '\x2', '\x11A9', 
		'\x11AA', '\a', '&', '\x2', '\x2', '\x11AA', '\x11AB', '\a', '\x4', '\x2', 
		'\x2', '\x11AB', '\x11AC', '\x5', '\x444', '\x223', '\x2', '\x11AC', '\x11AD', 
		'\a', '\x5', '\x2', '\x2', '\x11AD', '\x11F7', '\x3', '\x2', '\x2', '\x2', 
		'\x11AE', '\x11AF', '\a', '\x30', '\x2', '\x2', '\x11AF', '\x11B0', '\a', 
		'\x161', '\x2', '\x2', '\x11B0', '\x11B1', '\x5', '\x20E', '\x108', '\x2', 
		'\x11B1', '\x11B2', '\a', '&', '\x2', '\x2', '\x11B2', '\x11B3', '\a', 
		'\xC6', '\x2', '\x2', '\x11B3', '\x11B4', '\a', '\x4', '\x2', '\x2', '\x11B4', 
		'\x11B5', '\x5', '\x1DC', '\xEF', '\x2', '\x11B5', '\x11B6', '\a', '\x5', 
		'\x2', '\x2', '\x11B6', '\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11B7', 
		'\x11B8', '\a', '\x30', '\x2', '\x2', '\x11B8', '\x11B9', '\a', '\x161', 
		'\x2', '\x2', '\x11B9', '\x11BA', '\x5', '\x20E', '\x108', '\x2', '\x11BA', 
		'\x11BB', '\a', '&', '\x2', '\x2', '\x11BB', '\x11BC', '\a', '\x124', 
		'\x2', '\x2', '\x11BC', '\x11BD', '\x5', '\x1CE', '\xE8', '\x2', '\x11BD', 
		'\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11BE', '\x11BF', '\a', '\x30', 
		'\x2', '\x2', '\x11BF', '\x11C0', '\a', '\x15C', '\x2', '\x2', '\x11C0', 
		'\x11C1', '\a', '\x13E', '\x2', '\x2', '\x11C1', '\x11C2', '\a', '\x114', 
		'\x2', '\x2', '\x11C2', '\x11C3', '\x5', '\x20E', '\x108', '\x2', '\x11C3', 
		'\x11C4', '\x5', '\x1CE', '\xE8', '\x2', '\x11C4', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x11C5', '\x11C6', '\a', '\x30', '\x2', '\x2', '\x11C6', 
		'\x11C7', '\a', '\x15C', '\x2', '\x2', '\x11C7', '\x11C8', '\a', '\x13E', 
		'\x2', '\x2', '\x11C8', '\x11C9', '\a', '\xBB', '\x2', '\x2', '\x11C9', 
		'\x11CA', '\x5', '\x20E', '\x108', '\x2', '\x11CA', '\x11CB', '\x5', '\x1CE', 
		'\xE8', '\x2', '\x11CB', '\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11CC', 
		'\x11CD', '\a', '\x30', '\x2', '\x2', '\x11CD', '\x11CE', '\a', '\x15C', 
		'\x2', '\x2', '\x11CE', '\x11CF', '\a', '\x13E', '\x2', '\x2', '\x11CF', 
		'\x11D0', '\a', '\x15A', '\x2', '\x2', '\x11D0', '\x11D1', '\x5', '\x20E', 
		'\x108', '\x2', '\x11D1', '\x11D2', '\x5', '\x1CE', '\xE8', '\x2', '\x11D2', 
		'\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11D3', '\x11D4', '\a', '\x30', 
		'\x2', '\x2', '\x11D4', '\x11D5', '\a', '\x15C', '\x2', '\x2', '\x11D5', 
		'\x11D6', '\a', '\x13E', '\x2', '\x2', '\x11D6', '\x11D7', '\a', '\xA5', 
		'\x2', '\x2', '\x11D7', '\x11D8', '\x5', '\x20E', '\x108', '\x2', '\x11D8', 
		'\x11D9', '\x5', '\x1CE', '\xE8', '\x2', '\x11D9', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x11DA', '\x11DB', '\a', '\x30', '\x2', '\x2', '\x11DB', 
		'\x11DC', '\a', 'n', '\x2', '\x2', '\x11DC', '\x11DD', '\x5', '\x20E', 
		'\x108', '\x2', '\x11DD', '\x11DE', '\x5', '\x1CE', '\xE8', '\x2', '\x11DE', 
		'\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11DF', '\x11E0', '\a', '\x30', 
		'\x2', '\x2', '\x11E0', '\x11E1', '\a', 'n', '\x2', '\x2', '\x11E1', '\x11E2', 
		'\a', '\xDE', '\x2', '\x2', '\x11E2', '\x11E3', '\a', 'O', '\x2', '\x2', 
		'\x11E3', '\x11E4', '\a', '\x185', '\x2', '\x2', '\x11E4', '\x11E5', '\x5', 
		'\x20E', '\x108', '\x2', '\x11E5', '\x11E6', '\x5', '\x1CE', '\xE8', '\x2', 
		'\x11E6', '\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11E7', '\x11E8', '\a', 
		'\x30', '\x2', '\x2', '\x11E8', '\x11E9', '\a', 'n', '\x2', '\x2', '\x11E9', 
		'\x11EA', '\x5', '\x20E', '\x108', '\x2', '\x11EA', '\x11EB', '\a', '\x42', 
		'\x2', '\x2', '\x11EB', '\x11EC', '\x5', '\x20E', '\x108', '\x2', '\x11EC', 
		'\x11F7', '\x3', '\x2', '\x2', '\x2', '\x11ED', '\x11EE', '\a', '\x30', 
		'\x2', '\x2', '\x11EE', '\x11EF', '\a', 'n', '\x2', '\x2', '\x11EF', '\x11F0', 
		'\a', '\xDE', '\x2', '\x2', '\x11F0', '\x11F1', '\a', 'O', '\x2', '\x2', 
		'\x11F1', '\x11F2', '\a', '\x185', '\x2', '\x2', '\x11F2', '\x11F3', '\x5', 
		'\x20E', '\x108', '\x2', '\x11F3', '\x11F4', '\a', '\x42', '\x2', '\x2', 
		'\x11F4', '\x11F5', '\x5', '\x20E', '\x108', '\x2', '\x11F5', '\x11F7', 
		'\x3', '\x2', '\x2', '\x2', '\x11F6', '\x118C', '\x3', '\x2', '\x2', '\x2', 
		'\x11F6', '\x1193', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x1199', '\x3', 
		'\x2', '\x2', '\x2', '\x11F6', '\x119E', '\x3', '\x2', '\x2', '\x2', '\x11F6', 
		'\x11A3', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x11A6', '\x3', '\x2', 
		'\x2', '\x2', '\x11F6', '\x11AE', '\x3', '\x2', '\x2', '\x2', '\x11F6', 
		'\x11B7', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x11BE', '\x3', '\x2', 
		'\x2', '\x2', '\x11F6', '\x11C5', '\x3', '\x2', '\x2', '\x2', '\x11F6', 
		'\x11CC', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x11D3', '\x3', '\x2', 
		'\x2', '\x2', '\x11F6', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11F6', 
		'\x11DF', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x11E7', '\x3', '\x2', 
		'\x2', '\x2', '\x11F6', '\x11ED', '\x3', '\x2', '\x2', '\x2', '\x11F7', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x11F8', '\x11F9', '\a', '\x4', 
		'\x2', '\x2', '\x11F9', '\x11FA', '\x5', '\x1D0', '\xE9', '\x2', '\x11FA', 
		'\x11FB', '\a', '\x5', '\x2', '\x2', '\x11FB', '\x1CF', '\x3', '\x2', 
		'\x2', '\x2', '\x11FC', '\x11FD', '\b', '\xE9', '\x1', '\x2', '\x11FD', 
		'\x11FE', '\x5', '\x1D2', '\xEA', '\x2', '\x11FE', '\x1204', '\x3', '\x2', 
		'\x2', '\x2', '\x11FF', '\x1200', '\f', '\x3', '\x2', '\x2', '\x1200', 
		'\x1201', '\a', '\b', '\x2', '\x2', '\x1201', '\x1203', '\x5', '\x1D2', 
		'\xEA', '\x2', '\x1202', '\x11FF', '\x3', '\x2', '\x2', '\x2', '\x1203', 
		'\x1206', '\x3', '\x2', '\x2', '\x2', '\x1204', '\x1202', '\x3', '\x2', 
		'\x2', '\x2', '\x1204', '\x1205', '\x3', '\x2', '\x2', '\x2', '\x1205', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1206', '\x1204', '\x3', '\x2', 
		'\x2', '\x2', '\x1207', '\x1208', '\x5', '\x538', '\x29D', '\x2', '\x1208', 
		'\x1209', '\a', '\f', '\x2', '\x2', '\x1209', '\x120A', '\x5', '\x1D4', 
		'\xEB', '\x2', '\x120A', '\x120D', '\x3', '\x2', '\x2', '\x2', '\x120B', 
		'\x120D', '\x5', '\x538', '\x29D', '\x2', '\x120C', '\x1207', '\x3', '\x2', 
		'\x2', '\x2', '\x120C', '\x120B', '\x3', '\x2', '\x2', '\x2', '\x120D', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x120E', '\x1215', '\x5', '\x282', 
		'\x142', '\x2', '\x120F', '\x1215', '\x5', '\x544', '\x2A3', '\x2', '\x1210', 
		'\x1215', '\x5', '\x4D0', '\x269', '\x2', '\x1211', '\x1215', '\x5', '\x126', 
		'\x94', '\x2', '\x1212', '\x1215', '\x5', '\x524', '\x293', '\x2', '\x1213', 
		'\x1215', '\a', '\x190', '\x2', '\x2', '\x1214', '\x120E', '\x3', '\x2', 
		'\x2', '\x2', '\x1214', '\x120F', '\x3', '\x2', '\x2', '\x2', '\x1214', 
		'\x1210', '\x3', '\x2', '\x2', '\x2', '\x1214', '\x1211', '\x3', '\x2', 
		'\x2', '\x2', '\x1214', '\x1212', '\x3', '\x2', '\x2', '\x2', '\x1214', 
		'\x1213', '\x3', '\x2', '\x2', '\x2', '\x1215', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1216', '\x1217', '\a', '\x4', '\x2', '\x2', '\x1217', 
		'\x1218', '\x5', '\x1D8', '\xED', '\x2', '\x1218', '\x1219', '\a', '\x5', 
		'\x2', '\x2', '\x1219', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x121A', 
		'\x121B', '\b', '\xED', '\x1', '\x2', '\x121B', '\x121C', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x121C', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x121D', 
		'\x121E', '\f', '\x3', '\x2', '\x2', '\x121E', '\x121F', '\a', '\b', '\x2', 
		'\x2', '\x121F', '\x1221', '\x5', '\x1DA', '\xEE', '\x2', '\x1220', '\x121D', 
		'\x3', '\x2', '\x2', '\x2', '\x1221', '\x1224', '\x3', '\x2', '\x2', '\x2', 
		'\x1222', '\x1220', '\x3', '\x2', '\x2', '\x2', '\x1222', '\x1223', '\x3', 
		'\x2', '\x2', '\x2', '\x1223', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1224', 
		'\x1222', '\x3', '\x2', '\x2', '\x2', '\x1225', '\x1226', '\x5', '\x53A', 
		'\x29E', '\x2', '\x1226', '\x1227', '\a', '\f', '\x2', '\x2', '\x1227', 
		'\x1228', '\x5', '\x1D4', '\xEB', '\x2', '\x1228', '\x1DB', '\x3', '\x2', 
		'\x2', '\x2', '\x1229', '\x122C', '\x5', '\x1DE', '\xF0', '\x2', '\x122A', 
		'\x122C', '\x3', '\x2', '\x2', '\x2', '\x122B', '\x1229', '\x3', '\x2', 
		'\x2', '\x2', '\x122B', '\x122A', '\x3', '\x2', '\x2', '\x2', '\x122C', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x122D', '\x122E', '\b', '\xF0', 
		'\x1', '\x2', '\x122E', '\x122F', '\x5', '\x524', '\x293', '\x2', '\x122F', 
		'\x1235', '\x3', '\x2', '\x2', '\x2', '\x1230', '\x1231', '\f', '\x3', 
		'\x2', '\x2', '\x1231', '\x1232', '\a', '\b', '\x2', '\x2', '\x1232', 
		'\x1234', '\x5', '\x524', '\x293', '\x2', '\x1233', '\x1230', '\x3', '\x2', 
		'\x2', '\x2', '\x1234', '\x1237', '\x3', '\x2', '\x2', '\x2', '\x1235', 
		'\x1233', '\x3', '\x2', '\x2', '\x2', '\x1235', '\x1236', '\x3', '\x2', 
		'\x2', '\x2', '\x1236', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1237', 
		'\x1235', '\x3', '\x2', '\x2', '\x2', '\x1238', '\x1239', '\a', '\x8C', 
		'\x2', '\x2', '\x1239', '\x123A', '\a', '\x161', '\x2', '\x2', '\x123A', 
		'\x123B', '\x5', '\x20E', '\x108', '\x2', '\x123B', '\x123C', '\a', '\x87', 
		'\x2', '\x2', '\x123C', '\x123D', '\a', '\x1BC', '\x2', '\x2', '\x123D', 
		'\x123E', '\x5', '\x1E2', '\xF2', '\x2', '\x123E', '\x123F', '\x5', '\x524', 
		'\x293', '\x2', '\x123F', '\x125E', '\x3', '\x2', '\x2', '\x2', '\x1240', 
		'\x1241', '\a', '\x8C', '\x2', '\x2', '\x1241', '\x1242', '\a', '\x161', 
		'\x2', '\x2', '\x1242', '\x1243', '\x5', '\x20E', '\x108', '\x2', '\x1243', 
		'\x1244', '\a', '\x87', '\x2', '\x2', '\x1244', '\x1245', '\a', '\x1BC', 
		'\x2', '\x2', '\x1245', '\x1246', '\x5', '\x1E2', '\xF2', '\x2', '\x1246', 
		'\x1247', '\x5', '\x524', '\x293', '\x2', '\x1247', '\x1248', '\a', '\x93', 
		'\x2', '\x2', '\x1248', '\x1249', '\x5', '\x524', '\x293', '\x2', '\x1249', 
		'\x125E', '\x3', '\x2', '\x2', '\x2', '\x124A', '\x124B', '\a', '\x8C', 
		'\x2', '\x2', '\x124B', '\x124C', '\a', '\x161', '\x2', '\x2', '\x124C', 
		'\x124D', '\x5', '\x20E', '\x108', '\x2', '\x124D', '\x124E', '\a', '\x87', 
		'\x2', '\x2', '\x124E', '\x124F', '\a', '\x1BC', '\x2', '\x2', '\x124F', 
		'\x1250', '\x5', '\x1E2', '\xF2', '\x2', '\x1250', '\x1251', '\x5', '\x524', 
		'\x293', '\x2', '\x1251', '\x1252', '\a', '\x89', '\x2', '\x2', '\x1252', 
		'\x1253', '\x5', '\x524', '\x293', '\x2', '\x1253', '\x125E', '\x3', '\x2', 
		'\x2', '\x2', '\x1254', '\x1255', '\a', '\x8C', '\x2', '\x2', '\x1255', 
		'\x1256', '\a', '\x161', '\x2', '\x2', '\x1256', '\x1257', '\x5', '\x20E', 
		'\x108', '\x2', '\x1257', '\x1258', '\a', '\x12E', '\x2', '\x2', '\x1258', 
		'\x1259', '\a', '\x1BC', '\x2', '\x2', '\x1259', '\x125A', '\x5', '\x524', 
		'\x293', '\x2', '\x125A', '\x125B', '\a', '`', '\x2', '\x2', '\x125B', 
		'\x125C', '\x5', '\x524', '\x293', '\x2', '\x125C', '\x125E', '\x3', '\x2', 
		'\x2', '\x2', '\x125D', '\x1238', '\x3', '\x2', '\x2', '\x2', '\x125D', 
		'\x1240', '\x3', '\x2', '\x2', '\x2', '\x125D', '\x124A', '\x3', '\x2', 
		'\x2', '\x2', '\x125D', '\x1254', '\x3', '\x2', '\x2', '\x2', '\x125E', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\x125F', '\x1260', '\a', '\xDE', 
		'\x2', '\x2', '\x1260', '\x1261', '\a', 'O', '\x2', '\x2', '\x1261', '\x1264', 
		'\a', '\x185', '\x2', '\x2', '\x1262', '\x1264', '\x3', '\x2', '\x2', 
		'\x2', '\x1263', '\x125F', '\x3', '\x2', '\x2', '\x2', '\x1263', '\x1262', 
		'\x3', '\x2', '\x2', '\x2', '\x1264', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1265', '\x1266', '\a', '\x30', '\x2', '\x2', '\x1266', '\x1267', '\a', 
		'\x10F', '\x2', '\x2', '\x1267', '\x1268', '\a', '\x9E', '\x2', '\x2', 
		'\x1268', '\x1269', '\x5', '\x20E', '\x108', '\x2', '\x1269', '\x126A', 
		'\x5', '\x1EA', '\xF6', '\x2', '\x126A', '\x126B', '\a', '@', '\x2', '\x2', 
		'\x126B', '\x126C', '\a', '\x161', '\x2', '\x2', '\x126C', '\x126D', '\x5', 
		'\x458', '\x22D', '\x2', '\x126D', '\x126E', '\a', '\x66', '\x2', '\x2', 
		'\x126E', '\x126F', '\x5', '\x512', '\x28A', '\x2', '\x126F', '\x1270', 
		'\x5', '\x1EC', '\xF7', '\x2', '\x1270', '\x1271', '\a', '&', '\x2', '\x2', 
		'\x1271', '\x1272', '\x5', '\x1E6', '\xF4', '\x2', '\x1272', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1273', '\x1274', '\b', '\xF4', '\x1', '\x2', 
		'\x1274', '\x1275', '\x5', '\x1E8', '\xF5', '\x2', '\x1275', '\x127B', 
		'\x3', '\x2', '\x2', '\x2', '\x1276', '\x1277', '\f', '\x3', '\x2', '\x2', 
		'\x1277', '\x1278', '\a', '\b', '\x2', '\x2', '\x1278', '\x127A', '\x5', 
		'\x1E8', '\xF5', '\x2', '\x1279', '\x1276', '\x3', '\x2', '\x2', '\x2', 
		'\x127A', '\x127D', '\x3', '\x2', '\x2', '\x2', '\x127B', '\x1279', '\x3', 
		'\x2', '\x2', '\x2', '\x127B', '\x127C', '\x3', '\x2', '\x2', '\x2', '\x127C', 
		'\x1E7', '\x3', '\x2', '\x2', '\x2', '\x127D', '\x127B', '\x3', '\x2', 
		'\x2', '\x2', '\x127E', '\x127F', '\a', '\x10F', '\x2', '\x2', '\x127F', 
		'\x1280', '\x5', '\x522', '\x292', '\x2', '\x1280', '\x1281', '\x5', '\x2AE', 
		'\x158', '\x2', '\x1281', '\x1282', '\x5', '\x1EE', '\xF8', '\x2', '\x1282', 
		'\x1283', '\x5', '\x1F0', '\xF9', '\x2', '\x1283', '\x1298', '\x3', '\x2', 
		'\x2', '\x2', '\x1284', '\x1285', '\a', '\x10F', '\x2', '\x2', '\x1285', 
		'\x1286', '\x5', '\x522', '\x292', '\x2', '\x1286', '\x1287', '\x5', '\x2B2', 
		'\x15A', '\x2', '\x1287', '\x1288', '\x5', '\x1EE', '\xF8', '\x2', '\x1288', 
		'\x1289', '\x5', '\x1F0', '\xF9', '\x2', '\x1289', '\x1298', '\x3', '\x2', 
		'\x2', '\x2', '\x128A', '\x128B', '\a', '\xD5', '\x2', '\x2', '\x128B', 
		'\x128C', '\x5', '\x522', '\x292', '\x2', '\x128C', '\x128D', '\x5', '\x274', 
		'\x13B', '\x2', '\x128D', '\x1298', '\x3', '\x2', '\x2', '\x2', '\x128E', 
		'\x128F', '\a', '\xD5', '\x2', '\x2', '\x128F', '\x1290', '\x5', '\x522', 
		'\x292', '\x2', '\x1290', '\x1291', '\a', '\x4', '\x2', '\x2', '\x1291', 
		'\x1292', '\x5', '\x4DA', '\x26E', '\x2', '\x1292', '\x1293', '\a', '\x5', 
		'\x2', '\x2', '\x1293', '\x1294', '\x5', '\x274', '\x13B', '\x2', '\x1294', 
		'\x1298', '\x3', '\x2', '\x2', '\x2', '\x1295', '\x1296', '\a', '\x152', 
		'\x2', '\x2', '\x1296', '\x1298', '\x5', '\x458', '\x22D', '\x2', '\x1297', 
		'\x127E', '\x3', '\x2', '\x2', '\x2', '\x1297', '\x1284', '\x3', '\x2', 
		'\x2', '\x2', '\x1297', '\x128A', '\x3', '\x2', '\x2', '\x2', '\x1297', 
		'\x128E', '\x3', '\x2', '\x2', '\x2', '\x1297', '\x1295', '\x3', '\x2', 
		'\x2', '\x2', '\x1298', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1299', 
		'\x129C', '\a', '\x37', '\x2', '\x2', '\x129A', '\x129C', '\x3', '\x2', 
		'\x2', '\x2', '\x129B', '\x1299', '\x3', '\x2', '\x2', '\x2', '\x129B', 
		'\x129A', '\x3', '\x2', '\x2', '\x2', '\x129C', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '\x129D', '\x129E', '\a', '\xD0', '\x2', '\x2', '\x129E', 
		'\x12A1', '\x5', '\x20E', '\x108', '\x2', '\x129F', '\x12A1', '\x3', '\x2', 
		'\x2', '\x2', '\x12A0', '\x129D', '\x3', '\x2', '\x2', '\x2', '\x12A0', 
		'\x129F', '\x3', '\x2', '\x2', '\x2', '\x12A1', '\x1ED', '\x3', '\x2', 
		'\x2', '\x2', '\x12A2', '\x12A3', '\a', '@', '\x2', '\x2', '\x12A3', '\x12AA', 
		'\a', '\x13E', '\x2', '\x2', '\x12A4', '\x12A5', '\a', '@', '\x2', '\x2', 
		'\x12A5', '\x12A6', '\a', 'U', '\x2', '\x2', '\x12A6', '\x12A7', '\a', 
		'\x95', '\x2', '\x2', '\x12A7', '\x12AA', '\x5', '\x20E', '\x108', '\x2', 
		'\x12A8', '\x12AA', '\x3', '\x2', '\x2', '\x2', '\x12A9', '\x12A2', '\x3', 
		'\x2', '\x2', '\x2', '\x12A9', '\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12A9', 
		'\x12A8', '\x3', '\x2', '\x2', '\x2', '\x12AA', '\x1EF', '\x3', '\x2', 
		'\x2', '\x2', '\x12AB', '\x12AE', '\a', '\x127', '\x2', '\x2', '\x12AC', 
		'\x12AE', '\x3', '\x2', '\x2', '\x2', '\x12AD', '\x12AB', '\x3', '\x2', 
		'\x2', '\x2', '\x12AD', '\x12AC', '\x3', '\x2', '\x2', '\x2', '\x12AE', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x12AF', '\x12B0', '\a', '\x30', 
		'\x2', '\x2', '\x12B0', '\x12B1', '\a', '\x10F', '\x2', '\x2', '\x12B1', 
		'\x12B2', '\a', '\xD0', '\x2', '\x2', '\x12B2', '\x12B3', '\x5', '\x20E', 
		'\x108', '\x2', '\x12B3', '\x12B4', '\a', '\x66', '\x2', '\x2', '\x12B4', 
		'\x12B5', '\x5', '\x512', '\x28A', '\x2', '\x12B5', '\x1F3', '\x3', '\x2', 
		'\x2', '\x2', '\x12B6', '\x12B7', '\a', '\x8C', '\x2', '\x2', '\x12B7', 
		'\x12B8', '\a', '\x10F', '\x2', '\x2', '\x12B8', '\x12B9', '\a', '\xD0', 
		'\x2', '\x2', '\x12B9', '\x12BA', '\x5', '\x20E', '\x108', '\x2', '\x12BA', 
		'\x12BB', '\a', '\x66', '\x2', '\x2', '\x12BB', '\x12BC', '\x5', '\x512', 
		'\x28A', '\x2', '\x12BC', '\x12BD', '\a', '\x87', '\x2', '\x2', '\x12BD', 
		'\x12BE', '\x5', '\x1E6', '\xF4', '\x2', '\x12BE', '\x12C9', '\x3', '\x2', 
		'\x2', '\x2', '\x12BF', '\x12C0', '\a', '\x8C', '\x2', '\x2', '\x12C0', 
		'\x12C1', '\a', '\x10F', '\x2', '\x2', '\x12C1', '\x12C2', '\a', '\xD0', 
		'\x2', '\x2', '\x12C2', '\x12C3', '\x5', '\x20E', '\x108', '\x2', '\x12C3', 
		'\x12C4', '\a', '\x66', '\x2', '\x2', '\x12C4', '\x12C5', '\x5', '\x512', 
		'\x28A', '\x2', '\x12C5', '\x12C6', '\a', '\xC1', '\x2', '\x2', '\x12C6', 
		'\x12C7', '\x5', '\x1F6', '\xFC', '\x2', '\x12C7', '\x12C9', '\x3', '\x2', 
		'\x2', '\x2', '\x12C8', '\x12B6', '\x3', '\x2', '\x2', '\x2', '\x12C8', 
		'\x12BF', '\x3', '\x2', '\x2', '\x2', '\x12C9', '\x1F5', '\x3', '\x2', 
		'\x2', '\x2', '\x12CA', '\x12CB', '\b', '\xFC', '\x1', '\x2', '\x12CB', 
		'\x12CC', '\x5', '\x1F8', '\xFD', '\x2', '\x12CC', '\x12D2', '\x3', '\x2', 
		'\x2', '\x2', '\x12CD', '\x12CE', '\f', '\x3', '\x2', '\x2', '\x12CE', 
		'\x12CF', '\a', '\b', '\x2', '\x2', '\x12CF', '\x12D1', '\x5', '\x1F8', 
		'\xFD', '\x2', '\x12D0', '\x12CD', '\x3', '\x2', '\x2', '\x2', '\x12D1', 
		'\x12D4', '\x3', '\x2', '\x2', '\x2', '\x12D2', '\x12D0', '\x3', '\x2', 
		'\x2', '\x2', '\x12D2', '\x12D3', '\x3', '\x2', '\x2', '\x2', '\x12D3', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x12D4', '\x12D2', '\x3', '\x2', 
		'\x2', '\x2', '\x12D5', '\x12D6', '\a', '\x10F', '\x2', '\x2', '\x12D6', 
		'\x12D7', '\x5', '\x522', '\x292', '\x2', '\x12D7', '\x12D8', '\a', '\x4', 
		'\x2', '\x2', '\x12D8', '\x12D9', '\x5', '\x4DA', '\x26E', '\x2', '\x12D9', 
		'\x12DA', '\a', '\x5', '\x2', '\x2', '\x12DA', '\x12E2', '\x3', '\x2', 
		'\x2', '\x2', '\x12DB', '\x12DC', '\a', '\xD5', '\x2', '\x2', '\x12DC', 
		'\x12DD', '\x5', '\x522', '\x292', '\x2', '\x12DD', '\x12DE', '\a', '\x4', 
		'\x2', '\x2', '\x12DE', '\x12DF', '\x5', '\x4DA', '\x26E', '\x2', '\x12DF', 
		'\x12E0', '\a', '\x5', '\x2', '\x2', '\x12E0', '\x12E2', '\x3', '\x2', 
		'\x2', '\x2', '\x12E1', '\x12D5', '\x3', '\x2', '\x2', '\x2', '\x12E1', 
		'\x12DB', '\x3', '\x2', '\x2', '\x2', '\x12E2', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', '\x12E3', '\x12E4', '\a', '\xC1', '\x2', '\x2', '\x12E4', 
		'\x12E5', '\a', '\x10F', '\x2', '\x2', '\x12E5', '\x12E6', '\a', '\x9E', 
		'\x2', '\x2', '\x12E6', '\x12E7', '\x5', '\x20E', '\x108', '\x2', '\x12E7', 
		'\x12E8', '\a', '\x66', '\x2', '\x2', '\x12E8', '\x12E9', '\x5', '\x512', 
		'\x28A', '\x2', '\x12E9', '\x12EA', '\x5', 'n', '\x38', '\x2', '\x12EA', 
		'\x12F6', '\x3', '\x2', '\x2', '\x2', '\x12EB', '\x12EC', '\a', '\xC1', 
		'\x2', '\x2', '\x12EC', '\x12ED', '\a', '\x10F', '\x2', '\x2', '\x12ED', 
		'\x12EE', '\a', '\x9E', '\x2', '\x2', '\x12EE', '\x12EF', '\a', '\xDE', 
		'\x2', '\x2', '\x12EF', '\x12F0', '\a', '\x185', '\x2', '\x2', '\x12F0', 
		'\x12F1', '\x5', '\x20E', '\x108', '\x2', '\x12F1', '\x12F2', '\a', '\x66', 
		'\x2', '\x2', '\x12F2', '\x12F3', '\x5', '\x512', '\x28A', '\x2', '\x12F3', 
		'\x12F4', '\x5', 'n', '\x38', '\x2', '\x12F4', '\x12F6', '\x3', '\x2', 
		'\x2', '\x2', '\x12F5', '\x12E3', '\x3', '\x2', '\x2', '\x2', '\x12F5', 
		'\x12EB', '\x3', '\x2', '\x2', '\x2', '\x12F6', '\x1FB', '\x3', '\x2', 
		'\x2', '\x2', '\x12F7', '\x12F8', '\a', '\xC1', '\x2', '\x2', '\x12F8', 
		'\x12F9', '\a', '\x10F', '\x2', '\x2', '\x12F9', '\x12FA', '\a', '\xD0', 
		'\x2', '\x2', '\x12FA', '\x12FB', '\x5', '\x20E', '\x108', '\x2', '\x12FB', 
		'\x12FC', '\a', '\x66', '\x2', '\x2', '\x12FC', '\x12FD', '\x5', '\x512', 
		'\x28A', '\x2', '\x12FD', '\x12FE', '\x5', 'n', '\x38', '\x2', '\x12FE', 
		'\x130A', '\x3', '\x2', '\x2', '\x2', '\x12FF', '\x1300', '\a', '\xC1', 
		'\x2', '\x2', '\x1300', '\x1301', '\a', '\x10F', '\x2', '\x2', '\x1301', 
		'\x1302', '\a', '\xD0', '\x2', '\x2', '\x1302', '\x1303', '\a', '\xDE', 
		'\x2', '\x2', '\x1303', '\x1304', '\a', '\x185', '\x2', '\x2', '\x1304', 
		'\x1305', '\x5', '\x20E', '\x108', '\x2', '\x1305', '\x1306', '\a', '\x66', 
		'\x2', '\x2', '\x1306', '\x1307', '\x5', '\x512', '\x28A', '\x2', '\x1307', 
		'\x1308', '\x5', 'n', '\x38', '\x2', '\x1308', '\x130A', '\x3', '\x2', 
		'\x2', '\x2', '\x1309', '\x12F7', '\x3', '\x2', '\x2', '\x2', '\x1309', 
		'\x12FF', '\x3', '\x2', '\x2', '\x2', '\x130A', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x130C', '\a', '\xC1', '\x2', '\x2', '\x130C', 
		'\x130D', '\a', '\x112', '\x2', '\x2', '\x130D', '\x130E', '\a', '\x95', 
		'\x2', '\x2', '\x130E', '\x130F', '\x5', '\x530', '\x299', '\x2', '\x130F', 
		'\x1310', '\x5', 'n', '\x38', '\x2', '\x1310', '\x1FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1311', '\x1312', '\a', '\x126', '\x2', '\x2', '\x1312', 
		'\x1313', '\a', '\x112', '\x2', '\x2', '\x1313', '\x1314', '\a', '\x95', 
		'\x2', '\x2', '\x1314', '\x1315', '\x5', '\x530', '\x299', '\x2', '\x1315', 
		'\x1316', '\a', '`', '\x2', '\x2', '\x1316', '\x1317', '\x5', '\x52E', 
		'\x298', '\x2', '\x1317', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1318', 
		'\x1319', '\a', '\xC1', '\x2', '\x2', '\x1319', '\x131A', '\x5', '\x204', 
		'\x103', '\x2', '\x131A', '\x131B', '\a', '\xDE', '\x2', '\x2', '\x131B', 
		'\x131C', '\a', '\x185', '\x2', '\x2', '\x131C', '\x131D', '\x5', '\x20C', 
		'\x107', '\x2', '\x131D', '\x131E', '\x5', 'n', '\x38', '\x2', '\x131E', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x131F', '\x1320', '\a', '\xC1', 
		'\x2', '\x2', '\x1320', '\x1321', '\x5', '\x204', '\x103', '\x2', '\x1321', 
		'\x1322', '\x5', '\x20C', '\x107', '\x2', '\x1322', '\x1323', '\x5', 'n', 
		'\x38', '\x2', '\x1323', '\x1367', '\x3', '\x2', '\x2', '\x2', '\x1324', 
		'\x1325', '\a', '\xC1', '\x2', '\x2', '\x1325', '\x1326', '\x5', '\x208', 
		'\x105', '\x2', '\x1326', '\x1327', '\a', '\xDE', '\x2', '\x2', '\x1327', 
		'\x1328', '\a', '\x185', '\x2', '\x2', '\x1328', '\x1329', '\x5', '\x510', 
		'\x289', '\x2', '\x1329', '\x132A', '\x5', 'n', '\x38', '\x2', '\x132A', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x132B', '\x132C', '\a', '\xC1', 
		'\x2', '\x2', '\x132C', '\x132D', '\x5', '\x208', '\x105', '\x2', '\x132D', 
		'\x132E', '\x5', '\x510', '\x289', '\x2', '\x132E', '\x132F', '\x5', 'n', 
		'\x38', '\x2', '\x132F', '\x1367', '\x3', '\x2', '\x2', '\x2', '\x1330', 
		'\x1331', '\a', '\xC1', '\x2', '\x2', '\x1331', '\x1332', '\x5', '\x20A', 
		'\x106', '\x2', '\x1332', '\x1333', '\x5', '\x512', '\x28A', '\x2', '\x1333', 
		'\x1334', '\a', 'R', '\x2', '\x2', '\x1334', '\x1335', '\x5', '\x20E', 
		'\x108', '\x2', '\x1335', '\x1336', '\x5', 'n', '\x38', '\x2', '\x1336', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x1337', '\x1338', '\a', '\xC1', 
		'\x2', '\x2', '\x1338', '\x1339', '\x5', '\x20A', '\x106', '\x2', '\x1339', 
		'\x133A', '\a', '\xDE', '\x2', '\x2', '\x133A', '\x133B', '\a', '\x185', 
		'\x2', '\x2', '\x133B', '\x133C', '\x5', '\x512', '\x28A', '\x2', '\x133C', 
		'\x133D', '\a', 'R', '\x2', '\x2', '\x133D', '\x133E', '\x5', '\x20E', 
		'\x108', '\x2', '\x133E', '\x133F', '\x5', 'n', '\x38', '\x2', '\x133F', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x1340', '\x1341', '\a', '\xC1', 
		'\x2', '\x2', '\x1341', '\x1342', '\a', '\x161', '\x2', '\x2', '\x1342', 
		'\x1343', '\x5', '\x212', '\x10A', '\x2', '\x1343', '\x1344', '\x5', 'n', 
		'\x38', '\x2', '\x1344', '\x1367', '\x3', '\x2', '\x2', '\x2', '\x1345', 
		'\x1346', '\a', '\xC1', '\x2', '\x2', '\x1346', '\x1347', '\a', '\x161', 
		'\x2', '\x2', '\x1347', '\x1348', '\a', '\xDE', '\x2', '\x2', '\x1348', 
		'\x1349', '\a', '\x185', '\x2', '\x2', '\x1349', '\x134A', '\x5', '\x212', 
		'\x10A', '\x2', '\x134A', '\x134B', '\x5', 'n', '\x38', '\x2', '\x134B', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x134C', '\x134D', '\a', '\xC1', 
		'\x2', '\x2', '\x134D', '\x134E', '\a', '\xBF', '\x2', '\x2', '\x134E', 
		'\x134F', '\x5', '\x212', '\x10A', '\x2', '\x134F', '\x1350', '\x5', 'n', 
		'\x38', '\x2', '\x1350', '\x1367', '\x3', '\x2', '\x2', '\x2', '\x1351', 
		'\x1352', '\a', '\xC1', '\x2', '\x2', '\x1352', '\x1353', '\a', '\xBF', 
		'\x2', '\x2', '\x1353', '\x1354', '\a', '\xDE', '\x2', '\x2', '\x1354', 
		'\x1355', '\a', '\x185', '\x2', '\x2', '\x1355', '\x1356', '\x5', '\x212', 
		'\x10A', '\x2', '\x1356', '\x1357', '\x5', 'n', '\x38', '\x2', '\x1357', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x1358', '\x1359', '\a', '\xC1', 
		'\x2', '\x2', '\x1359', '\x135A', '\a', '\xE4', '\x2', '\x2', '\x135A', 
		'\x135B', '\a', 'o', '\x2', '\x2', '\x135B', '\x135C', '\x5', '\x20C', 
		'\x107', '\x2', '\x135C', '\x135D', '\x5', 'n', '\x38', '\x2', '\x135D', 
		'\x1367', '\x3', '\x2', '\x2', '\x2', '\x135E', '\x135F', '\a', '\xC1', 
		'\x2', '\x2', '\x135F', '\x1360', '\a', '\xE4', '\x2', '\x2', '\x1360', 
		'\x1361', '\a', 'o', '\x2', '\x2', '\x1361', '\x1362', '\a', '\xDE', '\x2', 
		'\x2', '\x1362', '\x1363', '\a', '\x185', '\x2', '\x2', '\x1363', '\x1364', 
		'\x5', '\x20C', '\x107', '\x2', '\x1364', '\x1365', '\x5', 'n', '\x38', 
		'\x2', '\x1365', '\x1367', '\x3', '\x2', '\x2', '\x2', '\x1366', '\x1318', 
		'\x3', '\x2', '\x2', '\x2', '\x1366', '\x131F', '\x3', '\x2', '\x2', '\x2', 
		'\x1366', '\x1324', '\x3', '\x2', '\x2', '\x2', '\x1366', '\x132B', '\x3', 
		'\x2', '\x2', '\x2', '\x1366', '\x1330', '\x3', '\x2', '\x2', '\x2', '\x1366', 
		'\x1337', '\x3', '\x2', '\x2', '\x2', '\x1366', '\x1340', '\x3', '\x2', 
		'\x2', '\x2', '\x1366', '\x1345', '\x3', '\x2', '\x2', '\x2', '\x1366', 
		'\x134C', '\x3', '\x2', '\x2', '\x2', '\x1366', '\x1351', '\x3', '\x2', 
		'\x2', '\x2', '\x1366', '\x1358', '\x3', '\x2', '\x2', '\x2', '\x1366', 
		'\x135E', '\x3', '\x2', '\x2', '\x2', '\x1367', '\x203', '\x3', '\x2', 
		'\x2', '\x2', '\x1368', '\x1380', '\a', '^', '\x2', '\x2', '\x1369', '\x1380', 
		'\a', '\x141', '\x2', '\x2', '\x136A', '\x1380', '\a', '\x171', '\x2', 
		'\x2', '\x136B', '\x136C', '\a', '\xFC', '\x2', '\x2', '\x136C', '\x1380', 
		'\a', '\x171', '\x2', '\x2', '\x136D', '\x1380', '\a', '\xE4', '\x2', 
		'\x2', '\x136E', '\x136F', '\a', '\x41', '\x2', '\x2', '\x136F', '\x1380', 
		'\a', '^', '\x2', '\x2', '\x1370', '\x1380', '\a', 'n', '\x2', '\x2', 
		'\x1371', '\x1380', '\a', '\xAA', '\x2', '\x2', '\x1372', '\x1380', '\a', 
		'\x14F', '\x2', '\x2', '\x1373', '\x1374', '\a', '\x15C', '\x2', '\x2', 
		'\x1374', '\x1375', '\a', '\x13E', '\x2', '\x2', '\x1375', '\x1380', '\a', 
		'\x114', '\x2', '\x2', '\x1376', '\x1377', '\a', '\x15C', '\x2', '\x2', 
		'\x1377', '\x1378', '\a', '\x13E', '\x2', '\x2', '\x1378', '\x1380', '\a', 
		'\xBB', '\x2', '\x2', '\x1379', '\x137A', '\a', '\x15C', '\x2', '\x2', 
		'\x137A', '\x137B', '\a', '\x13E', '\x2', '\x2', '\x137B', '\x1380', '\a', 
		'\x15A', '\x2', '\x2', '\x137C', '\x137D', '\a', '\x15C', '\x2', '\x2', 
		'\x137D', '\x137E', '\a', '\x13E', '\x2', '\x2', '\x137E', '\x1380', '\a', 
		'\xA5', '\x2', '\x2', '\x137F', '\x1368', '\x3', '\x2', '\x2', '\x2', 
		'\x137F', '\x1369', '\x3', '\x2', '\x2', '\x2', '\x137F', '\x136A', '\x3', 
		'\x2', '\x2', '\x2', '\x137F', '\x136B', '\x3', '\x2', '\x2', '\x2', '\x137F', 
		'\x136D', '\x3', '\x2', '\x2', '\x2', '\x137F', '\x136E', '\x3', '\x2', 
		'\x2', '\x2', '\x137F', '\x1370', '\x3', '\x2', '\x2', '\x2', '\x137F', 
		'\x1371', '\x3', '\x2', '\x2', '\x2', '\x137F', '\x1372', '\x3', '\x2', 
		'\x2', '\x2', '\x137F', '\x1373', '\x3', '\x2', '\x2', '\x2', '\x137F', 
		'\x1376', '\x3', '\x2', '\x2', '\x2', '\x137F', '\x1379', '\x3', '\x2', 
		'\x2', '\x2', '\x137F', '\x137C', '\x3', '\x2', '\x2', '\x2', '\x1380', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x1381', '\x1387', '\x5', '\x208', 
		'\x105', '\x2', '\x1382', '\x1387', '\a', '\xB1', '\x2', '\x2', '\x1383', 
		'\x1387', '\a', '\x137', '\x2', '\x2', '\x1384', '\x1387', '\a', '\x1BD', 
		'\x2', '\x2', '\x1385', '\x1387', '\a', '\x158', '\x2', '\x2', '\x1386', 
		'\x1381', '\x3', '\x2', '\x2', '\x2', '\x1386', '\x1382', '\x3', '\x2', 
		'\x2', '\x2', '\x1386', '\x1383', '\x3', '\x2', '\x2', '\x2', '\x1386', 
		'\x1384', '\x3', '\x2', '\x2', '\x2', '\x1386', '\x1385', '\x3', '\x2', 
		'\x2', '\x2', '\x1387', '\x207', '\x3', '\x2', '\x2', '\x2', '\x1388', 
		'\x1389', '\a', '\x85', '\x2', '\x2', '\x1389', '\x1397', '\a', '\x1B8', 
		'\x2', '\x2', '\x138A', '\x138B', '\a', '\xC8', '\x2', '\x2', '\x138B', 
		'\x1397', '\a', '\x15E', '\x2', '\x2', '\x138C', '\x1397', '\a', '\xCE', 
		'\x2', '\x2', '\x138D', '\x138E', '\a', '\x41', '\x2', '\x2', '\x138E', 
		'\x138F', '\a', '\xB0', '\x2', '\x2', '\x138F', '\x1397', '\a', '\x176', 
		'\x2', '\x2', '\x1390', '\x1391', '\x5', '\x136', '\x9C', '\x2', '\x1391', 
		'\x1392', '\a', '\xF0', '\x2', '\x2', '\x1392', '\x1397', '\x3', '\x2', 
		'\x2', '\x2', '\x1393', '\x1397', '\a', '\x1BE', '\x2', '\x2', '\x1394', 
		'\x1397', '\a', '\x13C', '\x2', '\x2', '\x1395', '\x1397', '\a', '\x144', 
		'\x2', '\x2', '\x1396', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1396', 
		'\x138A', '\x3', '\x2', '\x2', '\x2', '\x1396', '\x138C', '\x3', '\x2', 
		'\x2', '\x2', '\x1396', '\x138D', '\x3', '\x2', '\x2', '\x2', '\x1396', 
		'\x1390', '\x3', '\x2', '\x2', '\x2', '\x1396', '\x1393', '\x3', '\x2', 
		'\x2', '\x2', '\x1396', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1396', 
		'\x1395', '\x3', '\x2', '\x2', '\x2', '\x1397', '\x209', '\x3', '\x2', 
		'\x2', '\x2', '\x1398', '\x1399', '\t', '\f', '\x2', '\x2', '\x1399', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x139A', '\x139B', '\b', '\x107', 
		'\x1', '\x2', '\x139B', '\x139C', '\x5', '\x20E', '\x108', '\x2', '\x139C', 
		'\x13A2', '\x3', '\x2', '\x2', '\x2', '\x139D', '\x139E', '\f', '\x3', 
		'\x2', '\x2', '\x139E', '\x139F', '\a', '\b', '\x2', '\x2', '\x139F', 
		'\x13A1', '\x5', '\x20E', '\x108', '\x2', '\x13A0', '\x139D', '\x3', '\x2', 
		'\x2', '\x2', '\x13A1', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x13A2', 
		'\x13A0', '\x3', '\x2', '\x2', '\x2', '\x13A2', '\x13A3', '\x3', '\x2', 
		'\x2', '\x2', '\x13A3', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x13A4', 
		'\x13A2', '\x3', '\x2', '\x2', '\x2', '\x13A5', '\x13AA', '\x5', '\x532', 
		'\x29A', '\x2', '\x13A6', '\x13A7', '\x5', '\x532', '\x29A', '\x2', '\x13A7', 
		'\x13A8', '\x5', '\x210', '\x109', '\x2', '\x13A8', '\x13AA', '\x3', '\x2', 
		'\x2', '\x2', '\x13A9', '\x13A5', '\x3', '\x2', '\x2', '\x2', '\x13A9', 
		'\x13A6', '\x3', '\x2', '\x2', '\x2', '\x13AA', '\x20F', '\x3', '\x2', 
		'\x2', '\x2', '\x13AB', '\x13AC', '\b', '\x109', '\x1', '\x2', '\x13AC', 
		'\x13AD', '\a', '\r', '\x2', '\x2', '\x13AD', '\x13AE', '\x5', '\x514', 
		'\x28B', '\x2', '\x13AE', '\x13B4', '\x3', '\x2', '\x2', '\x2', '\x13AF', 
		'\x13B0', '\f', '\x3', '\x2', '\x2', '\x13B0', '\x13B1', '\a', '\r', '\x2', 
		'\x2', '\x13B1', '\x13B3', '\x5', '\x514', '\x28B', '\x2', '\x13B2', '\x13AF', 
		'\x3', '\x2', '\x2', '\x2', '\x13B3', '\x13B6', '\x3', '\x2', '\x2', '\x2', 
		'\x13B4', '\x13B2', '\x3', '\x2', '\x2', '\x2', '\x13B4', '\x13B5', '\x3', 
		'\x2', '\x2', '\x2', '\x13B5', '\x211', '\x3', '\x2', '\x2', '\x2', '\x13B6', 
		'\x13B4', '\x3', '\x2', '\x2', '\x2', '\x13B7', '\x13B8', '\b', '\x10A', 
		'\x1', '\x2', '\x13B8', '\x13B9', '\x5', '\x458', '\x22D', '\x2', '\x13B9', 
		'\x13BF', '\x3', '\x2', '\x2', '\x2', '\x13BA', '\x13BB', '\f', '\x3', 
		'\x2', '\x2', '\x13BB', '\x13BC', '\a', '\b', '\x2', '\x2', '\x13BC', 
		'\x13BE', '\x5', '\x458', '\x22D', '\x2', '\x13BD', '\x13BA', '\x3', '\x2', 
		'\x2', '\x2', '\x13BE', '\x13C1', '\x3', '\x2', '\x2', '\x2', '\x13BF', 
		'\x13BD', '\x3', '\x2', '\x2', '\x2', '\x13BF', '\x13C0', '\x3', '\x2', 
		'\x2', '\x2', '\x13C0', '\x213', '\x3', '\x2', '\x2', '\x2', '\x13C1', 
		'\x13BF', '\x3', '\x2', '\x2', '\x2', '\x13C2', '\x13C3', '\a', '\x15F', 
		'\x2', '\x2', '\x13C3', '\x13C4', '\x5', '\x3D8', '\x1ED', '\x2', '\x13C4', 
		'\x13C5', '\x5', '\x42E', '\x218', '\x2', '\x13C5', '\x13C6', '\x5', '\x216', 
		'\x10C', '\x2', '\x13C6', '\x13C7', '\x5', 'n', '\x38', '\x2', '\x13C7', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x13C8', '\x13C9', '\a', '\xA9', 
		'\x2', '\x2', '\x13C9', '\x13CE', '\a', '\xDD', '\x2', '\x2', '\x13CA', 
		'\x13CB', '\a', '\x133', '\x2', '\x2', '\x13CB', '\x13CE', '\a', '\xDD', 
		'\x2', '\x2', '\x13CC', '\x13CE', '\x3', '\x2', '\x2', '\x2', '\x13CD', 
		'\x13C8', '\x3', '\x2', '\x2', '\x2', '\x13CD', '\x13CA', '\x3', '\x2', 
		'\x2', '\x2', '\x13CD', '\x13CC', '\x3', '\x2', '\x2', '\x2', '\x13CE', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x13CF', '\x13D0', '\a', '\xA1', 
		'\x2', '\x2', '\x13D0', '\x13D1', '\a', 'R', '\x2', '\x2', '\x13D1', '\x13D2', 
		'\x5', '\x204', '\x103', '\x2', '\x13D2', '\x13D3', '\x5', '\x20E', '\x108', 
		'\x2', '\x13D3', '\x13D4', '\a', 'v', '\x2', '\x2', '\x13D4', '\x13D5', 
		'\x5', '\x21A', '\x10E', '\x2', '\x13D5', '\x1463', '\x3', '\x2', '\x2', 
		'\x2', '\x13D6', '\x13D7', '\a', '\xA1', '\x2', '\x2', '\x13D7', '\x13D8', 
		'\a', 'R', '\x2', '\x2', '\x13D8', '\x13D9', '\a', '.', '\x2', '\x2', 
		'\x13D9', '\x13DA', '\x5', '\x20E', '\x108', '\x2', '\x13DA', '\x13DB', 
		'\a', 'v', '\x2', '\x2', '\x13DB', '\x13DC', '\x5', '\x21A', '\x10E', 
		'\x2', '\x13DC', '\x1463', '\x3', '\x2', '\x2', '\x2', '\x13DD', '\x13DE', 
		'\a', '\xA1', '\x2', '\x2', '\x13DE', '\x13DF', '\a', 'R', '\x2', '\x2', 
		'\x13DF', '\x13E0', '\x5', '\x206', '\x104', '\x2', '\x13E0', '\x13E1', 
		'\x5', '\x512', '\x28A', '\x2', '\x13E1', '\x13E2', '\a', 'v', '\x2', 
		'\x2', '\x13E2', '\x13E3', '\x5', '\x21A', '\x10E', '\x2', '\x13E3', '\x1463', 
		'\x3', '\x2', '\x2', '\x2', '\x13E4', '\x13E5', '\a', '\xA1', '\x2', '\x2', 
		'\x13E5', '\x13E6', '\a', 'R', '\x2', '\x2', '\x13E6', '\x13E7', '\a', 
		'\x161', '\x2', '\x2', '\x13E7', '\x13E8', '\x5', '\x458', '\x22D', '\x2', 
		'\x13E8', '\x13E9', '\a', 'v', '\x2', '\x2', '\x13E9', '\x13EA', '\x5', 
		'\x21A', '\x10E', '\x2', '\x13EA', '\x1463', '\x3', '\x2', '\x2', '\x2', 
		'\x13EB', '\x13EC', '\a', '\xA1', '\x2', '\x2', '\x13EC', '\x13ED', '\a', 
		'R', '\x2', '\x2', '\x13ED', '\x13EE', '\a', '\xBF', '\x2', '\x2', '\x13EE', 
		'\x13EF', '\x5', '\x458', '\x22D', '\x2', '\x13EF', '\x13F0', '\a', 'v', 
		'\x2', '\x2', '\x13F0', '\x13F1', '\x5', '\x21A', '\x10E', '\x2', '\x13F1', 
		'\x1463', '\x3', '\x2', '\x2', '\x2', '\x13F2', '\x13F3', '\a', '\xA1', 
		'\x2', '\x2', '\x13F3', '\x13F4', '\a', 'R', '\x2', '\x2', '\x13F4', '\x13F5', 
		'\a', '\x8A', '\x2', '\x2', '\x13F5', '\x13F6', '\x5', '\x28C', '\x147', 
		'\x2', '\x13F6', '\x13F7', '\a', 'v', '\x2', '\x2', '\x13F7', '\x13F8', 
		'\x5', '\x21A', '\x10E', '\x2', '\x13F8', '\x1463', '\x3', '\x2', '\x2', 
		'\x2', '\x13F9', '\x13FA', '\a', '\xA1', '\x2', '\x2', '\x13FA', '\x13FB', 
		'\a', 'R', '\x2', '\x2', '\x13FB', '\x13FC', '\a', '\xD5', '\x2', '\x2', 
		'\x13FC', '\x13FD', '\x5', '\x274', '\x13B', '\x2', '\x13FD', '\x13FE', 
		'\a', 'v', '\x2', '\x2', '\x13FE', '\x13FF', '\x5', '\x21A', '\x10E', 
		'\x2', '\x13FF', '\x1463', '\x3', '\x2', '\x2', '\x2', '\x1400', '\x1401', 
		'\a', '\xA1', '\x2', '\x2', '\x1401', '\x1402', '\a', 'R', '\x2', '\x2', 
		'\x1402', '\x1403', '\a', '\x10F', '\x2', '\x2', '\x1403', '\x1404', '\x5', 
		'\x2B2', '\x15A', '\x2', '\x1404', '\x1405', '\a', 'v', '\x2', '\x2', 
		'\x1405', '\x1406', '\x5', '\x21A', '\x10E', '\x2', '\x1406', '\x1463', 
		'\x3', '\x2', '\x2', '\x2', '\x1407', '\x1408', '\a', '\xA1', '\x2', '\x2', 
		'\x1408', '\x1409', '\a', 'R', '\x2', '\x2', '\x1409', '\x140A', '\a', 
		'/', '\x2', '\x2', '\x140A', '\x140B', '\x5', '\x512', '\x28A', '\x2', 
		'\x140B', '\x140C', '\a', 'R', '\x2', '\x2', '\x140C', '\x140D', '\x5', 
		'\x20E', '\x108', '\x2', '\x140D', '\x140E', '\a', 'v', '\x2', '\x2', 
		'\x140E', '\x140F', '\x5', '\x21A', '\x10E', '\x2', '\x140F', '\x1463', 
		'\x3', '\x2', '\x2', '\x2', '\x1410', '\x1411', '\a', '\xA1', '\x2', '\x2', 
		'\x1411', '\x1412', '\a', 'R', '\x2', '\x2', '\x1412', '\x1413', '\a', 
		'/', '\x2', '\x2', '\x1413', '\x1414', '\x5', '\x512', '\x28A', '\x2', 
		'\x1414', '\x1415', '\a', 'R', '\x2', '\x2', '\x1415', '\x1416', '\a', 
		'\xBF', '\x2', '\x2', '\x1416', '\x1417', '\x5', '\x20E', '\x108', '\x2', 
		'\x1417', '\x1418', '\a', 'v', '\x2', '\x2', '\x1418', '\x1419', '\x5', 
		'\x21A', '\x10E', '\x2', '\x1419', '\x1463', '\x3', '\x2', '\x2', '\x2', 
		'\x141A', '\x141B', '\a', '\xA1', '\x2', '\x2', '\x141B', '\x141C', '\a', 
		'R', '\x2', '\x2', '\x141C', '\x141D', '\x5', '\x20A', '\x106', '\x2', 
		'\x141D', '\x141E', '\x5', '\x512', '\x28A', '\x2', '\x141E', '\x141F', 
		'\a', 'R', '\x2', '\x2', '\x141F', '\x1420', '\x5', '\x20E', '\x108', 
		'\x2', '\x1420', '\x1421', '\a', 'v', '\x2', '\x2', '\x1421', '\x1422', 
		'\x5', '\x21A', '\x10E', '\x2', '\x1422', '\x1463', '\x3', '\x2', '\x2', 
		'\x2', '\x1423', '\x1424', '\a', '\xA1', '\x2', '\x2', '\x1424', '\x1425', 
		'\a', 'R', '\x2', '\x2', '\x1425', '\x1426', '\a', '\x121', '\x2', '\x2', 
		'\x1426', '\x1427', '\x5', '\x274', '\x13B', '\x2', '\x1427', '\x1428', 
		'\a', 'v', '\x2', '\x2', '\x1428', '\x1429', '\x5', '\x21A', '\x10E', 
		'\x2', '\x1429', '\x1463', '\x3', '\x2', '\x2', '\x2', '\x142A', '\x142B', 
		'\a', '\xA1', '\x2', '\x2', '\x142B', '\x142C', '\a', 'R', '\x2', '\x2', 
		'\x142C', '\x142D', '\a', '\x1B4', '\x2', '\x2', '\x142D', '\x142E', '\x5', 
		'\x274', '\x13B', '\x2', '\x142E', '\x142F', '\a', 'v', '\x2', '\x2', 
		'\x142F', '\x1430', '\x5', '\x21A', '\x10E', '\x2', '\x1430', '\x1463', 
		'\x3', '\x2', '\x2', '\x2', '\x1431', '\x1432', '\a', '\xA1', '\x2', '\x2', 
		'\x1432', '\x1433', '\a', 'R', '\x2', '\x2', '\x1433', '\x1434', '\a', 
		'\x1B5', '\x2', '\x2', '\x1434', '\x1435', '\a', '@', '\x2', '\x2', '\x1435', 
		'\x1436', '\x5', '\x458', '\x22D', '\x2', '\x1436', '\x1437', '\a', '\xF0', 
		'\x2', '\x2', '\x1437', '\x1438', '\x5', '\x512', '\x28A', '\x2', '\x1438', 
		'\x1439', '\a', 'v', '\x2', '\x2', '\x1439', '\x143A', '\x5', '\x21A', 
		'\x10E', '\x2', '\x143A', '\x1463', '\x3', '\x2', '\x2', '\x2', '\x143B', 
		'\x143C', '\a', '\xA1', '\x2', '\x2', '\x143C', '\x143D', '\a', 'R', '\x2', 
		'\x2', '\x143D', '\x143E', '\a', '\x10F', '\x2', '\x2', '\x143E', '\x143F', 
		'\a', '\x9E', '\x2', '\x2', '\x143F', '\x1440', '\x5', '\x20E', '\x108', 
		'\x2', '\x1440', '\x1441', '\a', '\x66', '\x2', '\x2', '\x1441', '\x1442', 
		'\x5', '\x512', '\x28A', '\x2', '\x1442', '\x1443', '\a', 'v', '\x2', 
		'\x2', '\x1443', '\x1444', '\x5', '\x21A', '\x10E', '\x2', '\x1444', '\x1463', 
		'\x3', '\x2', '\x2', '\x2', '\x1445', '\x1446', '\a', '\xA1', '\x2', '\x2', 
		'\x1446', '\x1447', '\a', 'R', '\x2', '\x2', '\x1447', '\x1448', '\a', 
		'\x10F', '\x2', '\x2', '\x1448', '\x1449', '\a', '\xD0', '\x2', '\x2', 
		'\x1449', '\x144A', '\x5', '\x20E', '\x108', '\x2', '\x144A', '\x144B', 
		'\a', '\x66', '\x2', '\x2', '\x144B', '\x144C', '\x5', '\x512', '\x28A', 
		'\x2', '\x144C', '\x144D', '\a', 'v', '\x2', '\x2', '\x144D', '\x144E', 
		'\x5', '\x21A', '\x10E', '\x2', '\x144E', '\x1463', '\x3', '\x2', '\x2', 
		'\x2', '\x144F', '\x1450', '\a', '\xA1', '\x2', '\x2', '\x1450', '\x1451', 
		'\a', 'R', '\x2', '\x2', '\x1451', '\x1452', '\a', '\xF1', '\x2', '\x2', 
		'\x1452', '\x1453', '\a', '\x10B', '\x2', '\x2', '\x1453', '\x1454', '\x5', 
		'\x126', '\x94', '\x2', '\x1454', '\x1455', '\a', 'v', '\x2', '\x2', '\x1455', 
		'\x1456', '\x5', '\x21A', '\x10E', '\x2', '\x1456', '\x1463', '\x3', '\x2', 
		'\x2', '\x2', '\x1457', '\x1458', '\a', '\xA1', '\x2', '\x2', '\x1458', 
		'\x1459', '\a', 'R', '\x2', '\x2', '\x1459', '\x145A', '\a', '+', '\x2', 
		'\x2', '\x145A', '\x145B', '\a', '\x4', '\x2', '\x2', '\x145B', '\x145C', 
		'\x5', '\x458', '\x22D', '\x2', '\x145C', '\x145D', '\a', '&', '\x2', 
		'\x2', '\x145D', '\x145E', '\x5', '\x458', '\x22D', '\x2', '\x145E', '\x145F', 
		'\a', '\x5', '\x2', '\x2', '\x145F', '\x1460', '\a', 'v', '\x2', '\x2', 
		'\x1460', '\x1461', '\x5', '\x21A', '\x10E', '\x2', '\x1461', '\x1463', 
		'\x3', '\x2', '\x2', '\x2', '\x1462', '\x13CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1462', '\x13D6', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x13DD', '\x3', 
		'\x2', '\x2', '\x2', '\x1462', '\x13E4', '\x3', '\x2', '\x2', '\x2', '\x1462', 
		'\x13EB', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x13F2', '\x3', '\x2', 
		'\x2', '\x2', '\x1462', '\x13F9', '\x3', '\x2', '\x2', '\x2', '\x1462', 
		'\x1400', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x1407', '\x3', '\x2', 
		'\x2', '\x2', '\x1462', '\x1410', '\x3', '\x2', '\x2', '\x2', '\x1462', 
		'\x141A', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x1423', '\x3', '\x2', 
		'\x2', '\x2', '\x1462', '\x142A', '\x3', '\x2', '\x2', '\x2', '\x1462', 
		'\x1431', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x143B', '\x3', '\x2', 
		'\x2', '\x2', '\x1462', '\x1445', '\x3', '\x2', '\x2', '\x2', '\x1462', 
		'\x144F', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x1457', '\x3', '\x2', 
		'\x2', '\x2', '\x1463', '\x219', '\x3', '\x2', '\x2', '\x2', '\x1464', 
		'\x1467', '\x5', '\x524', '\x293', '\x2', '\x1465', '\x1467', '\a', 'P', 
		'\x2', '\x2', '\x1466', '\x1464', '\x3', '\x2', '\x2', '\x2', '\x1466', 
		'\x1465', '\x3', '\x2', '\x2', '\x2', '\x1467', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x1468', '\x1469', '\a', '\x140', '\x2', '\x2', '\x1469', 
		'\x146A', '\a', '\xEF', '\x2', '\x2', '\x146A', '\x146B', '\x5', '\x21E', 
		'\x110', '\x2', '\x146B', '\x146C', '\a', 'R', '\x2', '\x2', '\x146C', 
		'\x146D', '\x5', '\x204', '\x103', '\x2', '\x146D', '\x146E', '\x5', '\x20E', 
		'\x108', '\x2', '\x146E', '\x146F', '\a', 'v', '\x2', '\x2', '\x146F', 
		'\x1470', '\x5', '\x220', '\x111', '\x2', '\x1470', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x1471', '\x1472', '\a', '\x140', '\x2', '\x2', '\x1472', 
		'\x1473', '\a', '\xEF', '\x2', '\x2', '\x1473', '\x1474', '\x5', '\x21E', 
		'\x110', '\x2', '\x1474', '\x1475', '\a', 'R', '\x2', '\x2', '\x1475', 
		'\x1476', '\a', '.', '\x2', '\x2', '\x1476', '\x1477', '\x5', '\x20E', 
		'\x108', '\x2', '\x1477', '\x1478', '\a', 'v', '\x2', '\x2', '\x1478', 
		'\x1479', '\x5', '\x220', '\x111', '\x2', '\x1479', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x147A', '\x147B', '\a', '\x140', '\x2', '\x2', '\x147B', 
		'\x147C', '\a', '\xEF', '\x2', '\x2', '\x147C', '\x147D', '\x5', '\x21E', 
		'\x110', '\x2', '\x147D', '\x147E', '\a', 'R', '\x2', '\x2', '\x147E', 
		'\x147F', '\x5', '\x206', '\x104', '\x2', '\x147F', '\x1480', '\x5', '\x512', 
		'\x28A', '\x2', '\x1480', '\x1481', '\a', 'v', '\x2', '\x2', '\x1481', 
		'\x1482', '\x5', '\x220', '\x111', '\x2', '\x1482', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x1483', '\x1484', '\a', '\x140', '\x2', '\x2', '\x1484', 
		'\x1485', '\a', '\xEF', '\x2', '\x2', '\x1485', '\x1486', '\x5', '\x21E', 
		'\x110', '\x2', '\x1486', '\x1487', '\a', 'R', '\x2', '\x2', '\x1487', 
		'\x1488', '\a', '\x161', '\x2', '\x2', '\x1488', '\x1489', '\x5', '\x458', 
		'\x22D', '\x2', '\x1489', '\x148A', '\a', 'v', '\x2', '\x2', '\x148A', 
		'\x148B', '\x5', '\x220', '\x111', '\x2', '\x148B', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x148C', '\x148D', '\a', '\x140', '\x2', '\x2', '\x148D', 
		'\x148E', '\a', '\xEF', '\x2', '\x2', '\x148E', '\x148F', '\x5', '\x21E', 
		'\x110', '\x2', '\x148F', '\x1490', '\a', 'R', '\x2', '\x2', '\x1490', 
		'\x1491', '\a', '\xBF', '\x2', '\x2', '\x1491', '\x1492', '\x5', '\x458', 
		'\x22D', '\x2', '\x1492', '\x1493', '\a', 'v', '\x2', '\x2', '\x1493', 
		'\x1494', '\x5', '\x220', '\x111', '\x2', '\x1494', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x1495', '\x1496', '\a', '\x140', '\x2', '\x2', '\x1496', 
		'\x1497', '\a', '\xEF', '\x2', '\x2', '\x1497', '\x1498', '\x5', '\x21E', 
		'\x110', '\x2', '\x1498', '\x1499', '\a', 'R', '\x2', '\x2', '\x1499', 
		'\x149A', '\a', '\x8A', '\x2', '\x2', '\x149A', '\x149B', '\x5', '\x28C', 
		'\x147', '\x2', '\x149B', '\x149C', '\a', 'v', '\x2', '\x2', '\x149C', 
		'\x149D', '\x5', '\x220', '\x111', '\x2', '\x149D', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x149E', '\x149F', '\a', '\x140', '\x2', '\x2', '\x149F', 
		'\x14A0', '\a', '\xEF', '\x2', '\x2', '\x14A0', '\x14A1', '\x5', '\x21E', 
		'\x110', '\x2', '\x14A1', '\x14A2', '\a', 'R', '\x2', '\x2', '\x14A2', 
		'\x14A3', '\a', '\xD5', '\x2', '\x2', '\x14A3', '\x14A4', '\x5', '\x274', 
		'\x13B', '\x2', '\x14A4', '\x14A5', '\a', 'v', '\x2', '\x2', '\x14A5', 
		'\x14A6', '\x5', '\x220', '\x111', '\x2', '\x14A6', '\x14C4', '\x3', '\x2', 
		'\x2', '\x2', '\x14A7', '\x14A8', '\a', '\x140', '\x2', '\x2', '\x14A8', 
		'\x14A9', '\a', '\xEF', '\x2', '\x2', '\x14A9', '\x14AA', '\x5', '\x21E', 
		'\x110', '\x2', '\x14AA', '\x14AB', '\a', 'R', '\x2', '\x2', '\x14AB', 
		'\x14AC', '\a', '\xF1', '\x2', '\x2', '\x14AC', '\x14AD', '\a', '\x10B', 
		'\x2', '\x2', '\x14AD', '\x14AE', '\x5', '\x126', '\x94', '\x2', '\x14AE', 
		'\x14AF', '\a', 'v', '\x2', '\x2', '\x14AF', '\x14B0', '\x5', '\x220', 
		'\x111', '\x2', '\x14B0', '\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14B1', 
		'\x14B2', '\a', '\x140', '\x2', '\x2', '\x14B2', '\x14B3', '\a', '\xEF', 
		'\x2', '\x2', '\x14B3', '\x14B4', '\x5', '\x21E', '\x110', '\x2', '\x14B4', 
		'\x14B5', '\a', 'R', '\x2', '\x2', '\x14B5', '\x14B6', '\a', '\x121', 
		'\x2', '\x2', '\x14B6', '\x14B7', '\x5', '\x274', '\x13B', '\x2', '\x14B7', 
		'\x14B8', '\a', 'v', '\x2', '\x2', '\x14B8', '\x14B9', '\x5', '\x220', 
		'\x111', '\x2', '\x14B9', '\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14BA', 
		'\x14BB', '\a', '\x140', '\x2', '\x2', '\x14BB', '\x14BC', '\a', '\xEF', 
		'\x2', '\x2', '\x14BC', '\x14BD', '\x5', '\x21E', '\x110', '\x2', '\x14BD', 
		'\x14BE', '\a', 'R', '\x2', '\x2', '\x14BE', '\x14BF', '\a', '\x1B4', 
		'\x2', '\x2', '\x14BF', '\x14C0', '\x5', '\x274', '\x13B', '\x2', '\x14C0', 
		'\x14C1', '\a', 'v', '\x2', '\x2', '\x14C1', '\x14C2', '\x5', '\x220', 
		'\x111', '\x2', '\x14C2', '\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x1468', '\x3', '\x2', '\x2', '\x2', '\x14C3', '\x1471', '\x3', '\x2', 
		'\x2', '\x2', '\x14C3', '\x147A', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x1483', '\x3', '\x2', '\x2', '\x2', '\x14C3', '\x148C', '\x3', '\x2', 
		'\x2', '\x2', '\x14C3', '\x1495', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x149E', '\x3', '\x2', '\x2', '\x2', '\x14C3', '\x14A7', '\x3', '\x2', 
		'\x2', '\x2', '\x14C3', '\x14B1', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x14BA', '\x3', '\x2', '\x2', '\x2', '\x14C4', '\x21D', '\x3', '\x2', 
		'\x2', '\x2', '\x14C5', '\x14C6', '\a', '@', '\x2', '\x2', '\x14C6', '\x14C9', 
		'\x5', 'J', '&', '\x2', '\x14C7', '\x14C9', '\x3', '\x2', '\x2', '\x2', 
		'\x14C8', '\x14C5', '\x3', '\x2', '\x2', '\x2', '\x14C8', '\x14C7', '\x3', 
		'\x2', '\x2', '\x2', '\x14C9', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x14CA', 
		'\x14CD', '\x5', '\x524', '\x293', '\x2', '\x14CB', '\x14CD', '\a', 'P', 
		'\x2', '\x2', '\x14CC', '\x14CA', '\x3', '\x2', '\x2', '\x2', '\x14CC', 
		'\x14CB', '\x3', '\x2', '\x2', '\x2', '\x14CD', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x14CE', '\x14CF', '\a', '?', '\x2', '\x2', '\x14CF', '\x14D3', 
		'\x5', '\x224', '\x113', '\x2', '\x14D0', '\x14D1', '\a', '\x102', '\x2', 
		'\x2', '\x14D1', '\x14D3', '\x5', '\x224', '\x113', '\x2', '\x14D2', '\x14CE', 
		'\x3', '\x2', '\x2', '\x2', '\x14D2', '\x14D0', '\x3', '\x2', '\x2', '\x2', 
		'\x14D3', '\x223', '\x3', '\x2', '\x2', '\x2', '\x14D4', '\x1517', '\x5', 
		'\x3B4', '\x1DB', '\x2', '\x14D5', '\x14D6', '\x5', '\x226', '\x114', 
		'\x2', '\x14D6', '\x14D7', '\x5', '\x3B4', '\x1DB', '\x2', '\x14D7', '\x1517', 
		'\x3', '\x2', '\x2', '\x2', '\x14D8', '\x14D9', '\a', '\x105', '\x2', 
		'\x2', '\x14D9', '\x14DA', '\x5', '\x228', '\x115', '\x2', '\x14DA', '\x14DB', 
		'\x5', '\x3B4', '\x1DB', '\x2', '\x14DB', '\x1517', '\x3', '\x2', '\x2', 
		'\x2', '\x14DC', '\x14DD', '\a', '\x11E', '\x2', '\x2', '\x14DD', '\x14DE', 
		'\x5', '\x228', '\x115', '\x2', '\x14DE', '\x14DF', '\x5', '\x3B4', '\x1DB', 
		'\x2', '\x14DF', '\x1517', '\x3', '\x2', '\x2', '\x2', '\x14E0', '\x14E1', 
		'\a', '\xD1', '\x2', '\x2', '\x14E1', '\x14E2', '\x5', '\x228', '\x115', 
		'\x2', '\x14E2', '\x14E3', '\x5', '\x3B4', '\x1DB', '\x2', '\x14E3', '\x1517', 
		'\x3', '\x2', '\x2', '\x2', '\x14E4', '\x14E5', '\a', '\xF2', '\x2', '\x2', 
		'\x14E5', '\x14E6', '\x5', '\x228', '\x115', '\x2', '\x14E6', '\x14E7', 
		'\x5', '\x3B4', '\x1DB', '\x2', '\x14E7', '\x1517', '\x3', '\x2', '\x2', 
		'\x2', '\x14E8', '\x14E9', '\a', '\x84', '\x2', '\x2', '\x14E9', '\x14EA', 
		'\x5', '\x52A', '\x296', '\x2', '\x14EA', '\x14EB', '\x5', '\x228', '\x115', 
		'\x2', '\x14EB', '\x14EC', '\x5', '\x3B4', '\x1DB', '\x2', '\x14EC', '\x1517', 
		'\x3', '\x2', '\x2', '\x2', '\x14ED', '\x14EE', '\a', '\x12C', '\x2', 
		'\x2', '\x14EE', '\x14EF', '\x5', '\x52A', '\x296', '\x2', '\x14EF', '\x14F0', 
		'\x5', '\x228', '\x115', '\x2', '\x14F0', '\x14F1', '\x5', '\x3B4', '\x1DB', 
		'\x2', '\x14F1', '\x1517', '\x3', '\x2', '\x2', '\x2', '\x14F2', '\x14F3', 
		'\x5', '\x52A', '\x296', '\x2', '\x14F3', '\x14F4', '\x5', '\x228', '\x115', 
		'\x2', '\x14F4', '\x14F5', '\x5', '\x3B4', '\x1DB', '\x2', '\x14F5', '\x1517', 
		'\x3', '\x2', '\x2', '\x2', '\x14F6', '\x14F7', '\a', ' ', '\x2', '\x2', 
		'\x14F7', '\x14F8', '\x5', '\x228', '\x115', '\x2', '\x14F8', '\x14F9', 
		'\x5', '\x3B4', '\x1DB', '\x2', '\x14F9', '\x1517', '\x3', '\x2', '\x2', 
		'\x2', '\x14FA', '\x14FB', '\a', '\xD4', '\x2', '\x2', '\x14FB', '\x14FC', 
		'\x5', '\x228', '\x115', '\x2', '\x14FC', '\x14FD', '\x5', '\x3B4', '\x1DB', 
		'\x2', '\x14FD', '\x1517', '\x3', '\x2', '\x2', '\x2', '\x14FE', '\x14FF', 
		'\a', '\xD4', '\x2', '\x2', '\x14FF', '\x1500', '\x5', '\x52A', '\x296', 
		'\x2', '\x1500', '\x1501', '\x5', '\x228', '\x115', '\x2', '\x1501', '\x1502', 
		'\x5', '\x3B4', '\x1DB', '\x2', '\x1502', '\x1517', '\x3', '\x2', '\x2', 
		'\x2', '\x1503', '\x1504', '\a', '\xD4', '\x2', '\x2', '\x1504', '\x1505', 
		'\a', ' ', '\x2', '\x2', '\x1505', '\x1506', '\x5', '\x228', '\x115', 
		'\x2', '\x1506', '\x1507', '\x5', '\x3B4', '\x1DB', '\x2', '\x1507', '\x1517', 
		'\x3', '\x2', '\x2', '\x2', '\x1508', '\x1509', '\a', '\x92', '\x2', '\x2', 
		'\x1509', '\x150A', '\x5', '\x228', '\x115', '\x2', '\x150A', '\x150B', 
		'\x5', '\x3B4', '\x1DB', '\x2', '\x150B', '\x1517', '\x3', '\x2', '\x2', 
		'\x2', '\x150C', '\x150D', '\a', '\x92', '\x2', '\x2', '\x150D', '\x150E', 
		'\x5', '\x52A', '\x296', '\x2', '\x150E', '\x150F', '\x5', '\x228', '\x115', 
		'\x2', '\x150F', '\x1510', '\x5', '\x3B4', '\x1DB', '\x2', '\x1510', '\x1517', 
		'\x3', '\x2', '\x2', '\x2', '\x1511', '\x1512', '\a', '\x92', '\x2', '\x2', 
		'\x1512', '\x1513', '\a', ' ', '\x2', '\x2', '\x1513', '\x1514', '\x5', 
		'\x228', '\x115', '\x2', '\x1514', '\x1515', '\x5', '\x3B4', '\x1DB', 
		'\x2', '\x1515', '\x1517', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x14D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1516', '\x14D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1516', '\x14D8', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x14DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1516', '\x14E0', '\x3', '\x2', '\x2', '\x2', '\x1516', 
		'\x14E4', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x14E8', '\x3', '\x2', 
		'\x2', '\x2', '\x1516', '\x14ED', '\x3', '\x2', '\x2', '\x2', '\x1516', 
		'\x14F2', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x14F6', '\x3', '\x2', 
		'\x2', '\x2', '\x1516', '\x14FA', '\x3', '\x2', '\x2', '\x2', '\x1516', 
		'\x14FE', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x1503', '\x3', '\x2', 
		'\x2', '\x2', '\x1516', '\x1508', '\x3', '\x2', '\x2', '\x2', '\x1516', 
		'\x150C', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x1511', '\x3', '\x2', 
		'\x2', '\x2', '\x1517', '\x225', '\x3', '\x2', '\x2', '\x2', '\x1518', 
		'\x1519', '\t', '\r', '\x2', '\x2', '\x1519', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x151A', '\x151D', '\x5', '\x226', '\x114', '\x2', '\x151B', '\x151D', 
		'\x3', '\x2', '\x2', '\x2', '\x151C', '\x151A', '\x3', '\x2', '\x2', '\x2', 
		'\x151C', '\x151B', '\x3', '\x2', '\x2', '\x2', '\x151D', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x151E', '\x151F', '\a', '\x43', '\x2', '\x2', '\x151F', 
		'\x1520', '\x5', '\x22E', '\x118', '\x2', '\x1520', '\x1521', '\a', 'R', 
		'\x2', '\x2', '\x1521', '\x1522', '\x5', '\x234', '\x11B', '\x2', '\x1522', 
		'\x1523', '\a', '`', '\x2', '\x2', '\x1523', '\x1524', '\x5', '\x236', 
		'\x11C', '\x2', '\x1524', '\x1525', '\x5', '\x23A', '\x11E', '\x2', '\x1525', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x1526', '\x1527', '\a', '\x136', 
		'\x2', '\x2', '\x1527', '\x1528', '\x5', '\x22E', '\x118', '\x2', '\x1528', 
		'\x1529', '\a', 'R', '\x2', '\x2', '\x1529', '\x152A', '\x5', '\x234', 
		'\x11B', '\x2', '\x152A', '\x152B', '\a', '\x42', '\x2', '\x2', '\x152B', 
		'\x152C', '\x5', '\x236', '\x11C', '\x2', '\x152C', '\x152D', '\x5', 'n', 
		'\x38', '\x2', '\x152D', '\x153A', '\x3', '\x2', '\x2', '\x2', '\x152E', 
		'\x152F', '\a', '\x136', '\x2', '\x2', '\x152F', '\x1530', '\a', '\x43', 
		'\x2', '\x2', '\x1530', '\x1531', '\a', '\x110', '\x2', '\x2', '\x1531', 
		'\x1532', '\a', '@', '\x2', '\x2', '\x1532', '\x1533', '\x5', '\x22E', 
		'\x118', '\x2', '\x1533', '\x1534', '\a', 'R', '\x2', '\x2', '\x1534', 
		'\x1535', '\x5', '\x234', '\x11B', '\x2', '\x1535', '\x1536', '\a', '\x42', 
		'\x2', '\x2', '\x1536', '\x1537', '\x5', '\x236', '\x11C', '\x2', '\x1537', 
		'\x1538', '\x5', 'n', '\x38', '\x2', '\x1538', '\x153A', '\x3', '\x2', 
		'\x2', '\x2', '\x1539', '\x1526', '\x3', '\x2', '\x2', '\x2', '\x1539', 
		'\x152E', '\x3', '\x2', '\x2', '\x2', '\x153A', '\x22D', '\x3', '\x2', 
		'\x2', '\x2', '\x153B', '\x154B', '\x5', '\x230', '\x119', '\x2', '\x153C', 
		'\x154B', '\a', ' ', '\x2', '\x2', '\x153D', '\x153E', '\a', ' ', '\x2', 
		'\x2', '\x153E', '\x154B', '\a', '\x11F', '\x2', '\x2', '\x153F', '\x1540', 
		'\a', ' ', '\x2', '\x2', '\x1540', '\x1541', '\a', '\x4', '\x2', '\x2', 
		'\x1541', '\x1542', '\x5', '\xDA', 'n', '\x2', '\x1542', '\x1543', '\a', 
		'\x5', '\x2', '\x2', '\x1543', '\x154B', '\x3', '\x2', '\x2', '\x2', '\x1544', 
		'\x1545', '\a', ' ', '\x2', '\x2', '\x1545', '\x1546', '\a', '\x11F', 
		'\x2', '\x2', '\x1546', '\x1547', '\a', '\x4', '\x2', '\x2', '\x1547', 
		'\x1548', '\x5', '\xDA', 'n', '\x2', '\x1548', '\x1549', '\a', '\x5', 
		'\x2', '\x2', '\x1549', '\x154B', '\x3', '\x2', '\x2', '\x2', '\x154A', 
		'\x153B', '\x3', '\x2', '\x2', '\x2', '\x154A', '\x153C', '\x3', '\x2', 
		'\x2', '\x2', '\x154A', '\x153D', '\x3', '\x2', '\x2', '\x2', '\x154A', 
		'\x153F', '\x3', '\x2', '\x2', '\x2', '\x154A', '\x1544', '\x3', '\x2', 
		'\x2', '\x2', '\x154B', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x154C', 
		'\x154D', '\b', '\x119', '\x1', '\x2', '\x154D', '\x154E', '\x5', '\x232', 
		'\x11A', '\x2', '\x154E', '\x1554', '\x3', '\x2', '\x2', '\x2', '\x154F', 
		'\x1550', '\f', '\x3', '\x2', '\x2', '\x1550', '\x1551', '\a', '\b', '\x2', 
		'\x2', '\x1551', '\x1553', '\x5', '\x232', '\x11A', '\x2', '\x1552', '\x154F', 
		'\x3', '\x2', '\x2', '\x2', '\x1553', '\x1556', '\x3', '\x2', '\x2', '\x2', 
		'\x1554', '\x1552', '\x3', '\x2', '\x2', '\x2', '\x1554', '\x1555', '\x3', 
		'\x2', '\x2', '\x2', '\x1555', '\x231', '\x3', '\x2', '\x2', '\x2', '\x1556', 
		'\x1554', '\x3', '\x2', '\x2', '\x2', '\x1557', '\x1558', '\a', 'Z', '\x2', 
		'\x2', '\x1558', '\x1561', '\x5', '\xD8', 'm', '\x2', '\x1559', '\x155A', 
		'\a', 'X', '\x2', '\x2', '\x155A', '\x1561', '\x5', '\xD8', 'm', '\x2', 
		'\x155B', '\x155C', '\a', '\x30', '\x2', '\x2', '\x155C', '\x1561', '\x5', 
		'\xD8', 'm', '\x2', '\x155D', '\x155E', '\x5', '\x532', '\x29A', '\x2', 
		'\x155E', '\x155F', '\x5', '\xD8', 'm', '\x2', '\x155F', '\x1561', '\x3', 
		'\x2', '\x2', '\x2', '\x1560', '\x1557', '\x3', '\x2', '\x2', '\x2', '\x1560', 
		'\x1559', '\x3', '\x2', '\x2', '\x2', '\x1560', '\x155B', '\x3', '\x2', 
		'\x2', '\x2', '\x1560', '\x155D', '\x3', '\x2', '\x2', '\x2', '\x1561', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x1562', '\x159D', '\x5', '\x50C', 
		'\x287', '\x2', '\x1563', '\x1564', '\a', '^', '\x2', '\x2', '\x1564', 
		'\x159D', '\x5', '\x50C', '\x287', '\x2', '\x1565', '\x1566', '\a', '\x141', 
		'\x2', '\x2', '\x1566', '\x159D', '\x5', '\x50C', '\x287', '\x2', '\x1567', 
		'\x1568', '\a', '\x41', '\x2', '\x2', '\x1568', '\x1569', '\a', '\xB0', 
		'\x2', '\x2', '\x1569', '\x156A', '\a', '\x176', '\x2', '\x2', '\x156A', 
		'\x159D', '\x5', '\x510', '\x289', '\x2', '\x156B', '\x156C', '\a', '\x41', 
		'\x2', '\x2', '\x156C', '\x156D', '\a', '\x144', '\x2', '\x2', '\x156D', 
		'\x159D', '\x5', '\x510', '\x289', '\x2', '\x156E', '\x156F', '\a', '\xD5', 
		'\x2', '\x2', '\x156F', '\x159D', '\x5', '\x272', '\x13A', '\x2', '\x1570', 
		'\x1571', '\a', '\x121', '\x2', '\x2', '\x1571', '\x159D', '\x5', '\x272', 
		'\x13A', '\x2', '\x1572', '\x1573', '\a', '\x1B4', '\x2', '\x2', '\x1573', 
		'\x159D', '\x5', '\x272', '\x13A', '\x2', '\x1574', '\x1575', '\a', '\xB1', 
		'\x2', '\x2', '\x1575', '\x159D', '\x5', '\x510', '\x289', '\x2', '\x1576', 
		'\x1577', '\a', '\xBF', '\x2', '\x2', '\x1577', '\x159D', '\x5', '\x20C', 
		'\x107', '\x2', '\x1578', '\x1579', '\a', '\xF0', '\x2', '\x2', '\x1579', 
		'\x159D', '\x5', '\x510', '\x289', '\x2', '\x157A', '\x157B', '\a', '\xF1', 
		'\x2', '\x2', '\x157B', '\x157C', '\a', '\x10B', '\x2', '\x2', '\x157C', 
		'\x159D', '\x5', '\x128', '\x95', '\x2', '\x157D', '\x157E', '\a', '\x13C', 
		'\x2', '\x2', '\x157E', '\x159D', '\x5', '\x510', '\x289', '\x2', '\x157F', 
		'\x1580', '\a', '\x158', '\x2', '\x2', '\x1580', '\x159D', '\x5', '\x510', 
		'\x289', '\x2', '\x1581', '\x1582', '\a', '\x161', '\x2', '\x2', '\x1582', 
		'\x159D', '\x5', '\x20C', '\x107', '\x2', '\x1583', '\x1584', '\a', ' ', 
		'\x2', '\x2', '\x1584', '\x1585', '\a', '\x157', '\x2', '\x2', '\x1585', 
		'\x1586', '\a', '\x46', '\x2', '\x2', '\x1586', '\x1587', '\a', '\x13C', 
		'\x2', '\x2', '\x1587', '\x159D', '\x5', '\x510', '\x289', '\x2', '\x1588', 
		'\x1589', '\a', ' ', '\x2', '\x2', '\x1589', '\x158A', '\a', '\x142', 
		'\x2', '\x2', '\x158A', '\x158B', '\a', '\x46', '\x2', '\x2', '\x158B', 
		'\x158C', '\a', '\x13C', '\x2', '\x2', '\x158C', '\x159D', '\x5', '\x510', 
		'\x289', '\x2', '\x158D', '\x158E', '\a', ' ', '\x2', '\x2', '\x158E', 
		'\x158F', '\a', '\xD6', '\x2', '\x2', '\x158F', '\x1590', '\a', '\x46', 
		'\x2', '\x2', '\x1590', '\x1591', '\a', '\x13C', '\x2', '\x2', '\x1591', 
		'\x159D', '\x5', '\x510', '\x289', '\x2', '\x1592', '\x1593', '\a', ' ', 
		'\x2', '\x2', '\x1593', '\x1594', '\a', '\x1C3', '\x2', '\x2', '\x1594', 
		'\x1595', '\a', '\x46', '\x2', '\x2', '\x1595', '\x1596', '\a', '\x13C', 
		'\x2', '\x2', '\x1596', '\x159D', '\x5', '\x510', '\x289', '\x2', '\x1597', 
		'\x1598', '\a', ' ', '\x2', '\x2', '\x1598', '\x1599', '\a', '\x1C1', 
		'\x2', '\x2', '\x1599', '\x159A', '\a', '\x46', '\x2', '\x2', '\x159A', 
		'\x159B', '\a', '\x13C', '\x2', '\x2', '\x159B', '\x159D', '\x5', '\x510', 
		'\x289', '\x2', '\x159C', '\x1562', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x1563', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x1565', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x1567', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x156B', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x156E', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x1570', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x1572', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x1574', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x1576', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x1578', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x157A', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x157D', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x157F', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x1581', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x1583', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x1588', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x158D', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x1592', '\x3', '\x2', '\x2', '\x2', '\x159C', 
		'\x1597', '\x3', '\x2', '\x2', '\x2', '\x159D', '\x235', '\x3', '\x2', 
		'\x2', '\x2', '\x159E', '\x159F', '\b', '\x11C', '\x1', '\x2', '\x159F', 
		'\x15A0', '\x5', '\x238', '\x11D', '\x2', '\x15A0', '\x15A6', '\x3', '\x2', 
		'\x2', '\x2', '\x15A1', '\x15A2', '\f', '\x3', '\x2', '\x2', '\x15A2', 
		'\x15A3', '\a', '\b', '\x2', '\x2', '\x15A3', '\x15A5', '\x5', '\x238', 
		'\x11D', '\x2', '\x15A4', '\x15A1', '\x3', '\x2', '\x2', '\x2', '\x15A5', 
		'\x15A8', '\x3', '\x2', '\x2', '\x2', '\x15A6', '\x15A4', '\x3', '\x2', 
		'\x2', '\x2', '\x15A6', '\x15A7', '\x3', '\x2', '\x2', '\x2', '\x15A7', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x15A8', '\x15A6', '\x3', '\x2', 
		'\x2', '\x2', '\x15A9', '\x15AD', '\x5', '\x52E', '\x298', '\x2', '\x15AA', 
		'\x15AB', '\a', '\x44', '\x2', '\x2', '\x15AB', '\x15AD', '\x5', '\x52E', 
		'\x298', '\x2', '\x15AC', '\x15A9', '\x3', '\x2', '\x2', '\x2', '\x15AC', 
		'\x15AA', '\x3', '\x2', '\x2', '\x2', '\x15AD', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x15AE', '\x15AF', '\a', 'k', '\x2', '\x2', '\x15AF', '\x15B0', 
		'\a', '\x43', '\x2', '\x2', '\x15B0', '\x15B3', '\a', '\x110', '\x2', 
		'\x2', '\x15B1', '\x15B3', '\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15AE', 
		'\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15B1', '\x3', '\x2', '\x2', '\x2', 
		'\x15B3', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x15B4', '\x15B5', '\a', 
		'\x43', '\x2', '\x2', '\x15B5', '\x15B6', '\x5', '\x230', '\x119', '\x2', 
		'\x15B6', '\x15B7', '\a', '`', '\x2', '\x2', '\x15B7', '\x15B8', '\x5', 
		'\x530', '\x299', '\x2', '\x15B8', '\x15B9', '\x5', '\x240', '\x121', 
		'\x2', '\x15B9', '\x15BA', '\x5', '\x242', '\x122', '\x2', '\x15BA', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x15BB', '\x15BC', '\a', '\x136', '\x2', 
		'\x2', '\x15BC', '\x15BD', '\x5', '\x230', '\x119', '\x2', '\x15BD', '\x15BE', 
		'\a', '\x42', '\x2', '\x2', '\x15BE', '\x15BF', '\x5', '\x530', '\x299', 
		'\x2', '\x15BF', '\x15C0', '\x5', '\x242', '\x122', '\x2', '\x15C0', '\x15C1', 
		'\x5', 'n', '\x38', '\x2', '\x15C1', '\x15CD', '\x3', '\x2', '\x2', '\x2', 
		'\x15C2', '\x15C3', '\a', '\x136', '\x2', '\x2', '\x15C3', '\x15C4', '\a', 
		'\x88', '\x2', '\x2', '\x15C4', '\x15C5', '\a', '\x110', '\x2', '\x2', 
		'\x15C5', '\x15C6', '\a', '@', '\x2', '\x2', '\x15C6', '\x15C7', '\x5', 
		'\x230', '\x119', '\x2', '\x15C7', '\x15C8', '\a', '\x42', '\x2', '\x2', 
		'\x15C8', '\x15C9', '\x5', '\x530', '\x299', '\x2', '\x15C9', '\x15CA', 
		'\x5', '\x242', '\x122', '\x2', '\x15CA', '\x15CB', '\x5', 'n', '\x38', 
		'\x2', '\x15CB', '\x15CD', '\x3', '\x2', '\x2', '\x2', '\x15CC', '\x15BB', 
		'\x3', '\x2', '\x2', '\x2', '\x15CC', '\x15C2', '\x3', '\x2', '\x2', '\x2', 
		'\x15CD', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x15CE', '\x15CF', '\a', 
		'k', '\x2', '\x2', '\x15CF', '\x15D0', '\a', '\x88', '\x2', '\x2', '\x15D0', 
		'\x15D3', '\a', '\x110', '\x2', '\x2', '\x15D1', '\x15D3', '\x3', '\x2', 
		'\x2', '\x2', '\x15D2', '\x15CE', '\x3', '\x2', '\x2', '\x2', '\x15D2', 
		'\x15D1', '\x3', '\x2', '\x2', '\x2', '\x15D3', '\x241', '\x3', '\x2', 
		'\x2', '\x2', '\x15D4', '\x15D5', '\a', '\xD8', '\x2', '\x2', '\x15D5', 
		'\x15D6', '\a', '\x95', '\x2', '\x2', '\x15D6', '\x15D9', '\x5', '\x52E', 
		'\x298', '\x2', '\x15D7', '\x15D9', '\x3', '\x2', '\x2', '\x2', '\x15D8', 
		'\x15D4', '\x3', '\x2', '\x2', '\x2', '\x15D8', '\x15D7', '\x3', '\x2', 
		'\x2', '\x2', '\x15D9', '\x243', '\x3', '\x2', '\x2', '\x2', '\x15DA', 
		'\x15DB', '\a', '\x8C', '\x2', '\x2', '\x15DB', '\x15DC', '\a', '\x37', 
		'\x2', '\x2', '\x15DC', '\x15DD', '\a', '\x11F', '\x2', '\x2', '\x15DD', 
		'\x15DE', '\x5', '\x246', '\x124', '\x2', '\x15DE', '\x15DF', '\x5', '\x24A', 
		'\x126', '\x2', '\x15DF', '\x245', '\x3', '\x2', '\x2', '\x2', '\x15E0', 
		'\x15E5', '\b', '\x124', '\x1', '\x2', '\x15E1', '\x15E2', '\f', '\x4', 
		'\x2', '\x2', '\x15E2', '\x15E4', '\x5', '\x248', '\x125', '\x2', '\x15E3', 
		'\x15E1', '\x3', '\x2', '\x2', '\x2', '\x15E4', '\x15E7', '\x3', '\x2', 
		'\x2', '\x2', '\x15E5', '\x15E3', '\x3', '\x2', '\x2', '\x2', '\x15E5', 
		'\x15E6', '\x3', '\x2', '\x2', '\x2', '\x15E6', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\x15E7', '\x15E5', '\x3', '\x2', '\x2', '\x2', '\x15E8', 
		'\x15E9', '\a', '\x46', '\x2', '\x2', '\x15E9', '\x15EA', '\a', '\x13C', 
		'\x2', '\x2', '\x15EA', '\x15F2', '\x5', '\x510', '\x289', '\x2', '\x15EB', 
		'\x15EC', '\a', '@', '\x2', '\x2', '\x15EC', '\x15ED', '\a', '\x137', 
		'\x2', '\x2', '\x15ED', '\x15F2', '\x5', '\x530', '\x299', '\x2', '\x15EE', 
		'\x15EF', '\a', '@', '\x2', '\x2', '\x15EF', '\x15F0', '\a', '\x65', '\x2', 
		'\x2', '\x15F0', '\x15F2', '\x5', '\x530', '\x299', '\x2', '\x15F1', '\x15E8', 
		'\x3', '\x2', '\x2', '\x2', '\x15F1', '\x15EB', '\x3', '\x2', '\x2', '\x2', 
		'\x15F1', '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15F2', '\x249', '\x3', 
		'\x2', '\x2', '\x2', '\x15F3', '\x15F4', '\a', '\x43', '\x2', '\x2', '\x15F4', 
		'\x15F5', '\x5', '\x22E', '\x118', '\x2', '\x15F5', '\x15F6', '\a', 'R', 
		'\x2', '\x2', '\x15F6', '\x15F7', '\x5', '\x24C', '\x127', '\x2', '\x15F7', 
		'\x15F8', '\a', '`', '\x2', '\x2', '\x15F8', '\x15F9', '\x5', '\x236', 
		'\x11C', '\x2', '\x15F9', '\x15FA', '\x5', '\x23A', '\x11E', '\x2', '\x15FA', 
		'\x160F', '\x3', '\x2', '\x2', '\x2', '\x15FB', '\x15FC', '\a', '\x136', 
		'\x2', '\x2', '\x15FC', '\x15FD', '\x5', '\x22E', '\x118', '\x2', '\x15FD', 
		'\x15FE', '\a', 'R', '\x2', '\x2', '\x15FE', '\x15FF', '\x5', '\x24C', 
		'\x127', '\x2', '\x15FF', '\x1600', '\a', '\x42', '\x2', '\x2', '\x1600', 
		'\x1601', '\x5', '\x236', '\x11C', '\x2', '\x1601', '\x1602', '\x5', 'n', 
		'\x38', '\x2', '\x1602', '\x160F', '\x3', '\x2', '\x2', '\x2', '\x1603', 
		'\x1604', '\a', '\x136', '\x2', '\x2', '\x1604', '\x1605', '\a', '\x43', 
		'\x2', '\x2', '\x1605', '\x1606', '\a', '\x110', '\x2', '\x2', '\x1606', 
		'\x1607', '\a', '@', '\x2', '\x2', '\x1607', '\x1608', '\x5', '\x22E', 
		'\x118', '\x2', '\x1608', '\x1609', '\a', 'R', '\x2', '\x2', '\x1609', 
		'\x160A', '\x5', '\x24C', '\x127', '\x2', '\x160A', '\x160B', '\a', '\x42', 
		'\x2', '\x2', '\x160B', '\x160C', '\x5', '\x236', '\x11C', '\x2', '\x160C', 
		'\x160D', '\x5', 'n', '\x38', '\x2', '\x160D', '\x160F', '\x3', '\x2', 
		'\x2', '\x2', '\x160E', '\x15F3', '\x3', '\x2', '\x2', '\x2', '\x160E', 
		'\x15FB', '\x3', '\x2', '\x2', '\x2', '\x160E', '\x1603', '\x3', '\x2', 
		'\x2', '\x2', '\x160F', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x1610', 
		'\x1611', '\t', '\xE', '\x2', '\x2', '\x1611', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', '\x1612', '\x1613', '\a', '\x30', '\x2', '\x2', '\x1613', 
		'\x1614', '\x5', '\x250', '\x129', '\x2', '\x1614', '\x1615', '\a', '\xE4', 
		'\x2', '\x2', '\x1615', '\x1616', '\x5', '\x252', '\x12A', '\x2', '\x1616', 
		'\x1617', '\x5', '\x254', '\x12B', '\x2', '\x1617', '\x1618', '\a', 'R', 
		'\x2', '\x2', '\x1618', '\x1619', '\x5', '\x42C', '\x217', '\x2', '\x1619', 
		'\x161A', '\x5', '\x256', '\x12C', '\x2', '\x161A', '\x161B', '\a', '\x4', 
		'\x2', '\x2', '\x161B', '\x161C', '\x5', '\x258', '\x12D', '\x2', '\x161C', 
		'\x161D', '\a', '\x5', '\x2', '\x2', '\x161D', '\x161E', '\x5', '\x25E', 
		'\x130', '\x2', '\x161E', '\x161F', '\x5', 'x', '=', '\x2', '\x161F', 
		'\x1620', '\x5', '\x100', '\x81', '\x2', '\x1620', '\x1621', '\x5', '\x440', 
		'\x221', '\x2', '\x1621', '\x1636', '\x3', '\x2', '\x2', '\x2', '\x1622', 
		'\x1623', '\a', '\x30', '\x2', '\x2', '\x1623', '\x1624', '\x5', '\x250', 
		'\x129', '\x2', '\x1624', '\x1625', '\a', '\xE4', '\x2', '\x2', '\x1625', 
		'\x1626', '\x5', '\x252', '\x12A', '\x2', '\x1626', '\x1627', '\a', '\xDE', 
		'\x2', '\x2', '\x1627', '\x1628', '\a', 'O', '\x2', '\x2', '\x1628', '\x1629', 
		'\a', '\x185', '\x2', '\x2', '\x1629', '\x162A', '\x5', '\x512', '\x28A', 
		'\x2', '\x162A', '\x162B', '\a', 'R', '\x2', '\x2', '\x162B', '\x162C', 
		'\x5', '\x42C', '\x217', '\x2', '\x162C', '\x162D', '\x5', '\x256', '\x12C', 
		'\x2', '\x162D', '\x162E', '\a', '\x4', '\x2', '\x2', '\x162E', '\x162F', 
		'\x5', '\x258', '\x12D', '\x2', '\x162F', '\x1630', '\a', '\x5', '\x2', 
		'\x2', '\x1630', '\x1631', '\x5', '\x25E', '\x130', '\x2', '\x1631', '\x1632', 
		'\x5', 'x', '=', '\x2', '\x1632', '\x1633', '\x5', '\x100', '\x81', '\x2', 
		'\x1633', '\x1634', '\x5', '\x440', '\x221', '\x2', '\x1634', '\x1636', 
		'\x3', '\x2', '\x2', '\x2', '\x1635', '\x1612', '\x3', '\x2', '\x2', '\x2', 
		'\x1635', '\x1622', '\x3', '\x2', '\x2', '\x2', '\x1636', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x1637', '\x163A', '\a', '\x64', '\x2', '\x2', '\x1638', 
		'\x163A', '\x3', '\x2', '\x2', '\x2', '\x1639', '\x1637', '\x3', '\x2', 
		'\x2', '\x2', '\x1639', '\x1638', '\x3', '\x2', '\x2', '\x2', '\x163A', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x163B', '\x163E', '\a', 'o', '\x2', 
		'\x2', '\x163C', '\x163E', '\x3', '\x2', '\x2', '\x2', '\x163D', '\x163B', 
		'\x3', '\x2', '\x2', '\x2', '\x163D', '\x163C', '\x3', '\x2', '\x2', '\x2', 
		'\x163E', '\x253', '\x3', '\x2', '\x2', '\x2', '\x163F', '\x1642', '\x5', 
		'\x512', '\x28A', '\x2', '\x1640', '\x1642', '\x3', '\x2', '\x2', '\x2', 
		'\x1641', '\x163F', '\x3', '\x2', '\x2', '\x2', '\x1641', '\x1640', '\x3', 
		'\x2', '\x2', '\x2', '\x1642', '\x255', '\x3', '\x2', '\x2', '\x2', '\x1643', 
		'\x1644', '\a', '\x66', '\x2', '\x2', '\x1644', '\x1647', '\x5', '\x512', 
		'\x28A', '\x2', '\x1645', '\x1647', '\x3', '\x2', '\x2', '\x2', '\x1646', 
		'\x1643', '\x3', '\x2', '\x2', '\x2', '\x1646', '\x1645', '\x3', '\x2', 
		'\x2', '\x2', '\x1647', '\x257', '\x3', '\x2', '\x2', '\x2', '\x1648', 
		'\x1649', '\b', '\x12D', '\x1', '\x2', '\x1649', '\x164A', '\x5', '\x25C', 
		'\x12F', '\x2', '\x164A', '\x1650', '\x3', '\x2', '\x2', '\x2', '\x164B', 
		'\x164C', '\f', '\x3', '\x2', '\x2', '\x164C', '\x164D', '\a', '\b', '\x2', 
		'\x2', '\x164D', '\x164F', '\x5', '\x25C', '\x12F', '\x2', '\x164E', '\x164B', 
		'\x3', '\x2', '\x2', '\x2', '\x164F', '\x1652', '\x3', '\x2', '\x2', '\x2', 
		'\x1650', '\x164E', '\x3', '\x2', '\x2', '\x2', '\x1650', '\x1651', '\x3', 
		'\x2', '\x2', '\x2', '\x1651', '\x259', '\x3', '\x2', '\x2', '\x2', '\x1652', 
		'\x1650', '\x3', '\x2', '\x2', '\x2', '\x1653', '\x1654', '\x5', '\x262', 
		'\x132', '\x2', '\x1654', '\x1655', '\x5', '\x264', '\x133', '\x2', '\x1655', 
		'\x1656', '\x5', '\x266', '\x134', '\x2', '\x1656', '\x1657', '\x5', '\x268', 
		'\x135', '\x2', '\x1657', '\x165F', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x1659', '\x5', '\x262', '\x132', '\x2', '\x1659', '\x165A', '\x5', '\x20E', 
		'\x108', '\x2', '\x165A', '\x165B', '\x5', 'v', '<', '\x2', '\x165B', 
		'\x165C', '\x5', '\x266', '\x134', '\x2', '\x165C', '\x165D', '\x5', '\x268', 
		'\x135', '\x2', '\x165D', '\x165F', '\x3', '\x2', '\x2', '\x2', '\x165E', 
		'\x1653', '\x3', '\x2', '\x2', '\x2', '\x165E', '\x1658', '\x3', '\x2', 
		'\x2', '\x2', '\x165F', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x1660', 
		'\x1661', '\x5', '\x532', '\x29A', '\x2', '\x1661', '\x1662', '\x5', '\x25A', 
		'\x12E', '\x2', '\x1662', '\x166C', '\x3', '\x2', '\x2', '\x2', '\x1663', 
		'\x1664', '\x5', '\x492', '\x24A', '\x2', '\x1664', '\x1665', '\x5', '\x25A', 
		'\x12E', '\x2', '\x1665', '\x166C', '\x3', '\x2', '\x2', '\x2', '\x1666', 
		'\x1667', '\a', '\x4', '\x2', '\x2', '\x1667', '\x1668', '\x5', '\x484', 
		'\x243', '\x2', '\x1668', '\x1669', '\a', '\x5', '\x2', '\x2', '\x1669', 
		'\x166A', '\x5', '\x25A', '\x12E', '\x2', '\x166A', '\x166C', '\x3', '\x2', 
		'\x2', '\x2', '\x166B', '\x1660', '\x3', '\x2', '\x2', '\x2', '\x166B', 
		'\x1663', '\x3', '\x2', '\x2', '\x2', '\x166B', '\x1666', '\x3', '\x2', 
		'\x2', '\x2', '\x166C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x166D', 
		'\x166E', '\a', '\x1B3', '\x2', '\x2', '\x166E', '\x166F', '\a', '\x4', 
		'\x2', '\x2', '\x166F', '\x1670', '\x5', '\x260', '\x131', '\x2', '\x1670', 
		'\x1671', '\a', '\x5', '\x2', '\x2', '\x1671', '\x1674', '\x3', '\x2', 
		'\x2', '\x2', '\x1672', '\x1674', '\x3', '\x2', '\x2', '\x2', '\x1673', 
		'\x166D', '\x3', '\x2', '\x2', '\x2', '\x1673', '\x1672', '\x3', '\x2', 
		'\x2', '\x2', '\x1674', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x1675', 
		'\x1676', '\b', '\x131', '\x1', '\x2', '\x1676', '\x1677', '\x5', '\x25C', 
		'\x12F', '\x2', '\x1677', '\x167D', '\x3', '\x2', '\x2', '\x2', '\x1678', 
		'\x1679', '\f', '\x3', '\x2', '\x2', '\x1679', '\x167A', '\a', '\b', '\x2', 
		'\x2', '\x167A', '\x167C', '\x5', '\x25C', '\x12F', '\x2', '\x167B', '\x1678', 
		'\x3', '\x2', '\x2', '\x2', '\x167C', '\x167F', '\x3', '\x2', '\x2', '\x2', 
		'\x167D', '\x167B', '\x3', '\x2', '\x2', '\x2', '\x167D', '\x167E', '\x3', 
		'\x2', '\x2', '\x2', '\x167E', '\x261', '\x3', '\x2', '\x2', '\x2', '\x167F', 
		'\x167D', '\x3', '\x2', '\x2', '\x2', '\x1680', '\x1681', '\a', '-', '\x2', 
		'\x2', '\x1681', '\x1684', '\x5', '\x20E', '\x108', '\x2', '\x1682', '\x1684', 
		'\x3', '\x2', '\x2', '\x2', '\x1683', '\x1680', '\x3', '\x2', '\x2', '\x2', 
		'\x1683', '\x1682', '\x3', '\x2', '\x2', '\x2', '\x1684', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x1685', '\x1688', '\x5', '\x20E', '\x108', '\x2', 
		'\x1686', '\x1688', '\x3', '\x2', '\x2', '\x2', '\x1687', '\x1685', '\x3', 
		'\x2', '\x2', '\x2', '\x1687', '\x1686', '\x3', '\x2', '\x2', '\x2', '\x1688', 
		'\x265', '\x3', '\x2', '\x2', '\x2', '\x1689', '\x168D', '\a', '\'', '\x2', 
		'\x2', '\x168A', '\x168D', '\a', '\x39', '\x2', '\x2', '\x168B', '\x168D', 
		'\x3', '\x2', '\x2', '\x2', '\x168C', '\x1689', '\x3', '\x2', '\x2', '\x2', 
		'\x168C', '\x168A', '\x3', '\x2', '\x2', '\x2', '\x168C', '\x168B', '\x3', 
		'\x2', '\x2', '\x2', '\x168D', '\x267', '\x3', '\x2', '\x2', '\x2', '\x168E', 
		'\x168F', '\a', '\x10A', '\x2', '\x2', '\x168F', '\x1694', '\a', '\xD1', 
		'\x2', '\x2', '\x1690', '\x1691', '\a', '\x10A', '\x2', '\x2', '\x1691', 
		'\x1694', '\a', '\xF2', '\x2', '\x2', '\x1692', '\x1694', '\x3', '\x2', 
		'\x2', '\x2', '\x1693', '\x168E', '\x3', '\x2', '\x2', '\x2', '\x1693', 
		'\x1690', '\x3', '\x2', '\x2', '\x2', '\x1693', '\x1692', '\x3', '\x2', 
		'\x2', '\x2', '\x1694', '\x269', '\x3', '\x2', '\x2', '\x2', '\x1695', 
		'\x1696', '\a', '\x30', '\x2', '\x2', '\x1696', '\x1697', '\x5', '\x26C', 
		'\x137', '\x2', '\x1697', '\x1698', '\a', '\xD5', '\x2', '\x2', '\x1698', 
		'\x1699', '\x5', '\x518', '\x28D', '\x2', '\x1699', '\x169A', '\x5', '\x276', 
		'\x13C', '\x2', '\x169A', '\x169B', '\a', '\x135', '\x2', '\x2', '\x169B', 
		'\x169C', '\x5', '\x280', '\x141', '\x2', '\x169C', '\x169D', '\x5', '\x290', 
		'\x149', '\x2', '\x169D', '\x16B9', '\x3', '\x2', '\x2', '\x2', '\x169E', 
		'\x169F', '\a', '\x30', '\x2', '\x2', '\x169F', '\x16A0', '\x5', '\x26C', 
		'\x137', '\x2', '\x16A0', '\x16A1', '\a', '\xD5', '\x2', '\x2', '\x16A1', 
		'\x16A2', '\x5', '\x518', '\x28D', '\x2', '\x16A2', '\x16A3', '\x5', '\x276', 
		'\x13C', '\x2', '\x16A3', '\x16A4', '\a', '\x135', '\x2', '\x2', '\x16A4', 
		'\x16A5', '\a', '^', '\x2', '\x2', '\x16A5', '\x16A6', '\a', '\x4', '\x2', 
		'\x2', '\x16A6', '\x16A7', '\x5', '\x29E', '\x150', '\x2', '\x16A7', '\x16A8', 
		'\a', '\x5', '\x2', '\x2', '\x16A8', '\x16A9', '\x5', '\x290', '\x149', 
		'\x2', '\x16A9', '\x16B9', '\x3', '\x2', '\x2', '\x2', '\x16AA', '\x16AB', 
		'\a', '\x30', '\x2', '\x2', '\x16AB', '\x16AC', '\x5', '\x26C', '\x137', 
		'\x2', '\x16AC', '\x16AD', '\a', '\xD5', '\x2', '\x2', '\x16AD', '\x16AE', 
		'\x5', '\x518', '\x28D', '\x2', '\x16AE', '\x16AF', '\x5', '\x276', '\x13C', 
		'\x2', '\x16AF', '\x16B0', '\x5', '\x290', '\x149', '\x2', '\x16B0', '\x16B9', 
		'\x3', '\x2', '\x2', '\x2', '\x16B1', '\x16B2', '\a', '\x30', '\x2', '\x2', 
		'\x16B2', '\x16B3', '\x5', '\x26C', '\x137', '\x2', '\x16B3', '\x16B4', 
		'\a', '\x121', '\x2', '\x2', '\x16B4', '\x16B5', '\x5', '\x518', '\x28D', 
		'\x2', '\x16B5', '\x16B6', '\x5', '\x276', '\x13C', '\x2', '\x16B6', '\x16B7', 
		'\x5', '\x290', '\x149', '\x2', '\x16B7', '\x16B9', '\x3', '\x2', '\x2', 
		'\x2', '\x16B8', '\x1695', '\x3', '\x2', '\x2', '\x2', '\x16B8', '\x169E', 
		'\x3', '\x2', '\x2', '\x2', '\x16B8', '\x16AA', '\x3', '\x2', '\x2', '\x2', 
		'\x16B8', '\x16B1', '\x3', '\x2', '\x2', '\x2', '\x16B9', '\x26B', '\x3', 
		'\x2', '\x2', '\x2', '\x16BA', '\x16BB', '\a', 'T', '\x2', '\x2', '\x16BB', 
		'\x16BE', '\a', '\x130', '\x2', '\x2', '\x16BC', '\x16BE', '\x3', '\x2', 
		'\x2', '\x2', '\x16BD', '\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16BD', 
		'\x16BC', '\x3', '\x2', '\x2', '\x2', '\x16BE', '\x26D', '\x3', '\x2', 
		'\x2', '\x2', '\x16BF', '\x16C0', '\a', '\x4', '\x2', '\x2', '\x16C0', 
		'\x16C1', '\x5', '\x270', '\x139', '\x2', '\x16C1', '\x16C2', '\a', '\x5', 
		'\x2', '\x2', '\x16C2', '\x16C6', '\x3', '\x2', '\x2', '\x2', '\x16C3', 
		'\x16C4', '\a', '\x4', '\x2', '\x2', '\x16C4', '\x16C6', '\a', '\x5', 
		'\x2', '\x2', '\x16C5', '\x16BF', '\x3', '\x2', '\x2', '\x2', '\x16C5', 
		'\x16C3', '\x3', '\x2', '\x2', '\x2', '\x16C6', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '\x16C7', '\x16C8', '\b', '\x139', '\x1', '\x2', '\x16C8', 
		'\x16C9', '\x5', '\x27A', '\x13E', '\x2', '\x16C9', '\x16CF', '\x3', '\x2', 
		'\x2', '\x2', '\x16CA', '\x16CB', '\f', '\x3', '\x2', '\x2', '\x16CB', 
		'\x16CC', '\a', '\b', '\x2', '\x2', '\x16CC', '\x16CE', '\x5', '\x27A', 
		'\x13E', '\x2', '\x16CD', '\x16CA', '\x3', '\x2', '\x2', '\x2', '\x16CE', 
		'\x16D1', '\x3', '\x2', '\x2', '\x2', '\x16CF', '\x16CD', '\x3', '\x2', 
		'\x2', '\x2', '\x16CF', '\x16D0', '\x3', '\x2', '\x2', '\x2', '\x16D0', 
		'\x271', '\x3', '\x2', '\x2', '\x2', '\x16D1', '\x16CF', '\x3', '\x2', 
		'\x2', '\x2', '\x16D2', '\x16D3', '\b', '\x13A', '\x1', '\x2', '\x16D3', 
		'\x16D4', '\x5', '\x274', '\x13B', '\x2', '\x16D4', '\x16DA', '\x3', '\x2', 
		'\x2', '\x2', '\x16D5', '\x16D6', '\f', '\x3', '\x2', '\x2', '\x16D6', 
		'\x16D7', '\a', '\b', '\x2', '\x2', '\x16D7', '\x16D9', '\x5', '\x274', 
		'\x13B', '\x2', '\x16D8', '\x16D5', '\x3', '\x2', '\x2', '\x2', '\x16D9', 
		'\x16DC', '\x3', '\x2', '\x2', '\x2', '\x16DA', '\x16D8', '\x3', '\x2', 
		'\x2', '\x2', '\x16DA', '\x16DB', '\x3', '\x2', '\x2', '\x2', '\x16DB', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x16DC', '\x16DA', '\x3', '\x2', 
		'\x2', '\x2', '\x16DD', '\x16DE', '\x5', '\x518', '\x28D', '\x2', '\x16DE', 
		'\x16DF', '\x5', '\x26E', '\x138', '\x2', '\x16DF', '\x16E6', '\x3', '\x2', 
		'\x2', '\x2', '\x16E0', '\x16E6', '\x5', '\x542', '\x2A2', '\x2', '\x16E1', 
		'\x16E6', '\x5', '\x532', '\x29A', '\x2', '\x16E2', '\x16E3', '\x5', '\x532', 
		'\x29A', '\x2', '\x16E3', '\x16E4', '\x5', '\x500', '\x281', '\x2', '\x16E4', 
		'\x16E6', '\x3', '\x2', '\x2', '\x2', '\x16E5', '\x16DD', '\x3', '\x2', 
		'\x2', '\x2', '\x16E5', '\x16E0', '\x3', '\x2', '\x2', '\x2', '\x16E5', 
		'\x16E1', '\x3', '\x2', '\x2', '\x2', '\x16E5', '\x16E2', '\x3', '\x2', 
		'\x2', '\x2', '\x16E6', '\x275', '\x3', '\x2', '\x2', '\x2', '\x16E7', 
		'\x16E8', '\a', '\x4', '\x2', '\x2', '\x16E8', '\x16E9', '\x5', '\x278', 
		'\x13D', '\x2', '\x16E9', '\x16EA', '\a', '\x5', '\x2', '\x2', '\x16EA', 
		'\x16EE', '\x3', '\x2', '\x2', '\x2', '\x16EB', '\x16EC', '\a', '\x4', 
		'\x2', '\x2', '\x16EC', '\x16EE', '\a', '\x5', '\x2', '\x2', '\x16ED', 
		'\x16E7', '\x3', '\x2', '\x2', '\x2', '\x16ED', '\x16EB', '\x3', '\x2', 
		'\x2', '\x2', '\x16EE', '\x277', '\x3', '\x2', '\x2', '\x2', '\x16EF', 
		'\x16F0', '\b', '\x13D', '\x1', '\x2', '\x16F0', '\x16F1', '\x5', '\x284', 
		'\x143', '\x2', '\x16F1', '\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16F2', 
		'\x16F3', '\f', '\x3', '\x2', '\x2', '\x16F3', '\x16F4', '\a', '\b', '\x2', 
		'\x2', '\x16F4', '\x16F6', '\x5', '\x284', '\x143', '\x2', '\x16F5', '\x16F2', 
		'\x3', '\x2', '\x2', '\x2', '\x16F6', '\x16F9', '\x3', '\x2', '\x2', '\x2', 
		'\x16F7', '\x16F5', '\x3', '\x2', '\x2', '\x2', '\x16F7', '\x16F8', '\x3', 
		'\x2', '\x2', '\x2', '\x16F8', '\x279', '\x3', '\x2', '\x2', '\x2', '\x16F9', 
		'\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16FA', '\x16FB', '\x5', '\x27C', 
		'\x13F', '\x2', '\x16FB', '\x16FC', '\x5', '\x27E', '\x140', '\x2', '\x16FC', 
		'\x16FD', '\x5', '\x282', '\x142', '\x2', '\x16FD', '\x170A', '\x3', '\x2', 
		'\x2', '\x2', '\x16FE', '\x16FF', '\x5', '\x27E', '\x140', '\x2', '\x16FF', 
		'\x1700', '\x5', '\x27C', '\x13F', '\x2', '\x1700', '\x1701', '\x5', '\x282', 
		'\x142', '\x2', '\x1701', '\x170A', '\x3', '\x2', '\x2', '\x2', '\x1702', 
		'\x1703', '\x5', '\x27E', '\x140', '\x2', '\x1703', '\x1704', '\x5', '\x282', 
		'\x142', '\x2', '\x1704', '\x170A', '\x3', '\x2', '\x2', '\x2', '\x1705', 
		'\x1706', '\x5', '\x27C', '\x13F', '\x2', '\x1706', '\x1707', '\x5', '\x282', 
		'\x142', '\x2', '\x1707', '\x170A', '\x3', '\x2', '\x2', '\x2', '\x1708', 
		'\x170A', '\x5', '\x282', '\x142', '\x2', '\x1709', '\x16FA', '\x3', '\x2', 
		'\x2', '\x2', '\x1709', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1709', 
		'\x1702', '\x3', '\x2', '\x2', '\x2', '\x1709', '\x1705', '\x3', '\x2', 
		'\x2', '\x2', '\x1709', '\x1708', '\x3', '\x2', '\x2', '\x2', '\x170A', 
		'\x27B', '\x3', '\x2', '\x2', '\x2', '\x170B', '\x1712', '\a', '\x46', 
		'\x2', '\x2', '\x170C', '\x1712', '\a', '\x1BF', '\x2', '\x2', '\x170D', 
		'\x1712', '\a', '\x189', '\x2', '\x2', '\x170E', '\x170F', '\a', '\x46', 
		'\x2', '\x2', '\x170F', '\x1712', '\a', '\x1BF', '\x2', '\x2', '\x1710', 
		'\x1712', '\a', 'g', '\x2', '\x2', '\x1711', '\x170B', '\x3', '\x2', '\x2', 
		'\x2', '\x1711', '\x170C', '\x3', '\x2', '\x2', '\x2', '\x1711', '\x170D', 
		'\x3', '\x2', '\x2', '\x2', '\x1711', '\x170E', '\x3', '\x2', '\x2', '\x2', 
		'\x1711', '\x1710', '\x3', '\x2', '\x2', '\x2', '\x1712', '\x27D', '\x3', 
		'\x2', '\x2', '\x2', '\x1713', '\x1714', '\x5', '\x534', '\x29B', '\x2', 
		'\x1714', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x1715', '\x1716', '\x5', 
		'\x282', '\x142', '\x2', '\x1716', '\x281', '\x3', '\x2', '\x2', '\x2', 
		'\x1717', '\x1724', '\x5', '\x458', '\x22D', '\x2', '\x1718', '\x1719', 
		'\x5', '\x534', '\x29B', '\x2', '\x1719', '\x171A', '\x5', '\x210', '\x109', 
		'\x2', '\x171A', '\x171B', '\a', '\x1D', '\x2', '\x2', '\x171B', '\x171C', 
		'\a', '\x161', '\x2', '\x2', '\x171C', '\x1724', '\x3', '\x2', '\x2', 
		'\x2', '\x171D', '\x171E', '\a', '\x198', '\x2', '\x2', '\x171E', '\x171F', 
		'\x5', '\x534', '\x29B', '\x2', '\x171F', '\x1720', '\x5', '\x210', '\x109', 
		'\x2', '\x1720', '\x1721', '\a', '\x1D', '\x2', '\x2', '\x1721', '\x1722', 
		'\a', '\x161', '\x2', '\x2', '\x1722', '\x1724', '\x3', '\x2', '\x2', 
		'\x2', '\x1723', '\x1717', '\x3', '\x2', '\x2', '\x2', '\x1723', '\x1718', 
		'\x3', '\x2', '\x2', '\x2', '\x1723', '\x171D', '\x3', '\x2', '\x2', '\x2', 
		'\x1724', '\x283', '\x3', '\x2', '\x2', '\x2', '\x1725', '\x172F', '\x5', 
		'\x27A', '\x13E', '\x2', '\x1726', '\x1727', '\x5', '\x27A', '\x13E', 
		'\x2', '\x1727', '\x1728', '\a', '\x37', '\x2', '\x2', '\x1728', '\x1729', 
		'\x5', '\x484', '\x243', '\x2', '\x1729', '\x172F', '\x3', '\x2', '\x2', 
		'\x2', '\x172A', '\x172B', '\x5', '\x27A', '\x13E', '\x2', '\x172B', '\x172C', 
		'\a', '\f', '\x2', '\x2', '\x172C', '\x172D', '\x5', '\x484', '\x243', 
		'\x2', '\x172D', '\x172F', '\x3', '\x2', '\x2', '\x2', '\x172E', '\x1725', 
		'\x3', '\x2', '\x2', '\x2', '\x172E', '\x1726', '\x3', '\x2', '\x2', '\x2', 
		'\x172E', '\x172A', '\x3', '\x2', '\x2', '\x2', '\x172F', '\x285', '\x3', 
		'\x2', '\x2', '\x2', '\x1730', '\x1731', '\x5', '\x27A', '\x13E', '\x2', 
		'\x1731', '\x287', '\x3', '\x2', '\x2', '\x2', '\x1732', '\x1733', '\a', 
		'\x4', '\x2', '\x2', '\x1733', '\x1734', '\a', '\v', '\x2', '\x2', '\x1734', 
		'\x1747', '\a', '\x5', '\x2', '\x2', '\x1735', '\x1736', '\a', '\x4', 
		'\x2', '\x2', '\x1736', '\x1737', '\x5', '\x28A', '\x146', '\x2', '\x1737', 
		'\x1738', '\a', '\x5', '\x2', '\x2', '\x1738', '\x1747', '\x3', '\x2', 
		'\x2', '\x2', '\x1739', '\x173A', '\a', '\x4', '\x2', '\x2', '\x173A', 
		'\x173B', '\a', 'U', '\x2', '\x2', '\x173B', '\x173C', '\a', '\x95', '\x2', 
		'\x2', '\x173C', '\x173D', '\x5', '\x28A', '\x146', '\x2', '\x173D', '\x173E', 
		'\a', '\x5', '\x2', '\x2', '\x173E', '\x1747', '\x3', '\x2', '\x2', '\x2', 
		'\x173F', '\x1740', '\a', '\x4', '\x2', '\x2', '\x1740', '\x1741', '\x5', 
		'\x28A', '\x146', '\x2', '\x1741', '\x1742', '\a', 'U', '\x2', '\x2', 
		'\x1742', '\x1743', '\a', '\x95', '\x2', '\x2', '\x1743', '\x1744', '\x5', 
		'\x28A', '\x146', '\x2', '\x1744', '\x1745', '\a', '\x5', '\x2', '\x2', 
		'\x1745', '\x1747', '\x3', '\x2', '\x2', '\x2', '\x1746', '\x1732', '\x3', 
		'\x2', '\x2', '\x2', '\x1746', '\x1735', '\x3', '\x2', '\x2', '\x2', '\x1746', 
		'\x1739', '\x3', '\x2', '\x2', '\x2', '\x1746', '\x173F', '\x3', '\x2', 
		'\x2', '\x2', '\x1747', '\x289', '\x3', '\x2', '\x2', '\x2', '\x1748', 
		'\x1749', '\b', '\x146', '\x1', '\x2', '\x1749', '\x174A', '\x5', '\x286', 
		'\x144', '\x2', '\x174A', '\x1750', '\x3', '\x2', '\x2', '\x2', '\x174B', 
		'\x174C', '\f', '\x3', '\x2', '\x2', '\x174C', '\x174D', '\a', '\b', '\x2', 
		'\x2', '\x174D', '\x174F', '\x5', '\x286', '\x144', '\x2', '\x174E', '\x174B', 
		'\x3', '\x2', '\x2', '\x2', '\x174F', '\x1752', '\x3', '\x2', '\x2', '\x2', 
		'\x1750', '\x174E', '\x3', '\x2', '\x2', '\x2', '\x1750', '\x1751', '\x3', 
		'\x2', '\x2', '\x2', '\x1751', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x1752', 
		'\x1750', '\x3', '\x2', '\x2', '\x2', '\x1753', '\x1754', '\x5', '\x518', 
		'\x28D', '\x2', '\x1754', '\x1755', '\x5', '\x288', '\x145', '\x2', '\x1755', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x1756', '\x1757', '\b', '\x148', 
		'\x1', '\x2', '\x1757', '\x1758', '\x5', '\x28C', '\x147', '\x2', '\x1758', 
		'\x175E', '\x3', '\x2', '\x2', '\x2', '\x1759', '\x175A', '\f', '\x3', 
		'\x2', '\x2', '\x175A', '\x175B', '\a', '\b', '\x2', '\x2', '\x175B', 
		'\x175D', '\x5', '\x28C', '\x147', '\x2', '\x175C', '\x1759', '\x3', '\x2', 
		'\x2', '\x2', '\x175D', '\x1760', '\x3', '\x2', '\x2', '\x2', '\x175E', 
		'\x175C', '\x3', '\x2', '\x2', '\x2', '\x175E', '\x175F', '\x3', '\x2', 
		'\x2', '\x2', '\x175F', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x1760', 
		'\x175E', '\x3', '\x2', '\x2', '\x2', '\x1761', '\x1763', '\x5', '\x294', 
		'\x14B', '\x2', '\x1762', '\x1761', '\x3', '\x2', '\x2', '\x2', '\x1763', 
		'\x1764', '\x3', '\x2', '\x2', '\x2', '\x1764', '\x1762', '\x3', '\x2', 
		'\x2', '\x2', '\x1764', '\x1765', '\x3', '\x2', '\x2', '\x2', '\x1765', 
		'\x1766', '\x3', '\x2', '\x2', '\x2', '\x1766', '\x1767', '\b', '\x149', 
		'\x1', '\x2', '\x1767', '\x291', '\x3', '\x2', '\x2', '\x2', '\x1768', 
		'\x1769', '\a', '\x97', '\x2', '\x2', '\x1769', '\x176A', '\a', 'R', '\x2', 
		'\x2', '\x176A', '\x176B', '\a', 'P', '\x2', '\x2', '\x176B', '\x178C', 
		'\a', '\x1C4', '\x2', '\x2', '\x176C', '\x176D', '\a', '\x135', '\x2', 
		'\x2', '\x176D', '\x176E', '\a', 'P', '\x2', '\x2', '\x176E', '\x176F', 
		'\a', 'R', '\x2', '\x2', '\x176F', '\x1770', '\a', 'P', '\x2', '\x2', 
		'\x1770', '\x178C', '\a', '\x1C4', '\x2', '\x2', '\x1771', '\x178C', '\a', 
		'\x153', '\x2', '\x2', '\x1772', '\x178C', '\a', '\xE0', '\x2', '\x2', 
		'\x1773', '\x178C', '\a', '\x14B', '\x2', '\x2', '\x1774', '\x178C', '\a', 
		'\x172', '\x2', '\x2', '\x1775', '\x1776', '\a', '\xCF', '\x2', '\x2', 
		'\x1776', '\x1777', '\a', '\x140', '\x2', '\x2', '\x1777', '\x178C', '\a', 
		'\xB7', '\x2', '\x2', '\x1778', '\x1779', '\a', '\xCF', '\x2', '\x2', 
		'\x1779', '\x177A', '\a', '\x140', '\x2', '\x2', '\x177A', '\x178C', '\a', 
		'\xEC', '\x2', '\x2', '\x177B', '\x177C', '\a', '\x140', '\x2', '\x2', 
		'\x177C', '\x178C', '\a', '\xB7', '\x2', '\x2', '\x177D', '\x177E', '\a', 
		'\x140', '\x2', '\x2', '\x177E', '\x178C', '\a', '\xEC', '\x2', '\x2', 
		'\x177F', '\x178C', '\a', '\xF3', '\x2', '\x2', '\x1780', '\x1781', '\a', 
		'O', '\x2', '\x2', '\x1781', '\x178C', '\a', '\xF3', '\x2', '\x2', '\x1782', 
		'\x1783', '\a', '\xAC', '\x2', '\x2', '\x1783', '\x178C', '\x5', '\x126', 
		'\x94', '\x2', '\x1784', '\x1785', '\a', '\x139', '\x2', '\x2', '\x1785', 
		'\x178C', '\x5', '\x126', '\x94', '\x2', '\x1786', '\x1787', '\a', '\x1C5', 
		'\x2', '\x2', '\x1787', '\x178C', '\x5', '\x20E', '\x108', '\x2', '\x1788', 
		'\x178C', '\x5', 'T', '+', '\x2', '\x1789', '\x178A', '\a', '\x1C6', '\x2', 
		'\x2', '\x178A', '\x178C', '\x5', '\x532', '\x29A', '\x2', '\x178B', '\x1768', 
		'\x3', '\x2', '\x2', '\x2', '\x178B', '\x176C', '\x3', '\x2', '\x2', '\x2', 
		'\x178B', '\x1771', '\x3', '\x2', '\x2', '\x2', '\x178B', '\x1772', '\x3', 
		'\x2', '\x2', '\x2', '\x178B', '\x1773', '\x3', '\x2', '\x2', '\x2', '\x178B', 
		'\x1774', '\x3', '\x2', '\x2', '\x2', '\x178B', '\x1775', '\x3', '\x2', 
		'\x2', '\x2', '\x178B', '\x1778', '\x3', '\x2', '\x2', '\x2', '\x178B', 
		'\x177B', '\x3', '\x2', '\x2', '\x2', '\x178B', '\x177D', '\x3', '\x2', 
		'\x2', '\x2', '\x178B', '\x177F', '\x3', '\x2', '\x2', '\x2', '\x178B', 
		'\x1780', '\x3', '\x2', '\x2', '\x2', '\x178B', '\x1782', '\x3', '\x2', 
		'\x2', '\x2', '\x178B', '\x1784', '\x3', '\x2', '\x2', '\x2', '\x178B', 
		'\x1786', '\x3', '\x2', '\x2', '\x2', '\x178B', '\x1788', '\x3', '\x2', 
		'\x2', '\x2', '\x178B', '\x1789', '\x3', '\x2', '\x2', '\x2', '\x178C', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x178D', '\x178E', '\a', '&', '\x2', 
		'\x2', '\x178E', '\x1796', '\x5', '\x296', '\x14C', '\x2', '\x178F', '\x1790', 
		'\a', '\xF0', '\x2', '\x2', '\x1790', '\x1796', '\x5', 'J', '&', '\x2', 
		'\x1791', '\x1792', '\a', '\x1B5', '\x2', '\x2', '\x1792', '\x1796', '\x5', 
		'\x298', '\x14D', '\x2', '\x1793', '\x1796', '\a', 'j', '\x2', '\x2', 
		'\x1794', '\x1796', '\x5', '\x292', '\x14A', '\x2', '\x1795', '\x178D', 
		'\x3', '\x2', '\x2', '\x2', '\x1795', '\x178F', '\x3', '\x2', '\x2', '\x2', 
		'\x1795', '\x1791', '\x3', '\x2', '\x2', '\x2', '\x1795', '\x1793', '\x3', 
		'\x2', '\x2', '\x2', '\x1795', '\x1794', '\x3', '\x2', '\x2', '\x2', '\x1796', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x1797', '\x1798', '\x5', '\x524', 
		'\x293', '\x2', '\x1798', '\x1799', '\b', '\x14C', '\x1', '\x2', '\x1799', 
		'\x179F', '\x3', '\x2', '\x2', '\x2', '\x179A', '\x179B', '\x5', '\x524', 
		'\x293', '\x2', '\x179B', '\x179C', '\a', '\b', '\x2', '\x2', '\x179C', 
		'\x179D', '\x5', '\x524', '\x293', '\x2', '\x179D', '\x179F', '\x3', '\x2', 
		'\x2', '\x2', '\x179E', '\x1797', '\x3', '\x2', '\x2', '\x2', '\x179E', 
		'\x179A', '\x3', '\x2', '\x2', '\x2', '\x179F', '\x297', '\x3', '\x2', 
		'\x2', '\x2', '\x17A0', '\x17A1', '\b', '\x14D', '\x1', '\x2', '\x17A1', 
		'\x17A2', '\a', '@', '\x2', '\x2', '\x17A2', '\x17A3', '\a', '\x161', 
		'\x2', '\x2', '\x17A3', '\x17A4', '\x5', '\x458', '\x22D', '\x2', '\x17A4', 
		'\x17AC', '\x3', '\x2', '\x2', '\x2', '\x17A5', '\x17A6', '\f', '\x3', 
		'\x2', '\x2', '\x17A6', '\x17A7', '\a', '\b', '\x2', '\x2', '\x17A7', 
		'\x17A8', '\a', '@', '\x2', '\x2', '\x17A8', '\x17A9', '\a', '\x161', 
		'\x2', '\x2', '\x17A9', '\x17AB', '\x5', '\x458', '\x22D', '\x2', '\x17AA', 
		'\x17A5', '\x3', '\x2', '\x2', '\x2', '\x17AB', '\x17AE', '\x3', '\x2', 
		'\x2', '\x2', '\x17AC', '\x17AA', '\x3', '\x2', '\x2', '\x2', '\x17AC', 
		'\x17AD', '\x3', '\x2', '\x2', '\x2', '\x17AD', '\x299', '\x3', '\x2', 
		'\x2', '\x2', '\x17AE', '\x17AC', '\x3', '\x2', '\x2', '\x2', '\x17AF', 
		'\x17B0', '\a', 'k', '\x2', '\x2', '\x17B0', '\x17B3', '\x5', '\x1CE', 
		'\xE8', '\x2', '\x17B1', '\x17B3', '\x3', '\x2', '\x2', '\x2', '\x17B2', 
		'\x17AF', '\x3', '\x2', '\x2', '\x2', '\x17B2', '\x17B1', '\x3', '\x2', 
		'\x2', '\x2', '\x17B3', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x17B4', 
		'\x17B5', '\x5', '\x27E', '\x140', '\x2', '\x17B5', '\x17B6', '\x5', '\x282', 
		'\x142', '\x2', '\x17B6', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x17B7', 
		'\x17B8', '\b', '\x150', '\x1', '\x2', '\x17B8', '\x17B9', '\x5', '\x29C', 
		'\x14F', '\x2', '\x17B9', '\x17BF', '\x3', '\x2', '\x2', '\x2', '\x17BA', 
		'\x17BB', '\f', '\x3', '\x2', '\x2', '\x17BB', '\x17BC', '\a', '\b', '\x2', 
		'\x2', '\x17BC', '\x17BE', '\x5', '\x29C', '\x14F', '\x2', '\x17BD', '\x17BA', 
		'\x3', '\x2', '\x2', '\x2', '\x17BE', '\x17C1', '\x3', '\x2', '\x2', '\x2', 
		'\x17BF', '\x17BD', '\x3', '\x2', '\x2', '\x2', '\x17BF', '\x17C0', '\x3', 
		'\x2', '\x2', '\x2', '\x17C0', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x17C1', 
		'\x17BF', '\x3', '\x2', '\x2', '\x2', '\x17C2', '\x17C3', '\a', '\x8C', 
		'\x2', '\x2', '\x17C3', '\x17C4', '\a', '\xD5', '\x2', '\x2', '\x17C4', 
		'\x17C5', '\x5', '\x274', '\x13B', '\x2', '\x17C5', '\x17C6', '\x5', '\x2A2', 
		'\x152', '\x2', '\x17C6', '\x17C7', '\x5', '\x2A4', '\x153', '\x2', '\x17C7', 
		'\x17D5', '\x3', '\x2', '\x2', '\x2', '\x17C8', '\x17C9', '\a', '\x8C', 
		'\x2', '\x2', '\x17C9', '\x17CA', '\a', '\x121', '\x2', '\x2', '\x17CA', 
		'\x17CB', '\x5', '\x274', '\x13B', '\x2', '\x17CB', '\x17CC', '\x5', '\x2A2', 
		'\x152', '\x2', '\x17CC', '\x17CD', '\x5', '\x2A4', '\x153', '\x2', '\x17CD', 
		'\x17D5', '\x3', '\x2', '\x2', '\x2', '\x17CE', '\x17CF', '\a', '\x8C', 
		'\x2', '\x2', '\x17CF', '\x17D0', '\a', '\x1B4', '\x2', '\x2', '\x17D0', 
		'\x17D1', '\x5', '\x274', '\x13B', '\x2', '\x17D1', '\x17D2', '\x5', '\x2A2', 
		'\x152', '\x2', '\x17D2', '\x17D3', '\x5', '\x2A4', '\x153', '\x2', '\x17D3', 
		'\x17D5', '\x3', '\x2', '\x2', '\x2', '\x17D4', '\x17C2', '\x3', '\x2', 
		'\x2', '\x2', '\x17D4', '\x17C8', '\x3', '\x2', '\x2', '\x2', '\x17D4', 
		'\x17CE', '\x3', '\x2', '\x2', '\x2', '\x17D5', '\x2A1', '\x3', '\x2', 
		'\x2', '\x2', '\x17D6', '\x17D7', '\b', '\x152', '\x1', '\x2', '\x17D7', 
		'\x17D8', '\x5', '\x292', '\x14A', '\x2', '\x17D8', '\x17DD', '\x3', '\x2', 
		'\x2', '\x2', '\x17D9', '\x17DA', '\f', '\x3', '\x2', '\x2', '\x17DA', 
		'\x17DC', '\x5', '\x292', '\x14A', '\x2', '\x17DB', '\x17D9', '\x3', '\x2', 
		'\x2', '\x2', '\x17DC', '\x17DF', '\x3', '\x2', '\x2', '\x2', '\x17DD', 
		'\x17DB', '\x3', '\x2', '\x2', '\x2', '\x17DD', '\x17DE', '\x3', '\x2', 
		'\x2', '\x2', '\x17DE', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x17DF', 
		'\x17DD', '\x3', '\x2', '\x2', '\x2', '\x17E0', '\x17E3', '\a', '\x134', 
		'\x2', '\x2', '\x17E1', '\x17E3', '\x3', '\x2', '\x2', '\x2', '\x17E2', 
		'\x17E0', '\x3', '\x2', '\x2', '\x2', '\x17E2', '\x17E1', '\x3', '\x2', 
		'\x2', '\x2', '\x17E3', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x17E4', 
		'\x17E5', '\a', '\xC1', '\x2', '\x2', '\x17E5', '\x17E6', '\a', '\xD5', 
		'\x2', '\x2', '\x17E6', '\x17E7', '\x5', '\x272', '\x13A', '\x2', '\x17E7', 
		'\x17E8', '\x5', 'n', '\x38', '\x2', '\x17E8', '\x1809', '\x3', '\x2', 
		'\x2', '\x2', '\x17E9', '\x17EA', '\a', '\xC1', '\x2', '\x2', '\x17EA', 
		'\x17EB', '\a', '\xD5', '\x2', '\x2', '\x17EB', '\x17EC', '\a', '\xDE', 
		'\x2', '\x2', '\x17EC', '\x17ED', '\a', '\x185', '\x2', '\x2', '\x17ED', 
		'\x17EE', '\x5', '\x272', '\x13A', '\x2', '\x17EE', '\x17EF', '\x5', 'n', 
		'\x38', '\x2', '\x17EF', '\x1809', '\x3', '\x2', '\x2', '\x2', '\x17F0', 
		'\x17F1', '\a', '\xC1', '\x2', '\x2', '\x17F1', '\x17F2', '\a', '\x121', 
		'\x2', '\x2', '\x17F2', '\x17F3', '\x5', '\x272', '\x13A', '\x2', '\x17F3', 
		'\x17F4', '\x5', 'n', '\x38', '\x2', '\x17F4', '\x1809', '\x3', '\x2', 
		'\x2', '\x2', '\x17F5', '\x17F6', '\a', '\xC1', '\x2', '\x2', '\x17F6', 
		'\x17F7', '\a', '\x121', '\x2', '\x2', '\x17F7', '\x17F8', '\a', '\xDE', 
		'\x2', '\x2', '\x17F8', '\x17F9', '\a', '\x185', '\x2', '\x2', '\x17F9', 
		'\x17FA', '\x5', '\x272', '\x13A', '\x2', '\x17FA', '\x17FB', '\x5', 'n', 
		'\x38', '\x2', '\x17FB', '\x1809', '\x3', '\x2', '\x2', '\x2', '\x17FC', 
		'\x17FD', '\a', '\xC1', '\x2', '\x2', '\x17FD', '\x17FE', '\a', '\x1B4', 
		'\x2', '\x2', '\x17FE', '\x17FF', '\x5', '\x272', '\x13A', '\x2', '\x17FF', 
		'\x1800', '\x5', 'n', '\x38', '\x2', '\x1800', '\x1809', '\x3', '\x2', 
		'\x2', '\x2', '\x1801', '\x1802', '\a', '\xC1', '\x2', '\x2', '\x1802', 
		'\x1803', '\a', '\x1B4', '\x2', '\x2', '\x1803', '\x1804', '\a', '\xDE', 
		'\x2', '\x2', '\x1804', '\x1805', '\a', '\x185', '\x2', '\x2', '\x1805', 
		'\x1806', '\x5', '\x272', '\x13A', '\x2', '\x1806', '\x1807', '\x5', 'n', 
		'\x38', '\x2', '\x1807', '\x1809', '\x3', '\x2', '\x2', '\x2', '\x1808', 
		'\x17E4', '\x3', '\x2', '\x2', '\x2', '\x1808', '\x17E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1808', '\x17F0', '\x3', '\x2', '\x2', '\x2', '\x1808', 
		'\x17F5', '\x3', '\x2', '\x2', '\x2', '\x1808', '\x17FC', '\x3', '\x2', 
		'\x2', '\x2', '\x1808', '\x1801', '\x3', '\x2', '\x2', '\x2', '\x1809', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x180A', '\x180B', '\a', '\xC1', 
		'\x2', '\x2', '\x180B', '\x180C', '\a', '\x8A', '\x2', '\x2', '\x180C', 
		'\x180D', '\x5', '\x28E', '\x148', '\x2', '\x180D', '\x180E', '\x5', 'n', 
		'\x38', '\x2', '\x180E', '\x1817', '\x3', '\x2', '\x2', '\x2', '\x180F', 
		'\x1810', '\a', '\xC1', '\x2', '\x2', '\x1810', '\x1811', '\a', '\x8A', 
		'\x2', '\x2', '\x1811', '\x1812', '\a', '\xDE', '\x2', '\x2', '\x1812', 
		'\x1813', '\a', '\x185', '\x2', '\x2', '\x1813', '\x1814', '\x5', '\x28E', 
		'\x148', '\x2', '\x1814', '\x1815', '\x5', 'n', '\x38', '\x2', '\x1815', 
		'\x1817', '\x3', '\x2', '\x2', '\x2', '\x1816', '\x180A', '\x3', '\x2', 
		'\x2', '\x2', '\x1816', '\x180F', '\x3', '\x2', '\x2', '\x2', '\x1817', 
		'\x2A9', '\x3', '\x2', '\x2', '\x2', '\x1818', '\x1819', '\a', '\xC1', 
		'\x2', '\x2', '\x1819', '\x181A', '\a', '\x10F', '\x2', '\x2', '\x181A', 
		'\x181B', '\x5', '\x2B0', '\x159', '\x2', '\x181B', '\x181C', '\x5', 'n', 
		'\x38', '\x2', '\x181C', '\x1825', '\x3', '\x2', '\x2', '\x2', '\x181D', 
		'\x181E', '\a', '\xC1', '\x2', '\x2', '\x181E', '\x181F', '\a', '\x10F', 
		'\x2', '\x2', '\x181F', '\x1820', '\a', '\xDE', '\x2', '\x2', '\x1820', 
		'\x1821', '\a', '\x185', '\x2', '\x2', '\x1821', '\x1822', '\x5', '\x2B0', 
		'\x159', '\x2', '\x1822', '\x1823', '\x5', 'n', '\x38', '\x2', '\x1823', 
		'\x1825', '\x3', '\x2', '\x2', '\x2', '\x1824', '\x1818', '\x3', '\x2', 
		'\x2', '\x2', '\x1824', '\x181D', '\x3', '\x2', '\x2', '\x2', '\x1825', 
		'\x2AB', '\x3', '\x2', '\x2', '\x2', '\x1826', '\x1827', '\a', '\x4', 
		'\x2', '\x2', '\x1827', '\x1828', '\x5', '\x458', '\x22D', '\x2', '\x1828', 
		'\x1829', '\a', '\x5', '\x2', '\x2', '\x1829', '\x183D', '\x3', '\x2', 
		'\x2', '\x2', '\x182A', '\x182B', '\a', '\x4', '\x2', '\x2', '\x182B', 
		'\x182C', '\x5', '\x458', '\x22D', '\x2', '\x182C', '\x182D', '\a', '\b', 
		'\x2', '\x2', '\x182D', '\x182E', '\x5', '\x458', '\x22D', '\x2', '\x182E', 
		'\x182F', '\a', '\x5', '\x2', '\x2', '\x182F', '\x183D', '\x3', '\x2', 
		'\x2', '\x2', '\x1830', '\x1831', '\a', '\x4', '\x2', '\x2', '\x1831', 
		'\x1832', '\a', '\x190', '\x2', '\x2', '\x1832', '\x1833', '\a', '\b', 
		'\x2', '\x2', '\x1833', '\x1834', '\x5', '\x458', '\x22D', '\x2', '\x1834', 
		'\x1835', '\a', '\x5', '\x2', '\x2', '\x1835', '\x183D', '\x3', '\x2', 
		'\x2', '\x2', '\x1836', '\x1837', '\a', '\x4', '\x2', '\x2', '\x1837', 
		'\x1838', '\x5', '\x458', '\x22D', '\x2', '\x1838', '\x1839', '\a', '\b', 
		'\x2', '\x2', '\x1839', '\x183A', '\a', '\x190', '\x2', '\x2', '\x183A', 
		'\x183B', '\a', '\x5', '\x2', '\x2', '\x183B', '\x183D', '\x3', '\x2', 
		'\x2', '\x2', '\x183C', '\x1826', '\x3', '\x2', '\x2', '\x2', '\x183C', 
		'\x182A', '\x3', '\x2', '\x2', '\x2', '\x183C', '\x1830', '\x3', '\x2', 
		'\x2', '\x2', '\x183C', '\x1836', '\x3', '\x2', '\x2', '\x2', '\x183D', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x183E', '\x1844', '\x5', '\x4CA', 
		'\x266', '\x2', '\x183F', '\x1840', '\x5', '\x532', '\x29A', '\x2', '\x1840', 
		'\x1841', '\a', '\r', '\x2', '\x2', '\x1841', '\x1842', '\x5', '\x2AE', 
		'\x158', '\x2', '\x1842', '\x1844', '\x3', '\x2', '\x2', '\x2', '\x1843', 
		'\x183E', '\x3', '\x2', '\x2', '\x2', '\x1843', '\x183F', '\x3', '\x2', 
		'\x2', '\x2', '\x1844', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x1845', 
		'\x1846', '\b', '\x159', '\x1', '\x2', '\x1846', '\x1847', '\x5', '\x2B2', 
		'\x15A', '\x2', '\x1847', '\x184D', '\x3', '\x2', '\x2', '\x2', '\x1848', 
		'\x1849', '\f', '\x3', '\x2', '\x2', '\x1849', '\x184A', '\a', '\b', '\x2', 
		'\x2', '\x184A', '\x184C', '\x5', '\x2B2', '\x15A', '\x2', '\x184B', '\x1848', 
		'\x3', '\x2', '\x2', '\x2', '\x184C', '\x184F', '\x3', '\x2', '\x2', '\x2', 
		'\x184D', '\x184B', '\x3', '\x2', '\x2', '\x2', '\x184D', '\x184E', '\x3', 
		'\x2', '\x2', '\x2', '\x184E', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x184F', 
		'\x184D', '\x3', '\x2', '\x2', '\x2', '\x1850', '\x1851', '\x5', '\x2AE', 
		'\x158', '\x2', '\x1851', '\x1852', '\x5', '\x2AC', '\x157', '\x2', '\x1852', 
		'\x2B3', '\x3', '\x2', '\x2', '\x2', '\x1853', '\x1854', '\a', ';', '\x2', 
		'\x2', '\x1854', '\x1855', '\x5', '\x2B6', '\x15C', '\x2', '\x1855', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1856', '\x1857', '\b', '\x15C', '\x1', 
		'\x2', '\x1857', '\x1858', '\x5', '\x2B8', '\x15D', '\x2', '\x1858', '\x185D', 
		'\x3', '\x2', '\x2', '\x2', '\x1859', '\x185A', '\f', '\x3', '\x2', '\x2', 
		'\x185A', '\x185C', '\x5', '\x2B8', '\x15D', '\x2', '\x185B', '\x1859', 
		'\x3', '\x2', '\x2', '\x2', '\x185C', '\x185F', '\x3', '\x2', '\x2', '\x2', 
		'\x185D', '\x185B', '\x3', '\x2', '\x2', '\x2', '\x185D', '\x185E', '\x3', 
		'\x2', '\x2', '\x2', '\x185E', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x185F', 
		'\x185D', '\x3', '\x2', '\x2', '\x2', '\x1860', '\x1864', '\x5', '\x524', 
		'\x293', '\x2', '\x1861', '\x1862', '\a', '\xF0', '\x2', '\x2', '\x1862', 
		'\x1864', '\x5', 'J', '&', '\x2', '\x1863', '\x1860', '\x3', '\x2', '\x2', 
		'\x2', '\x1863', '\x1861', '\x3', '\x2', '\x2', '\x2', '\x1864', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1865', '\x1866', '\a', '\x30', '\x2', '\x2', 
		'\x1866', '\x1867', '\a', '+', '\x2', '\x2', '\x1867', '\x1868', '\a', 
		'\x4', '\x2', '\x2', '\x1868', '\x1869', '\x5', '\x458', '\x22D', '\x2', 
		'\x1869', '\x186A', '\a', '&', '\x2', '\x2', '\x186A', '\x186B', '\x5', 
		'\x458', '\x22D', '\x2', '\x186B', '\x186C', '\a', '\x5', '\x2', '\x2', 
		'\x186C', '\x186D', '\a', 'k', '\x2', '\x2', '\x186D', '\x186E', '\a', 
		'\xD5', '\x2', '\x2', '\x186E', '\x186F', '\x5', '\x274', '\x13B', '\x2', 
		'\x186F', '\x1870', '\x5', '\x2BC', '\x15F', '\x2', '\x1870', '\x1888', 
		'\x3', '\x2', '\x2', '\x2', '\x1871', '\x1872', '\a', '\x30', '\x2', '\x2', 
		'\x1872', '\x1873', '\a', '+', '\x2', '\x2', '\x1873', '\x1874', '\a', 
		'\x4', '\x2', '\x2', '\x1874', '\x1875', '\x5', '\x458', '\x22D', '\x2', 
		'\x1875', '\x1876', '\a', '&', '\x2', '\x2', '\x1876', '\x1877', '\x5', 
		'\x458', '\x22D', '\x2', '\x1877', '\x1878', '\a', '\x5', '\x2', '\x2', 
		'\x1878', '\x1879', '\a', '\x174', '\x2', '\x2', '\x1879', '\x187A', '\a', 
		'\xD5', '\x2', '\x2', '\x187A', '\x187B', '\x5', '\x2BC', '\x15F', '\x2', 
		'\x187B', '\x1888', '\x3', '\x2', '\x2', '\x2', '\x187C', '\x187D', '\a', 
		'\x30', '\x2', '\x2', '\x187D', '\x187E', '\a', '+', '\x2', '\x2', '\x187E', 
		'\x187F', '\a', '\x4', '\x2', '\x2', '\x187F', '\x1880', '\x5', '\x458', 
		'\x22D', '\x2', '\x1880', '\x1881', '\a', '&', '\x2', '\x2', '\x1881', 
		'\x1882', '\x5', '\x458', '\x22D', '\x2', '\x1882', '\x1883', '\a', '\x5', 
		'\x2', '\x2', '\x1883', '\x1884', '\a', 'k', '\x2', '\x2', '\x1884', '\x1885', 
		'\a', '\x189', '\x2', '\x2', '\x1885', '\x1886', '\x5', '\x2BC', '\x15F', 
		'\x2', '\x1886', '\x1888', '\x3', '\x2', '\x2', '\x2', '\x1887', '\x1865', 
		'\x3', '\x2', '\x2', '\x2', '\x1887', '\x1871', '\x3', '\x2', '\x2', '\x2', 
		'\x1887', '\x187C', '\x3', '\x2', '\x2', '\x2', '\x1888', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1889', '\x188A', '\a', '&', '\x2', '\x2', '\x188A', 
		'\x188F', '\a', '\xE1', '\x2', '\x2', '\x188B', '\x188C', '\a', '&', '\x2', 
		'\x2', '\x188C', '\x188F', '\a', '\x8F', '\x2', '\x2', '\x188D', '\x188F', 
		'\x3', '\x2', '\x2', '\x2', '\x188E', '\x1889', '\x3', '\x2', '\x2', '\x2', 
		'\x188E', '\x188B', '\x3', '\x2', '\x2', '\x2', '\x188E', '\x188D', '\x3', 
		'\x2', '\x2', '\x2', '\x188F', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x1890', 
		'\x1891', '\a', '\xC1', '\x2', '\x2', '\x1891', '\x1892', '\a', '+', '\x2', 
		'\x2', '\x1892', '\x1893', '\x5', '\x2C0', '\x161', '\x2', '\x1893', '\x1894', 
		'\a', '\x4', '\x2', '\x2', '\x1894', '\x1895', '\x5', '\x458', '\x22D', 
		'\x2', '\x1895', '\x1896', '\a', '&', '\x2', '\x2', '\x1896', '\x1897', 
		'\x5', '\x458', '\x22D', '\x2', '\x1897', '\x1898', '\a', '\x5', '\x2', 
		'\x2', '\x1898', '\x1899', '\x5', 'n', '\x38', '\x2', '\x1899', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x189A', '\x189B', '\a', '\xDE', '\x2', '\x2', 
		'\x189B', '\x189E', '\a', '\x185', '\x2', '\x2', '\x189C', '\x189E', '\x3', 
		'\x2', '\x2', '\x2', '\x189D', '\x189A', '\x3', '\x2', '\x2', '\x2', '\x189D', 
		'\x189C', '\x3', '\x2', '\x2', '\x2', '\x189E', '\x2C1', '\x3', '\x2', 
		'\x2', '\x2', '\x189F', '\x18A0', '\a', '\x30', '\x2', '\x2', '\x18A0', 
		'\x18A1', '\x5', '\x26C', '\x137', '\x2', '\x18A1', '\x18A2', '\a', '\x1B5', 
		'\x2', '\x2', '\x18A2', '\x18A3', '\a', '@', '\x2', '\x2', '\x18A3', '\x18A4', 
		'\x5', '\x458', '\x22D', '\x2', '\x18A4', '\x18A5', '\a', '\xF0', '\x2', 
		'\x2', '\x18A5', '\x18A6', '\x5', '\x512', '\x28A', '\x2', '\x18A6', '\x18A7', 
		'\a', '\x4', '\x2', '\x2', '\x18A7', '\x18A8', '\x5', '\x2C4', '\x163', 
		'\x2', '\x18A8', '\x18A9', '\a', '\x5', '\x2', '\x2', '\x18A9', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x18AA', '\x18AB', '\a', '\x42', '\x2', '\x2', 
		'\x18AB', '\x18AC', '\a', '\x1C7', '\x2', '\x2', '\x18AC', '\x18AD', '\a', 
		'k', '\x2', '\x2', '\x18AD', '\x18AE', '\a', '\xD5', '\x2', '\x2', '\x18AE', 
		'\x18AF', '\x5', '\x274', '\x13B', '\x2', '\x18AF', '\x18B0', '\a', '\b', 
		'\x2', '\x2', '\x18B0', '\x18B1', '\a', '`', '\x2', '\x2', '\x18B1', '\x18B2', 
		'\a', '\x1C7', '\x2', '\x2', '\x18B2', '\x18B3', '\a', 'k', '\x2', '\x2', 
		'\x18B3', '\x18B4', '\a', '\xD5', '\x2', '\x2', '\x18B4', '\x18B5', '\x5', 
		'\x274', '\x13B', '\x2', '\x18B5', '\x18CD', '\x3', '\x2', '\x2', '\x2', 
		'\x18B6', '\x18B7', '\a', '`', '\x2', '\x2', '\x18B7', '\x18B8', '\a', 
		'\x1C7', '\x2', '\x2', '\x18B8', '\x18B9', '\a', 'k', '\x2', '\x2', '\x18B9', 
		'\x18BA', '\a', '\xD5', '\x2', '\x2', '\x18BA', '\x18BB', '\x5', '\x274', 
		'\x13B', '\x2', '\x18BB', '\x18BC', '\a', '\b', '\x2', '\x2', '\x18BC', 
		'\x18BD', '\a', '\x42', '\x2', '\x2', '\x18BD', '\x18BE', '\a', '\x1C7', 
		'\x2', '\x2', '\x18BE', '\x18BF', '\a', 'k', '\x2', '\x2', '\x18BF', '\x18C0', 
		'\a', '\xD5', '\x2', '\x2', '\x18C0', '\x18C1', '\x5', '\x274', '\x13B', 
		'\x2', '\x18C1', '\x18CD', '\x3', '\x2', '\x2', '\x2', '\x18C2', '\x18C3', 
		'\a', '\x42', '\x2', '\x2', '\x18C3', '\x18C4', '\a', '\x1C7', '\x2', 
		'\x2', '\x18C4', '\x18C5', '\a', 'k', '\x2', '\x2', '\x18C5', '\x18C6', 
		'\a', '\xD5', '\x2', '\x2', '\x18C6', '\x18CD', '\x5', '\x274', '\x13B', 
		'\x2', '\x18C7', '\x18C8', '\a', '`', '\x2', '\x2', '\x18C8', '\x18C9', 
		'\a', '\x1C7', '\x2', '\x2', '\x18C9', '\x18CA', '\a', 'k', '\x2', '\x2', 
		'\x18CA', '\x18CB', '\a', '\xD5', '\x2', '\x2', '\x18CB', '\x18CD', '\x5', 
		'\x274', '\x13B', '\x2', '\x18CC', '\x18AA', '\x3', '\x2', '\x2', '\x2', 
		'\x18CC', '\x18B6', '\x3', '\x2', '\x2', '\x2', '\x18CC', '\x18C2', '\x3', 
		'\x2', '\x2', '\x2', '\x18CC', '\x18C7', '\x3', '\x2', '\x2', '\x2', '\x18CD', 
		'\x2C5', '\x3', '\x2', '\x2', '\x2', '\x18CE', '\x18CF', '\a', '\xC1', 
		'\x2', '\x2', '\x18CF', '\x18D0', '\a', '\x1B5', '\x2', '\x2', '\x18D0', 
		'\x18D1', '\x5', '\x2C0', '\x161', '\x2', '\x18D1', '\x18D2', '\a', '@', 
		'\x2', '\x2', '\x18D2', '\x18D3', '\x5', '\x458', '\x22D', '\x2', '\x18D3', 
		'\x18D4', '\a', '\xF0', '\x2', '\x2', '\x18D4', '\x18D5', '\x5', '\x512', 
		'\x28A', '\x2', '\x18D5', '\x18D6', '\x5', 'n', '\x38', '\x2', '\x18D6', 
		'\x2C7', '\x3', '\x2', '\x2', '\x2', '\x18D7', '\x18D8', '\a', '\x12B', 
		'\x2', '\x2', '\x18D8', '\x18D9', '\x5', '\x2CA', '\x166', '\x2', '\x18D9', 
		'\x18DA', '\x5', '\x252', '\x12A', '\x2', '\x18DA', '\x18DB', '\x5', '\x50E', 
		'\x288', '\x2', '\x18DB', '\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18DC', 
		'\x18DD', '\a', '\x12B', '\x2', '\x2', '\x18DD', '\x18DE', '\x5', '\x2CC', 
		'\x167', '\x2', '\x18DE', '\x18DF', '\x5', '\x252', '\x12A', '\x2', '\x18DF', 
		'\x18E0', '\x5', '\x512', '\x28A', '\x2', '\x18E0', '\x18F2', '\x3', '\x2', 
		'\x2', '\x2', '\x18E1', '\x18E2', '\a', '\x12B', '\x2', '\x2', '\x18E2', 
		'\x18E3', '\a', '\x4', '\x2', '\x2', '\x18E3', '\x18E4', '\x5', '\x2CE', 
		'\x168', '\x2', '\x18E4', '\x18E5', '\a', '\x5', '\x2', '\x2', '\x18E5', 
		'\x18E6', '\x5', '\x2CA', '\x166', '\x2', '\x18E6', '\x18E7', '\x5', '\x252', 
		'\x12A', '\x2', '\x18E7', '\x18E8', '\x5', '\x50E', '\x288', '\x2', '\x18E8', 
		'\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18E9', '\x18EA', '\a', '\x12B', 
		'\x2', '\x2', '\x18EA', '\x18EB', '\a', '\x4', '\x2', '\x2', '\x18EB', 
		'\x18EC', '\x5', '\x2CE', '\x168', '\x2', '\x18EC', '\x18ED', '\a', '\x5', 
		'\x2', '\x2', '\x18ED', '\x18EE', '\x5', '\x2CC', '\x167', '\x2', '\x18EE', 
		'\x18EF', '\x5', '\x252', '\x12A', '\x2', '\x18EF', '\x18F0', '\x5', '\x512', 
		'\x28A', '\x2', '\x18F0', '\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18F1', 
		'\x18D7', '\x3', '\x2', '\x2', '\x2', '\x18F1', '\x18DC', '\x3', '\x2', 
		'\x2', '\x2', '\x18F1', '\x18E1', '\x3', '\x2', '\x2', '\x2', '\x18F1', 
		'\x18E9', '\x3', '\x2', '\x2', '\x2', '\x18F2', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', '\x18F3', '\x18F4', '\t', '\a', '\x2', '\x2', '\x18F4', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x18F5', '\x18F6', '\t', '\xF', 
		'\x2', '\x2', '\x18F6', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x18F7', 
		'\x18F8', '\b', '\x168', '\x1', '\x2', '\x18F8', '\x18F9', '\x5', '\x2D0', 
		'\x169', '\x2', '\x18F9', '\x18FF', '\x3', '\x2', '\x2', '\x2', '\x18FA', 
		'\x18FB', '\f', '\x3', '\x2', '\x2', '\x18FB', '\x18FC', '\a', '\b', '\x2', 
		'\x2', '\x18FC', '\x18FE', '\x5', '\x2D0', '\x169', '\x2', '\x18FD', '\x18FA', 
		'\x3', '\x2', '\x2', '\x2', '\x18FE', '\x1901', '\x3', '\x2', '\x2', '\x2', 
		'\x18FF', '\x18FD', '\x3', '\x2', '\x2', '\x2', '\x18FF', '\x1900', '\x3', 
		'\x2', '\x2', '\x2', '\x1900', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x1901', 
		'\x18FF', '\x3', '\x2', '\x2', '\x2', '\x1902', '\x1903', '\a', '\x82', 
		'\x2', '\x2', '\x1903', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x1904', 
		'\x1905', '\a', '\x8C', '\x2', '\x2', '\x1905', '\x1906', '\a', '\x158', 
		'\x2', '\x2', '\x1906', '\x1907', '\x5', '\x512', '\x28A', '\x2', '\x1907', 
		'\x1908', '\a', '\x146', '\x2', '\x2', '\x1908', '\x1909', '\x5', 'v', 
		'<', '\x2', '\x1909', '\x1911', '\x3', '\x2', '\x2', '\x2', '\x190A', 
		'\x190B', '\a', '\x8C', '\x2', '\x2', '\x190B', '\x190C', '\a', '\x158', 
		'\x2', '\x2', '\x190C', '\x190D', '\x5', '\x512', '\x28A', '\x2', '\x190D', 
		'\x190E', '\a', '\x132', '\x2', '\x2', '\x190E', '\x190F', '\x5', 'v', 
		'<', '\x2', '\x190F', '\x1911', '\x3', '\x2', '\x2', '\x2', '\x1910', 
		'\x1904', '\x3', '\x2', '\x2', '\x2', '\x1910', '\x190A', '\x3', '\x2', 
		'\x2', '\x2', '\x1911', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x1912', 
		'\x1913', '\a', '\x8C', '\x2', '\x2', '\x1913', '\x1914', '\a', '\x8A', 
		'\x2', '\x2', '\x1914', '\x1915', '\x5', '\x28C', '\x147', '\x2', '\x1915', 
		'\x1916', '\a', '\x12E', '\x2', '\x2', '\x1916', '\x1917', '\a', '`', 
		'\x2', '\x2', '\x1917', '\x1918', '\x5', '\x512', '\x28A', '\x2', '\x1918', 
		'\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1919', '\x191A', '\a', '\x8C', 
		'\x2', '\x2', '\x191A', '\x191B', '\a', 'n', '\x2', '\x2', '\x191B', '\x191C', 
		'\x5', '\x20E', '\x108', '\x2', '\x191C', '\x191D', '\a', '\x12E', '\x2', 
		'\x2', '\x191D', '\x191E', '\a', '`', '\x2', '\x2', '\x191E', '\x191F', 
		'\x5', '\x512', '\x28A', '\x2', '\x191F', '\x1AE7', '\x3', '\x2', '\x2', 
		'\x2', '\x1920', '\x1921', '\a', '\x8C', '\x2', '\x2', '\x1921', '\x1922', 
		'\a', '\xAA', '\x2', '\x2', '\x1922', '\x1923', '\x5', '\x20E', '\x108', 
		'\x2', '\x1923', '\x1924', '\a', '\x12E', '\x2', '\x2', '\x1924', '\x1925', 
		'\a', '`', '\x2', '\x2', '\x1925', '\x1926', '\x5', '\x512', '\x28A', 
		'\x2', '\x1926', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1927', '\x1928', 
		'\a', '\x8C', '\x2', '\x2', '\x1928', '\x1929', '\a', '\xB1', '\x2', '\x2', 
		'\x1929', '\x192A', '\x5', '\x512', '\x28A', '\x2', '\x192A', '\x192B', 
		'\a', '\x12E', '\x2', '\x2', '\x192B', '\x192C', '\a', '`', '\x2', '\x2', 
		'\x192C', '\x192D', '\x5', '\x512', '\x28A', '\x2', '\x192D', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x192E', '\x192F', '\a', '\x8C', '\x2', '\x2', 
		'\x192F', '\x1930', '\a', '\xBF', '\x2', '\x2', '\x1930', '\x1931', '\x5', 
		'\x20E', '\x108', '\x2', '\x1931', '\x1932', '\a', '\x12E', '\x2', '\x2', 
		'\x1932', '\x1933', '\a', '`', '\x2', '\x2', '\x1933', '\x1934', '\x5', 
		'\x512', '\x28A', '\x2', '\x1934', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1935', '\x1936', '\a', '\x8C', '\x2', '\x2', '\x1936', '\x1937', '\a', 
		'\xBF', '\x2', '\x2', '\x1937', '\x1938', '\x5', '\x20E', '\x108', '\x2', 
		'\x1938', '\x1939', '\a', '\x12E', '\x2', '\x2', '\x1939', '\x193A', '\a', 
		'/', '\x2', '\x2', '\x193A', '\x193B', '\x5', '\x512', '\x28A', '\x2', 
		'\x193B', '\x193C', '\a', '`', '\x2', '\x2', '\x193C', '\x193D', '\x5', 
		'\x512', '\x28A', '\x2', '\x193D', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x193E', '\x193F', '\a', '\x8C', '\x2', '\x2', '\x193F', '\x1940', '\a', 
		'\x41', '\x2', '\x2', '\x1940', '\x1941', '\a', '\xB0', '\x2', '\x2', 
		'\x1941', '\x1942', '\a', '\x176', '\x2', '\x2', '\x1942', '\x1943', '\x5', 
		'\x512', '\x28A', '\x2', '\x1943', '\x1944', '\a', '\x12E', '\x2', '\x2', 
		'\x1944', '\x1945', '\a', '`', '\x2', '\x2', '\x1945', '\x1946', '\x5', 
		'\x512', '\x28A', '\x2', '\x1946', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1947', '\x1948', '\a', '\x8C', '\x2', '\x2', '\x1948', '\x1949', '\a', 
		'\xD5', '\x2', '\x2', '\x1949', '\x194A', '\x5', '\x274', '\x13B', '\x2', 
		'\x194A', '\x194B', '\a', '\x12E', '\x2', '\x2', '\x194B', '\x194C', '\a', 
		'`', '\x2', '\x2', '\x194C', '\x194D', '\x5', '\x512', '\x28A', '\x2', 
		'\x194D', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x194E', '\x194F', '\a', 
		'\x8C', '\x2', '\x2', '\x194F', '\x1950', '\a', '\x44', '\x2', '\x2', 
		'\x1950', '\x1951', '\x5', '\x52C', '\x297', '\x2', '\x1951', '\x1952', 
		'\a', '\x12E', '\x2', '\x2', '\x1952', '\x1953', '\a', '`', '\x2', '\x2', 
		'\x1953', '\x1954', '\x5', '\x52C', '\x297', '\x2', '\x1954', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1955', '\x1956', '\a', '\x8C', '\x2', '\x2', 
		'\x1956', '\x1957', '\x5', '\x136', '\x9C', '\x2', '\x1957', '\x1958', 
		'\a', '\xF0', '\x2', '\x2', '\x1958', '\x1959', '\x5', '\x512', '\x28A', 
		'\x2', '\x1959', '\x195A', '\a', '\x12E', '\x2', '\x2', '\x195A', '\x195B', 
		'\a', '`', '\x2', '\x2', '\x195B', '\x195C', '\x5', '\x512', '\x28A', 
		'\x2', '\x195C', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x195D', '\x195E', 
		'\a', '\x8C', '\x2', '\x2', '\x195E', '\x195F', '\a', '\x10F', '\x2', 
		'\x2', '\x195F', '\x1960', '\a', '\x9E', '\x2', '\x2', '\x1960', '\x1961', 
		'\x5', '\x20E', '\x108', '\x2', '\x1961', '\x1962', '\a', '\x66', '\x2', 
		'\x2', '\x1962', '\x1963', '\x5', '\x512', '\x28A', '\x2', '\x1963', '\x1964', 
		'\a', '\x12E', '\x2', '\x2', '\x1964', '\x1965', '\a', '`', '\x2', '\x2', 
		'\x1965', '\x1966', '\x5', '\x512', '\x28A', '\x2', '\x1966', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1967', '\x1968', '\a', '\x8C', '\x2', '\x2', 
		'\x1968', '\x1969', '\a', '\x10F', '\x2', '\x2', '\x1969', '\x196A', '\a', 
		'\xD0', '\x2', '\x2', '\x196A', '\x196B', '\x5', '\x20E', '\x108', '\x2', 
		'\x196B', '\x196C', '\a', '\x66', '\x2', '\x2', '\x196C', '\x196D', '\x5', 
		'\x512', '\x28A', '\x2', '\x196D', '\x196E', '\a', '\x12E', '\x2', '\x2', 
		'\x196E', '\x196F', '\a', '`', '\x2', '\x2', '\x196F', '\x1970', '\x5', 
		'\x512', '\x28A', '\x2', '\x1970', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1971', '\x1972', '\a', '\x8C', '\x2', '\x2', '\x1972', '\x1973', '\a', 
		'\x1B7', '\x2', '\x2', '\x1973', '\x1974', '\x5', '\x512', '\x28A', '\x2', 
		'\x1974', '\x1975', '\a', 'R', '\x2', '\x2', '\x1975', '\x1976', '\x5', 
		'\x50E', '\x288', '\x2', '\x1976', '\x1977', '\a', '\x12E', '\x2', '\x2', 
		'\x1977', '\x1978', '\a', '`', '\x2', '\x2', '\x1978', '\x1979', '\x5', 
		'\x512', '\x28A', '\x2', '\x1979', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x197A', '\x197B', '\a', '\x8C', '\x2', '\x2', '\x197B', '\x197C', '\a', 
		'\x1B7', '\x2', '\x2', '\x197C', '\x197D', '\a', '\xDE', '\x2', '\x2', 
		'\x197D', '\x197E', '\a', '\x185', '\x2', '\x2', '\x197E', '\x197F', '\x5', 
		'\x512', '\x28A', '\x2', '\x197F', '\x1980', '\a', 'R', '\x2', '\x2', 
		'\x1980', '\x1981', '\x5', '\x50E', '\x288', '\x2', '\x1981', '\x1982', 
		'\a', '\x12E', '\x2', '\x2', '\x1982', '\x1983', '\a', '`', '\x2', '\x2', 
		'\x1983', '\x1984', '\x5', '\x512', '\x28A', '\x2', '\x1984', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1985', '\x1986', '\a', '\x8C', '\x2', '\x2', 
		'\x1986', '\x1987', '\a', '\x121', '\x2', '\x2', '\x1987', '\x1988', '\x5', 
		'\x274', '\x13B', '\x2', '\x1988', '\x1989', '\a', '\x12E', '\x2', '\x2', 
		'\x1989', '\x198A', '\a', '`', '\x2', '\x2', '\x198A', '\x198B', '\x5', 
		'\x512', '\x28A', '\x2', '\x198B', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x198C', '\x198D', '\a', '\x8C', '\x2', '\x2', '\x198D', '\x198E', '\a', 
		'\x1BE', '\x2', '\x2', '\x198E', '\x198F', '\x5', '\x512', '\x28A', '\x2', 
		'\x198F', '\x1990', '\a', '\x12E', '\x2', '\x2', '\x1990', '\x1991', '\a', 
		'`', '\x2', '\x2', '\x1991', '\x1992', '\x5', '\x512', '\x28A', '\x2', 
		'\x1992', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1993', '\x1994', '\a', 
		'\x8C', '\x2', '\x2', '\x1994', '\x1995', '\a', '\x1B4', '\x2', '\x2', 
		'\x1995', '\x1996', '\x5', '\x274', '\x13B', '\x2', '\x1996', '\x1997', 
		'\a', '\x12E', '\x2', '\x2', '\x1997', '\x1998', '\a', '`', '\x2', '\x2', 
		'\x1998', '\x1999', '\x5', '\x512', '\x28A', '\x2', '\x1999', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x199A', '\x199B', '\a', '\x8C', '\x2', '\x2', 
		'\x199B', '\x199C', '\a', '\x13C', '\x2', '\x2', '\x199C', '\x199D', '\x5', 
		'\x512', '\x28A', '\x2', '\x199D', '\x199E', '\a', '\x12E', '\x2', '\x2', 
		'\x199E', '\x199F', '\a', '`', '\x2', '\x2', '\x199F', '\x19A0', '\x5', 
		'\x512', '\x28A', '\x2', '\x19A0', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x19A1', '\x19A2', '\a', '\x8C', '\x2', '\x2', '\x19A2', '\x19A3', '\a', 
		'\x144', '\x2', '\x2', '\x19A3', '\x19A4', '\x5', '\x512', '\x28A', '\x2', 
		'\x19A4', '\x19A5', '\a', '\x12E', '\x2', '\x2', '\x19A5', '\x19A6', '\a', 
		'`', '\x2', '\x2', '\x19A6', '\x19A7', '\x5', '\x512', '\x28A', '\x2', 
		'\x19A7', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x19A8', '\x19A9', '\a', 
		'\x8C', '\x2', '\x2', '\x19A9', '\x19AA', '\a', '\x1BD', '\x2', '\x2', 
		'\x19AA', '\x19AB', '\x5', '\x512', '\x28A', '\x2', '\x19AB', '\x19AC', 
		'\a', '\x12E', '\x2', '\x2', '\x19AC', '\x19AD', '\a', '`', '\x2', '\x2', 
		'\x19AD', '\x19AE', '\x5', '\x512', '\x28A', '\x2', '\x19AE', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x19AF', '\x19B0', '\a', '\x8C', '\x2', '\x2', 
		'\x19B0', '\x19B1', '\a', '^', '\x2', '\x2', '\x19B1', '\x19B2', '\x5', 
		'\x42C', '\x217', '\x2', '\x19B2', '\x19B3', '\a', '\x12E', '\x2', '\x2', 
		'\x19B3', '\x19B4', '\a', '`', '\x2', '\x2', '\x19B4', '\x19B5', '\x5', 
		'\x512', '\x28A', '\x2', '\x19B5', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x19B6', '\x19B7', '\a', '\x8C', '\x2', '\x2', '\x19B7', '\x19B8', '\a', 
		'^', '\x2', '\x2', '\x19B8', '\x19B9', '\a', '\xDE', '\x2', '\x2', '\x19B9', 
		'\x19BA', '\a', '\x185', '\x2', '\x2', '\x19BA', '\x19BB', '\x5', '\x42C', 
		'\x217', '\x2', '\x19BB', '\x19BC', '\a', '\x12E', '\x2', '\x2', '\x19BC', 
		'\x19BD', '\a', '`', '\x2', '\x2', '\x19BD', '\x19BE', '\x5', '\x512', 
		'\x28A', '\x2', '\x19BE', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x19BF', 
		'\x19C0', '\a', '\x8C', '\x2', '\x2', '\x19C0', '\x19C1', '\a', '\x141', 
		'\x2', '\x2', '\x19C1', '\x19C2', '\x5', '\x50E', '\x288', '\x2', '\x19C2', 
		'\x19C3', '\a', '\x12E', '\x2', '\x2', '\x19C3', '\x19C4', '\a', '`', 
		'\x2', '\x2', '\x19C4', '\x19C5', '\x5', '\x512', '\x28A', '\x2', '\x19C5', 
		'\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x19C6', '\x19C7', '\a', '\x8C', 
		'\x2', '\x2', '\x19C7', '\x19C8', '\a', '\x141', '\x2', '\x2', '\x19C8', 
		'\x19C9', '\a', '\xDE', '\x2', '\x2', '\x19C9', '\x19CA', '\a', '\x185', 
		'\x2', '\x2', '\x19CA', '\x19CB', '\x5', '\x50E', '\x288', '\x2', '\x19CB', 
		'\x19CC', '\a', '\x12E', '\x2', '\x2', '\x19CC', '\x19CD', '\a', '`', 
		'\x2', '\x2', '\x19CD', '\x19CE', '\x5', '\x512', '\x28A', '\x2', '\x19CE', 
		'\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x19CF', '\x19D0', '\a', '\x8C', 
		'\x2', '\x2', '\x19D0', '\x19D1', '\a', '\x171', '\x2', '\x2', '\x19D1', 
		'\x19D2', '\x5', '\x50E', '\x288', '\x2', '\x19D2', '\x19D3', '\a', '\x12E', 
		'\x2', '\x2', '\x19D3', '\x19D4', '\a', '`', '\x2', '\x2', '\x19D4', '\x19D5', 
		'\x5', '\x512', '\x28A', '\x2', '\x19D5', '\x1AE7', '\x3', '\x2', '\x2', 
		'\x2', '\x19D6', '\x19D7', '\a', '\x8C', '\x2', '\x2', '\x19D7', '\x19D8', 
		'\a', '\x171', '\x2', '\x2', '\x19D8', '\x19D9', '\a', '\xDE', '\x2', 
		'\x2', '\x19D9', '\x19DA', '\a', '\x185', '\x2', '\x2', '\x19DA', '\x19DB', 
		'\x5', '\x50E', '\x288', '\x2', '\x19DB', '\x19DC', '\a', '\x12E', '\x2', 
		'\x2', '\x19DC', '\x19DD', '\a', '`', '\x2', '\x2', '\x19DD', '\x19DE', 
		'\x5', '\x512', '\x28A', '\x2', '\x19DE', '\x1AE7', '\x3', '\x2', '\x2', 
		'\x2', '\x19DF', '\x19E0', '\a', '\x8C', '\x2', '\x2', '\x19E0', '\x19E1', 
		'\a', '\xFC', '\x2', '\x2', '\x19E1', '\x19E2', '\a', '\x171', '\x2', 
		'\x2', '\x19E2', '\x19E3', '\x5', '\x50E', '\x288', '\x2', '\x19E3', '\x19E4', 
		'\a', '\x12E', '\x2', '\x2', '\x19E4', '\x19E5', '\a', '`', '\x2', '\x2', 
		'\x19E5', '\x19E6', '\x5', '\x512', '\x28A', '\x2', '\x19E6', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x19E7', '\x19E8', '\a', '\x8C', '\x2', '\x2', 
		'\x19E8', '\x19E9', '\a', '\xFC', '\x2', '\x2', '\x19E9', '\x19EA', '\a', 
		'\x171', '\x2', '\x2', '\x19EA', '\x19EB', '\a', '\xDE', '\x2', '\x2', 
		'\x19EB', '\x19EC', '\a', '\x185', '\x2', '\x2', '\x19EC', '\x19ED', '\x5', 
		'\x50E', '\x288', '\x2', '\x19ED', '\x19EE', '\a', '\x12E', '\x2', '\x2', 
		'\x19EE', '\x19EF', '\a', '`', '\x2', '\x2', '\x19EF', '\x19F0', '\x5', 
		'\x512', '\x28A', '\x2', '\x19F0', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x19F1', '\x19F2', '\a', '\x8C', '\x2', '\x2', '\x19F2', '\x19F3', '\a', 
		'\xE4', '\x2', '\x2', '\x19F3', '\x19F4', '\x5', '\x50E', '\x288', '\x2', 
		'\x19F4', '\x19F5', '\a', '\x12E', '\x2', '\x2', '\x19F5', '\x19F6', '\a', 
		'`', '\x2', '\x2', '\x19F6', '\x19F7', '\x5', '\x512', '\x28A', '\x2', 
		'\x19F7', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x19F8', '\x19F9', '\a', 
		'\x8C', '\x2', '\x2', '\x19F9', '\x19FA', '\a', '\xE4', '\x2', '\x2', 
		'\x19FA', '\x19FB', '\a', '\xDE', '\x2', '\x2', '\x19FB', '\x19FC', '\a', 
		'\x185', '\x2', '\x2', '\x19FC', '\x19FD', '\x5', '\x50E', '\x288', '\x2', 
		'\x19FD', '\x19FE', '\a', '\x12E', '\x2', '\x2', '\x19FE', '\x19FF', '\a', 
		'`', '\x2', '\x2', '\x19FF', '\x1A00', '\x5', '\x512', '\x28A', '\x2', 
		'\x1A00', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A01', '\x1A02', '\a', 
		'\x8C', '\x2', '\x2', '\x1A02', '\x1A03', '\a', '\x41', '\x2', '\x2', 
		'\x1A03', '\x1A04', '\a', '^', '\x2', '\x2', '\x1A04', '\x1A05', '\x5', 
		'\x42C', '\x217', '\x2', '\x1A05', '\x1A06', '\a', '\x12E', '\x2', '\x2', 
		'\x1A06', '\x1A07', '\a', '`', '\x2', '\x2', '\x1A07', '\x1A08', '\x5', 
		'\x512', '\x28A', '\x2', '\x1A08', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A09', '\x1A0A', '\a', '\x8C', '\x2', '\x2', '\x1A0A', '\x1A0B', '\a', 
		'\x41', '\x2', '\x2', '\x1A0B', '\x1A0C', '\a', '^', '\x2', '\x2', '\x1A0C', 
		'\x1A0D', '\a', '\xDE', '\x2', '\x2', '\x1A0D', '\x1A0E', '\a', '\x185', 
		'\x2', '\x2', '\x1A0E', '\x1A0F', '\x5', '\x42C', '\x217', '\x2', '\x1A0F', 
		'\x1A10', '\a', '\x12E', '\x2', '\x2', '\x1A10', '\x1A11', '\a', '`', 
		'\x2', '\x2', '\x1A11', '\x1A12', '\x5', '\x512', '\x28A', '\x2', '\x1A12', 
		'\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A13', '\x1A14', '\a', '\x8C', 
		'\x2', '\x2', '\x1A14', '\x1A15', '\a', '^', '\x2', '\x2', '\x1A15', '\x1A16', 
		'\x5', '\x42C', '\x217', '\x2', '\x1A16', '\x1A17', '\a', '\x12E', '\x2', 
		'\x2', '\x1A17', '\x1A18', '\x5', '\x2D6', '\x16C', '\x2', '\x1A18', '\x1A19', 
		'\x5', '\x512', '\x28A', '\x2', '\x1A19', '\x1A1A', '\a', '`', '\x2', 
		'\x2', '\x1A1A', '\x1A1B', '\x5', '\x512', '\x28A', '\x2', '\x1A1B', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1C', '\x1A1D', '\a', '\x8C', '\x2', '\x2', 
		'\x1A1D', '\x1A1E', '\a', '^', '\x2', '\x2', '\x1A1E', '\x1A1F', '\a', 
		'\xDE', '\x2', '\x2', '\x1A1F', '\x1A20', '\a', '\x185', '\x2', '\x2', 
		'\x1A20', '\x1A21', '\x5', '\x42C', '\x217', '\x2', '\x1A21', '\x1A22', 
		'\a', '\x12E', '\x2', '\x2', '\x1A22', '\x1A23', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x1A23', '\x1A24', '\x5', '\x512', '\x28A', '\x2', '\x1A24', '\x1A25', 
		'\a', '`', '\x2', '\x2', '\x1A25', '\x1A26', '\x5', '\x512', '\x28A', 
		'\x2', '\x1A26', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A27', '\x1A28', 
		'\a', '\x8C', '\x2', '\x2', '\x1A28', '\x1A29', '\a', '\x171', '\x2', 
		'\x2', '\x1A29', '\x1A2A', '\x5', '\x50E', '\x288', '\x2', '\x1A2A', '\x1A2B', 
		'\a', '\x12E', '\x2', '\x2', '\x1A2B', '\x1A2C', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x1A2C', '\x1A2D', '\x5', '\x512', '\x28A', '\x2', '\x1A2D', '\x1A2E', 
		'\a', '`', '\x2', '\x2', '\x1A2E', '\x1A2F', '\x5', '\x512', '\x28A', 
		'\x2', '\x1A2F', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A30', '\x1A31', 
		'\a', '\x8C', '\x2', '\x2', '\x1A31', '\x1A32', '\a', '\x171', '\x2', 
		'\x2', '\x1A32', '\x1A33', '\a', '\xDE', '\x2', '\x2', '\x1A33', '\x1A34', 
		'\a', '\x185', '\x2', '\x2', '\x1A34', '\x1A35', '\x5', '\x50E', '\x288', 
		'\x2', '\x1A35', '\x1A36', '\a', '\x12E', '\x2', '\x2', '\x1A36', '\x1A37', 
		'\x5', '\x2D6', '\x16C', '\x2', '\x1A37', '\x1A38', '\x5', '\x512', '\x28A', 
		'\x2', '\x1A38', '\x1A39', '\a', '`', '\x2', '\x2', '\x1A39', '\x1A3A', 
		'\x5', '\x512', '\x28A', '\x2', '\x1A3A', '\x1AE7', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3B', '\x1A3C', '\a', '\x8C', '\x2', '\x2', '\x1A3C', '\x1A3D', 
		'\a', '\xFC', '\x2', '\x2', '\x1A3D', '\x1A3E', '\a', '\x171', '\x2', 
		'\x2', '\x1A3E', '\x1A3F', '\x5', '\x50E', '\x288', '\x2', '\x1A3F', '\x1A40', 
		'\a', '\x12E', '\x2', '\x2', '\x1A40', '\x1A41', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x1A41', '\x1A42', '\x5', '\x512', '\x28A', '\x2', '\x1A42', '\x1A43', 
		'\a', '`', '\x2', '\x2', '\x1A43', '\x1A44', '\x5', '\x512', '\x28A', 
		'\x2', '\x1A44', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A45', '\x1A46', 
		'\a', '\x8C', '\x2', '\x2', '\x1A46', '\x1A47', '\a', '\xFC', '\x2', '\x2', 
		'\x1A47', '\x1A48', '\a', '\x171', '\x2', '\x2', '\x1A48', '\x1A49', '\a', 
		'\xDE', '\x2', '\x2', '\x1A49', '\x1A4A', '\a', '\x185', '\x2', '\x2', 
		'\x1A4A', '\x1A4B', '\x5', '\x50E', '\x288', '\x2', '\x1A4B', '\x1A4C', 
		'\a', '\x12E', '\x2', '\x2', '\x1A4C', '\x1A4D', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x1A4D', '\x1A4E', '\x5', '\x512', '\x28A', '\x2', '\x1A4E', '\x1A4F', 
		'\a', '`', '\x2', '\x2', '\x1A4F', '\x1A50', '\x5', '\x512', '\x28A', 
		'\x2', '\x1A50', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A51', '\x1A52', 
		'\a', '\x8C', '\x2', '\x2', '\x1A52', '\x1A53', '\a', '^', '\x2', '\x2', 
		'\x1A53', '\x1A54', '\x5', '\x42C', '\x217', '\x2', '\x1A54', '\x1A55', 
		'\a', '\x12E', '\x2', '\x2', '\x1A55', '\x1A56', '\a', '/', '\x2', '\x2', 
		'\x1A56', '\x1A57', '\x5', '\x512', '\x28A', '\x2', '\x1A57', '\x1A58', 
		'\a', '`', '\x2', '\x2', '\x1A58', '\x1A59', '\x5', '\x512', '\x28A', 
		'\x2', '\x1A59', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A5A', '\x1A5B', 
		'\a', '\x8C', '\x2', '\x2', '\x1A5B', '\x1A5C', '\a', '^', '\x2', '\x2', 
		'\x1A5C', '\x1A5D', '\a', '\xDE', '\x2', '\x2', '\x1A5D', '\x1A5E', '\a', 
		'\x185', '\x2', '\x2', '\x1A5E', '\x1A5F', '\x5', '\x42C', '\x217', '\x2', 
		'\x1A5F', '\x1A60', '\a', '\x12E', '\x2', '\x2', '\x1A60', '\x1A61', '\a', 
		'/', '\x2', '\x2', '\x1A61', '\x1A62', '\x5', '\x512', '\x28A', '\x2', 
		'\x1A62', '\x1A63', '\a', '`', '\x2', '\x2', '\x1A63', '\x1A64', '\x5', 
		'\x512', '\x28A', '\x2', '\x1A64', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A65', '\x1A66', '\a', '\x8C', '\x2', '\x2', '\x1A66', '\x1A67', '\a', 
		'\x41', '\x2', '\x2', '\x1A67', '\x1A68', '\a', '^', '\x2', '\x2', '\x1A68', 
		'\x1A69', '\x5', '\x42C', '\x217', '\x2', '\x1A69', '\x1A6A', '\a', '\x12E', 
		'\x2', '\x2', '\x1A6A', '\x1A6B', '\x5', '\x2D6', '\x16C', '\x2', '\x1A6B', 
		'\x1A6C', '\x5', '\x512', '\x28A', '\x2', '\x1A6C', '\x1A6D', '\a', '`', 
		'\x2', '\x2', '\x1A6D', '\x1A6E', '\x5', '\x512', '\x28A', '\x2', '\x1A6E', 
		'\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A6F', '\x1A70', '\a', '\x8C', 
		'\x2', '\x2', '\x1A70', '\x1A71', '\a', '\x41', '\x2', '\x2', '\x1A71', 
		'\x1A72', '\a', '^', '\x2', '\x2', '\x1A72', '\x1A73', '\a', '\xDE', '\x2', 
		'\x2', '\x1A73', '\x1A74', '\a', '\x185', '\x2', '\x2', '\x1A74', '\x1A75', 
		'\x5', '\x42C', '\x217', '\x2', '\x1A75', '\x1A76', '\a', '\x12E', '\x2', 
		'\x2', '\x1A76', '\x1A77', '\x5', '\x2D6', '\x16C', '\x2', '\x1A77', '\x1A78', 
		'\x5', '\x512', '\x28A', '\x2', '\x1A78', '\x1A79', '\a', '`', '\x2', 
		'\x2', '\x1A79', '\x1A7A', '\x5', '\x512', '\x28A', '\x2', '\x1A7A', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7B', '\x1A7C', '\a', '\x8C', '\x2', '\x2', 
		'\x1A7C', '\x1A7D', '\a', '\x13A', '\x2', '\x2', '\x1A7D', '\x1A7E', '\x5', 
		'\x512', '\x28A', '\x2', '\x1A7E', '\x1A7F', '\a', 'R', '\x2', '\x2', 
		'\x1A7F', '\x1A80', '\x5', '\x50E', '\x288', '\x2', '\x1A80', '\x1A81', 
		'\a', '\x12E', '\x2', '\x2', '\x1A81', '\x1A82', '\a', '`', '\x2', '\x2', 
		'\x1A82', '\x1A83', '\x5', '\x512', '\x28A', '\x2', '\x1A83', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A84', '\x1A85', '\a', '\x8C', '\x2', '\x2', 
		'\x1A85', '\x1A86', '\a', '\x15E', '\x2', '\x2', '\x1A86', '\x1A87', '\x5', 
		'\x512', '\x28A', '\x2', '\x1A87', '\x1A88', '\a', 'R', '\x2', '\x2', 
		'\x1A88', '\x1A89', '\x5', '\x50E', '\x288', '\x2', '\x1A89', '\x1A8A', 
		'\a', '\x12E', '\x2', '\x2', '\x1A8A', '\x1A8B', '\a', '`', '\x2', '\x2', 
		'\x1A8B', '\x1A8C', '\x5', '\x512', '\x28A', '\x2', '\x1A8C', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8D', '\x1A8E', '\a', '\x8C', '\x2', '\x2', 
		'\x1A8E', '\x1A8F', '\a', '\xC8', '\x2', '\x2', '\x1A8F', '\x1A90', '\a', 
		'\x15E', '\x2', '\x2', '\x1A90', '\x1A91', '\x5', '\x512', '\x28A', '\x2', 
		'\x1A91', '\x1A92', '\a', '\x12E', '\x2', '\x2', '\x1A92', '\x1A93', '\a', 
		'`', '\x2', '\x2', '\x1A93', '\x1A94', '\x5', '\x512', '\x28A', '\x2', 
		'\x1A94', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1A95', '\x1A96', '\a', 
		'\x8C', '\x2', '\x2', '\x1A96', '\x1A97', '\a', '\x137', '\x2', '\x2', 
		'\x1A97', '\x1A98', '\x5', '\x52C', '\x297', '\x2', '\x1A98', '\x1A99', 
		'\a', '\x12E', '\x2', '\x2', '\x1A99', '\x1A9A', '\a', '`', '\x2', '\x2', 
		'\x1A9A', '\x1A9B', '\x5', '\x52C', '\x297', '\x2', '\x1A9B', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9C', '\x1A9D', '\a', '\x8C', '\x2', '\x2', 
		'\x1A9D', '\x1A9E', '\a', '\x65', '\x2', '\x2', '\x1A9E', '\x1A9F', '\x5', 
		'\x52C', '\x297', '\x2', '\x1A9F', '\x1AA0', '\a', '\x12E', '\x2', '\x2', 
		'\x1AA0', '\x1AA1', '\a', '`', '\x2', '\x2', '\x1AA1', '\x1AA2', '\x5', 
		'\x52C', '\x297', '\x2', '\x1AA2', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA3', '\x1AA4', '\a', '\x8C', '\x2', '\x2', '\x1AA4', '\x1AA5', '\a', 
		'\x158', '\x2', '\x2', '\x1AA5', '\x1AA6', '\x5', '\x512', '\x28A', '\x2', 
		'\x1AA6', '\x1AA7', '\a', '\x12E', '\x2', '\x2', '\x1AA7', '\x1AA8', '\a', 
		'`', '\x2', '\x2', '\x1AA8', '\x1AA9', '\x5', '\x512', '\x28A', '\x2', 
		'\x1AA9', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1AAA', '\x1AAB', '\a', 
		'\x8C', '\x2', '\x2', '\x1AAB', '\x1AAC', '\a', '\x14F', '\x2', '\x2', 
		'\x1AAC', '\x1AAD', '\x5', '\x20E', '\x108', '\x2', '\x1AAD', '\x1AAE', 
		'\a', '\x12E', '\x2', '\x2', '\x1AAE', '\x1AAF', '\a', '`', '\x2', '\x2', 
		'\x1AAF', '\x1AB0', '\x5', '\x512', '\x28A', '\x2', '\x1AB0', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB1', '\x1AB2', '\a', '\x8C', '\x2', '\x2', 
		'\x1AB2', '\x1AB3', '\a', '\x15C', '\x2', '\x2', '\x1AB3', '\x1AB4', '\a', 
		'\x13E', '\x2', '\x2', '\x1AB4', '\x1AB5', '\a', '\x114', '\x2', '\x2', 
		'\x1AB5', '\x1AB6', '\x5', '\x20E', '\x108', '\x2', '\x1AB6', '\x1AB7', 
		'\a', '\x12E', '\x2', '\x2', '\x1AB7', '\x1AB8', '\a', '`', '\x2', '\x2', 
		'\x1AB8', '\x1AB9', '\x5', '\x512', '\x28A', '\x2', '\x1AB9', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1ABA', '\x1ABB', '\a', '\x8C', '\x2', '\x2', 
		'\x1ABB', '\x1ABC', '\a', '\x15C', '\x2', '\x2', '\x1ABC', '\x1ABD', '\a', 
		'\x13E', '\x2', '\x2', '\x1ABD', '\x1ABE', '\a', '\xBB', '\x2', '\x2', 
		'\x1ABE', '\x1ABF', '\x5', '\x20E', '\x108', '\x2', '\x1ABF', '\x1AC0', 
		'\a', '\x12E', '\x2', '\x2', '\x1AC0', '\x1AC1', '\a', '`', '\x2', '\x2', 
		'\x1AC1', '\x1AC2', '\x5', '\x512', '\x28A', '\x2', '\x1AC2', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC3', '\x1AC4', '\a', '\x8C', '\x2', '\x2', 
		'\x1AC4', '\x1AC5', '\a', '\x15C', '\x2', '\x2', '\x1AC5', '\x1AC6', '\a', 
		'\x13E', '\x2', '\x2', '\x1AC6', '\x1AC7', '\a', '\x15A', '\x2', '\x2', 
		'\x1AC7', '\x1AC8', '\x5', '\x20E', '\x108', '\x2', '\x1AC8', '\x1AC9', 
		'\a', '\x12E', '\x2', '\x2', '\x1AC9', '\x1ACA', '\a', '`', '\x2', '\x2', 
		'\x1ACA', '\x1ACB', '\x5', '\x512', '\x28A', '\x2', '\x1ACB', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1ACC', '\x1ACD', '\a', '\x8C', '\x2', '\x2', 
		'\x1ACD', '\x1ACE', '\a', '\x15C', '\x2', '\x2', '\x1ACE', '\x1ACF', '\a', 
		'\x13E', '\x2', '\x2', '\x1ACF', '\x1AD0', '\a', '\xA5', '\x2', '\x2', 
		'\x1AD0', '\x1AD1', '\x5', '\x20E', '\x108', '\x2', '\x1AD1', '\x1AD2', 
		'\a', '\x12E', '\x2', '\x2', '\x1AD2', '\x1AD3', '\a', '`', '\x2', '\x2', 
		'\x1AD3', '\x1AD4', '\x5', '\x512', '\x28A', '\x2', '\x1AD4', '\x1AE7', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD5', '\x1AD6', '\a', '\x8C', '\x2', '\x2', 
		'\x1AD6', '\x1AD7', '\a', '\x161', '\x2', '\x2', '\x1AD7', '\x1AD8', '\x5', 
		'\x20E', '\x108', '\x2', '\x1AD8', '\x1AD9', '\a', '\x12E', '\x2', '\x2', 
		'\x1AD9', '\x1ADA', '\a', '`', '\x2', '\x2', '\x1ADA', '\x1ADB', '\x5', 
		'\x512', '\x28A', '\x2', '\x1ADB', '\x1AE7', '\x3', '\x2', '\x2', '\x2', 
		'\x1ADC', '\x1ADD', '\a', '\x8C', '\x2', '\x2', '\x1ADD', '\x1ADE', '\a', 
		'\x161', '\x2', '\x2', '\x1ADE', '\x1ADF', '\x5', '\x20E', '\x108', '\x2', 
		'\x1ADF', '\x1AE0', '\a', '\x12E', '\x2', '\x2', '\x1AE0', '\x1AE1', '\a', 
		'\x91', '\x2', '\x2', '\x1AE1', '\x1AE2', '\x5', '\x512', '\x28A', '\x2', 
		'\x1AE2', '\x1AE3', '\a', '`', '\x2', '\x2', '\x1AE3', '\x1AE4', '\x5', 
		'\x512', '\x28A', '\x2', '\x1AE4', '\x1AE5', '\x5', 'n', '\x38', '\x2', 
		'\x1AE5', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1912', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE6', '\x1919', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1920', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1927', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x192E', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1935', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x193E', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1947', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x194E', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1955', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x195D', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1967', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1971', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x197A', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1985', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x198C', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1993', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x199A', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x19A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x19A8', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x19AF', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x19B6', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x19BF', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x19C6', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x19CF', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x19D6', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x19DF', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x19E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x19F1', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x19F8', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1A01', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1A09', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1A13', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1A1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1A27', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1A30', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1A3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1A45', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1A51', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1A5A', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1A65', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1A6F', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1A7B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1A84', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1A8D', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1A95', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1A9C', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1AA3', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1AAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1AB1', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1ABA', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1AC3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1ACC', '\x3', '\x2', '\x2', '\x2', '\x1AE6', 
		'\x1AD5', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1ADC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE7', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x1AE8', 
		'\x1AEB', '\a', '.', '\x2', '\x2', '\x1AE9', '\x1AEB', '\x3', '\x2', '\x2', 
		'\x2', '\x1AEA', '\x1AE8', '\x3', '\x2', '\x2', '\x2', '\x1AEA', '\x1AE9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AEB', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1AEC', '\x1AED', '\a', '\x146', '\x2', '\x2', '\x1AED', '\x1AF0', '\a', 
		'\xB0', '\x2', '\x2', '\x1AEE', '\x1AF0', '\x3', '\x2', '\x2', '\x2', 
		'\x1AEF', '\x1AEC', '\x3', '\x2', '\x2', '\x2', '\x1AEF', '\x1AEE', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF0', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x1AF1', 
		'\x1AF2', '\a', '\x8C', '\x2', '\x2', '\x1AF2', '\x1AF3', '\a', '\xD5', 
		'\x2', '\x2', '\x1AF3', '\x1AF4', '\x5', '\x274', '\x13B', '\x2', '\x1AF4', 
		'\x1AF5', '\x5', '\x2DC', '\x16F', '\x2', '\x1AF5', '\x1AF6', '\a', '\x1C8', 
		'\x2', '\x2', '\x1AF6', '\x1AF7', '\a', 'R', '\x2', '\x2', '\x1AF7', '\x1AF8', 
		'\a', '\xCE', '\x2', '\x2', '\x1AF8', '\x1AF9', '\x5', '\x512', '\x28A', 
		'\x2', '\x1AF9', '\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AFB', 
		'\a', '\x8C', '\x2', '\x2', '\x1AFB', '\x1AFC', '\a', '\x121', '\x2', 
		'\x2', '\x1AFC', '\x1AFD', '\x5', '\x274', '\x13B', '\x2', '\x1AFD', '\x1AFE', 
		'\x5', '\x2DC', '\x16F', '\x2', '\x1AFE', '\x1AFF', '\a', '\x1C8', '\x2', 
		'\x2', '\x1AFF', '\x1B00', '\a', 'R', '\x2', '\x2', '\x1B00', '\x1B01', 
		'\a', '\xCE', '\x2', '\x2', '\x1B01', '\x1B02', '\x5', '\x512', '\x28A', 
		'\x2', '\x1B02', '\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1B03', '\x1B04', 
		'\a', '\x8C', '\x2', '\x2', '\x1B04', '\x1B05', '\a', '\x1B4', '\x2', 
		'\x2', '\x1B05', '\x1B06', '\x5', '\x274', '\x13B', '\x2', '\x1B06', '\x1B07', 
		'\x5', '\x2DC', '\x16F', '\x2', '\x1B07', '\x1B08', '\a', '\x1C8', '\x2', 
		'\x2', '\x1B08', '\x1B09', '\a', 'R', '\x2', '\x2', '\x1B09', '\x1B0A', 
		'\a', '\xCE', '\x2', '\x2', '\x1B0A', '\x1B0B', '\x5', '\x512', '\x28A', 
		'\x2', '\x1B0B', '\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1B0C', '\x1B0D', 
		'\a', '\x8C', '\x2', '\x2', '\x1B0D', '\x1B0E', '\a', '\x15E', '\x2', 
		'\x2', '\x1B0E', '\x1B0F', '\x5', '\x512', '\x28A', '\x2', '\x1B0F', '\x1B10', 
		'\a', 'R', '\x2', '\x2', '\x1B10', '\x1B11', '\x5', '\x50E', '\x288', 
		'\x2', '\x1B11', '\x1B12', '\x5', '\x2DC', '\x16F', '\x2', '\x1B12', '\x1B13', 
		'\a', '\x1C8', '\x2', '\x2', '\x1B13', '\x1B14', '\a', 'R', '\x2', '\x2', 
		'\x1B14', '\x1B15', '\a', '\xCE', '\x2', '\x2', '\x1B15', '\x1B16', '\x5', 
		'\x512', '\x28A', '\x2', '\x1B16', '\x1B2B', '\x3', '\x2', '\x2', '\x2', 
		'\x1B17', '\x1B18', '\a', '\x8C', '\x2', '\x2', '\x1B18', '\x1B19', '\a', 
		'\xFC', '\x2', '\x2', '\x1B19', '\x1B1A', '\a', '\x171', '\x2', '\x2', 
		'\x1B1A', '\x1B1B', '\x5', '\x50E', '\x288', '\x2', '\x1B1B', '\x1B1C', 
		'\x5', '\x2DC', '\x16F', '\x2', '\x1B1C', '\x1B1D', '\a', '\x1C8', '\x2', 
		'\x2', '\x1B1D', '\x1B1E', '\a', 'R', '\x2', '\x2', '\x1B1E', '\x1B1F', 
		'\a', '\xCE', '\x2', '\x2', '\x1B1F', '\x1B20', '\x5', '\x512', '\x28A', 
		'\x2', '\x1B20', '\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1B21', '\x1B22', 
		'\a', '\x8C', '\x2', '\x2', '\x1B22', '\x1B23', '\a', '\xE4', '\x2', '\x2', 
		'\x1B23', '\x1B24', '\x5', '\x50E', '\x288', '\x2', '\x1B24', '\x1B25', 
		'\x5', '\x2DC', '\x16F', '\x2', '\x1B25', '\x1B26', '\a', '\x1C8', '\x2', 
		'\x2', '\x1B26', '\x1B27', '\a', 'R', '\x2', '\x2', '\x1B27', '\x1B28', 
		'\a', '\xCE', '\x2', '\x2', '\x1B28', '\x1B29', '\x5', '\x512', '\x28A', 
		'\x2', '\x1B29', '\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1B2A', '\x1AF1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2A', '\x1AFA', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2A', '\x1B03', '\x3', '\x2', '\x2', '\x2', '\x1B2A', '\x1B0C', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2A', '\x1B17', '\x3', '\x2', '\x2', '\x2', '\x1B2A', 
		'\x1B21', '\x3', '\x2', '\x2', '\x2', '\x1B2B', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2C', '\x1B2F', '\a', '\x106', '\x2', '\x2', '\x1B2D', 
		'\x1B2F', '\x3', '\x2', '\x2', '\x2', '\x1B2E', '\x1B2C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2E', '\x1B2D', '\x3', '\x2', '\x2', '\x2', '\x1B2F', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x1B30', '\x1B31', '\a', '\x8C', 
		'\x2', '\x2', '\x1B31', '\x1B32', '\a', '\x8A', '\x2', '\x2', '\x1B32', 
		'\x1B33', '\x5', '\x28C', '\x147', '\x2', '\x1B33', '\x1B34', '\a', '\x146', 
		'\x2', '\x2', '\x1B34', '\x1B35', '\a', '\x13C', '\x2', '\x2', '\x1B35', 
		'\x1B36', '\x5', '\x512', '\x28A', '\x2', '\x1B36', '\x1C0A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B37', '\x1B38', '\a', '\x8C', '\x2', '\x2', '\x1B38', 
		'\x1B39', '\a', 'n', '\x2', '\x2', '\x1B39', '\x1B3A', '\x5', '\x20E', 
		'\x108', '\x2', '\x1B3A', '\x1B3B', '\a', '\x146', '\x2', '\x2', '\x1B3B', 
		'\x1B3C', '\a', '\x13C', '\x2', '\x2', '\x1B3C', '\x1B3D', '\x5', '\x512', 
		'\x28A', '\x2', '\x1B3D', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B3E', 
		'\x1B3F', '\a', '\x8C', '\x2', '\x2', '\x1B3F', '\x1B40', '\a', '\xAA', 
		'\x2', '\x2', '\x1B40', '\x1B41', '\x5', '\x20E', '\x108', '\x2', '\x1B41', 
		'\x1B42', '\a', '\x146', '\x2', '\x2', '\x1B42', '\x1B43', '\a', '\x13C', 
		'\x2', '\x2', '\x1B43', '\x1B44', '\x5', '\x512', '\x28A', '\x2', '\x1B44', 
		'\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B45', '\x1B46', '\a', '\x8C', 
		'\x2', '\x2', '\x1B46', '\x1B47', '\a', '\xBF', '\x2', '\x2', '\x1B47', 
		'\x1B48', '\x5', '\x20E', '\x108', '\x2', '\x1B48', '\x1B49', '\a', '\x146', 
		'\x2', '\x2', '\x1B49', '\x1B4A', '\a', '\x13C', '\x2', '\x2', '\x1B4A', 
		'\x1B4B', '\x5', '\x512', '\x28A', '\x2', '\x1B4B', '\x1C0A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4C', '\x1B4D', '\a', '\x8C', '\x2', '\x2', '\x1B4D', 
		'\x1B4E', '\a', '\xCE', '\x2', '\x2', '\x1B4E', '\x1B4F', '\x5', '\x512', 
		'\x28A', '\x2', '\x1B4F', '\x1B50', '\a', '\x146', '\x2', '\x2', '\x1B50', 
		'\x1B51', '\a', '\x13C', '\x2', '\x2', '\x1B51', '\x1B52', '\x5', '\x512', 
		'\x28A', '\x2', '\x1B52', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B53', 
		'\x1B54', '\a', '\x8C', '\x2', '\x2', '\x1B54', '\x1B55', '\a', '\xD5', 
		'\x2', '\x2', '\x1B55', '\x1B56', '\x5', '\x274', '\x13B', '\x2', '\x1B56', 
		'\x1B57', '\a', '\x146', '\x2', '\x2', '\x1B57', '\x1B58', '\a', '\x13C', 
		'\x2', '\x2', '\x1B58', '\x1B59', '\x5', '\x512', '\x28A', '\x2', '\x1B59', 
		'\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B5A', '\x1B5B', '\a', '\x8C', 
		'\x2', '\x2', '\x1B5B', '\x1B5C', '\a', '\x10F', '\x2', '\x2', '\x1B5C', 
		'\x1B5D', '\x5', '\x2B2', '\x15A', '\x2', '\x1B5D', '\x1B5E', '\a', '\x146', 
		'\x2', '\x2', '\x1B5E', '\x1B5F', '\a', '\x13C', '\x2', '\x2', '\x1B5F', 
		'\x1B60', '\x5', '\x512', '\x28A', '\x2', '\x1B60', '\x1C0A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B61', '\x1B62', '\a', '\x8C', '\x2', '\x2', '\x1B62', 
		'\x1B63', '\a', '\x10F', '\x2', '\x2', '\x1B63', '\x1B64', '\a', '\x9E', 
		'\x2', '\x2', '\x1B64', '\x1B65', '\x5', '\x20E', '\x108', '\x2', '\x1B65', 
		'\x1B66', '\a', '\x66', '\x2', '\x2', '\x1B66', '\x1B67', '\x5', '\x512', 
		'\x28A', '\x2', '\x1B67', '\x1B68', '\a', '\x146', '\x2', '\x2', '\x1B68', 
		'\x1B69', '\a', '\x13C', '\x2', '\x2', '\x1B69', '\x1B6A', '\x5', '\x512', 
		'\x28A', '\x2', '\x1B6A', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B6B', 
		'\x1B6C', '\a', '\x8C', '\x2', '\x2', '\x1B6C', '\x1B6D', '\a', '\x10F', 
		'\x2', '\x2', '\x1B6D', '\x1B6E', '\a', '\xD0', '\x2', '\x2', '\x1B6E', 
		'\x1B6F', '\x5', '\x20E', '\x108', '\x2', '\x1B6F', '\x1B70', '\a', '\x66', 
		'\x2', '\x2', '\x1B70', '\x1B71', '\x5', '\x512', '\x28A', '\x2', '\x1B71', 
		'\x1B72', '\a', '\x146', '\x2', '\x2', '\x1B72', '\x1B73', '\a', '\x13C', 
		'\x2', '\x2', '\x1B73', '\x1B74', '\x5', '\x512', '\x28A', '\x2', '\x1B74', 
		'\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B75', '\x1B76', '\a', '\x8C', 
		'\x2', '\x2', '\x1B76', '\x1B77', '\a', '\x121', '\x2', '\x2', '\x1B77', 
		'\x1B78', '\x5', '\x274', '\x13B', '\x2', '\x1B78', '\x1B79', '\a', '\x146', 
		'\x2', '\x2', '\x1B79', '\x1B7A', '\a', '\x13C', '\x2', '\x2', '\x1B7A', 
		'\x1B7B', '\x5', '\x512', '\x28A', '\x2', '\x1B7B', '\x1C0A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7C', '\x1B7D', '\a', '\x8C', '\x2', '\x2', '\x1B7D', 
		'\x1B7E', '\a', '\x1B4', '\x2', '\x2', '\x1B7E', '\x1B7F', '\x5', '\x274', 
		'\x13B', '\x2', '\x1B7F', '\x1B80', '\a', '\x146', '\x2', '\x2', '\x1B80', 
		'\x1B81', '\a', '\x13C', '\x2', '\x2', '\x1B81', '\x1B82', '\x5', '\x512', 
		'\x28A', '\x2', '\x1B82', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1B83', 
		'\x1B84', '\a', '\x8C', '\x2', '\x2', '\x1B84', '\x1B85', '\a', '^', '\x2', 
		'\x2', '\x1B85', '\x1B86', '\x5', '\x42C', '\x217', '\x2', '\x1B86', '\x1B87', 
		'\a', '\x146', '\x2', '\x2', '\x1B87', '\x1B88', '\a', '\x13C', '\x2', 
		'\x2', '\x1B88', '\x1B89', '\x5', '\x512', '\x28A', '\x2', '\x1B89', '\x1C0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8A', '\x1B8B', '\a', '\x8C', '\x2', '\x2', 
		'\x1B8B', '\x1B8C', '\a', '^', '\x2', '\x2', '\x1B8C', '\x1B8D', '\a', 
		'\xDE', '\x2', '\x2', '\x1B8D', '\x1B8E', '\a', '\x185', '\x2', '\x2', 
		'\x1B8E', '\x1B8F', '\x5', '\x42C', '\x217', '\x2', '\x1B8F', '\x1B90', 
		'\a', '\x146', '\x2', '\x2', '\x1B90', '\x1B91', '\a', '\x13C', '\x2', 
		'\x2', '\x1B91', '\x1B92', '\x5', '\x512', '\x28A', '\x2', '\x1B92', '\x1C0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1B93', '\x1B94', '\a', '\x8C', '\x2', '\x2', 
		'\x1B94', '\x1B95', '\a', '\x14F', '\x2', '\x2', '\x1B95', '\x1B96', '\x5', 
		'\x20E', '\x108', '\x2', '\x1B96', '\x1B97', '\a', '\x146', '\x2', '\x2', 
		'\x1B97', '\x1B98', '\a', '\x13C', '\x2', '\x2', '\x1B98', '\x1B99', '\x5', 
		'\x512', '\x28A', '\x2', '\x1B99', '\x1C0A', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9A', '\x1B9B', '\a', '\x8C', '\x2', '\x2', '\x1B9B', '\x1B9C', '\a', 
		'\x15C', '\x2', '\x2', '\x1B9C', '\x1B9D', '\a', '\x13E', '\x2', '\x2', 
		'\x1B9D', '\x1B9E', '\a', '\x114', '\x2', '\x2', '\x1B9E', '\x1B9F', '\x5', 
		'\x20E', '\x108', '\x2', '\x1B9F', '\x1BA0', '\a', '\x146', '\x2', '\x2', 
		'\x1BA0', '\x1BA1', '\a', '\x13C', '\x2', '\x2', '\x1BA1', '\x1BA2', '\x5', 
		'\x512', '\x28A', '\x2', '\x1BA2', '\x1C0A', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA3', '\x1BA4', '\a', '\x8C', '\x2', '\x2', '\x1BA4', '\x1BA5', '\a', 
		'\x15C', '\x2', '\x2', '\x1BA5', '\x1BA6', '\a', '\x13E', '\x2', '\x2', 
		'\x1BA6', '\x1BA7', '\a', '\xBB', '\x2', '\x2', '\x1BA7', '\x1BA8', '\x5', 
		'\x20E', '\x108', '\x2', '\x1BA8', '\x1BA9', '\a', '\x146', '\x2', '\x2', 
		'\x1BA9', '\x1BAA', '\a', '\x13C', '\x2', '\x2', '\x1BAA', '\x1BAB', '\x5', 
		'\x512', '\x28A', '\x2', '\x1BAB', '\x1C0A', '\x3', '\x2', '\x2', '\x2', 
		'\x1BAC', '\x1BAD', '\a', '\x8C', '\x2', '\x2', '\x1BAD', '\x1BAE', '\a', 
		'\x15C', '\x2', '\x2', '\x1BAE', '\x1BAF', '\a', '\x13E', '\x2', '\x2', 
		'\x1BAF', '\x1BB0', '\a', '\x15A', '\x2', '\x2', '\x1BB0', '\x1BB1', '\x5', 
		'\x20E', '\x108', '\x2', '\x1BB1', '\x1BB2', '\a', '\x146', '\x2', '\x2', 
		'\x1BB2', '\x1BB3', '\a', '\x13C', '\x2', '\x2', '\x1BB3', '\x1BB4', '\x5', 
		'\x512', '\x28A', '\x2', '\x1BB4', '\x1C0A', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB5', '\x1BB6', '\a', '\x8C', '\x2', '\x2', '\x1BB6', '\x1BB7', '\a', 
		'\x15C', '\x2', '\x2', '\x1BB7', '\x1BB8', '\a', '\x13E', '\x2', '\x2', 
		'\x1BB8', '\x1BB9', '\a', '\xA5', '\x2', '\x2', '\x1BB9', '\x1BBA', '\x5', 
		'\x20E', '\x108', '\x2', '\x1BBA', '\x1BBB', '\a', '\x146', '\x2', '\x2', 
		'\x1BBB', '\x1BBC', '\a', '\x13C', '\x2', '\x2', '\x1BBC', '\x1BBD', '\x5', 
		'\x512', '\x28A', '\x2', '\x1BBD', '\x1C0A', '\x3', '\x2', '\x2', '\x2', 
		'\x1BBE', '\x1BBF', '\a', '\x8C', '\x2', '\x2', '\x1BBF', '\x1BC0', '\a', 
		'\x141', '\x2', '\x2', '\x1BC0', '\x1BC1', '\x5', '\x50E', '\x288', '\x2', 
		'\x1BC1', '\x1BC2', '\a', '\x146', '\x2', '\x2', '\x1BC2', '\x1BC3', '\a', 
		'\x13C', '\x2', '\x2', '\x1BC3', '\x1BC4', '\x5', '\x512', '\x28A', '\x2', 
		'\x1BC4', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1BC5', '\x1BC6', '\a', 
		'\x8C', '\x2', '\x2', '\x1BC6', '\x1BC7', '\a', '\x141', '\x2', '\x2', 
		'\x1BC7', '\x1BC8', '\a', '\xDE', '\x2', '\x2', '\x1BC8', '\x1BC9', '\a', 
		'\x185', '\x2', '\x2', '\x1BC9', '\x1BCA', '\x5', '\x50E', '\x288', '\x2', 
		'\x1BCA', '\x1BCB', '\a', '\x146', '\x2', '\x2', '\x1BCB', '\x1BCC', '\a', 
		'\x13C', '\x2', '\x2', '\x1BCC', '\x1BCD', '\x5', '\x512', '\x28A', '\x2', 
		'\x1BCD', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1BCE', '\x1BCF', '\a', 
		'\x8C', '\x2', '\x2', '\x1BCF', '\x1BD0', '\a', '\x171', '\x2', '\x2', 
		'\x1BD0', '\x1BD1', '\x5', '\x50E', '\x288', '\x2', '\x1BD1', '\x1BD2', 
		'\a', '\x146', '\x2', '\x2', '\x1BD2', '\x1BD3', '\a', '\x13C', '\x2', 
		'\x2', '\x1BD3', '\x1BD4', '\x5', '\x512', '\x28A', '\x2', '\x1BD4', '\x1C0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD5', '\x1BD6', '\a', '\x8C', '\x2', '\x2', 
		'\x1BD6', '\x1BD7', '\a', '\x171', '\x2', '\x2', '\x1BD7', '\x1BD8', '\a', 
		'\xDE', '\x2', '\x2', '\x1BD8', '\x1BD9', '\a', '\x185', '\x2', '\x2', 
		'\x1BD9', '\x1BDA', '\x5', '\x50E', '\x288', '\x2', '\x1BDA', '\x1BDB', 
		'\a', '\x146', '\x2', '\x2', '\x1BDB', '\x1BDC', '\a', '\x13C', '\x2', 
		'\x2', '\x1BDC', '\x1BDD', '\x5', '\x512', '\x28A', '\x2', '\x1BDD', '\x1C0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1BDE', '\x1BDF', '\a', '\x8C', '\x2', '\x2', 
		'\x1BDF', '\x1BE0', '\a', '\xFC', '\x2', '\x2', '\x1BE0', '\x1BE1', '\a', 
		'\x171', '\x2', '\x2', '\x1BE1', '\x1BE2', '\x5', '\x50E', '\x288', '\x2', 
		'\x1BE2', '\x1BE3', '\a', '\x146', '\x2', '\x2', '\x1BE3', '\x1BE4', '\a', 
		'\x13C', '\x2', '\x2', '\x1BE4', '\x1BE5', '\x5', '\x512', '\x28A', '\x2', 
		'\x1BE5', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1BE6', '\x1BE7', '\a', 
		'\x8C', '\x2', '\x2', '\x1BE7', '\x1BE8', '\a', '\xFC', '\x2', '\x2', 
		'\x1BE8', '\x1BE9', '\a', '\x171', '\x2', '\x2', '\x1BE9', '\x1BEA', '\a', 
		'\xDE', '\x2', '\x2', '\x1BEA', '\x1BEB', '\a', '\x185', '\x2', '\x2', 
		'\x1BEB', '\x1BEC', '\x5', '\x50E', '\x288', '\x2', '\x1BEC', '\x1BED', 
		'\a', '\x146', '\x2', '\x2', '\x1BED', '\x1BEE', '\a', '\x13C', '\x2', 
		'\x2', '\x1BEE', '\x1BEF', '\x5', '\x512', '\x28A', '\x2', '\x1BEF', '\x1C0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF0', '\x1BF1', '\a', '\x8C', '\x2', '\x2', 
		'\x1BF1', '\x1BF2', '\a', '\x41', '\x2', '\x2', '\x1BF2', '\x1BF3', '\a', 
		'^', '\x2', '\x2', '\x1BF3', '\x1BF4', '\x5', '\x42C', '\x217', '\x2', 
		'\x1BF4', '\x1BF5', '\a', '\x146', '\x2', '\x2', '\x1BF5', '\x1BF6', '\a', 
		'\x13C', '\x2', '\x2', '\x1BF6', '\x1BF7', '\x5', '\x512', '\x28A', '\x2', 
		'\x1BF7', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1BF8', '\x1BF9', '\a', 
		'\x8C', '\x2', '\x2', '\x1BF9', '\x1BFA', '\a', '\x41', '\x2', '\x2', 
		'\x1BFA', '\x1BFB', '\a', '^', '\x2', '\x2', '\x1BFB', '\x1BFC', '\a', 
		'\xDE', '\x2', '\x2', '\x1BFC', '\x1BFD', '\a', '\x185', '\x2', '\x2', 
		'\x1BFD', '\x1BFE', '\x5', '\x42C', '\x217', '\x2', '\x1BFE', '\x1BFF', 
		'\a', '\x146', '\x2', '\x2', '\x1BFF', '\x1C00', '\a', '\x13C', '\x2', 
		'\x2', '\x1C00', '\x1C01', '\x5', '\x512', '\x28A', '\x2', '\x1C01', '\x1C0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1C02', '\x1C03', '\a', '\x8C', '\x2', '\x2', 
		'\x1C03', '\x1C04', '\a', '\x161', '\x2', '\x2', '\x1C04', '\x1C05', '\x5', 
		'\x20E', '\x108', '\x2', '\x1C05', '\x1C06', '\a', '\x146', '\x2', '\x2', 
		'\x1C06', '\x1C07', '\a', '\x13C', '\x2', '\x2', '\x1C07', '\x1C08', '\x5', 
		'\x512', '\x28A', '\x2', '\x1C08', '\x1C0A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C09', '\x1B30', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1B37', '\x3', 
		'\x2', '\x2', '\x2', '\x1C09', '\x1B3E', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1B45', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1B4C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1B53', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1B5A', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1B61', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1B6B', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1B75', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1B7C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1B83', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1B8A', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1B93', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1B9A', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1BA3', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1BAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1BB5', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1BBE', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1BC5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1BCE', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1BD5', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1BDE', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1BE6', '\x3', '\x2', '\x2', '\x2', '\x1C09', 
		'\x1BF0', '\x3', '\x2', '\x2', '\x2', '\x1C09', '\x1BF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C09', '\x1C02', '\x3', '\x2', '\x2', '\x2', '\x1C0A', 
		'\x2DF', '\x3', '\x2', '\x2', '\x2', '\x1C0B', '\x1C0C', '\a', '\x8C', 
		'\x2', '\x2', '\x1C0C', '\x1C0D', '\a', '\x10F', '\x2', '\x2', '\x1C0D', 
		'\x1C0E', '\x5', '\x2B2', '\x15A', '\x2', '\x1C0E', '\x1C0F', '\a', '\x146', 
		'\x2', '\x2', '\x1C0F', '\x1C10', '\a', '\x4', '\x2', '\x2', '\x1C10', 
		'\x1C11', '\x5', '\x2E2', '\x172', '\x2', '\x1C11', '\x1C12', '\a', '\x5', 
		'\x2', '\x2', '\x1C12', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x1C13', 
		'\x1C14', '\b', '\x172', '\x1', '\x2', '\x1C14', '\x1C15', '\x5', '\x2E4', 
		'\x173', '\x2', '\x1C15', '\x1C1B', '\x3', '\x2', '\x2', '\x2', '\x1C16', 
		'\x1C17', '\f', '\x3', '\x2', '\x2', '\x1C17', '\x1C18', '\a', '\b', '\x2', 
		'\x2', '\x1C18', '\x1C1A', '\x5', '\x2E4', '\x173', '\x2', '\x1C19', '\x1C16', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1A', '\x1C1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1B', '\x1C19', '\x3', '\x2', '\x2', '\x2', '\x1C1B', '\x1C1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1C', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x1C1D', 
		'\x1C1B', '\x3', '\x2', '\x2', '\x2', '\x1C1E', '\x1C1F', '\x5', '\x538', 
		'\x29D', '\x2', '\x1C1F', '\x1C20', '\a', '\f', '\x2', '\x2', '\x1C20', 
		'\x1C21', '\a', '\x190', '\x2', '\x2', '\x1C21', '\x1C27', '\x3', '\x2', 
		'\x2', '\x2', '\x1C22', '\x1C23', '\x5', '\x538', '\x29D', '\x2', '\x1C23', 
		'\x1C24', '\a', '\f', '\x2', '\x2', '\x1C24', '\x1C25', '\x5', '\x2E6', 
		'\x174', '\x2', '\x1C25', '\x1C27', '\x3', '\x2', '\x2', '\x2', '\x1C26', 
		'\x1C1E', '\x3', '\x2', '\x2', '\x2', '\x1C26', '\x1C22', '\x3', '\x2', 
		'\x2', '\x2', '\x1C27', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x1C28', 
		'\x1C2E', '\x5', '\x282', '\x142', '\x2', '\x1C29', '\x1C2E', '\x5', '\x544', 
		'\x2A3', '\x2', '\x1C2A', '\x1C2E', '\x5', '\x4D0', '\x269', '\x2', '\x1C2B', 
		'\x1C2E', '\x5', '\x126', '\x94', '\x2', '\x1C2C', '\x1C2E', '\x5', '\x524', 
		'\x293', '\x2', '\x1C2D', '\x1C28', '\x3', '\x2', '\x2', '\x2', '\x1C2D', 
		'\x1C29', '\x3', '\x2', '\x2', '\x2', '\x1C2D', '\x1C2A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2D', '\x1C2B', '\x3', '\x2', '\x2', '\x2', '\x1C2D', 
		'\x1C2C', '\x3', '\x2', '\x2', '\x2', '\x1C2E', '\x2E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2F', '\x1C30', '\a', '\x8C', '\x2', '\x2', '\x1C30', 
		'\x1C31', '\a', '\x161', '\x2', '\x2', '\x1C31', '\x1C32', '\x5', '\x20E', 
		'\x108', '\x2', '\x1C32', '\x1C33', '\a', '\x146', '\x2', '\x2', '\x1C33', 
		'\x1C34', '\a', '\x4', '\x2', '\x2', '\x1C34', '\x1C35', '\x5', '\x2E2', 
		'\x172', '\x2', '\x1C35', '\x1C36', '\a', '\x5', '\x2', '\x2', '\x1C36', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x1C37', '\x1C38', '\a', '\x8C', 
		'\x2', '\x2', '\x1C38', '\x1C39', '\a', '\x8A', '\x2', '\x2', '\x1C39', 
		'\x1C3A', '\x5', '\x28C', '\x147', '\x2', '\x1C3A', '\x1C3B', '\a', '\x113', 
		'\x2', '\x2', '\x1C3B', '\x1C3C', '\a', '`', '\x2', '\x2', '\x1C3C', '\x1C3D', 
		'\x5', '\x52E', '\x298', '\x2', '\x1C3D', '\x1CEF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3E', '\x1C3F', '\a', '\x8C', '\x2', '\x2', '\x1C3F', '\x1C40', 
		'\a', 'n', '\x2', '\x2', '\x1C40', '\x1C41', '\x5', '\x20E', '\x108', 
		'\x2', '\x1C41', '\x1C42', '\a', '\x113', '\x2', '\x2', '\x1C42', '\x1C43', 
		'\a', '`', '\x2', '\x2', '\x1C43', '\x1C44', '\x5', '\x52E', '\x298', 
		'\x2', '\x1C44', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1C45', '\x1C46', 
		'\a', '\x8C', '\x2', '\x2', '\x1C46', '\x1C47', '\a', '\xAA', '\x2', '\x2', 
		'\x1C47', '\x1C48', '\x5', '\x20E', '\x108', '\x2', '\x1C48', '\x1C49', 
		'\a', '\x113', '\x2', '\x2', '\x1C49', '\x1C4A', '\a', '`', '\x2', '\x2', 
		'\x1C4A', '\x1C4B', '\x5', '\x52E', '\x298', '\x2', '\x1C4B', '\x1CEF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4C', '\x1C4D', '\a', '\x8C', '\x2', '\x2', 
		'\x1C4D', '\x1C4E', '\a', '\xB1', '\x2', '\x2', '\x1C4E', '\x1C4F', '\x5', 
		'\x512', '\x28A', '\x2', '\x1C4F', '\x1C50', '\a', '\x113', '\x2', '\x2', 
		'\x1C50', '\x1C51', '\a', '`', '\x2', '\x2', '\x1C51', '\x1C52', '\x5', 
		'\x52E', '\x298', '\x2', '\x1C52', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C53', '\x1C54', '\a', '\x8C', '\x2', '\x2', '\x1C54', '\x1C55', '\a', 
		'\xBF', '\x2', '\x2', '\x1C55', '\x1C56', '\x5', '\x20E', '\x108', '\x2', 
		'\x1C56', '\x1C57', '\a', '\x113', '\x2', '\x2', '\x1C57', '\x1C58', '\a', 
		'`', '\x2', '\x2', '\x1C58', '\x1C59', '\x5', '\x52E', '\x298', '\x2', 
		'\x1C59', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1C5A', '\x1C5B', '\a', 
		'\x8C', '\x2', '\x2', '\x1C5B', '\x1C5C', '\a', '\xD5', '\x2', '\x2', 
		'\x1C5C', '\x1C5D', '\x5', '\x274', '\x13B', '\x2', '\x1C5D', '\x1C5E', 
		'\a', '\x113', '\x2', '\x2', '\x1C5E', '\x1C5F', '\a', '`', '\x2', '\x2', 
		'\x1C5F', '\x1C60', '\x5', '\x52E', '\x298', '\x2', '\x1C60', '\x1CEF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C61', '\x1C62', '\a', '\x8C', '\x2', '\x2', 
		'\x1C62', '\x1C63', '\x5', '\x136', '\x9C', '\x2', '\x1C63', '\x1C64', 
		'\a', '\xF0', '\x2', '\x2', '\x1C64', '\x1C65', '\x5', '\x512', '\x28A', 
		'\x2', '\x1C65', '\x1C66', '\a', '\x113', '\x2', '\x2', '\x1C66', '\x1C67', 
		'\a', '`', '\x2', '\x2', '\x1C67', '\x1C68', '\x5', '\x52E', '\x298', 
		'\x2', '\x1C68', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1C69', '\x1C6A', 
		'\a', '\x8C', '\x2', '\x2', '\x1C6A', '\x1C6B', '\a', '\xF1', '\x2', '\x2', 
		'\x1C6B', '\x1C6C', '\a', '\x10B', '\x2', '\x2', '\x1C6C', '\x1C6D', '\x5', 
		'\x126', '\x94', '\x2', '\x1C6D', '\x1C6E', '\a', '\x113', '\x2', '\x2', 
		'\x1C6E', '\x1C6F', '\a', '`', '\x2', '\x2', '\x1C6F', '\x1C70', '\x5', 
		'\x52E', '\x298', '\x2', '\x1C70', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C71', '\x1C72', '\a', '\x8C', '\x2', '\x2', '\x1C72', '\x1C73', '\a', 
		'\x10F', '\x2', '\x2', '\x1C73', '\x1C74', '\x5', '\x2B2', '\x15A', '\x2', 
		'\x1C74', '\x1C75', '\a', '\x113', '\x2', '\x2', '\x1C75', '\x1C76', '\a', 
		'`', '\x2', '\x2', '\x1C76', '\x1C77', '\x5', '\x52E', '\x298', '\x2', 
		'\x1C77', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1C78', '\x1C79', '\a', 
		'\x8C', '\x2', '\x2', '\x1C79', '\x1C7A', '\a', '\x10F', '\x2', '\x2', 
		'\x1C7A', '\x1C7B', '\a', '\x9E', '\x2', '\x2', '\x1C7B', '\x1C7C', '\x5', 
		'\x20E', '\x108', '\x2', '\x1C7C', '\x1C7D', '\a', '\x66', '\x2', '\x2', 
		'\x1C7D', '\x1C7E', '\x5', '\x512', '\x28A', '\x2', '\x1C7E', '\x1C7F', 
		'\a', '\x113', '\x2', '\x2', '\x1C7F', '\x1C80', '\a', '`', '\x2', '\x2', 
		'\x1C80', '\x1C81', '\x5', '\x52E', '\x298', '\x2', '\x1C81', '\x1CEF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C82', '\x1C83', '\a', '\x8C', '\x2', '\x2', 
		'\x1C83', '\x1C84', '\a', '\x10F', '\x2', '\x2', '\x1C84', '\x1C85', '\a', 
		'\xD0', '\x2', '\x2', '\x1C85', '\x1C86', '\x5', '\x20E', '\x108', '\x2', 
		'\x1C86', '\x1C87', '\a', '\x66', '\x2', '\x2', '\x1C87', '\x1C88', '\x5', 
		'\x512', '\x28A', '\x2', '\x1C88', '\x1C89', '\a', '\x113', '\x2', '\x2', 
		'\x1C89', '\x1C8A', '\a', '`', '\x2', '\x2', '\x1C8A', '\x1C8B', '\x5', 
		'\x52E', '\x298', '\x2', '\x1C8B', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8C', '\x1C8D', '\a', '\x8C', '\x2', '\x2', '\x1C8D', '\x1C8E', '\a', 
		'\x121', '\x2', '\x2', '\x1C8E', '\x1C8F', '\x5', '\x274', '\x13B', '\x2', 
		'\x1C8F', '\x1C90', '\a', '\x113', '\x2', '\x2', '\x1C90', '\x1C91', '\a', 
		'`', '\x2', '\x2', '\x1C91', '\x1C92', '\x5', '\x52E', '\x298', '\x2', 
		'\x1C92', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1C93', '\x1C94', '\a', 
		'\x8C', '\x2', '\x2', '\x1C94', '\x1C95', '\a', '\x1B4', '\x2', '\x2', 
		'\x1C95', '\x1C96', '\x5', '\x274', '\x13B', '\x2', '\x1C96', '\x1C97', 
		'\a', '\x113', '\x2', '\x2', '\x1C97', '\x1C98', '\a', '`', '\x2', '\x2', 
		'\x1C98', '\x1C99', '\x5', '\x52E', '\x298', '\x2', '\x1C99', '\x1CEF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9A', '\x1C9B', '\a', '\x8C', '\x2', '\x2', 
		'\x1C9B', '\x1C9C', '\a', '\x13C', '\x2', '\x2', '\x1C9C', '\x1C9D', '\x5', 
		'\x512', '\x28A', '\x2', '\x1C9D', '\x1C9E', '\a', '\x113', '\x2', '\x2', 
		'\x1C9E', '\x1C9F', '\a', '`', '\x2', '\x2', '\x1C9F', '\x1CA0', '\x5', 
		'\x52E', '\x298', '\x2', '\x1CA0', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA1', '\x1CA2', '\a', '\x8C', '\x2', '\x2', '\x1CA2', '\x1CA3', '\a', 
		'\x161', '\x2', '\x2', '\x1CA3', '\x1CA4', '\x5', '\x20E', '\x108', '\x2', 
		'\x1CA4', '\x1CA5', '\a', '\x113', '\x2', '\x2', '\x1CA5', '\x1CA6', '\a', 
		'`', '\x2', '\x2', '\x1CA6', '\x1CA7', '\x5', '\x52E', '\x298', '\x2', 
		'\x1CA7', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1CA8', '\x1CA9', '\a', 
		'\x8C', '\x2', '\x2', '\x1CA9', '\x1CAA', '\a', '\x158', '\x2', '\x2', 
		'\x1CAA', '\x1CAB', '\x5', '\x512', '\x28A', '\x2', '\x1CAB', '\x1CAC', 
		'\a', '\x113', '\x2', '\x2', '\x1CAC', '\x1CAD', '\a', '`', '\x2', '\x2', 
		'\x1CAD', '\x1CAE', '\x5', '\x52E', '\x298', '\x2', '\x1CAE', '\x1CEF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CAF', '\x1CB0', '\a', '\x8C', '\x2', '\x2', 
		'\x1CB0', '\x1CB1', '\a', '\x14F', '\x2', '\x2', '\x1CB1', '\x1CB2', '\x5', 
		'\x20E', '\x108', '\x2', '\x1CB2', '\x1CB3', '\a', '\x113', '\x2', '\x2', 
		'\x1CB3', '\x1CB4', '\a', '`', '\x2', '\x2', '\x1CB4', '\x1CB5', '\x5', 
		'\x52E', '\x298', '\x2', '\x1CB5', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB6', '\x1CB7', '\a', '\x8C', '\x2', '\x2', '\x1CB7', '\x1CB8', '\a', 
		'\x15C', '\x2', '\x2', '\x1CB8', '\x1CB9', '\a', '\x13E', '\x2', '\x2', 
		'\x1CB9', '\x1CBA', '\a', '\xBB', '\x2', '\x2', '\x1CBA', '\x1CBB', '\x5', 
		'\x20E', '\x108', '\x2', '\x1CBB', '\x1CBC', '\a', '\x113', '\x2', '\x2', 
		'\x1CBC', '\x1CBD', '\a', '`', '\x2', '\x2', '\x1CBD', '\x1CBE', '\x5', 
		'\x52E', '\x298', '\x2', '\x1CBE', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CBF', '\x1CC0', '\a', '\x8C', '\x2', '\x2', '\x1CC0', '\x1CC1', '\a', 
		'\x15C', '\x2', '\x2', '\x1CC1', '\x1CC2', '\a', '\x13E', '\x2', '\x2', 
		'\x1CC2', '\x1CC3', '\a', '\xA5', '\x2', '\x2', '\x1CC3', '\x1CC4', '\x5', 
		'\x20E', '\x108', '\x2', '\x1CC4', '\x1CC5', '\a', '\x113', '\x2', '\x2', 
		'\x1CC5', '\x1CC6', '\a', '`', '\x2', '\x2', '\x1CC6', '\x1CC7', '\x5', 
		'\x52E', '\x298', '\x2', '\x1CC7', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC8', '\x1CC9', '\a', '\x8C', '\x2', '\x2', '\x1CC9', '\x1CCA', '\a', 
		'\x41', '\x2', '\x2', '\x1CCA', '\x1CCB', '\a', '\xB0', '\x2', '\x2', 
		'\x1CCB', '\x1CCC', '\a', '\x176', '\x2', '\x2', '\x1CCC', '\x1CCD', '\x5', 
		'\x512', '\x28A', '\x2', '\x1CCD', '\x1CCE', '\a', '\x113', '\x2', '\x2', 
		'\x1CCE', '\x1CCF', '\a', '`', '\x2', '\x2', '\x1CCF', '\x1CD0', '\x5', 
		'\x52E', '\x298', '\x2', '\x1CD0', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD1', '\x1CD2', '\a', '\x8C', '\x2', '\x2', '\x1CD2', '\x1CD3', '\a', 
		'\x144', '\x2', '\x2', '\x1CD3', '\x1CD4', '\x5', '\x512', '\x28A', '\x2', 
		'\x1CD4', '\x1CD5', '\a', '\x113', '\x2', '\x2', '\x1CD5', '\x1CD6', '\a', 
		'`', '\x2', '\x2', '\x1CD6', '\x1CD7', '\x5', '\x52E', '\x298', '\x2', 
		'\x1CD7', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1CD8', '\x1CD9', '\a', 
		'\x8C', '\x2', '\x2', '\x1CD9', '\x1CDA', '\a', '\xC8', '\x2', '\x2', 
		'\x1CDA', '\x1CDB', '\a', '\x15E', '\x2', '\x2', '\x1CDB', '\x1CDC', '\x5', 
		'\x512', '\x28A', '\x2', '\x1CDC', '\x1CDD', '\a', '\x113', '\x2', '\x2', 
		'\x1CDD', '\x1CDE', '\a', '`', '\x2', '\x2', '\x1CDE', '\x1CDF', '\x5', 
		'\x52E', '\x298', '\x2', '\x1CDF', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE0', '\x1CE1', '\a', '\x8C', '\x2', '\x2', '\x1CE1', '\x1CE2', '\a', 
		'\x1BE', '\x2', '\x2', '\x1CE2', '\x1CE3', '\x5', '\x512', '\x28A', '\x2', 
		'\x1CE3', '\x1CE4', '\a', '\x113', '\x2', '\x2', '\x1CE4', '\x1CE5', '\a', 
		'`', '\x2', '\x2', '\x1CE5', '\x1CE6', '\x5', '\x52E', '\x298', '\x2', 
		'\x1CE6', '\x1CEF', '\x3', '\x2', '\x2', '\x2', '\x1CE7', '\x1CE8', '\a', 
		'\x8C', '\x2', '\x2', '\x1CE8', '\x1CE9', '\a', '\x1BD', '\x2', '\x2', 
		'\x1CE9', '\x1CEA', '\x5', '\x512', '\x28A', '\x2', '\x1CEA', '\x1CEB', 
		'\a', '\x113', '\x2', '\x2', '\x1CEB', '\x1CEC', '\a', '`', '\x2', '\x2', 
		'\x1CEC', '\x1CED', '\x5', '\x52E', '\x298', '\x2', '\x1CED', '\x1CEF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1C37', '\x3', '\x2', '\x2', '\x2', 
		'\x1CEE', '\x1C3E', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1C45', '\x3', 
		'\x2', '\x2', '\x2', '\x1CEE', '\x1C4C', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1C53', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1C5A', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEE', '\x1C61', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1C69', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1C71', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEE', '\x1C78', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1C82', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1C8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEE', '\x1C93', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1C9A', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1CA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEE', '\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1CAF', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1CB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEE', '\x1CBF', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1CC8', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1CD1', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEE', '\x1CD8', '\x3', '\x2', '\x2', '\x2', '\x1CEE', 
		'\x1CE0', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1CE7', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEF', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x1CF0', 
		'\x1CF1', '\a', '\x30', '\x2', '\x2', '\x1CF1', '\x1CF2', '\a', '\x1BE', 
		'\x2', '\x2', '\x1CF2', '\x1CF3', '\x5', '\x512', '\x28A', '\x2', '\x1CF3', 
		'\x1CF4', '\x5', '\x2EE', '\x178', '\x2', '\x1CF4', '\x1CF5', '\x5', '\x29A', 
		'\x14E', '\x2', '\x1CF5', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x1CF6', 
		'\x1CF9', '\x5', '\x2F0', '\x179', '\x2', '\x1CF7', '\x1CF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF8', '\x1CF6', '\x3', '\x2', '\x2', '\x2', '\x1CF8', 
		'\x1CF7', '\x3', '\x2', '\x2', '\x2', '\x1CF9', '\x2EF', '\x3', '\x2', 
		'\x2', '\x2', '\x1CFA', '\x1CFB', '\a', '@', '\x2', '\x2', '\x1CFB', '\x1CFC', 
		'\a', '^', '\x2', '\x2', '\x1CFC', '\x1D01', '\x5', '\x42E', '\x218', 
		'\x2', '\x1CFD', '\x1CFE', '\a', '@', '\x2', '\x2', '\x1CFE', '\x1CFF', 
		'\a', ' ', '\x2', '\x2', '\x1CFF', '\x1D01', '\a', '\x157', '\x2', '\x2', 
		'\x1D00', '\x1CFA', '\x3', '\x2', '\x2', '\x2', '\x1D00', '\x1CFD', '\x3', 
		'\x2', '\x2', '\x2', '\x1D01', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x1D02', 
		'\x1D03', '\a', '\x8C', '\x2', '\x2', '\x1D03', '\x1D04', '\a', '\x1BE', 
		'\x2', '\x2', '\x1D04', '\x1D05', '\x5', '\x512', '\x28A', '\x2', '\x1D05', 
		'\x1D06', '\a', '\x146', '\x2', '\x2', '\x1D06', '\x1D07', '\x5', '\x1CE', 
		'\xE8', '\x2', '\x1D07', '\x1D1E', '\x3', '\x2', '\x2', '\x2', '\x1D08', 
		'\x1D09', '\a', '\x8C', '\x2', '\x2', '\x1D09', '\x1D0A', '\a', '\x1BE', 
		'\x2', '\x2', '\x1D0A', '\x1D0B', '\x5', '\x512', '\x28A', '\x2', '\x1D0B', 
		'\x1D0C', '\a', '\x87', '\x2', '\x2', '\x1D0C', '\x1D0D', '\a', '^', '\x2', 
		'\x2', '\x1D0D', '\x1D0E', '\x5', '\x42E', '\x218', '\x2', '\x1D0E', '\x1D1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0F', '\x1D10', '\a', '\x8C', '\x2', '\x2', 
		'\x1D10', '\x1D11', '\a', '\x1BE', '\x2', '\x2', '\x1D11', '\x1D12', '\x5', 
		'\x512', '\x28A', '\x2', '\x1D12', '\x1D13', '\a', '\x146', '\x2', '\x2', 
		'\x1D13', '\x1D14', '\a', '^', '\x2', '\x2', '\x1D14', '\x1D15', '\x5', 
		'\x42E', '\x218', '\x2', '\x1D15', '\x1D1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1D16', '\x1D17', '\a', '\x8C', '\x2', '\x2', '\x1D17', '\x1D18', '\a', 
		'\x1BE', '\x2', '\x2', '\x1D18', '\x1D19', '\x5', '\x512', '\x28A', '\x2', 
		'\x1D19', '\x1D1A', '\a', '\xC1', '\x2', '\x2', '\x1D1A', '\x1D1B', '\a', 
		'^', '\x2', '\x2', '\x1D1B', '\x1D1C', '\x5', '\x42E', '\x218', '\x2', 
		'\x1D1C', '\x1D1E', '\x3', '\x2', '\x2', '\x2', '\x1D1D', '\x1D02', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1D', '\x1D08', '\x3', '\x2', '\x2', '\x2', '\x1D1D', 
		'\x1D0F', '\x3', '\x2', '\x2', '\x2', '\x1D1D', '\x1D16', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1E', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x1D1F', 
		'\x1D20', '\a', '\x30', '\x2', '\x2', '\x1D20', '\x1D21', '\a', '\x1BD', 
		'\x2', '\x2', '\x1D21', '\x1D22', '\x5', '\x512', '\x28A', '\x2', '\x1D22', 
		'\x1D23', '\a', '\xA6', '\x2', '\x2', '\x1D23', '\x1D24', '\x5', '\x524', 
		'\x293', '\x2', '\x1D24', '\x1D25', '\a', '\x1BE', '\x2', '\x2', '\x1D25', 
		'\x1D26', '\x5', '\x2F6', '\x17C', '\x2', '\x1D26', '\x1D27', '\x5', '\x29A', 
		'\x14E', '\x2', '\x1D27', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x1D28', 
		'\x1D29', '\b', '\x17C', '\x1', '\x2', '\x1D29', '\x1D2A', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x1D2A', '\x1D30', '\x3', '\x2', '\x2', '\x2', '\x1D2B', 
		'\x1D2C', '\f', '\x3', '\x2', '\x2', '\x1D2C', '\x1D2D', '\a', '\b', '\x2', 
		'\x2', '\x1D2D', '\x1D2F', '\x5', '\x2F8', '\x17D', '\x2', '\x1D2E', '\x1D2B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2F', '\x1D32', '\x3', '\x2', '\x2', '\x2', 
		'\x1D30', '\x1D2E', '\x3', '\x2', '\x2', '\x2', '\x1D30', '\x1D31', '\x3', 
		'\x2', '\x2', '\x2', '\x1D31', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x1D32', 
		'\x1D30', '\x3', '\x2', '\x2', '\x2', '\x1D33', '\x1D34', '\x5', '\x538', 
		'\x29D', '\x2', '\x1D34', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x1D35', 
		'\x1D36', '\a', '\x8C', '\x2', '\x2', '\x1D36', '\x1D37', '\a', '\x1BD', 
		'\x2', '\x2', '\x1D37', '\x1D38', '\x5', '\x512', '\x28A', '\x2', '\x1D38', 
		'\x1D39', '\a', '\x146', '\x2', '\x2', '\x1D39', '\x1D3A', '\x5', '\x1CE', 
		'\xE8', '\x2', '\x1D3A', '\x1D5B', '\x3', '\x2', '\x2', '\x2', '\x1D3B', 
		'\x1D3C', '\a', '\x8C', '\x2', '\x2', '\x1D3C', '\x1D3D', '\a', '\x1BD', 
		'\x2', '\x2', '\x1D3D', '\x1D3E', '\x5', '\x512', '\x28A', '\x2', '\x1D3E', 
		'\x1D3F', '\a', '\xA6', '\x2', '\x2', '\x1D3F', '\x1D40', '\x5', '\x524', 
		'\x293', '\x2', '\x1D40', '\x1D5B', '\x3', '\x2', '\x2', '\x2', '\x1D41', 
		'\x1D42', '\a', '\x8C', '\x2', '\x2', '\x1D42', '\x1D43', '\a', '\x1BD', 
		'\x2', '\x2', '\x1D43', '\x1D44', '\x5', '\x512', '\x28A', '\x2', '\x1D44', 
		'\x1D45', '\a', '\x12A', '\x2', '\x2', '\x1D45', '\x1D46', '\a', '\x1BE', 
		'\x2', '\x2', '\x1D46', '\x1D47', '\x5', '\x29A', '\x14E', '\x2', '\x1D47', 
		'\x1D5B', '\x3', '\x2', '\x2', '\x2', '\x1D48', '\x1D49', '\a', '\x8C', 
		'\x2', '\x2', '\x1D49', '\x1D4A', '\a', '\x1BD', '\x2', '\x2', '\x1D4A', 
		'\x1D4B', '\x5', '\x512', '\x28A', '\x2', '\x1D4B', '\x1D4C', '\a', '\x146', 
		'\x2', '\x2', '\x1D4C', '\x1D4D', '\a', '\x1BE', '\x2', '\x2', '\x1D4D', 
		'\x1D4E', '\x5', '\x2F6', '\x17C', '\x2', '\x1D4E', '\x1D4F', '\x5', '\x29A', 
		'\x14E', '\x2', '\x1D4F', '\x1D5B', '\x3', '\x2', '\x2', '\x2', '\x1D50', 
		'\x1D51', '\a', '\x8C', '\x2', '\x2', '\x1D51', '\x1D52', '\a', '\x1BD', 
		'\x2', '\x2', '\x1D52', '\x1D53', '\x5', '\x512', '\x28A', '\x2', '\x1D53', 
		'\x1D54', '\a', '\xC3', '\x2', '\x2', '\x1D54', '\x1D5B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D55', '\x1D56', '\a', '\x8C', '\x2', '\x2', '\x1D56', 
		'\x1D57', '\a', '\x1BD', '\x2', '\x2', '\x1D57', '\x1D58', '\x5', '\x512', 
		'\x28A', '\x2', '\x1D58', '\x1D59', '\a', '\xBC', '\x2', '\x2', '\x1D59', 
		'\x1D5B', '\x3', '\x2', '\x2', '\x2', '\x1D5A', '\x1D35', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5A', '\x1D3B', '\x3', '\x2', '\x2', '\x2', '\x1D5A', 
		'\x1D41', '\x3', '\x2', '\x2', '\x2', '\x1D5A', '\x1D48', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5A', '\x1D50', '\x3', '\x2', '\x2', '\x2', '\x1D5A', 
		'\x1D55', '\x3', '\x2', '\x2', '\x2', '\x1D5B', '\x2FB', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5C', '\x1D5D', '\a', '\xC1', '\x2', '\x2', '\x1D5D', 
		'\x1D5E', '\a', '\x1BD', '\x2', '\x2', '\x1D5E', '\x1D5F', '\x5', '\x512', 
		'\x28A', '\x2', '\x1D5F', '\x1D60', '\x5', 'n', '\x38', '\x2', '\x1D60', 
		'\x1D69', '\x3', '\x2', '\x2', '\x2', '\x1D61', '\x1D62', '\a', '\xC1', 
		'\x2', '\x2', '\x1D62', '\x1D63', '\a', '\x1BD', '\x2', '\x2', '\x1D63', 
		'\x1D64', '\a', '\xDE', '\x2', '\x2', '\x1D64', '\x1D65', '\a', '\x185', 
		'\x2', '\x2', '\x1D65', '\x1D66', '\x5', '\x512', '\x28A', '\x2', '\x1D66', 
		'\x1D67', '\x5', 'n', '\x38', '\x2', '\x1D67', '\x1D69', '\x3', '\x2', 
		'\x2', '\x2', '\x1D68', '\x1D5C', '\x3', '\x2', '\x2', '\x2', '\x1D68', 
		'\x1D61', '\x3', '\x2', '\x2', '\x2', '\x1D69', '\x2FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D6A', '\x1D6B', '\a', '\x30', '\x2', '\x2', '\x1D6B', 
		'\x1D6C', '\x5', '\x26C', '\x137', '\x2', '\x1D6C', '\x1D6D', '\a', '\x13A', 
		'\x2', '\x2', '\x1D6D', '\x1D6E', '\x5', '\x512', '\x28A', '\x2', '\x1D6E', 
		'\x1D6F', '\a', '&', '\x2', '\x2', '\x1D6F', '\x1D70', '\a', 'R', '\x2', 
		'\x2', '\x1D70', '\x1D71', '\x5', '\x308', '\x185', '\x2', '\x1D71', '\x1D72', 
		'\a', '`', '\x2', '\x2', '\x1D72', '\x1D73', '\x5', '\x50E', '\x288', 
		'\x2', '\x1D73', '\x1D74', '\x5', '\x440', '\x221', '\x2', '\x1D74', '\x1D75', 
		'\a', ';', '\x2', '\x2', '\x1D75', '\x1D76', '\x5', '\x30A', '\x186', 
		'\x2', '\x1D76', '\x1D77', '\x5', '\x300', '\x181', '\x2', '\x1D77', '\x2FF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D78', '\x1D7F', '\a', '\x107', '\x2', 
		'\x2', '\x1D79', '\x1D7F', '\x5', '\x304', '\x183', '\x2', '\x1D7A', '\x1D7B', 
		'\a', '\x4', '\x2', '\x2', '\x1D7B', '\x1D7C', '\x5', '\x302', '\x182', 
		'\x2', '\x1D7C', '\x1D7D', '\a', '\x5', '\x2', '\x2', '\x1D7D', '\x1D7F', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7E', '\x1D78', '\x3', '\x2', '\x2', '\x2', 
		'\x1D7E', '\x1D79', '\x3', '\x2', '\x2', '\x2', '\x1D7E', '\x1D7A', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7F', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1D80', 
		'\x1D81', '\b', '\x182', '\x1', '\x2', '\x1D81', '\x1D82', '\x5', '\x306', 
		'\x184', '\x2', '\x1D82', '\x1D88', '\x3', '\x2', '\x2', '\x2', '\x1D83', 
		'\x1D84', '\f', '\x4', '\x2', '\x2', '\x1D84', '\x1D85', '\a', '\t', '\x2', 
		'\x2', '\x1D85', '\x1D87', '\x5', '\x306', '\x184', '\x2', '\x1D86', '\x1D83', 
		'\x3', '\x2', '\x2', '\x2', '\x1D87', '\x1D8A', '\x3', '\x2', '\x2', '\x2', 
		'\x1D88', '\x1D86', '\x3', '\x2', '\x2', '\x2', '\x1D88', '\x1D89', '\x3', 
		'\x2', '\x2', '\x2', '\x1D89', '\x303', '\x3', '\x2', '\x2', '\x2', '\x1D8A', 
		'\x1D88', '\x3', '\x2', '\x2', '\x2', '\x1D8B', '\x1D91', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1D8C', '\x1D91', '\x5', '\x388', '\x1C5', '\x2', '\x1D8D', 
		'\x1D91', '\x5', '\x3A8', '\x1D5', '\x2', '\x1D8E', '\x1D91', '\x5', '\x39A', 
		'\x1CE', '\x2', '\x1D8F', '\x1D91', '\x5', '\x30C', '\x187', '\x2', '\x1D90', 
		'\x1D8B', '\x3', '\x2', '\x2', '\x2', '\x1D90', '\x1D8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D90', '\x1D8D', '\x3', '\x2', '\x2', '\x2', '\x1D90', 
		'\x1D8E', '\x3', '\x2', '\x2', '\x2', '\x1D90', '\x1D8F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D91', '\x305', '\x3', '\x2', '\x2', '\x2', '\x1D92', 
		'\x1D95', '\x5', '\x304', '\x183', '\x2', '\x1D93', '\x1D95', '\x3', '\x2', 
		'\x2', '\x2', '\x1D94', '\x1D92', '\x3', '\x2', '\x2', '\x2', '\x1D94', 
		'\x1D93', '\x3', '\x2', '\x2', '\x2', '\x1D95', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x1D96', '\x1D97', '\t', '\x10', '\x2', '\x2', '\x1D97', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x1D98', '\x1D9C', '\a', '\xEB', 
		'\x2', '\x2', '\x1D99', '\x1D9C', '\a', '\x8B', '\x2', '\x2', '\x1D9A', 
		'\x1D9C', '\x3', '\x2', '\x2', '\x2', '\x1D9B', '\x1D98', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9B', '\x1D99', '\x3', '\x2', '\x2', '\x2', '\x1D9B', 
		'\x1D9A', '\x3', '\x2', '\x2', '\x2', '\x1D9C', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9D', '\x1D9E', '\a', '\x108', '\x2', '\x2', '\x1D9E', 
		'\x1D9F', '\x5', '\x532', '\x29A', '\x2', '\x1D9F', '\x1DA0', '\x5', '\x30E', 
		'\x188', '\x2', '\x1DA0', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x1DA1', 
		'\x1DA2', '\a', '\b', '\x2', '\x2', '\x1DA2', '\x1DA5', '\x5', '\x524', 
		'\x293', '\x2', '\x1DA3', '\x1DA5', '\x3', '\x2', '\x2', '\x2', '\x1DA4', 
		'\x1DA1', '\x3', '\x2', '\x2', '\x2', '\x1DA4', '\x1DA3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA5', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x1DA6', 
		'\x1DA7', '\a', '\xF5', '\x2', '\x2', '\x1DA7', '\x1DA8', '\x5', '\x532', 
		'\x29A', '\x2', '\x1DA8', '\x311', '\x3', '\x2', '\x2', '\x2', '\x1DA9', 
		'\x1DAA', '\a', '\x167', '\x2', '\x2', '\x1DAA', '\x1DAE', '\x5', '\x532', 
		'\x29A', '\x2', '\x1DAB', '\x1DAC', '\a', '\x167', '\x2', '\x2', '\x1DAC', 
		'\x1DAE', '\a', '\v', '\x2', '\x2', '\x1DAD', '\x1DA9', '\x3', '\x2', 
		'\x2', '\x2', '\x1DAD', '\x1DAB', '\x3', '\x2', '\x2', '\x2', '\x1DAE', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x1DAF', '\x1DB0', '\a', '\x83', 
		'\x2', '\x2', '\x1DB0', '\x1DB1', '\x5', '\x316', '\x18C', '\x2', '\x1DB1', 
		'\x1DB2', '\x5', '\x31E', '\x190', '\x2', '\x1DB2', '\x1DE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB3', '\x1DB4', '\a', '\x94', '\x2', '\x2', '\x1DB4', 
		'\x1DB5', '\x5', '\x316', '\x18C', '\x2', '\x1DB5', '\x1DB6', '\x5', '\x31C', 
		'\x18F', '\x2', '\x1DB6', '\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DB7', 
		'\x1DB8', '\a', '\x14D', '\x2', '\x2', '\x1DB8', '\x1DB9', '\a', '\x15D', 
		'\x2', '\x2', '\x1DB9', '\x1DE2', '\x5', '\x31C', '\x18F', '\x2', '\x1DBA', 
		'\x1DBB', '\a', '\xA3', '\x2', '\x2', '\x1DBB', '\x1DBC', '\x5', '\x316', 
		'\x18C', '\x2', '\x1DBC', '\x1DBD', '\x5', '\x31E', '\x190', '\x2', '\x1DBD', 
		'\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DBE', '\x1DBF', '\a', '\x1C0', 
		'\x2', '\x2', '\x1DBF', '\x1DC0', '\x5', '\x316', '\x18C', '\x2', '\x1DC0', 
		'\x1DC1', '\x5', '\x31E', '\x190', '\x2', '\x1DC1', '\x1DE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC2', '\x1DC3', '\a', '\x138', '\x2', '\x2', '\x1DC3', 
		'\x1DC4', '\x5', '\x316', '\x18C', '\x2', '\x1DC4', '\x1DC5', '\x5', '\x31E', 
		'\x190', '\x2', '\x1DC5', '\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DC6', 
		'\x1DC7', '\a', '\x13B', '\x2', '\x2', '\x1DC7', '\x1DE2', '\x5', '\x532', 
		'\x29A', '\x2', '\x1DC8', '\x1DC9', '\a', '\x12D', '\x2', '\x2', '\x1DC9', 
		'\x1DCA', '\a', '\x13B', '\x2', '\x2', '\x1DCA', '\x1DE2', '\x5', '\x532', 
		'\x29A', '\x2', '\x1DCB', '\x1DCC', '\a', '\x12D', '\x2', '\x2', '\x1DCC', 
		'\x1DE2', '\x5', '\x532', '\x29A', '\x2', '\x1DCD', '\x1DCE', '\a', '\x138', 
		'\x2', '\x2', '\x1DCE', '\x1DCF', '\x5', '\x316', '\x18C', '\x2', '\x1DCF', 
		'\x1DD0', '\a', '`', '\x2', '\x2', '\x1DD0', '\x1DD1', '\a', '\x13B', 
		'\x2', '\x2', '\x1DD1', '\x1DD2', '\x5', '\x532', '\x29A', '\x2', '\x1DD2', 
		'\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DD3', '\x1DD4', '\a', '\x138', 
		'\x2', '\x2', '\x1DD4', '\x1DD5', '\x5', '\x316', '\x18C', '\x2', '\x1DD5', 
		'\x1DD6', '\a', '`', '\x2', '\x2', '\x1DD6', '\x1DD7', '\x5', '\x532', 
		'\x29A', '\x2', '\x1DD7', '\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DD8', 
		'\x1DD9', '\a', '\x11B', '\x2', '\x2', '\x1DD9', '\x1DDA', '\a', '\x15D', 
		'\x2', '\x2', '\x1DDA', '\x1DE2', '\x5', '\x524', '\x293', '\x2', '\x1DDB', 
		'\x1DDC', '\a', '\xA3', '\x2', '\x2', '\x1DDC', '\x1DDD', '\a', '\x11C', 
		'\x2', '\x2', '\x1DDD', '\x1DE2', '\x5', '\x524', '\x293', '\x2', '\x1DDE', 
		'\x1DDF', '\a', '\x138', '\x2', '\x2', '\x1DDF', '\x1DE0', '\a', '\x11C', 
		'\x2', '\x2', '\x1DE0', '\x1DE2', '\x5', '\x524', '\x293', '\x2', '\x1DE1', 
		'\x1DAF', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE1', '\x1DB7', '\x3', '\x2', '\x2', '\x2', '\x1DE1', 
		'\x1DBA', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DBE', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE1', '\x1DC2', '\x3', '\x2', '\x2', '\x2', '\x1DE1', 
		'\x1DC6', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DC8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE1', '\x1DCB', '\x3', '\x2', '\x2', '\x2', '\x1DE1', 
		'\x1DCD', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE1', '\x1DD8', '\x3', '\x2', '\x2', '\x2', '\x1DE1', 
		'\x1DDB', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DDE', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE2', '\x315', '\x3', '\x2', '\x2', '\x2', '\x1DE3', 
		'\x1DE7', '\a', '\x175', '\x2', '\x2', '\x1DE4', '\x1DE7', '\a', '\x15D', 
		'\x2', '\x2', '\x1DE5', '\x1DE7', '\x3', '\x2', '\x2', '\x2', '\x1DE6', 
		'\x1DE3', '\x3', '\x2', '\x2', '\x2', '\x1DE6', '\x1DE4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE6', '\x1DE5', '\x3', '\x2', '\x2', '\x2', '\x1DE7', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x1DE8', '\x1DE9', '\a', '\xED', 
		'\x2', '\x2', '\x1DE9', '\x1DEA', '\a', '\xF4', '\x2', '\x2', '\x1DEA', 
		'\x1DF3', '\x5', '\x42', '\"', '\x2', '\x1DEB', '\x1DEC', '\a', '\x125', 
		'\x2', '\x2', '\x1DEC', '\x1DF3', '\a', 'S', '\x2', '\x2', '\x1DED', '\x1DEE', 
		'\a', '\x125', '\x2', '\x2', '\x1DEE', '\x1DF3', '\a', '\x177', '\x2', 
		'\x2', '\x1DEF', '\x1DF3', '\a', '\x38', '\x2', '\x2', '\x1DF0', '\x1DF1', 
		'\a', 'O', '\x2', '\x2', '\x1DF1', '\x1DF3', '\a', '\x38', '\x2', '\x2', 
		'\x1DF2', '\x1DE8', '\x3', '\x2', '\x2', '\x2', '\x1DF2', '\x1DEB', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF2', '\x1DED', '\x3', '\x2', '\x2', '\x2', '\x1DF2', 
		'\x1DEF', '\x3', '\x2', '\x2', '\x2', '\x1DF2', '\x1DF0', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF3', '\x319', '\x3', '\x2', '\x2', '\x2', '\x1DF4', 
		'\x1DF5', '\b', '\x18E', '\x1', '\x2', '\x1DF5', '\x1DF6', '\x5', '\x318', 
		'\x18D', '\x2', '\x1DF6', '\x1DFE', '\x3', '\x2', '\x2', '\x2', '\x1DF7', 
		'\x1DF8', '\f', '\x4', '\x2', '\x2', '\x1DF8', '\x1DF9', '\a', '\b', '\x2', 
		'\x2', '\x1DF9', '\x1DFD', '\x5', '\x318', '\x18D', '\x2', '\x1DFA', '\x1DFB', 
		'\f', '\x3', '\x2', '\x2', '\x1DFB', '\x1DFD', '\x5', '\x318', '\x18D', 
		'\x2', '\x1DFC', '\x1DF7', '\x3', '\x2', '\x2', '\x2', '\x1DFC', '\x1DFA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DFD', '\x1E00', '\x3', '\x2', '\x2', '\x2', 
		'\x1DFE', '\x1DFC', '\x3', '\x2', '\x2', '\x2', '\x1DFE', '\x1DFF', '\x3', 
		'\x2', '\x2', '\x2', '\x1DFF', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x1E00', 
		'\x1DFE', '\x3', '\x2', '\x2', '\x2', '\x1E01', '\x1E04', '\x5', '\x31A', 
		'\x18E', '\x2', '\x1E02', '\x1E04', '\x3', '\x2', '\x2', '\x2', '\x1E03', 
		'\x1E01', '\x3', '\x2', '\x2', '\x2', '\x1E03', '\x1E02', '\x3', '\x2', 
		'\x2', '\x2', '\x1E04', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x1E05', 
		'\x1E06', '\a', '#', '\x2', '\x2', '\x1E06', '\x1E0C', '\a', '\x9B', '\x2', 
		'\x2', '\x1E07', '\x1E08', '\a', '#', '\x2', '\x2', '\x1E08', '\x1E09', 
		'\a', '\x106', '\x2', '\x2', '\x1E09', '\x1E0C', '\a', '\x9B', '\x2', 
		'\x2', '\x1E0A', '\x1E0C', '\x3', '\x2', '\x2', '\x2', '\x1E0B', '\x1E05', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0B', '\x1E07', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0B', '\x1E0A', '\x3', '\x2', '\x2', '\x2', '\x1E0C', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0D', '\x1E0E', '\a', '\x30', '\x2', '\x2', '\x1E0E', 
		'\x1E0F', '\x5', '\xB0', 'Y', '\x2', '\x1E0F', '\x1E10', '\a', '\x171', 
		'\x2', '\x2', '\x1E10', '\x1E11', '\x5', '\x50E', '\x288', '\x2', '\x1E11', 
		'\x1E12', '\x5', '\xD8', 'm', '\x2', '\x1E12', '\x1E13', '\x5', 'x', '=', 
		'\x2', '\x1E13', '\x1E14', '\a', '&', '\x2', '\x2', '\x1E14', '\x1E15', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1E15', '\x1E16', '\x5', '\x322', '\x192', 
		'\x2', '\x1E16', '\x1E40', '\x3', '\x2', '\x2', '\x2', '\x1E17', '\x1E18', 
		'\a', '\x30', '\x2', '\x2', '\x1E18', '\x1E19', '\a', 'T', '\x2', '\x2', 
		'\x1E19', '\x1E1A', '\a', '\x130', '\x2', '\x2', '\x1E1A', '\x1E1B', '\x5', 
		'\xB0', 'Y', '\x2', '\x1E1B', '\x1E1C', '\a', '\x171', '\x2', '\x2', '\x1E1C', 
		'\x1E1D', '\x5', '\x50E', '\x288', '\x2', '\x1E1D', '\x1E1E', '\x5', '\xD8', 
		'm', '\x2', '\x1E1E', '\x1E1F', '\x5', 'x', '=', '\x2', '\x1E1F', '\x1E20', 
		'\a', '&', '\x2', '\x2', '\x1E20', '\x1E21', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1E21', '\x1E22', '\x5', '\x322', '\x192', '\x2', '\x1E22', '\x1E40', 
		'\x3', '\x2', '\x2', '\x2', '\x1E23', '\x1E24', '\a', '\x30', '\x2', '\x2', 
		'\x1E24', '\x1E25', '\x5', '\xB0', 'Y', '\x2', '\x1E25', '\x1E26', '\a', 
		'\x128', '\x2', '\x2', '\x1E26', '\x1E27', '\a', '\x171', '\x2', '\x2', 
		'\x1E27', '\x1E28', '\x5', '\x50E', '\x288', '\x2', '\x1E28', '\x1E29', 
		'\a', '\x4', '\x2', '\x2', '\x1E29', '\x1E2A', '\x5', '\xDA', 'n', '\x2', 
		'\x1E2A', '\x1E2B', '\a', '\x5', '\x2', '\x2', '\x1E2B', '\x1E2C', '\x5', 
		'x', '=', '\x2', '\x1E2C', '\x1E2D', '\a', '&', '\x2', '\x2', '\x1E2D', 
		'\x1E2E', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E2E', '\x1E2F', '\x5', '\x322', 
		'\x192', '\x2', '\x1E2F', '\x1E40', '\x3', '\x2', '\x2', '\x2', '\x1E30', 
		'\x1E31', '\a', '\x30', '\x2', '\x2', '\x1E31', '\x1E32', '\a', 'T', '\x2', 
		'\x2', '\x1E32', '\x1E33', '\a', '\x130', '\x2', '\x2', '\x1E33', '\x1E34', 
		'\x5', '\xB0', 'Y', '\x2', '\x1E34', '\x1E35', '\a', '\x128', '\x2', '\x2', 
		'\x1E35', '\x1E36', '\a', '\x171', '\x2', '\x2', '\x1E36', '\x1E37', '\x5', 
		'\x50E', '\x288', '\x2', '\x1E37', '\x1E38', '\a', '\x4', '\x2', '\x2', 
		'\x1E38', '\x1E39', '\x5', '\xDA', 'n', '\x2', '\x1E39', '\x1E3A', '\a', 
		'\x5', '\x2', '\x2', '\x1E3A', '\x1E3B', '\x5', 'x', '=', '\x2', '\x1E3B', 
		'\x1E3C', '\a', '&', '\x2', '\x2', '\x1E3C', '\x1E3D', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1E3D', '\x1E3E', '\x5', '\x322', '\x192', '\x2', '\x1E3E', 
		'\x1E40', '\x3', '\x2', '\x2', '\x2', '\x1E3F', '\x1E0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3F', '\x1E17', '\x3', '\x2', '\x2', '\x2', '\x1E3F', 
		'\x1E23', '\x3', '\x2', '\x2', '\x2', '\x1E3F', '\x1E30', '\x3', '\x2', 
		'\x2', '\x2', '\x1E40', '\x321', '\x3', '\x2', '\x2', '\x2', '\x1E41', 
		'\x1E42', '\a', 'k', '\x2', '\x2', '\x1E42', '\x1E43', '\a', ',', '\x2', 
		'\x2', '\x1E43', '\x1E4E', '\a', '\x110', '\x2', '\x2', '\x1E44', '\x1E45', 
		'\a', 'k', '\x2', '\x2', '\x1E45', '\x1E46', '\a', '\x99', '\x2', '\x2', 
		'\x1E46', '\x1E47', '\a', ',', '\x2', '\x2', '\x1E47', '\x1E4E', '\a', 
		'\x110', '\x2', '\x2', '\x1E48', '\x1E49', '\a', 'k', '\x2', '\x2', '\x1E49', 
		'\x1E4A', '\a', '\xF7', '\x2', '\x2', '\x1E4A', '\x1E4B', '\a', ',', '\x2', 
		'\x2', '\x1E4B', '\x1E4E', '\a', '\x110', '\x2', '\x2', '\x1E4C', '\x1E4E', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4D', '\x1E41', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4D', '\x1E44', '\x3', '\x2', '\x2', '\x2', '\x1E4D', '\x1E48', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4D', '\x1E4C', '\x3', '\x2', '\x2', '\x2', '\x1E4E', 
		'\x323', '\x3', '\x2', '\x2', '\x2', '\x1E4F', '\x1E50', '\a', '\xF6', 
		'\x2', '\x2', '\x1E50', '\x1E51', '\x5', '\x516', '\x28C', '\x2', '\x1E51', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\x1E52', '\x1E53', '\a', '\x30', 
		'\x2', '\x2', '\x1E53', '\x1E54', '\a', '\xB1', '\x2', '\x2', '\x1E54', 
		'\x1E55', '\x5', '\x512', '\x28A', '\x2', '\x1E55', '\x1E56', '\x5', '\x12', 
		'\n', '\x2', '\x1E56', '\x1E57', '\x5', '\x328', '\x195', '\x2', '\x1E57', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x1E58', '\x1E5B', '\x5', '\x32A', 
		'\x196', '\x2', '\x1E59', '\x1E5B', '\x3', '\x2', '\x2', '\x2', '\x1E5A', 
		'\x1E58', '\x3', '\x2', '\x2', '\x2', '\x1E5A', '\x1E59', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5B', '\x329', '\x3', '\x2', '\x2', '\x2', '\x1E5C', 
		'\x1E5D', '\b', '\x196', '\x1', '\x2', '\x1E5D', '\x1E5E', '\x5', '\x32C', 
		'\x197', '\x2', '\x1E5E', '\x1E63', '\x3', '\x2', '\x2', '\x2', '\x1E5F', 
		'\x1E60', '\f', '\x3', '\x2', '\x2', '\x1E60', '\x1E62', '\x5', '\x32C', 
		'\x197', '\x2', '\x1E61', '\x1E5F', '\x3', '\x2', '\x2', '\x2', '\x1E62', 
		'\x1E65', '\x3', '\x2', '\x2', '\x2', '\x1E63', '\x1E61', '\x3', '\x2', 
		'\x2', '\x2', '\x1E63', '\x1E64', '\x3', '\x2', '\x2', '\x2', '\x1E64', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x1E65', '\x1E63', '\x3', '\x2', 
		'\x2', '\x2', '\x1E66', '\x1E67', '\x5', '\x32E', '\x198', '\x2', '\x1E67', 
		'\x1E68', '\x5', '\x330', '\x199', '\x2', '\x1E68', '\x1E69', '\x5', '\x52A', 
		'\x296', '\x2', '\x1E69', '\x1E73', '\x3', '\x2', '\x2', '\x2', '\x1E6A', 
		'\x1E6B', '\x5', '\x32E', '\x198', '\x2', '\x1E6B', '\x1E6C', '\x5', '\x330', 
		'\x199', '\x2', '\x1E6C', '\x1E6D', '\x5', '\x44', '#', '\x2', '\x1E6D', 
		'\x1E73', '\x3', '\x2', '\x2', '\x2', '\x1E6E', '\x1E6F', '\x5', '\x32E', 
		'\x198', '\x2', '\x1E6F', '\x1E70', '\x5', '\x330', '\x199', '\x2', '\x1E70', 
		'\x1E71', '\a', '\x37', '\x2', '\x2', '\x1E71', '\x1E73', '\x3', '\x2', 
		'\x2', '\x2', '\x1E72', '\x1E66', '\x3', '\x2', '\x2', '\x2', '\x1E72', 
		'\x1E6A', '\x3', '\x2', '\x2', '\x2', '\x1E72', '\x1E6E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E73', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x1E74', 
		'\x1E7D', '\x5', '\x53A', '\x29E', '\x2', '\x1E75', '\x1E76', '\a', '\xA6', 
		'\x2', '\x2', '\x1E76', '\x1E7D', '\a', 'L', '\x2', '\x2', '\x1E77', '\x1E7D', 
		'\a', '\xC4', '\x2', '\x2', '\x1E78', '\x1E7D', '\a', '\xF8', '\x2', '\x2', 
		'\x1E79', '\x1E7D', '\a', '\x113', '\x2', '\x2', '\x1E7A', '\x1E7D', '\a', 
		'\x158', '\x2', '\x2', '\x1E7B', '\x1E7D', '\a', '\x15A', '\x2', '\x2', 
		'\x1E7C', '\x1E74', '\x3', '\x2', '\x2', '\x2', '\x1E7C', '\x1E75', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7C', '\x1E77', '\x3', '\x2', '\x2', '\x2', '\x1E7C', 
		'\x1E78', '\x3', '\x2', '\x2', '\x2', '\x1E7C', '\x1E79', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7C', '\x1E7A', '\x3', '\x2', '\x2', '\x2', '\x1E7C', 
		'\x1E7B', '\x3', '\x2', '\x2', '\x2', '\x1E7D', '\x32F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7E', '\x1E81', '\a', '\f', '\x2', '\x2', '\x1E7F', 
		'\x1E81', '\x3', '\x2', '\x2', '\x2', '\x1E80', '\x1E7E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E80', '\x1E7F', '\x3', '\x2', '\x2', '\x2', '\x1E81', 
		'\x331', '\x3', '\x2', '\x2', '\x2', '\x1E82', '\x1E83', '\a', '\x8C', 
		'\x2', '\x2', '\x1E83', '\x1E84', '\a', '\xB1', '\x2', '\x2', '\x1E84', 
		'\x1E85', '\x5', '\x512', '\x28A', '\x2', '\x1E85', '\x1E86', '\a', 'k', 
		'\x2', '\x2', '\x1E86', '\x1E87', '\x5', '\x328', '\x195', '\x2', '\x1E87', 
		'\x1E95', '\x3', '\x2', '\x2', '\x2', '\x1E88', '\x1E89', '\a', '\x8C', 
		'\x2', '\x2', '\x1E89', '\x1E8A', '\a', '\xB1', '\x2', '\x2', '\x1E8A', 
		'\x1E8B', '\x5', '\x512', '\x28A', '\x2', '\x1E8B', '\x1E8C', '\x5', '\x328', 
		'\x195', '\x2', '\x1E8C', '\x1E95', '\x3', '\x2', '\x2', '\x2', '\x1E8D', 
		'\x1E8E', '\a', '\x8C', '\x2', '\x2', '\x1E8E', '\x1E8F', '\a', '\xB1', 
		'\x2', '\x2', '\x1E8F', '\x1E90', '\x5', '\x512', '\x28A', '\x2', '\x1E90', 
		'\x1E91', '\a', '\x146', '\x2', '\x2', '\x1E91', '\x1E92', '\a', '\x158', 
		'\x2', '\x2', '\x1E92', '\x1E93', '\x5', '\x512', '\x28A', '\x2', '\x1E93', 
		'\x1E95', '\x3', '\x2', '\x2', '\x2', '\x1E94', '\x1E82', '\x3', '\x2', 
		'\x2', '\x2', '\x1E94', '\x1E88', '\x3', '\x2', '\x2', '\x2', '\x1E94', 
		'\x1E8D', '\x3', '\x2', '\x2', '\x2', '\x1E95', '\x333', '\x3', '\x2', 
		'\x2', '\x2', '\x1E96', '\x1E97', '\a', '\x8C', '\x2', '\x2', '\x1E97', 
		'\x1E98', '\a', '\xB1', '\x2', '\x2', '\x1E98', '\x1E99', '\x5', '\x512', 
		'\x28A', '\x2', '\x1E99', '\x1E9A', '\x5', 'R', '*', '\x2', '\x1E9A', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x1E9B', '\x1E9C', '\a', '\xC1', 
		'\x2', '\x2', '\x1E9C', '\x1E9D', '\a', '\xB1', '\x2', '\x2', '\x1E9D', 
		'\x1EB6', '\x5', '\x512', '\x28A', '\x2', '\x1E9E', '\x1E9F', '\a', '\xC1', 
		'\x2', '\x2', '\x1E9F', '\x1EA0', '\a', '\xB1', '\x2', '\x2', '\x1EA0', 
		'\x1EA1', '\a', '\xDE', '\x2', '\x2', '\x1EA1', '\x1EA2', '\a', '\x185', 
		'\x2', '\x2', '\x1EA2', '\x1EB6', '\x5', '\x512', '\x28A', '\x2', '\x1EA3', 
		'\x1EA4', '\a', '\xC1', '\x2', '\x2', '\x1EA4', '\x1EA5', '\a', '\xB1', 
		'\x2', '\x2', '\x1EA5', '\x1EA6', '\x5', '\x512', '\x28A', '\x2', '\x1EA6', 
		'\x1EA7', '\x5', '\x12', '\n', '\x2', '\x1EA7', '\x1EA8', '\a', '\x4', 
		'\x2', '\x2', '\x1EA8', '\x1EA9', '\x5', '\x338', '\x19D', '\x2', '\x1EA9', 
		'\x1EAA', '\a', '\x5', '\x2', '\x2', '\x1EAA', '\x1EB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1EAB', '\x1EAC', '\a', '\xC1', '\x2', '\x2', '\x1EAC', 
		'\x1EAD', '\a', '\xB1', '\x2', '\x2', '\x1EAD', '\x1EAE', '\a', '\xDE', 
		'\x2', '\x2', '\x1EAE', '\x1EAF', '\a', '\x185', '\x2', '\x2', '\x1EAF', 
		'\x1EB0', '\x5', '\x512', '\x28A', '\x2', '\x1EB0', '\x1EB1', '\x5', '\x12', 
		'\n', '\x2', '\x1EB1', '\x1EB2', '\a', '\x4', '\x2', '\x2', '\x1EB2', 
		'\x1EB3', '\x5', '\x338', '\x19D', '\x2', '\x1EB3', '\x1EB4', '\a', '\x5', 
		'\x2', '\x2', '\x1EB4', '\x1EB6', '\x3', '\x2', '\x2', '\x2', '\x1EB5', 
		'\x1E9B', '\x3', '\x2', '\x2', '\x2', '\x1EB5', '\x1E9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB5', '\x1EA3', '\x3', '\x2', '\x2', '\x2', '\x1EB5', 
		'\x1EAB', '\x3', '\x2', '\x2', '\x2', '\x1EB6', '\x337', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB7', '\x1EB8', '\b', '\x19D', '\x1', '\x2', '\x1EB8', 
		'\x1EB9', '\x5', '\x33A', '\x19E', '\x2', '\x1EB9', '\x1EBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1EBA', '\x1EBB', '\f', '\x3', '\x2', '\x2', '\x1EBB', 
		'\x1EBC', '\a', '\b', '\x2', '\x2', '\x1EBC', '\x1EBE', '\x5', '\x33A', 
		'\x19E', '\x2', '\x1EBD', '\x1EBA', '\x3', '\x2', '\x2', '\x2', '\x1EBE', 
		'\x1EC1', '\x3', '\x2', '\x2', '\x2', '\x1EBF', '\x1EBD', '\x3', '\x2', 
		'\x2', '\x2', '\x1EBF', '\x1EC0', '\x3', '\x2', '\x2', '\x2', '\x1EC0', 
		'\x339', '\x3', '\x2', '\x2', '\x2', '\x1EC1', '\x1EBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC2', '\x1EC3', '\a', '\xD3', '\x2', '\x2', '\x1EC3', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x1EC4', '\x1EC5', '\a', '\x8C', 
		'\x2', '\x2', '\x1EC5', '\x1EC6', '\a', 'n', '\x2', '\x2', '\x1EC6', '\x1EC7', 
		'\x5', '\x20E', '\x108', '\x2', '\x1EC7', '\x1EC8', '\a', '\x12A', '\x2', 
		'\x2', '\x1EC8', '\x1EC9', '\a', '\x170', '\x2', '\x2', '\x1EC9', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x1ECA', '\x1ECB', '\a', '\x8C', '\x2', '\x2', 
		'\x1ECB', '\x1ECC', '\a', '\x156', '\x2', '\x2', '\x1ECC', '\x1ECD', '\a', 
		'\x146', '\x2', '\x2', '\x1ECD', '\x1ED3', '\x5', '\x38', '\x1D', '\x2', 
		'\x1ECE', '\x1ECF', '\a', '\x8C', '\x2', '\x2', '\x1ECF', '\x1ED0', '\a', 
		'\x156', '\x2', '\x2', '\x1ED0', '\x1ED1', '\a', '\x132', '\x2', '\x2', 
		'\x1ED1', '\x1ED3', '\x5', 'P', ')', '\x2', '\x1ED2', '\x1ECA', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED2', '\x1ECE', '\x3', '\x2', '\x2', '\x2', '\x1ED3', 
		'\x33F', '\x3', '\x2', '\x2', '\x2', '\x1ED4', '\x1ED5', '\a', '\x30', 
		'\x2', '\x2', '\x1ED5', '\x1ED6', '\a', '\xBF', '\x2', '\x2', '\x1ED6', 
		'\x1ED7', '\x5', '\x20E', '\x108', '\x2', '\x1ED7', '\x1ED8', '\x5', '\x344', 
		'\x1A3', '\x2', '\x1ED8', '\x1ED9', '\x5', '\x458', '\x22D', '\x2', '\x1ED9', 
		'\x1EDA', '\x5', '\xC2', '\x62', '\x2', '\x1EDA', '\x341', '\x3', '\x2', 
		'\x2', '\x2', '\x1EDB', '\x1EDC', '\a', '\x8C', '\x2', '\x2', '\x1EDC', 
		'\x1EDD', '\a', '\xBF', '\x2', '\x2', '\x1EDD', '\x1EDE', '\x5', '\x20E', 
		'\x108', '\x2', '\x1EDE', '\x1EDF', '\x5', 'l', '\x37', '\x2', '\x1EDF', 
		'\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x1EE0', '\x1EE1', '\a', '\x8C', 
		'\x2', '\x2', '\x1EE1', '\x1EE2', '\a', '\xBF', '\x2', '\x2', '\x1EE2', 
		'\x1EE3', '\x5', '\x20E', '\x108', '\x2', '\x1EE3', '\x1EE4', '\a', '\xC1', 
		'\x2', '\x2', '\x1EE4', '\x1EE5', '\a', 'O', '\x2', '\x2', '\x1EE5', '\x1EE6', 
		'\a', 'P', '\x2', '\x2', '\x1EE6', '\x1F0E', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE7', '\x1EE8', '\a', '\x8C', '\x2', '\x2', '\x1EE8', '\x1EE9', '\a', 
		'\xBF', '\x2', '\x2', '\x1EE9', '\x1EEA', '\x5', '\x20E', '\x108', '\x2', 
		'\x1EEA', '\x1EEB', '\a', '\x146', '\x2', '\x2', '\x1EEB', '\x1EEC', '\a', 
		'O', '\x2', '\x2', '\x1EEC', '\x1EED', '\a', 'P', '\x2', '\x2', '\x1EED', 
		'\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x1EEE', '\x1EEF', '\a', '\x8C', 
		'\x2', '\x2', '\x1EEF', '\x1EF0', '\a', '\xBF', '\x2', '\x2', '\x1EF0', 
		'\x1EF1', '\x5', '\x20E', '\x108', '\x2', '\x1EF1', '\x1EF2', '\a', '\x87', 
		'\x2', '\x2', '\x1EF2', '\x1EF3', '\x5', '\xD2', 'j', '\x2', '\x1EF3', 
		'\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x1EF4', '\x1EF5', '\a', '\x8C', 
		'\x2', '\x2', '\x1EF5', '\x1EF6', '\a', '\xBF', '\x2', '\x2', '\x1EF6', 
		'\x1EF7', '\x5', '\x20E', '\x108', '\x2', '\x1EF7', '\x1EF8', '\a', '\xC1', 
		'\x2', '\x2', '\x1EF8', '\x1EF9', '\a', '/', '\x2', '\x2', '\x1EF9', '\x1EFA', 
		'\x5', '\x512', '\x28A', '\x2', '\x1EFA', '\x1EFB', '\x5', 'n', '\x38', 
		'\x2', '\x1EFB', '\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x1EFC', '\x1EFD', 
		'\a', '\x8C', '\x2', '\x2', '\x1EFD', '\x1EFE', '\a', '\xBF', '\x2', '\x2', 
		'\x1EFE', '\x1EFF', '\x5', '\x20E', '\x108', '\x2', '\x1EFF', '\x1F00', 
		'\a', '\xC1', '\x2', '\x2', '\x1F00', '\x1F01', '\a', '/', '\x2', '\x2', 
		'\x1F01', '\x1F02', '\a', '\xDE', '\x2', '\x2', '\x1F02', '\x1F03', '\a', 
		'\x185', '\x2', '\x2', '\x1F03', '\x1F04', '\x5', '\x512', '\x28A', '\x2', 
		'\x1F04', '\x1F05', '\x5', 'n', '\x38', '\x2', '\x1F05', '\x1F0E', '\x3', 
		'\x2', '\x2', '\x2', '\x1F06', '\x1F07', '\a', '\x8C', '\x2', '\x2', '\x1F07', 
		'\x1F08', '\a', '\xBF', '\x2', '\x2', '\x1F08', '\x1F09', '\x5', '\x20E', 
		'\x108', '\x2', '\x1F09', '\x1F0A', '\a', '\x16D', '\x2', '\x2', '\x1F0A', 
		'\x1F0B', '\a', '/', '\x2', '\x2', '\x1F0B', '\x1F0C', '\x5', '\x512', 
		'\x28A', '\x2', '\x1F0C', '\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x1F0D', 
		'\x1EDB', '\x3', '\x2', '\x2', '\x2', '\x1F0D', '\x1EE0', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0D', '\x1EE7', '\x3', '\x2', '\x2', '\x2', '\x1F0D', 
		'\x1EEE', '\x3', '\x2', '\x2', '\x2', '\x1F0D', '\x1EF4', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0D', '\x1EFC', '\x3', '\x2', '\x2', '\x2', '\x1F0D', 
		'\x1F06', '\x3', '\x2', '\x2', '\x2', '\x1F0E', '\x343', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0F', '\x1F12', '\a', '&', '\x2', '\x2', '\x1F10', '\x1F12', 
		'\x3', '\x2', '\x2', '\x2', '\x1F11', '\x1F0F', '\x3', '\x2', '\x2', '\x2', 
		'\x1F11', '\x1F10', '\x3', '\x2', '\x2', '\x2', '\x1F12', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x1F13', '\x1F14', '\a', '\x8C', '\x2', '\x2', '\x1F14', 
		'\x1F15', '\a', '\x15C', '\x2', '\x2', '\x1F15', '\x1F16', '\a', '\x13E', 
		'\x2', '\x2', '\x1F16', '\x1F17', '\a', '\xBB', '\x2', '\x2', '\x1F17', 
		'\x1F18', '\x5', '\x20E', '\x108', '\x2', '\x1F18', '\x1F19', '\x5', '\x1CE', 
		'\xE8', '\x2', '\x1F19', '\x347', '\x3', '\x2', '\x2', '\x2', '\x1F1A', 
		'\x1F1B', '\a', '\x8C', '\x2', '\x2', '\x1F1B', '\x1F1C', '\a', '\x15C', 
		'\x2', '\x2', '\x1F1C', '\x1F1D', '\a', '\x13E', '\x2', '\x2', '\x1F1D', 
		'\x1F1E', '\a', '\xA5', '\x2', '\x2', '\x1F1E', '\x1F1F', '\x5', '\x20E', 
		'\x108', '\x2', '\x1F1F', '\x1F20', '\a', '\x87', '\x2', '\x2', '\x1F20', 
		'\x1F21', '\a', '\xFA', '\x2', '\x2', '\x1F21', '\x1F22', '\a', '@', '\x2', 
		'\x2', '\x1F22', '\x1F23', '\x5', '\x510', '\x289', '\x2', '\x1F23', '\x1F24', 
		'\x5', '\x34A', '\x1A6', '\x2', '\x1F24', '\x1F25', '\x5', '\x20C', '\x107', 
		'\x2', '\x1F25', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F26', '\x1F27', 
		'\a', '\x8C', '\x2', '\x2', '\x1F27', '\x1F28', '\a', '\x15C', '\x2', 
		'\x2', '\x1F28', '\x1F29', '\a', '\x13E', '\x2', '\x2', '\x1F29', '\x1F2A', 
		'\a', '\xA5', '\x2', '\x2', '\x1F2A', '\x1F2B', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F2B', '\x1F2C', '\a', '\x8C', '\x2', '\x2', '\x1F2C', '\x1F2D', 
		'\a', '\xFA', '\x2', '\x2', '\x1F2D', '\x1F2E', '\a', '@', '\x2', '\x2', 
		'\x1F2E', '\x1F2F', '\x5', '\x510', '\x289', '\x2', '\x1F2F', '\x1F30', 
		'\x5', '\x34A', '\x1A6', '\x2', '\x1F30', '\x1F31', '\x5', '\x20C', '\x107', 
		'\x2', '\x1F31', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F32', '\x1F33', 
		'\a', '\x8C', '\x2', '\x2', '\x1F33', '\x1F34', '\a', '\x15C', '\x2', 
		'\x2', '\x1F34', '\x1F35', '\a', '\x13E', '\x2', '\x2', '\x1F35', '\x1F36', 
		'\a', '\xA5', '\x2', '\x2', '\x1F36', '\x1F37', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F37', '\x1F38', '\a', '\x8C', '\x2', '\x2', '\x1F38', '\x1F39', 
		'\a', '\xFA', '\x2', '\x2', '\x1F39', '\x1F3A', '\a', '\x130', '\x2', 
		'\x2', '\x1F3A', '\x1F3B', '\x5', '\x20E', '\x108', '\x2', '\x1F3B', '\x1F3C', 
		'\x5', '\x34A', '\x1A6', '\x2', '\x1F3C', '\x1F3D', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F3D', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F3E', '\x1F3F', 
		'\a', '\x8C', '\x2', '\x2', '\x1F3F', '\x1F40', '\a', '\x15C', '\x2', 
		'\x2', '\x1F40', '\x1F41', '\a', '\x13E', '\x2', '\x2', '\x1F41', '\x1F42', 
		'\a', '\xA5', '\x2', '\x2', '\x1F42', '\x1F43', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F43', '\x1F44', '\a', '\x8C', '\x2', '\x2', '\x1F44', '\x1F45', 
		'\a', '\xFA', '\x2', '\x2', '\x1F45', '\x1F46', '\a', '@', '\x2', '\x2', 
		'\x1F46', '\x1F47', '\x5', '\x510', '\x289', '\x2', '\x1F47', '\x1F48', 
		'\a', '\x130', '\x2', '\x2', '\x1F48', '\x1F49', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F49', '\x1F4A', '\x5', '\x34A', '\x1A6', '\x2', '\x1F4A', '\x1F4B', 
		'\x5', '\x20E', '\x108', '\x2', '\x1F4B', '\x1F63', '\x3', '\x2', '\x2', 
		'\x2', '\x1F4C', '\x1F4D', '\a', '\x8C', '\x2', '\x2', '\x1F4D', '\x1F4E', 
		'\a', '\x15C', '\x2', '\x2', '\x1F4E', '\x1F4F', '\a', '\x13E', '\x2', 
		'\x2', '\x1F4F', '\x1F50', '\a', '\xA5', '\x2', '\x2', '\x1F50', '\x1F51', 
		'\x5', '\x20E', '\x108', '\x2', '\x1F51', '\x1F52', '\a', '\xC1', '\x2', 
		'\x2', '\x1F52', '\x1F53', '\a', '\xFA', '\x2', '\x2', '\x1F53', '\x1F54', 
		'\a', '@', '\x2', '\x2', '\x1F54', '\x1F55', '\x5', '\x510', '\x289', 
		'\x2', '\x1F55', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F56', '\x1F57', 
		'\a', '\x8C', '\x2', '\x2', '\x1F57', '\x1F58', '\a', '\x15C', '\x2', 
		'\x2', '\x1F58', '\x1F59', '\a', '\x13E', '\x2', '\x2', '\x1F59', '\x1F5A', 
		'\a', '\xA5', '\x2', '\x2', '\x1F5A', '\x1F5B', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F5B', '\x1F5C', '\a', '\xC1', '\x2', '\x2', '\x1F5C', '\x1F5D', 
		'\a', '\xFA', '\x2', '\x2', '\x1F5D', '\x1F5E', '\a', '\xDE', '\x2', '\x2', 
		'\x1F5E', '\x1F5F', '\a', '\x185', '\x2', '\x2', '\x1F5F', '\x1F60', '\a', 
		'@', '\x2', '\x2', '\x1F60', '\x1F61', '\x5', '\x510', '\x289', '\x2', 
		'\x1F61', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x1F62', '\x1F1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1F62', '\x1F26', '\x3', '\x2', '\x2', '\x2', '\x1F62', 
		'\x1F32', '\x3', '\x2', '\x2', '\x2', '\x1F62', '\x1F3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F62', '\x1F4C', '\x3', '\x2', '\x2', '\x2', '\x1F62', 
		'\x1F56', '\x3', '\x2', '\x2', '\x2', '\x1F63', '\x349', '\x3', '\x2', 
		'\x2', '\x2', '\x1F64', '\x1F65', '\a', 'k', '\x2', '\x2', '\x1F65', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\x1F66', '\x1F67', '\a', '\x30', '\x2', '\x2', 
		'\x1F67', '\x1F68', '\x5', '\x1EA', '\xF6', '\x2', '\x1F68', '\x1F69', 
		'\a', '\xAA', '\x2', '\x2', '\x1F69', '\x1F6A', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F6A', '\x1F6B', '\a', '@', '\x2', '\x2', '\x1F6B', '\x1F6C', 
		'\x5', '\x524', '\x293', '\x2', '\x1F6C', '\x1F6D', '\a', '`', '\x2', 
		'\x2', '\x1F6D', '\x1F6E', '\x5', '\x524', '\x293', '\x2', '\x1F6E', '\x1F6F', 
		'\a', '\x42', '\x2', '\x2', '\x1F6F', '\x1F70', '\x5', '\x20E', '\x108', 
		'\x2', '\x1F70', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x1F71', '\x1F72', 
		'\a', '\xA0', '\x2', '\x2', '\x1F72', '\x1F73', '\x5', '\x362', '\x1B2', 
		'\x2', '\x1F73', '\x1F74', '\x5', '\x50E', '\x288', '\x2', '\x1F74', '\x1F75', 
		'\x5', '\x350', '\x1A9', '\x2', '\x1F75', '\x1F7F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F76', '\x1F77', '\a', '\xA0', '\x2', '\x2', '\x1F77', '\x1F7F', 
		'\x5', '\x362', '\x1B2', '\x2', '\x1F78', '\x1F79', '\a', '\xA0', '\x2', 
		'\x2', '\x1F79', '\x1F7A', '\x5', '\x362', '\x1B2', '\x2', '\x1F7A', '\x1F7B', 
		'\x5', '\x512', '\x28A', '\x2', '\x1F7B', '\x1F7C', '\a', 'R', '\x2', 
		'\x2', '\x1F7C', '\x1F7D', '\x5', '\x50E', '\x288', '\x2', '\x1F7D', '\x1F7F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7E', '\x1F71', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7E', '\x1F76', '\x3', '\x2', '\x2', '\x2', '\x1F7E', '\x1F78', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7F', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x1F80', 
		'\x1F81', '\a', '\x66', '\x2', '\x2', '\x1F81', '\x1F84', '\x5', '\x512', 
		'\x28A', '\x2', '\x1F82', '\x1F84', '\x3', '\x2', '\x2', '\x2', '\x1F83', 
		'\x1F80', '\x3', '\x2', '\x2', '\x2', '\x1F83', '\x1F82', '\x3', '\x2', 
		'\x2', '\x2', '\x1F84', '\x351', '\x3', '\x2', '\x2', '\x2', '\x1F85', 
		'\x1F86', '\a', '\x16B', '\x2', '\x2', '\x1F86', '\x1F87', '\x5', '\x364', 
		'\x1B3', '\x2', '\x1F87', '\x1F88', '\x5', '\x366', '\x1B4', '\x2', '\x1F88', 
		'\x1F89', '\x5', '\x362', '\x1B2', '\x2', '\x1F89', '\x1F8A', '\x5', '\x360', 
		'\x1B1', '\x2', '\x1F8A', '\x1F8B', '\x5', '\x36E', '\x1B8', '\x2', '\x1F8B', 
		'\x1F93', '\x3', '\x2', '\x2', '\x2', '\x1F8C', '\x1F8D', '\a', '\x16B', 
		'\x2', '\x2', '\x1F8D', '\x1F8E', '\a', '\x4', '\x2', '\x2', '\x1F8E', 
		'\x1F8F', '\x5', '\x356', '\x1AC', '\x2', '\x1F8F', '\x1F90', '\a', '\x5', 
		'\x2', '\x2', '\x1F90', '\x1F91', '\x5', '\x36E', '\x1B8', '\x2', '\x1F91', 
		'\x1F93', '\x3', '\x2', '\x2', '\x2', '\x1F92', '\x1F85', '\x3', '\x2', 
		'\x2', '\x2', '\x1F92', '\x1F8C', '\x3', '\x2', '\x2', '\x2', '\x1F93', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x1F94', '\x1F95', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1F95', '\x1F96', '\x5', '\x362', '\x1B2', '\x2', '\x1F96', 
		'\x1F97', '\x5', '\x36E', '\x1B8', '\x2', '\x1F97', '\x1F9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F98', '\x1F99', '\x5', '\x358', '\x1AD', '\x2', '\x1F99', 
		'\x1F9A', '\a', '\x4', '\x2', '\x2', '\x1F9A', '\x1F9B', '\x5', '\x356', 
		'\x1AC', '\x2', '\x1F9B', '\x1F9C', '\a', '\x5', '\x2', '\x2', '\x1F9C', 
		'\x1F9D', '\x5', '\x36E', '\x1B8', '\x2', '\x1F9D', '\x1F9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9E', '\x1F94', '\x3', '\x2', '\x2', '\x2', '\x1F9E', 
		'\x1F98', '\x3', '\x2', '\x2', '\x2', '\x1F9F', '\x355', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA0', '\x1FA1', '\b', '\x1AC', '\x1', '\x2', '\x1FA1', 
		'\x1FA2', '\x5', '\x35A', '\x1AE', '\x2', '\x1FA2', '\x1FA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA3', '\x1FA4', '\f', '\x3', '\x2', '\x2', '\x1FA4', 
		'\x1FA5', '\a', '\b', '\x2', '\x2', '\x1FA5', '\x1FA7', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x1FA6', '\x1FA3', '\x3', '\x2', '\x2', '\x2', '\x1FA7', 
		'\x1FAA', '\x3', '\x2', '\x2', '\x2', '\x1FA8', '\x1FA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA8', '\x1FA9', '\x3', '\x2', '\x2', '\x2', '\x1FA9', 
		'\x357', '\x3', '\x2', '\x2', '\x2', '\x1FAA', '\x1FA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAB', '\x1FAC', '\t', '\x11', '\x2', '\x2', '\x1FAC', 
		'\x359', '\x3', '\x2', '\x2', '\x2', '\x1FAD', '\x1FAE', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x1FAE', '\x1FAF', '\x5', '\x35E', '\x1B0', '\x2', '\x1FAF', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x1FB0', '\x1FB3', '\x5', '\x536', 
		'\x29C', '\x2', '\x1FB1', '\x1FB3', '\x5', '\x358', '\x1AD', '\x2', '\x1FB2', 
		'\x1FB0', '\x3', '\x2', '\x2', '\x2', '\x1FB2', '\x1FB1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB3', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x1FB4', 
		'\x1FB8', '\x5', '\x44', '#', '\x2', '\x1FB5', '\x1FB8', '\x5', '\x126', 
		'\x94', '\x2', '\x1FB6', '\x1FB8', '\x3', '\x2', '\x2', '\x2', '\x1FB7', 
		'\x1FB4', '\x3', '\x2', '\x2', '\x2', '\x1FB7', '\x1FB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB7', '\x1FB6', '\x3', '\x2', '\x2', '\x2', '\x1FB8', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x1FB9', '\x1FBC', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1FBA', '\x1FBC', '\x3', '\x2', '\x2', '\x2', '\x1FBB', 
		'\x1FB9', '\x3', '\x2', '\x2', '\x2', '\x1FBB', '\x1FBA', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBC', '\x361', '\x3', '\x2', '\x2', '\x2', '\x1FBD', 
		'\x1FC0', '\a', '\x82', '\x2', '\x2', '\x1FBE', '\x1FC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBF', '\x1FBD', '\x3', '\x2', '\x2', '\x2', '\x1FBF', 
		'\x1FBE', '\x3', '\x2', '\x2', '\x2', '\x1FC0', '\x363', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC1', '\x1FC4', '\a', 's', '\x2', '\x2', '\x1FC2', '\x1FC4', 
		'\x3', '\x2', '\x2', '\x2', '\x1FC3', '\x1FC1', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC3', '\x1FC2', '\x3', '\x2', '\x2', '\x2', '\x1FC4', '\x365', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC5', '\x1FC8', '\a', 'r', '\x2', '\x2', '\x1FC6', 
		'\x1FC8', '\x3', '\x2', '\x2', '\x2', '\x1FC7', '\x1FC5', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC7', '\x1FC6', '\x3', '\x2', '\x2', '\x2', '\x1FC8', 
		'\x367', '\x3', '\x2', '\x2', '\x2', '\x1FC9', '\x1FCA', '\a', '\x4', 
		'\x2', '\x2', '\x1FCA', '\x1FCB', '\x5', '\x510', '\x289', '\x2', '\x1FCB', 
		'\x1FCC', '\a', '\x5', '\x2', '\x2', '\x1FCC', '\x1FCF', '\x3', '\x2', 
		'\x2', '\x2', '\x1FCD', '\x1FCF', '\x3', '\x2', '\x2', '\x2', '\x1FCE', 
		'\x1FC9', '\x3', '\x2', '\x2', '\x2', '\x1FCE', '\x1FCD', '\x3', '\x2', 
		'\x2', '\x2', '\x1FCF', '\x369', '\x3', '\x2', '\x2', '\x2', '\x1FD0', 
		'\x1FD1', '\x5', '\x50E', '\x288', '\x2', '\x1FD1', '\x1FD2', '\x5', '\x368', 
		'\x1B5', '\x2', '\x1FD2', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x1FD3', 
		'\x1FD4', '\b', '\x1B7', '\x1', '\x2', '\x1FD4', '\x1FD5', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x1FD5', '\x1FDB', '\x3', '\x2', '\x2', '\x2', '\x1FD6', 
		'\x1FD7', '\f', '\x3', '\x2', '\x2', '\x1FD7', '\x1FD8', '\a', '\b', '\x2', 
		'\x2', '\x1FD8', '\x1FDA', '\x5', '\x36A', '\x1B6', '\x2', '\x1FD9', '\x1FD6', 
		'\x3', '\x2', '\x2', '\x2', '\x1FDA', '\x1FDD', '\x3', '\x2', '\x2', '\x2', 
		'\x1FDB', '\x1FD9', '\x3', '\x2', '\x2', '\x2', '\x1FDB', '\x1FDC', '\x3', 
		'\x2', '\x2', '\x2', '\x1FDC', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x1FDD', 
		'\x1FDB', '\x3', '\x2', '\x2', '\x2', '\x1FDE', '\x1FE1', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1FDF', '\x1FE1', '\x3', '\x2', '\x2', '\x2', '\x1FE0', 
		'\x1FDE', '\x3', '\x2', '\x2', '\x2', '\x1FE0', '\x1FDF', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE1', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x1FE2', 
		'\x1FE3', '\a', '\xCD', '\x2', '\x2', '\x1FE3', '\x1FF3', '\x5', '\x372', 
		'\x1BA', '\x2', '\x1FE4', '\x1FE5', '\a', '\xCD', '\x2', '\x2', '\x1FE5', 
		'\x1FE6', '\x5', '\x358', '\x1AD', '\x2', '\x1FE6', '\x1FE7', '\x5', '\x362', 
		'\x1B2', '\x2', '\x1FE7', '\x1FE8', '\x5', '\x372', '\x1BA', '\x2', '\x1FE8', 
		'\x1FF3', '\x3', '\x2', '\x2', '\x2', '\x1FE9', '\x1FEA', '\a', '\xCD', 
		'\x2', '\x2', '\x1FEA', '\x1FEB', '\a', '\x82', '\x2', '\x2', '\x1FEB', 
		'\x1FF3', '\x5', '\x372', '\x1BA', '\x2', '\x1FEC', '\x1FED', '\a', '\xCD', 
		'\x2', '\x2', '\x1FED', '\x1FEE', '\a', '\x4', '\x2', '\x2', '\x1FEE', 
		'\x1FEF', '\x5', '\x374', '\x1BB', '\x2', '\x1FEF', '\x1FF0', '\a', '\x5', 
		'\x2', '\x2', '\x1FF0', '\x1FF1', '\x5', '\x372', '\x1BA', '\x2', '\x1FF1', 
		'\x1FF3', '\x3', '\x2', '\x2', '\x2', '\x1FF2', '\x1FE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF2', '\x1FE4', '\x3', '\x2', '\x2', '\x2', '\x1FF2', 
		'\x1FE9', '\x3', '\x2', '\x2', '\x2', '\x1FF2', '\x1FEC', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF3', '\x371', '\x3', '\x2', '\x2', '\x2', '\x1FF4', 
		'\x1FFE', '\x5', '\x3BA', '\x1DE', '\x2', '\x1FF5', '\x1FFE', '\x5', '\x388', 
		'\x1C5', '\x2', '\x1FF6', '\x1FFE', '\x5', '\x3A8', '\x1D5', '\x2', '\x1FF7', 
		'\x1FFE', '\x5', '\x39A', '\x1CE', '\x2', '\x1FF8', '\x1FFE', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1FF9', '\x1FFE', '\x5', '\x10A', '\x86', '\x2', '\x1FFA', 
		'\x1FFE', '\x5', '\x110', '\x89', '\x2', '\x1FFB', '\x1FFE', '\x5', '\x116', 
		'\x8C', '\x2', '\x1FFC', '\x1FFE', '\x5', '\x382', '\x1C2', '\x2', '\x1FFD', 
		'\x1FF4', '\x3', '\x2', '\x2', '\x2', '\x1FFD', '\x1FF5', '\x3', '\x2', 
		'\x2', '\x2', '\x1FFD', '\x1FF6', '\x3', '\x2', '\x2', '\x2', '\x1FFD', 
		'\x1FF7', '\x3', '\x2', '\x2', '\x2', '\x1FFD', '\x1FF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FFD', '\x1FF9', '\x3', '\x2', '\x2', '\x2', '\x1FFD', 
		'\x1FFA', '\x3', '\x2', '\x2', '\x2', '\x1FFD', '\x1FFB', '\x3', '\x2', 
		'\x2', '\x2', '\x1FFD', '\x1FFC', '\x3', '\x2', '\x2', '\x2', '\x1FFE', 
		'\x373', '\x3', '\x2', '\x2', '\x2', '\x1FFF', '\x2000', '\b', '\x1BB', 
		'\x1', '\x2', '\x2000', '\x2001', '\x5', '\x376', '\x1BC', '\x2', '\x2001', 
		'\x2007', '\x3', '\x2', '\x2', '\x2', '\x2002', '\x2003', '\f', '\x3', 
		'\x2', '\x2', '\x2003', '\x2004', '\a', '\b', '\x2', '\x2', '\x2004', 
		'\x2006', '\x5', '\x376', '\x1BC', '\x2', '\x2005', '\x2002', '\x3', '\x2', 
		'\x2', '\x2', '\x2006', '\x2009', '\x3', '\x2', '\x2', '\x2', '\x2007', 
		'\x2005', '\x3', '\x2', '\x2', '\x2', '\x2007', '\x2008', '\x3', '\x2', 
		'\x2', '\x2', '\x2008', '\x375', '\x3', '\x2', '\x2', '\x2', '\x2009', 
		'\x2007', '\x3', '\x2', '\x2', '\x2', '\x200A', '\x200B', '\x5', '\x378', 
		'\x1BD', '\x2', '\x200B', '\x200C', '\x5', '\x37A', '\x1BE', '\x2', '\x200C', 
		'\x377', '\x3', '\x2', '\x2', '\x2', '\x200D', '\x2010', '\x5', '\x536', 
		'\x29C', '\x2', '\x200E', '\x2010', '\x5', '\x358', '\x1AD', '\x2', '\x200F', 
		'\x200D', '\x3', '\x2', '\x2', '\x2', '\x200F', '\x200E', '\x3', '\x2', 
		'\x2', '\x2', '\x2010', '\x379', '\x3', '\x2', '\x2', '\x2', '\x2011', 
		'\x2015', '\x5', '\x44', '#', '\x2', '\x2012', '\x2015', '\x5', '\x126', 
		'\x94', '\x2', '\x2013', '\x2015', '\x3', '\x2', '\x2', '\x2', '\x2014', 
		'\x2011', '\x3', '\x2', '\x2', '\x2', '\x2014', '\x2012', '\x3', '\x2', 
		'\x2', '\x2', '\x2014', '\x2013', '\x3', '\x2', '\x2', '\x2', '\x2015', 
		'\x37B', '\x3', '\x2', '\x2', '\x2', '\x2016', '\x2017', '\a', '\x11B', 
		'\x2', '\x2', '\x2017', '\x2018', '\x5', '\x512', '\x28A', '\x2', '\x2018', 
		'\x2019', '\x5', '\x37E', '\x1C0', '\x2', '\x2019', '\x201A', '\a', '&', 
		'\x2', '\x2', '\x201A', '\x201B', '\x5', '\x380', '\x1C1', '\x2', '\x201B', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x201C', '\x201D', '\a', '\x4', 
		'\x2', '\x2', '\x201D', '\x201E', '\x5', '\x4DA', '\x26E', '\x2', '\x201E', 
		'\x201F', '\a', '\x5', '\x2', '\x2', '\x201F', '\x2022', '\x3', '\x2', 
		'\x2', '\x2', '\x2020', '\x2022', '\x3', '\x2', '\x2', '\x2', '\x2021', 
		'\x201C', '\x3', '\x2', '\x2', '\x2', '\x2021', '\x2020', '\x3', '\x2', 
		'\x2', '\x2', '\x2022', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x2023', 
		'\x2028', '\x5', '\x3BA', '\x1DE', '\x2', '\x2024', '\x2028', '\x5', '\x388', 
		'\x1C5', '\x2', '\x2025', '\x2028', '\x5', '\x3A8', '\x1D5', '\x2', '\x2026', 
		'\x2028', '\x5', '\x39A', '\x1CE', '\x2', '\x2027', '\x2023', '\x3', '\x2', 
		'\x2', '\x2', '\x2027', '\x2024', '\x3', '\x2', '\x2', '\x2', '\x2027', 
		'\x2025', '\x3', '\x2', '\x2', '\x2', '\x2027', '\x2026', '\x3', '\x2', 
		'\x2', '\x2', '\x2028', '\x381', '\x3', '\x2', '\x2', '\x2', '\x2029', 
		'\x202A', '\a', '\xCC', '\x2', '\x2', '\x202A', '\x202B', '\x5', '\x512', 
		'\x28A', '\x2', '\x202B', '\x202C', '\x5', '\x384', '\x1C3', '\x2', '\x202C', 
		'\x2045', '\x3', '\x2', '\x2', '\x2', '\x202D', '\x202E', '\a', '\x30', 
		'\x2', '\x2', '\x202E', '\x202F', '\x5', '\xB0', 'Y', '\x2', '\x202F', 
		'\x2030', '\a', '^', '\x2', '\x2', '\x2030', '\x2031', '\x5', '\x10C', 
		'\x87', '\x2', '\x2031', '\x2032', '\a', '&', '\x2', '\x2', '\x2032', 
		'\x2033', '\a', '\xCC', '\x2', '\x2', '\x2033', '\x2034', '\x5', '\x512', 
		'\x28A', '\x2', '\x2034', '\x2035', '\x5', '\x384', '\x1C3', '\x2', '\x2035', 
		'\x2036', '\x5', '\x10E', '\x88', '\x2', '\x2036', '\x2045', '\x3', '\x2', 
		'\x2', '\x2', '\x2037', '\x2038', '\a', '\x30', '\x2', '\x2', '\x2038', 
		'\x2039', '\x5', '\xB0', 'Y', '\x2', '\x2039', '\x203A', '\a', '^', '\x2', 
		'\x2', '\x203A', '\x203B', '\a', '\xDE', '\x2', '\x2', '\x203B', '\x203C', 
		'\a', 'O', '\x2', '\x2', '\x203C', '\x203D', '\a', '\x185', '\x2', '\x2', 
		'\x203D', '\x203E', '\x5', '\x10C', '\x87', '\x2', '\x203E', '\x203F', 
		'\a', '&', '\x2', '\x2', '\x203F', '\x2040', '\a', '\xCC', '\x2', '\x2', 
		'\x2040', '\x2041', '\x5', '\x512', '\x28A', '\x2', '\x2041', '\x2042', 
		'\x5', '\x384', '\x1C3', '\x2', '\x2042', '\x2043', '\x5', '\x10E', '\x88', 
		'\x2', '\x2043', '\x2045', '\x3', '\x2', '\x2', '\x2', '\x2044', '\x2029', 
		'\x3', '\x2', '\x2', '\x2', '\x2044', '\x202D', '\x3', '\x2', '\x2', '\x2', 
		'\x2044', '\x2037', '\x3', '\x2', '\x2', '\x2', '\x2045', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x2046', '\x2047', '\a', '\x4', '\x2', '\x2', '\x2047', 
		'\x2048', '\x5', '\x4D4', '\x26B', '\x2', '\x2048', '\x2049', '\a', '\x5', 
		'\x2', '\x2', '\x2049', '\x204C', '\x3', '\x2', '\x2', '\x2', '\x204A', 
		'\x204C', '\x3', '\x2', '\x2', '\x2', '\x204B', '\x2046', '\x3', '\x2', 
		'\x2', '\x2', '\x204B', '\x204A', '\x3', '\x2', '\x2', '\x2', '\x204C', 
		'\x385', '\x3', '\x2', '\x2', '\x2', '\x204D', '\x204E', '\a', '\xB3', 
		'\x2', '\x2', '\x204E', '\x2058', '\x5', '\x512', '\x28A', '\x2', '\x204F', 
		'\x2050', '\a', '\xB3', '\x2', '\x2', '\x2050', '\x2051', '\a', '\x11B', 
		'\x2', '\x2', '\x2051', '\x2058', '\x5', '\x512', '\x28A', '\x2', '\x2052', 
		'\x2053', '\a', '\xB3', '\x2', '\x2', '\x2053', '\x2058', '\a', ' ', '\x2', 
		'\x2', '\x2054', '\x2055', '\a', '\xB3', '\x2', '\x2', '\x2055', '\x2056', 
		'\a', '\x11B', '\x2', '\x2', '\x2056', '\x2058', '\a', ' ', '\x2', '\x2', 
		'\x2057', '\x204D', '\x3', '\x2', '\x2', '\x2', '\x2057', '\x204F', '\x3', 
		'\x2', '\x2', '\x2', '\x2057', '\x2052', '\x3', '\x2', '\x2', '\x2', '\x2057', 
		'\x2054', '\x3', '\x2', '\x2', '\x2', '\x2058', '\x387', '\x3', '\x2', 
		'\x2', '\x2', '\x2059', '\x205A', '\x5', '\x3D0', '\x1E9', '\x2', '\x205A', 
		'\x205B', '\a', '\xEA', '\x2', '\x2', '\x205B', '\x205C', '\a', 'I', '\x2', 
		'\x2', '\x205C', '\x205D', '\x5', '\x38A', '\x1C6', '\x2', '\x205D', '\x205E', 
		'\x5', '\x38C', '\x1C7', '\x2', '\x205E', '\x205F', '\x5', '\x394', '\x1CB', 
		'\x2', '\x205F', '\x2060', '\x5', '\x398', '\x1CD', '\x2', '\x2060', '\x389', 
		'\x3', '\x2', '\x2', '\x2', '\x2061', '\x2067', '\x5', '\x50E', '\x288', 
		'\x2', '\x2062', '\x2063', '\x5', '\x50E', '\x288', '\x2', '\x2063', '\x2064', 
		'\a', '&', '\x2', '\x2', '\x2064', '\x2065', '\x5', '\x532', '\x29A', 
		'\x2', '\x2065', '\x2067', '\x3', '\x2', '\x2', '\x2', '\x2066', '\x2061', 
		'\x3', '\x2', '\x2', '\x2', '\x2066', '\x2062', '\x3', '\x2', '\x2', '\x2', 
		'\x2067', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x2068', '\x207E', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x2069', '\x206A', '\a', '\x1C9', '\x2', '\x2', 
		'\x206A', '\x206B', '\x5', '\x38E', '\x1C8', '\x2', '\x206B', '\x206C', 
		'\a', '\x1BC', '\x2', '\x2', '\x206C', '\x206D', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x206D', '\x207E', '\x3', '\x2', '\x2', '\x2', '\x206E', '\x206F', 
		'\a', '\x4', '\x2', '\x2', '\x206F', '\x2070', '\x5', '\x390', '\x1C9', 
		'\x2', '\x2070', '\x2071', '\a', '\x5', '\x2', '\x2', '\x2071', '\x2072', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x2072', '\x207E', '\x3', '\x2', '\x2', 
		'\x2', '\x2073', '\x2074', '\a', '\x4', '\x2', '\x2', '\x2074', '\x2075', 
		'\x5', '\x390', '\x1C9', '\x2', '\x2075', '\x2076', '\a', '\x5', '\x2', 
		'\x2', '\x2076', '\x2077', '\a', '\x1C9', '\x2', '\x2', '\x2077', '\x2078', 
		'\x5', '\x38E', '\x1C8', '\x2', '\x2078', '\x2079', '\a', '\x1BC', '\x2', 
		'\x2', '\x2079', '\x207A', '\x5', '\x3BA', '\x1DE', '\x2', '\x207A', '\x207E', 
		'\x3', '\x2', '\x2', '\x2', '\x207B', '\x207C', '\a', '\x37', '\x2', '\x2', 
		'\x207C', '\x207E', '\a', '\x19F', '\x2', '\x2', '\x207D', '\x2068', '\x3', 
		'\x2', '\x2', '\x2', '\x207D', '\x2069', '\x3', '\x2', '\x2', '\x2', '\x207D', 
		'\x206E', '\x3', '\x2', '\x2', '\x2', '\x207D', '\x2073', '\x3', '\x2', 
		'\x2', '\x2', '\x207D', '\x207B', '\x3', '\x2', '\x2', '\x2', '\x207E', 
		'\x38D', '\x3', '\x2', '\x2', '\x2', '\x207F', '\x2080', '\t', '\x12', 
		'\x2', '\x2', '\x2080', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x2081', 
		'\x2082', '\b', '\x1C9', '\x1', '\x2', '\x2082', '\x2083', '\x5', '\x392', 
		'\x1CA', '\x2', '\x2083', '\x2089', '\x3', '\x2', '\x2', '\x2', '\x2084', 
		'\x2085', '\f', '\x3', '\x2', '\x2', '\x2085', '\x2086', '\a', '\b', '\x2', 
		'\x2', '\x2086', '\x2088', '\x5', '\x392', '\x1CA', '\x2', '\x2087', '\x2084', 
		'\x3', '\x2', '\x2', '\x2', '\x2088', '\x208B', '\x3', '\x2', '\x2', '\x2', 
		'\x2089', '\x2087', '\x3', '\x2', '\x2', '\x2', '\x2089', '\x208A', '\x3', 
		'\x2', '\x2', '\x2', '\x208A', '\x391', '\x3', '\x2', '\x2', '\x2', '\x208B', 
		'\x2089', '\x3', '\x2', '\x2', '\x2', '\x208C', '\x208D', '\x5', '\x532', 
		'\x29A', '\x2', '\x208D', '\x208E', '\x5', '\x502', '\x282', '\x2', '\x208E', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x208F', '\x2090', '\a', 'R', '\x2', 
		'\x2', '\x2090', '\x2091', '\a', '\x1CA', '\x2', '\x2', '\x2091', '\x2092', 
		'\x5', '\x396', '\x1CC', '\x2', '\x2092', '\x2093', '\a', ';', '\x2', 
		'\x2', '\x2093', '\x2094', '\a', '\x16A', '\x2', '\x2', '\x2094', '\x2095', 
		'\a', '\x146', '\x2', '\x2', '\x2095', '\x2096', '\x5', '\x3AA', '\x1D6', 
		'\x2', '\x2096', '\x2097', '\x5', '\x440', '\x221', '\x2', '\x2097', '\x20A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2098', '\x2099', '\a', 'R', '\x2', '\x2', 
		'\x2099', '\x209A', '\a', '\x1CA', '\x2', '\x2', '\x209A', '\x209B', '\x5', 
		'\x396', '\x1CC', '\x2', '\x209B', '\x209C', '\a', ';', '\x2', '\x2', 
		'\x209C', '\x209D', '\a', '\x107', '\x2', '\x2', '\x209D', '\x20A0', '\x3', 
		'\x2', '\x2', '\x2', '\x209E', '\x20A0', '\x3', '\x2', '\x2', '\x2', '\x209F', 
		'\x208F', '\x3', '\x2', '\x2', '\x2', '\x209F', '\x2098', '\x3', '\x2', 
		'\x2', '\x2', '\x209F', '\x209E', '\x3', '\x2', '\x2', '\x2', '\x20A0', 
		'\x395', '\x3', '\x2', '\x2', '\x2', '\x20A1', '\x20A2', '\a', '\x4', 
		'\x2', '\x2', '\x20A2', '\x20A3', '\x5', '\x258', '\x12D', '\x2', '\x20A3', 
		'\x20A4', '\a', '\x5', '\x2', '\x2', '\x20A4', '\x20A5', '\x5', '\x440', 
		'\x221', '\x2', '\x20A5', '\x20AB', '\x3', '\x2', '\x2', '\x2', '\x20A6', 
		'\x20A7', '\a', 'R', '\x2', '\x2', '\x20A7', '\x20A8', '\a', '/', '\x2', 
		'\x2', '\x20A8', '\x20AB', '\x5', '\x512', '\x28A', '\x2', '\x20A9', '\x20AB', 
		'\x3', '\x2', '\x2', '\x2', '\x20AA', '\x20A1', '\x3', '\x2', '\x2', '\x2', 
		'\x20AA', '\x20A6', '\x3', '\x2', '\x2', '\x2', '\x20AA', '\x20A9', '\x3', 
		'\x2', '\x2', '\x2', '\x20AB', '\x397', '\x3', '\x2', '\x2', '\x2', '\x20AC', 
		'\x20AD', '\a', 'Y', '\x2', '\x2', '\x20AD', '\x20B0', '\x5', '\x508', 
		'\x285', '\x2', '\x20AE', '\x20B0', '\x3', '\x2', '\x2', '\x2', '\x20AF', 
		'\x20AC', '\x3', '\x2', '\x2', '\x2', '\x20AF', '\x20AE', '\x3', '\x2', 
		'\x2', '\x2', '\x20B0', '\x399', '\x3', '\x2', '\x2', '\x2', '\x20B1', 
		'\x20B2', '\x5', '\x3D0', '\x1E9', '\x2', '\x20B2', '\x20B3', '\a', '\xB8', 
		'\x2', '\x2', '\x20B3', '\x20B4', '\a', '\x42', '\x2', '\x2', '\x20B4', 
		'\x20B5', '\x5', '\x430', '\x219', '\x2', '\x20B5', '\x20B6', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x20B6', '\x20B7', '\x5', '\x442', '\x222', '\x2', '\x20B7', 
		'\x20B8', '\x5', '\x398', '\x1CD', '\x2', '\x20B8', '\x39B', '\x3', '\x2', 
		'\x2', '\x2', '\x20B9', '\x20BA', '\a', '\x66', '\x2', '\x2', '\x20BA', 
		'\x20BD', '\x5', '\x41C', '\x20F', '\x2', '\x20BB', '\x20BD', '\x3', '\x2', 
		'\x2', '\x2', '\x20BC', '\x20B9', '\x3', '\x2', '\x2', '\x2', '\x20BC', 
		'\x20BB', '\x3', '\x2', '\x2', '\x2', '\x20BD', '\x39D', '\x3', '\x2', 
		'\x2', '\x2', '\x20BE', '\x20BF', '\a', '\xF9', '\x2', '\x2', '\x20BF', 
		'\x20C0', '\x5', '\x3D8', '\x1ED', '\x2', '\x20C0', '\x20C1', '\x5', '\x42E', 
		'\x218', '\x2', '\x20C1', '\x20C2', '\x5', '\x3A0', '\x1D1', '\x2', '\x20C2', 
		'\x20C3', '\x5', '\x3A4', '\x1D3', '\x2', '\x20C3', '\x39F', '\x3', '\x2', 
		'\x2', '\x2', '\x20C4', '\x20C5', '\a', '\x46', '\x2', '\x2', '\x20C5', 
		'\x20C6', '\x5', '\x3A2', '\x1D2', '\x2', '\x20C6', '\x20C7', '\a', '\x100', 
		'\x2', '\x2', '\x20C7', '\x20CA', '\x3', '\x2', '\x2', '\x2', '\x20C8', 
		'\x20CA', '\x3', '\x2', '\x2', '\x2', '\x20C9', '\x20C4', '\x3', '\x2', 
		'\x2', '\x2', '\x20C9', '\x20C8', '\x3', '\x2', '\x2', '\x2', '\x20CA', 
		'\x3A1', '\x3', '\x2', '\x2', '\x2', '\x20CB', '\x20CC', '\a', '\x85', 
		'\x2', '\x2', '\x20CC', '\x20DC', '\a', '\x147', '\x2', '\x2', '\x20CD', 
		'\x20CE', '\a', '\x197', '\x2', '\x2', '\x20CE', '\x20DC', '\a', '\x147', 
		'\x2', '\x2', '\x20CF', '\x20D0', '\a', '\x197', '\x2', '\x2', '\x20D0', 
		'\x20DC', '\a', '\xCB', '\x2', '\x2', '\x20D1', '\x20D2', '\a', '\x147', 
		'\x2', '\x2', '\x20D2', '\x20D3', '\a', '\x16A', '\x2', '\x2', '\x20D3', 
		'\x20DC', '\a', '\xCB', '\x2', '\x2', '\x20D4', '\x20DC', '\a', '\x147', 
		'\x2', '\x2', '\x20D5', '\x20D6', '\a', '\x147', '\x2', '\x2', '\x20D6', 
		'\x20D7', '\a', '\x197', '\x2', '\x2', '\x20D7', '\x20DC', '\a', '\xCB', 
		'\x2', '\x2', '\x20D8', '\x20DC', '\a', '\xCB', '\x2', '\x2', '\x20D9', 
		'\x20DA', '\a', '\x85', '\x2', '\x2', '\x20DA', '\x20DC', '\a', '\xCB', 
		'\x2', '\x2', '\x20DB', '\x20CB', '\x3', '\x2', '\x2', '\x2', '\x20DB', 
		'\x20CD', '\x3', '\x2', '\x2', '\x2', '\x20DB', '\x20CF', '\x3', '\x2', 
		'\x2', '\x2', '\x20DB', '\x20D1', '\x3', '\x2', '\x2', '\x2', '\x20DB', 
		'\x20D4', '\x3', '\x2', '\x2', '\x2', '\x20DB', '\x20D5', '\x3', '\x2', 
		'\x2', '\x2', '\x20DB', '\x20D8', '\x3', '\x2', '\x2', '\x2', '\x20DB', 
		'\x20D9', '\x3', '\x2', '\x2', '\x2', '\x20DC', '\x3A3', '\x3', '\x2', 
		'\x2', '\x2', '\x20DD', '\x20E0', '\a', '\x109', '\x2', '\x2', '\x20DE', 
		'\x20E0', '\x3', '\x2', '\x2', '\x2', '\x20DF', '\x20DD', '\x3', '\x2', 
		'\x2', '\x2', '\x20DF', '\x20DE', '\x3', '\x2', '\x2', '\x2', '\x20E0', 
		'\x3A5', '\x3', '\x2', '\x2', '\x2', '\x20E1', '\x20E6', '\a', '\x109', 
		'\x2', '\x2', '\x20E2', '\x20E3', '\a', '\x1CB', '\x2', '\x2', '\x20E3', 
		'\x20E6', '\a', '\x1CC', '\x2', '\x2', '\x20E4', '\x20E6', '\x3', '\x2', 
		'\x2', '\x2', '\x20E5', '\x20E1', '\x3', '\x2', '\x2', '\x2', '\x20E5', 
		'\x20E2', '\x3', '\x2', '\x2', '\x2', '\x20E5', '\x20E4', '\x3', '\x2', 
		'\x2', '\x2', '\x20E6', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x20E7', 
		'\x20E8', '\x5', '\x3D0', '\x1E9', '\x2', '\x20E8', '\x20E9', '\a', '\x16A', 
		'\x2', '\x2', '\x20E9', '\x20EA', '\x5', '\x430', '\x219', '\x2', '\x20EA', 
		'\x20EB', '\a', '\x146', '\x2', '\x2', '\x20EB', '\x20EC', '\x5', '\x3AA', 
		'\x1D6', '\x2', '\x20EC', '\x20ED', '\x5', '\x41A', '\x20E', '\x2', '\x20ED', 
		'\x20EE', '\x5', '\x442', '\x222', '\x2', '\x20EE', '\x20EF', '\x5', '\x398', 
		'\x1CD', '\x2', '\x20EF', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x20F0', 
		'\x20F1', '\b', '\x1D6', '\x1', '\x2', '\x20F1', '\x20F2', '\x5', '\x3AC', 
		'\x1D7', '\x2', '\x20F2', '\x20F8', '\x3', '\x2', '\x2', '\x2', '\x20F3', 
		'\x20F4', '\f', '\x3', '\x2', '\x2', '\x20F4', '\x20F5', '\a', '\b', '\x2', 
		'\x2', '\x20F5', '\x20F7', '\x5', '\x3AC', '\x1D7', '\x2', '\x20F6', '\x20F3', 
		'\x3', '\x2', '\x2', '\x2', '\x20F7', '\x20FA', '\x3', '\x2', '\x2', '\x2', 
		'\x20F8', '\x20F6', '\x3', '\x2', '\x2', '\x2', '\x20F8', '\x20F9', '\x3', 
		'\x2', '\x2', '\x2', '\x20F9', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x20FA', 
		'\x20F8', '\x3', '\x2', '\x2', '\x2', '\x20FB', '\x20FC', '\x5', '\x3AE', 
		'\x1D8', '\x2', '\x20FC', '\x20FD', '\a', '\f', '\x2', '\x2', '\x20FD', 
		'\x20FE', '\x5', '\x484', '\x243', '\x2', '\x20FE', '\x2106', '\x3', '\x2', 
		'\x2', '\x2', '\x20FF', '\x2100', '\a', '\x4', '\x2', '\x2', '\x2100', 
		'\x2101', '\x5', '\x3B0', '\x1D9', '\x2', '\x2101', '\x2102', '\a', '\x5', 
		'\x2', '\x2', '\x2102', '\x2103', '\a', '\f', '\x2', '\x2', '\x2103', 
		'\x2104', '\x5', '\x484', '\x243', '\x2', '\x2104', '\x2106', '\x3', '\x2', 
		'\x2', '\x2', '\x2105', '\x20FB', '\x3', '\x2', '\x2', '\x2', '\x2105', 
		'\x20FF', '\x3', '\x2', '\x2', '\x2', '\x2106', '\x3AD', '\x3', '\x2', 
		'\x2', '\x2', '\x2107', '\x2108', '\x5', '\x532', '\x29A', '\x2', '\x2108', 
		'\x2109', '\x5', '\x502', '\x282', '\x2', '\x2109', '\x3AF', '\x3', '\x2', 
		'\x2', '\x2', '\x210A', '\x210B', '\b', '\x1D9', '\x1', '\x2', '\x210B', 
		'\x210C', '\x5', '\x3AE', '\x1D8', '\x2', '\x210C', '\x2112', '\x3', '\x2', 
		'\x2', '\x2', '\x210D', '\x210E', '\f', '\x3', '\x2', '\x2', '\x210E', 
		'\x210F', '\a', '\b', '\x2', '\x2', '\x210F', '\x2111', '\x5', '\x3AE', 
		'\x1D8', '\x2', '\x2110', '\x210D', '\x3', '\x2', '\x2', '\x2', '\x2111', 
		'\x2114', '\x3', '\x2', '\x2', '\x2', '\x2112', '\x2110', '\x3', '\x2', 
		'\x2', '\x2', '\x2112', '\x2113', '\x3', '\x2', '\x2', '\x2', '\x2113', 
		'\x3B1', '\x3', '\x2', '\x2', '\x2', '\x2114', '\x2112', '\x3', '\x2', 
		'\x2', '\x2', '\x2115', '\x2116', '\a', '\xB4', '\x2', '\x2', '\x2116', 
		'\x2117', '\x5', '\x3B4', '\x1DB', '\x2', '\x2117', '\x2118', '\x5', '\x3B6', 
		'\x1DC', '\x2', '\x2118', '\x2119', '\a', '\xAE', '\x2', '\x2', '\x2119', 
		'\x211A', '\x5', '\x3B8', '\x1DD', '\x2', '\x211A', '\x211B', '\a', '@', 
		'\x2', '\x2', '\x211B', '\x211C', '\x5', '\x3BA', '\x1DE', '\x2', '\x211C', 
		'\x3B3', '\x3', '\x2', '\x2', '\x2', '\x211D', '\x211E', '\x5', '\x512', 
		'\x28A', '\x2', '\x211E', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x211F', 
		'\x212B', '\b', '\x1DC', '\x1', '\x2', '\x2120', '\x2121', '\f', '\x6', 
		'\x2', '\x2', '\x2121', '\x2122', '\a', '\x106', '\x2', '\x2', '\x2122', 
		'\x212A', '\a', '\x13D', '\x2', '\x2', '\x2123', '\x2124', '\f', '\x5', 
		'\x2', '\x2', '\x2124', '\x212A', '\a', '\x13D', '\x2', '\x2', '\x2125', 
		'\x2126', '\f', '\x4', '\x2', '\x2', '\x2126', '\x212A', '\a', 'm', '\x2', 
		'\x2', '\x2127', '\x2128', '\f', '\x3', '\x2', '\x2', '\x2128', '\x212A', 
		'\a', '\xE9', '\x2', '\x2', '\x2129', '\x2120', '\x3', '\x2', '\x2', '\x2', 
		'\x2129', '\x2123', '\x3', '\x2', '\x2', '\x2', '\x2129', '\x2125', '\x3', 
		'\x2', '\x2', '\x2', '\x2129', '\x2127', '\x3', '\x2', '\x2', '\x2', '\x212A', 
		'\x212D', '\x3', '\x2', '\x2', '\x2', '\x212B', '\x2129', '\x3', '\x2', 
		'\x2', '\x2', '\x212B', '\x212C', '\x3', '\x2', '\x2', '\x2', '\x212C', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\x212D', '\x212B', '\x3', '\x2', 
		'\x2', '\x2', '\x212E', '\x2134', '\x3', '\x2', '\x2', '\x2', '\x212F', 
		'\x2130', '\a', 'k', '\x2', '\x2', '\x2130', '\x2134', '\a', '\xDB', '\x2', 
		'\x2', '\x2131', '\x2132', '\a', '\x174', '\x2', '\x2', '\x2132', '\x2134', 
		'\a', '\xDB', '\x2', '\x2', '\x2133', '\x212E', '\x3', '\x2', '\x2', '\x2', 
		'\x2133', '\x212F', '\x3', '\x2', '\x2', '\x2', '\x2133', '\x2131', '\x3', 
		'\x2', '\x2', '\x2', '\x2134', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x2135', 
		'\x2138', '\x5', '\x3BE', '\x1E0', '\x2', '\x2136', '\x2138', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x2137', '\x2135', '\x3', '\x2', '\x2', '\x2', '\x2137', 
		'\x2136', '\x3', '\x2', '\x2', '\x2', '\x2138', '\x3BB', '\x3', '\x2', 
		'\x2', '\x2', '\x2139', '\x213A', '\a', '\x4', '\x2', '\x2', '\x213A', 
		'\x213B', '\x5', '\x3BE', '\x1E0', '\x2', '\x213B', '\x213C', '\a', '\x5', 
		'\x2', '\x2', '\x213C', '\x2142', '\x3', '\x2', '\x2', '\x2', '\x213D', 
		'\x213E', '\a', '\x4', '\x2', '\x2', '\x213E', '\x213F', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x213F', '\x2140', '\a', '\x5', '\x2', '\x2', '\x2140', 
		'\x2142', '\x3', '\x2', '\x2', '\x2', '\x2141', '\x2139', '\x3', '\x2', 
		'\x2', '\x2', '\x2141', '\x213D', '\x3', '\x2', '\x2', '\x2', '\x2142', 
		'\x3BD', '\x3', '\x2', '\x2', '\x2', '\x2143', '\x2165', '\x5', '\x3C2', 
		'\x1E2', '\x2', '\x2144', '\x2145', '\x5', '\x3C0', '\x1E1', '\x2', '\x2145', 
		'\x2146', '\x5', '\x3E2', '\x1F2', '\x2', '\x2146', '\x2165', '\x3', '\x2', 
		'\x2', '\x2', '\x2147', '\x2148', '\x5', '\x3C0', '\x1E1', '\x2', '\x2148', 
		'\x2149', '\x5', '\x3E0', '\x1F1', '\x2', '\x2149', '\x214A', '\x5', '\x40C', 
		'\x207', '\x2', '\x214A', '\x214B', '\x5', '\x3EA', '\x1F6', '\x2', '\x214B', 
		'\x2165', '\x3', '\x2', '\x2', '\x2', '\x214C', '\x214D', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x214D', '\x214E', '\x5', '\x3E0', '\x1F1', '\x2', '\x214E', 
		'\x214F', '\x5', '\x3E8', '\x1F5', '\x2', '\x214F', '\x2150', '\x5', '\x40E', 
		'\x208', '\x2', '\x2150', '\x2165', '\x3', '\x2', '\x2', '\x2', '\x2151', 
		'\x2152', '\x5', '\x3C8', '\x1E5', '\x2', '\x2152', '\x2153', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x2153', '\x2165', '\x3', '\x2', '\x2', '\x2', '\x2154', 
		'\x2155', '\x5', '\x3C8', '\x1E5', '\x2', '\x2155', '\x2156', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x2156', '\x2157', '\x5', '\x3E2', '\x1F2', '\x2', '\x2157', 
		'\x2165', '\x3', '\x2', '\x2', '\x2', '\x2158', '\x2159', '\x5', '\x3C8', 
		'\x1E5', '\x2', '\x2159', '\x215A', '\x5', '\x3C0', '\x1E1', '\x2', '\x215A', 
		'\x215B', '\x5', '\x3E0', '\x1F1', '\x2', '\x215B', '\x215C', '\x5', '\x40C', 
		'\x207', '\x2', '\x215C', '\x215D', '\x5', '\x3EA', '\x1F6', '\x2', '\x215D', 
		'\x2165', '\x3', '\x2', '\x2', '\x2', '\x215E', '\x215F', '\x5', '\x3C8', 
		'\x1E5', '\x2', '\x215F', '\x2160', '\x5', '\x3C0', '\x1E1', '\x2', '\x2160', 
		'\x2161', '\x5', '\x3E0', '\x1F1', '\x2', '\x2161', '\x2162', '\x5', '\x3E8', 
		'\x1F5', '\x2', '\x2162', '\x2163', '\x5', '\x40E', '\x208', '\x2', '\x2163', 
		'\x2165', '\x3', '\x2', '\x2', '\x2', '\x2164', '\x2143', '\x3', '\x2', 
		'\x2', '\x2', '\x2164', '\x2144', '\x3', '\x2', '\x2', '\x2', '\x2164', 
		'\x2147', '\x3', '\x2', '\x2', '\x2', '\x2164', '\x214C', '\x3', '\x2', 
		'\x2', '\x2', '\x2164', '\x2151', '\x3', '\x2', '\x2', '\x2', '\x2164', 
		'\x2154', '\x3', '\x2', '\x2', '\x2', '\x2164', '\x2158', '\x3', '\x2', 
		'\x2', '\x2', '\x2164', '\x215E', '\x3', '\x2', '\x2', '\x2', '\x2165', 
		'\x3BF', '\x3', '\x2', '\x2', '\x2', '\x2166', '\x2169', '\x5', '\x3C2', 
		'\x1E2', '\x2', '\x2167', '\x2169', '\x5', '\x3BC', '\x1DF', '\x2', '\x2168', 
		'\x2166', '\x3', '\x2', '\x2', '\x2', '\x2168', '\x2167', '\x3', '\x2', 
		'\x2', '\x2', '\x2169', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x216A', 
		'\x216B', '\b', '\x1E2', '\x1', '\x2', '\x216B', '\x216C', '\a', 'Z', 
		'\x2', '\x2', '\x216C', '\x216D', '\x5', '\x3DE', '\x1F0', '\x2', '\x216D', 
		'\x216E', '\x5', '\x3D2', '\x1EA', '\x2', '\x216E', '\x216F', '\x5', '\x506', 
		'\x284', '\x2', '\x216F', '\x2170', '\x5', '\x3D2', '\x1EA', '\x2', '\x2170', 
		'\x2171', '\x5', '\x41A', '\x20E', '\x2', '\x2171', '\x2172', '\x5', '\x440', 
		'\x221', '\x2', '\x2172', '\x2173', '\x5', '\x3FC', '\x1FF', '\x2', '\x2173', 
		'\x2174', '\x5', '\x40A', '\x206', '\x2', '\x2174', '\x2175', '\x5', '\x4AC', 
		'\x257', '\x2', '\x2175', '\x218A', '\x3', '\x2', '\x2', '\x2', '\x2176', 
		'\x2177', '\a', 'Z', '\x2', '\x2', '\x2177', '\x2178', '\x5', '\x3DC', 
		'\x1EF', '\x2', '\x2178', '\x2179', '\x5', '\x508', '\x285', '\x2', '\x2179', 
		'\x217A', '\x5', '\x3D2', '\x1EA', '\x2', '\x217A', '\x217B', '\x5', '\x41A', 
		'\x20E', '\x2', '\x217B', '\x217C', '\x5', '\x440', '\x221', '\x2', '\x217C', 
		'\x217D', '\x5', '\x3FC', '\x1FF', '\x2', '\x217D', '\x217E', '\x5', '\x40A', 
		'\x206', '\x2', '\x217E', '\x217F', '\x5', '\x4AC', '\x257', '\x2', '\x217F', 
		'\x218A', '\x3', '\x2', '\x2', '\x2', '\x2180', '\x218A', '\x5', '\x418', 
		'\x20D', '\x2', '\x2181', '\x2182', '\a', '^', '\x2', '\x2', '\x2182', 
		'\x218A', '\x5', '\x42C', '\x217', '\x2', '\x2183', '\x2184', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x2184', '\x2187', '\x5', '\x3C6', '\x1E4', '\x2', '\x2185', 
		'\x2188', '\x5', '\x3C2', '\x1E2', '\x2', '\x2186', '\x2188', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x2187', '\x2185', '\x3', '\x2', '\x2', '\x2', '\x2187', 
		'\x2186', '\x3', '\x2', '\x2', '\x2', '\x2188', '\x218A', '\x3', '\x2', 
		'\x2', '\x2', '\x2189', '\x216A', '\x3', '\x2', '\x2', '\x2', '\x2189', 
		'\x2176', '\x3', '\x2', '\x2', '\x2', '\x2189', '\x2180', '\x3', '\x2', 
		'\x2', '\x2', '\x2189', '\x2181', '\x3', '\x2', '\x2', '\x2', '\x2189', 
		'\x2183', '\x3', '\x2', '\x2', '\x2', '\x218A', '\x2193', '\x3', '\x2', 
		'\x2', '\x2', '\x218B', '\x218C', '\f', '\x4', '\x2', '\x2', '\x218C', 
		'\x218F', '\x5', '\x3C6', '\x1E4', '\x2', '\x218D', '\x2190', '\x5', '\x3C2', 
		'\x1E2', '\x2', '\x218E', '\x2190', '\x5', '\x3BC', '\x1DF', '\x2', '\x218F', 
		'\x218D', '\x3', '\x2', '\x2', '\x2', '\x218F', '\x218E', '\x3', '\x2', 
		'\x2', '\x2', '\x2190', '\x2192', '\x3', '\x2', '\x2', '\x2', '\x2191', 
		'\x218B', '\x3', '\x2', '\x2', '\x2', '\x2192', '\x2195', '\x3', '\x2', 
		'\x2', '\x2', '\x2193', '\x2191', '\x3', '\x2', '\x2', '\x2', '\x2193', 
		'\x2194', '\x3', '\x2', '\x2', '\x2', '\x2194', '\x3C3', '\x3', '\x2', 
		'\x2', '\x2', '\x2195', '\x2193', '\x3', '\x2', '\x2', '\x2', '\x2196', 
		'\x219A', '\a', '\x63', '\x2', '\x2', '\x2197', '\x219A', '\a', 'H', '\x2', 
		'\x2', '\x2198', '\x219A', '\a', '=', '\x2', '\x2', '\x2199', '\x2196', 
		'\x3', '\x2', '\x2', '\x2', '\x2199', '\x2197', '\x3', '\x2', '\x2', '\x2', 
		'\x2199', '\x2198', '\x3', '\x2', '\x2', '\x2', '\x219A', '\x3C5', '\x3', 
		'\x2', '\x2', '\x2', '\x219B', '\x219C', '\x5', '\x3C4', '\x1E3', '\x2', 
		'\x219C', '\x219D', '\x5', '\x3DA', '\x1EE', '\x2', '\x219D', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\x219E', '\x219F', '\a', 'k', '\x2', '\x2', 
		'\x219F', '\x21A4', '\x5', '\x3CA', '\x1E6', '\x2', '\x21A0', '\x21A1', 
		'\a', 'k', '\x2', '\x2', '\x21A1', '\x21A2', '\a', '\x128', '\x2', '\x2', 
		'\x21A2', '\x21A4', '\x5', '\x3CA', '\x1E6', '\x2', '\x21A3', '\x219E', 
		'\x3', '\x2', '\x2', '\x2', '\x21A3', '\x21A0', '\x3', '\x2', '\x2', '\x2', 
		'\x21A4', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x21A5', '\x21A6', '\b', 
		'\x1E6', '\x1', '\x2', '\x21A6', '\x21A7', '\x5', '\x3CC', '\x1E7', '\x2', 
		'\x21A7', '\x21AD', '\x3', '\x2', '\x2', '\x2', '\x21A8', '\x21A9', '\f', 
		'\x3', '\x2', '\x2', '\x21A9', '\x21AA', '\a', '\b', '\x2', '\x2', '\x21AA', 
		'\x21AC', '\x5', '\x3CC', '\x1E7', '\x2', '\x21AB', '\x21A8', '\x3', '\x2', 
		'\x2', '\x2', '\x21AC', '\x21AF', '\x3', '\x2', '\x2', '\x2', '\x21AD', 
		'\x21AB', '\x3', '\x2', '\x2', '\x2', '\x21AD', '\x21AE', '\x3', '\x2', 
		'\x2', '\x2', '\x21AE', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x21AF', 
		'\x21AD', '\x3', '\x2', '\x2', '\x2', '\x21B0', '\x21B1', '\x5', '\x512', 
		'\x28A', '\x2', '\x21B1', '\x21B2', '\x5', '\x368', '\x1B5', '\x2', '\x21B2', 
		'\x21B3', '\a', '&', '\x2', '\x2', '\x21B3', '\x21B4', '\x5', '\x3CE', 
		'\x1E8', '\x2', '\x21B4', '\x21B5', '\a', '\x4', '\x2', '\x2', '\x21B5', 
		'\x21B6', '\x5', '\x380', '\x1C1', '\x2', '\x21B6', '\x21B7', '\a', '\x5', 
		'\x2', '\x2', '\x21B7', '\x3CD', '\x3', '\x2', '\x2', '\x2', '\x21B8', 
		'\x21BD', '\a', '\xFC', '\x2', '\x2', '\x21B9', '\x21BA', '\a', 'O', '\x2', 
		'\x2', '\x21BA', '\x21BD', '\a', '\xFC', '\x2', '\x2', '\x21BB', '\x21BD', 
		'\x3', '\x2', '\x2', '\x2', '\x21BC', '\x21B8', '\x3', '\x2', '\x2', '\x2', 
		'\x21BC', '\x21B9', '\x3', '\x2', '\x2', '\x2', '\x21BC', '\x21BB', '\x3', 
		'\x2', '\x2', '\x2', '\x21BD', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x21BE', 
		'\x21C1', '\x5', '\x3C8', '\x1E5', '\x2', '\x21BF', '\x21C1', '\x3', '\x2', 
		'\x2', '\x2', '\x21C0', '\x21BE', '\x3', '\x2', '\x2', '\x2', '\x21C0', 
		'\x21BF', '\x3', '\x2', '\x2', '\x2', '\x21C1', '\x3D1', '\x3', '\x2', 
		'\x2', '\x2', '\x21C2', '\x21C3', '\a', 'I', '\x2', '\x2', '\x21C3', '\x21C4', 
		'\x5', '\x3D4', '\x1EB', '\x2', '\x21C4', '\x21C5', '\x5', '\x3D6', '\x1EC', 
		'\x2', '\x21C5', '\x21CA', '\x3', '\x2', '\x2', '\x2', '\x21C6', '\x21C7', 
		'\a', 'I', '\x2', '\x2', '\x21C7', '\x21CA', '\x5', '\x5F2', '\x2FA', 
		'\x2', '\x21C8', '\x21CA', '\x3', '\x2', '\x2', '\x2', '\x21C9', '\x21C2', 
		'\x3', '\x2', '\x2', '\x2', '\x21C9', '\x21C6', '\x3', '\x2', '\x2', '\x2', 
		'\x21C9', '\x21C8', '\x3', '\x2', '\x2', '\x2', '\x21CA', '\x3D3', '\x3', 
		'\x2', '\x2', '\x2', '\x21CB', '\x21CE', '\x3', '\x2', '\x2', '\x2', '\x21CC', 
		'\x21CE', '\a', '\x153', '\x2', '\x2', '\x21CD', '\x21CB', '\x3', '\x2', 
		'\x2', '\x2', '\x21CD', '\x21CC', '\x3', '\x2', '\x2', '\x2', '\x21CE', 
		'\x3D5', '\x3', '\x2', '\x2', '\x2', '\x21CF', '\x21D0', '\a', '\x15B', 
		'\x2', '\x2', '\x21D0', '\x21D1', '\x5', '\x3D8', '\x1ED', '\x2', '\x21D1', 
		'\x21D2', '\x5', '\x50E', '\x288', '\x2', '\x21D2', '\x21F3', '\x3', '\x2', 
		'\x2', '\x2', '\x21D3', '\x21D4', '\a', '\x159', '\x2', '\x2', '\x21D4', 
		'\x21D5', '\x5', '\x3D8', '\x1ED', '\x2', '\x21D5', '\x21D6', '\x5', '\x50E', 
		'\x288', '\x2', '\x21D6', '\x21F3', '\x3', '\x2', '\x2', '\x2', '\x21D7', 
		'\x21D8', '\a', '\xF7', '\x2', '\x2', '\x21D8', '\x21D9', '\a', '\x15B', 
		'\x2', '\x2', '\x21D9', '\x21DA', '\x5', '\x3D8', '\x1ED', '\x2', '\x21DA', 
		'\x21DB', '\x5', '\x50E', '\x288', '\x2', '\x21DB', '\x21F3', '\x3', '\x2', 
		'\x2', '\x2', '\x21DC', '\x21DD', '\a', '\xF7', '\x2', '\x2', '\x21DD', 
		'\x21DE', '\a', '\x159', '\x2', '\x2', '\x21DE', '\x21DF', '\x5', '\x3D8', 
		'\x1ED', '\x2', '\x21DF', '\x21E0', '\x5', '\x50E', '\x288', '\x2', '\x21E0', 
		'\x21F3', '\x3', '\x2', '\x2', '\x2', '\x21E1', '\x21E2', '\a', '\xD7', 
		'\x2', '\x2', '\x21E2', '\x21E3', '\a', '\x15B', '\x2', '\x2', '\x21E3', 
		'\x21E4', '\x5', '\x3D8', '\x1ED', '\x2', '\x21E4', '\x21E5', '\x5', '\x50E', 
		'\x288', '\x2', '\x21E5', '\x21F3', '\x3', '\x2', '\x2', '\x2', '\x21E6', 
		'\x21E7', '\a', '\xD7', '\x2', '\x2', '\x21E7', '\x21E8', '\a', '\x159', 
		'\x2', '\x2', '\x21E8', '\x21E9', '\x5', '\x3D8', '\x1ED', '\x2', '\x21E9', 
		'\x21EA', '\x5', '\x50E', '\x288', '\x2', '\x21EA', '\x21F3', '\x3', '\x2', 
		'\x2', '\x2', '\x21EB', '\x21EC', '\a', '\x168', '\x2', '\x2', '\x21EC', 
		'\x21ED', '\x5', '\x3D8', '\x1ED', '\x2', '\x21ED', '\x21EE', '\x5', '\x50E', 
		'\x288', '\x2', '\x21EE', '\x21F3', '\x3', '\x2', '\x2', '\x2', '\x21EF', 
		'\x21F0', '\a', '^', '\x2', '\x2', '\x21F0', '\x21F3', '\x5', '\x50E', 
		'\x288', '\x2', '\x21F1', '\x21F3', '\x5', '\x50E', '\x288', '\x2', '\x21F2', 
		'\x21CF', '\x3', '\x2', '\x2', '\x2', '\x21F2', '\x21D3', '\x3', '\x2', 
		'\x2', '\x2', '\x21F2', '\x21D7', '\x3', '\x2', '\x2', '\x2', '\x21F2', 
		'\x21DC', '\x3', '\x2', '\x2', '\x2', '\x21F2', '\x21E1', '\x3', '\x2', 
		'\x2', '\x2', '\x21F2', '\x21E6', '\x3', '\x2', '\x2', '\x2', '\x21F2', 
		'\x21EB', '\x3', '\x2', '\x2', '\x2', '\x21F2', '\x21EF', '\x3', '\x2', 
		'\x2', '\x2', '\x21F2', '\x21F1', '\x3', '\x2', '\x2', '\x2', '\x21F3', 
		'\x3D7', '\x3', '\x2', '\x2', '\x2', '\x21F4', '\x21F7', '\a', '^', '\x2', 
		'\x2', '\x21F5', '\x21F7', '\x3', '\x2', '\x2', '\x2', '\x21F6', '\x21F4', 
		'\x3', '\x2', '\x2', '\x2', '\x21F6', '\x21F5', '\x3', '\x2', '\x2', '\x2', 
		'\x21F7', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x21F8', '\x21FC', '\a', 
		' ', '\x2', '\x2', '\x21F9', '\x21FC', '\a', ':', '\x2', '\x2', '\x21FA', 
		'\x21FC', '\x3', '\x2', '\x2', '\x2', '\x21FB', '\x21F8', '\x3', '\x2', 
		'\x2', '\x2', '\x21FB', '\x21F9', '\x3', '\x2', '\x2', '\x2', '\x21FB', 
		'\x21FA', '\x3', '\x2', '\x2', '\x2', '\x21FC', '\x3DB', '\x3', '\x2', 
		'\x2', '\x2', '\x21FD', '\x2205', '\a', ':', '\x2', '\x2', '\x21FE', '\x21FF', 
		'\a', ':', '\x2', '\x2', '\x21FF', '\x2200', '\a', 'R', '\x2', '\x2', 
		'\x2200', '\x2201', '\a', '\x4', '\x2', '\x2', '\x2201', '\x2202', '\x5', 
		'\x4D4', '\x26B', '\x2', '\x2202', '\x2203', '\a', '\x5', '\x2', '\x2', 
		'\x2203', '\x2205', '\x3', '\x2', '\x2', '\x2', '\x2204', '\x21FD', '\x3', 
		'\x2', '\x2', '\x2', '\x2204', '\x21FE', '\x3', '\x2', '\x2', '\x2', '\x2205', 
		'\x3DD', '\x3', '\x2', '\x2', '\x2', '\x2206', '\x2209', '\a', ' ', '\x2', 
		'\x2', '\x2207', '\x2209', '\x3', '\x2', '\x2', '\x2', '\x2208', '\x2206', 
		'\x3', '\x2', '\x2', '\x2', '\x2208', '\x2207', '\x3', '\x2', '\x2', '\x2', 
		'\x2209', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x220A', '\x220D', '\x5', 
		'\x3E2', '\x1F2', '\x2', '\x220B', '\x220D', '\x3', '\x2', '\x2', '\x2', 
		'\x220C', '\x220A', '\x3', '\x2', '\x2', '\x2', '\x220C', '\x220B', '\x3', 
		'\x2', '\x2', '\x2', '\x220D', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x220E', 
		'\x220F', '\a', 'U', '\x2', '\x2', '\x220F', '\x2210', '\a', '\x95', '\x2', 
		'\x2', '\x2210', '\x2211', '\x5', '\x3E4', '\x1F3', '\x2', '\x2211', '\x3E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2212', '\x2217', '\x5', '\x3E6', '\x1F4', 
		'\x2', '\x2213', '\x2214', '\a', '\b', '\x2', '\x2', '\x2214', '\x2216', 
		'\x5', '\x3E6', '\x1F4', '\x2', '\x2215', '\x2213', '\x3', '\x2', '\x2', 
		'\x2', '\x2216', '\x2219', '\x3', '\x2', '\x2', '\x2', '\x2217', '\x2215', 
		'\x3', '\x2', '\x2', '\x2', '\x2217', '\x2218', '\x3', '\x2', '\x2', '\x2', 
		'\x2218', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x2219', '\x2217', '\x3', 
		'\x2', '\x2', '\x2', '\x221A', '\x221B', '\x5', '\x484', '\x243', '\x2', 
		'\x221B', '\x221C', '\a', '\x66', '\x2', '\x2', '\x221C', '\x221D', '\x5', 
		'\x4D0', '\x269', '\x2', '\x221D', '\x221E', '\x5', '\x268', '\x135', 
		'\x2', '\x221E', '\x2224', '\x3', '\x2', '\x2', '\x2', '\x221F', '\x2220', 
		'\x5', '\x484', '\x243', '\x2', '\x2220', '\x2221', '\x5', '\x266', '\x134', 
		'\x2', '\x2221', '\x2222', '\x5', '\x268', '\x135', '\x2', '\x2222', '\x2224', 
		'\x3', '\x2', '\x2', '\x2', '\x2223', '\x221A', '\x3', '\x2', '\x2', '\x2', 
		'\x2223', '\x221F', '\x3', '\x2', '\x2', '\x2', '\x2224', '\x3E7', '\x3', 
		'\x2', '\x2', '\x2', '\x2225', '\x2226', '\x5', '\x3EC', '\x1F7', '\x2', 
		'\x2226', '\x2227', '\x5', '\x3EE', '\x1F8', '\x2', '\x2227', '\x222E', 
		'\x3', '\x2', '\x2', '\x2', '\x2228', '\x2229', '\x5', '\x3EE', '\x1F8', 
		'\x2', '\x2229', '\x222A', '\x5', '\x3EC', '\x1F7', '\x2', '\x222A', '\x222E', 
		'\x3', '\x2', '\x2', '\x2', '\x222B', '\x222E', '\x5', '\x3EC', '\x1F7', 
		'\x2', '\x222C', '\x222E', '\x5', '\x3EE', '\x1F8', '\x2', '\x222D', '\x2225', 
		'\x3', '\x2', '\x2', '\x2', '\x222D', '\x2228', '\x3', '\x2', '\x2', '\x2', 
		'\x222D', '\x222B', '\x3', '\x2', '\x2', '\x2', '\x222D', '\x222C', '\x3', 
		'\x2', '\x2', '\x2', '\x222E', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x222F', 
		'\x2232', '\x5', '\x3E8', '\x1F5', '\x2', '\x2230', '\x2232', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x222F', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2230', '\x3', '\x2', '\x2', '\x2', '\x2232', '\x3EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2233', '\x2234', '\a', 'L', '\x2', '\x2', '\x2234', '\x2253', 
		'\x5', '\x3F0', '\x1F9', '\x2', '\x2235', '\x2236', '\a', 'L', '\x2', 
		'\x2', '\x2236', '\x2237', '\x5', '\x3F0', '\x1F9', '\x2', '\x2237', '\x2238', 
		'\a', '\b', '\x2', '\x2', '\x2238', '\x2239', '\x5', '\x3F2', '\x1FA', 
		'\x2', '\x2239', '\x2253', '\x3', '\x2', '\x2', '\x2', '\x223A', '\x223B', 
		'\a', '?', '\x2', '\x2', '\x223B', '\x223C', '\x5', '\x3FA', '\x1FE', 
		'\x2', '\x223C', '\x223D', '\x5', '\x3F4', '\x1FB', '\x2', '\x223D', '\x223E', 
		'\x5', '\x3F8', '\x1FD', '\x2', '\x223E', '\x223F', '\a', 'S', '\x2', 
		'\x2', '\x223F', '\x2253', '\x3', '\x2', '\x2', '\x2', '\x2240', '\x2241', 
		'\a', '?', '\x2', '\x2', '\x2241', '\x2242', '\x5', '\x3FA', '\x1FE', 
		'\x2', '\x2242', '\x2243', '\x5', '\x3F4', '\x1FB', '\x2', '\x2243', '\x2244', 
		'\x5', '\x3F8', '\x1FD', '\x2', '\x2244', '\x2245', '\a', 'k', '\x2', 
		'\x2', '\x2245', '\x2246', '\a', '\x1CD', '\x2', '\x2', '\x2246', '\x2253', 
		'\x3', '\x2', '\x2', '\x2', '\x2247', '\x2248', '\a', '?', '\x2', '\x2', 
		'\x2248', '\x2249', '\x5', '\x3FA', '\x1FE', '\x2', '\x2249', '\x224A', 
		'\x5', '\x3F8', '\x1FD', '\x2', '\x224A', '\x224B', '\a', 'S', '\x2', 
		'\x2', '\x224B', '\x2253', '\x3', '\x2', '\x2', '\x2', '\x224C', '\x224D', 
		'\a', '?', '\x2', '\x2', '\x224D', '\x224E', '\x5', '\x3FA', '\x1FE', 
		'\x2', '\x224E', '\x224F', '\x5', '\x3F8', '\x1FD', '\x2', '\x224F', '\x2250', 
		'\a', 'k', '\x2', '\x2', '\x2250', '\x2251', '\a', '\x1CD', '\x2', '\x2', 
		'\x2251', '\x2253', '\x3', '\x2', '\x2', '\x2', '\x2252', '\x2233', '\x3', 
		'\x2', '\x2', '\x2', '\x2252', '\x2235', '\x3', '\x2', '\x2', '\x2', '\x2252', 
		'\x223A', '\x3', '\x2', '\x2', '\x2', '\x2252', '\x2240', '\x3', '\x2', 
		'\x2', '\x2', '\x2252', '\x2247', '\x3', '\x2', '\x2', '\x2', '\x2252', 
		'\x224C', '\x3', '\x2', '\x2', '\x2', '\x2253', '\x3ED', '\x3', '\x2', 
		'\x2', '\x2', '\x2254', '\x2255', '\a', 'Q', '\x2', '\x2', '\x2255', '\x225B', 
		'\x5', '\x3F2', '\x1FA', '\x2', '\x2256', '\x2257', '\a', 'Q', '\x2', 
		'\x2', '\x2257', '\x2258', '\x5', '\x3F4', '\x1FB', '\x2', '\x2258', '\x2259', 
		'\x5', '\x3F8', '\x1FD', '\x2', '\x2259', '\x225B', '\x3', '\x2', '\x2', 
		'\x2', '\x225A', '\x2254', '\x3', '\x2', '\x2', '\x2', '\x225A', '\x2256', 
		'\x3', '\x2', '\x2', '\x2', '\x225B', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x225C', '\x225F', '\x5', '\x484', '\x243', '\x2', '\x225D', '\x225F', 
		'\a', ' ', '\x2', '\x2', '\x225E', '\x225C', '\x3', '\x2', '\x2', '\x2', 
		'\x225E', '\x225D', '\x3', '\x2', '\x2', '\x2', '\x225F', '\x3F1', '\x3', 
		'\x2', '\x2', '\x2', '\x2260', '\x2261', '\x5', '\x484', '\x243', '\x2', 
		'\x2261', '\x3F3', '\x3', '\x2', '\x2', '\x2', '\x2262', '\x2268', '\x5', 
		'\x48A', '\x246', '\x2', '\x2263', '\x2264', '\a', '\xE', '\x2', '\x2', 
		'\x2264', '\x2268', '\x5', '\x3F6', '\x1FC', '\x2', '\x2265', '\x2266', 
		'\a', '\xF', '\x2', '\x2', '\x2266', '\x2268', '\x5', '\x3F6', '\x1FC', 
		'\x2', '\x2267', '\x2262', '\x3', '\x2', '\x2', '\x2', '\x2267', '\x2263', 
		'\x3', '\x2', '\x2', '\x2', '\x2267', '\x2265', '\x3', '\x2', '\x2', '\x2', 
		'\x2268', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x2269', '\x226C', '\x5', 
		'\x522', '\x292', '\x2', '\x226A', '\x226C', '\x5', '\x520', '\x291', 
		'\x2', '\x226B', '\x2269', '\x3', '\x2', '\x2', '\x2', '\x226B', '\x226A', 
		'\x3', '\x2', '\x2', '\x2', '\x226C', '\x3F7', '\x3', '\x2', '\x2', '\x2', 
		'\x226D', '\x226E', '\t', '\x13', '\x2', '\x2', '\x226E', '\x3F9', '\x3', 
		'\x2', '\x2', '\x2', '\x226F', '\x2270', '\t', '\x14', '\x2', '\x2', '\x2270', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x2271', '\x2272', '\a', '\x44', 
		'\x2', '\x2', '\x2272', '\x2273', '\a', '\x95', '\x2', '\x2', '\x2273', 
		'\x2276', '\x5', '\x3FE', '\x200', '\x2', '\x2274', '\x2276', '\x3', '\x2', 
		'\x2', '\x2', '\x2275', '\x2271', '\x3', '\x2', '\x2', '\x2', '\x2275', 
		'\x2274', '\x3', '\x2', '\x2', '\x2', '\x2276', '\x3FD', '\x3', '\x2', 
		'\x2', '\x2', '\x2277', '\x2278', '\b', '\x200', '\x1', '\x2', '\x2278', 
		'\x2279', '\x5', '\x400', '\x201', '\x2', '\x2279', '\x227F', '\x3', '\x2', 
		'\x2', '\x2', '\x227A', '\x227B', '\f', '\x3', '\x2', '\x2', '\x227B', 
		'\x227C', '\a', '\b', '\x2', '\x2', '\x227C', '\x227E', '\x5', '\x400', 
		'\x201', '\x2', '\x227D', '\x227A', '\x3', '\x2', '\x2', '\x2', '\x227E', 
		'\x2281', '\x3', '\x2', '\x2', '\x2', '\x227F', '\x227D', '\x3', '\x2', 
		'\x2', '\x2', '\x227F', '\x2280', '\x3', '\x2', '\x2', '\x2', '\x2280', 
		'\x3FF', '\x3', '\x2', '\x2', '\x2', '\x2281', '\x227F', '\x3', '\x2', 
		'\x2', '\x2', '\x2282', '\x2288', '\x5', '\x484', '\x243', '\x2', '\x2283', 
		'\x2288', '\x5', '\x402', '\x202', '\x2', '\x2284', '\x2288', '\x5', '\x406', 
		'\x204', '\x2', '\x2285', '\x2288', '\x5', '\x404', '\x203', '\x2', '\x2286', 
		'\x2288', '\x5', '\x408', '\x205', '\x2', '\x2287', '\x2282', '\x3', '\x2', 
		'\x2', '\x2', '\x2287', '\x2283', '\x3', '\x2', '\x2', '\x2', '\x2287', 
		'\x2284', '\x3', '\x2', '\x2', '\x2', '\x2287', '\x2285', '\x3', '\x2', 
		'\x2', '\x2', '\x2287', '\x2286', '\x3', '\x2', '\x2', '\x2', '\x2288', 
		'\x401', '\x3', '\x2', '\x2', '\x2', '\x2289', '\x228A', '\a', '\x4', 
		'\x2', '\x2', '\x228A', '\x228B', '\a', '\x5', '\x2', '\x2', '\x228B', 
		'\x403', '\x3', '\x2', '\x2', '\x2', '\x228C', '\x228D', '\a', '\x1CE', 
		'\x2', '\x2', '\x228D', '\x228E', '\a', '\x4', '\x2', '\x2', '\x228E', 
		'\x228F', '\x5', '\x4D4', '\x26B', '\x2', '\x228F', '\x2290', '\a', '\x5', 
		'\x2', '\x2', '\x2290', '\x405', '\x3', '\x2', '\x2', '\x2', '\x2291', 
		'\x2292', '\a', '\x1CF', '\x2', '\x2', '\x2292', '\x2293', '\a', '\x4', 
		'\x2', '\x2', '\x2293', '\x2294', '\x5', '\x4D4', '\x26B', '\x2', '\x2294', 
		'\x2295', '\a', '\x5', '\x2', '\x2', '\x2295', '\x407', '\x3', '\x2', 
		'\x2', '\x2', '\x2296', '\x2297', '\a', '\x1D0', '\x2', '\x2', '\x2297', 
		'\x2298', '\a', '\x1D1', '\x2', '\x2', '\x2298', '\x2299', '\a', '\x4', 
		'\x2', '\x2', '\x2299', '\x229A', '\x5', '\x3FE', '\x200', '\x2', '\x229A', 
		'\x229B', '\a', '\x5', '\x2', '\x2', '\x229B', '\x409', '\x3', '\x2', 
		'\x2', '\x2', '\x229C', '\x229D', '\a', '\x45', '\x2', '\x2', '\x229D', 
		'\x22A0', '\x5', '\x484', '\x243', '\x2', '\x229E', '\x22A0', '\x3', '\x2', 
		'\x2', '\x2', '\x229F', '\x229C', '\x3', '\x2', '\x2', '\x2', '\x229F', 
		'\x229E', '\x3', '\x2', '\x2', '\x2', '\x22A0', '\x40B', '\x3', '\x2', 
		'\x2', '\x2', '\x22A1', '\x22A6', '\x5', '\x410', '\x209', '\x2', '\x22A2', 
		'\x22A3', '\a', '@', '\x2', '\x2', '\x22A3', '\x22A4', '\a', '\x125', 
		'\x2', '\x2', '\x22A4', '\x22A6', '\a', 'S', '\x2', '\x2', '\x22A5', '\x22A1', 
		'\x3', '\x2', '\x2', '\x2', '\x22A5', '\x22A2', '\x3', '\x2', '\x2', '\x2', 
		'\x22A6', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x22A7', '\x22AA', '\x5', 
		'\x40C', '\x207', '\x2', '\x22A8', '\x22AA', '\x3', '\x2', '\x2', '\x2', 
		'\x22A9', '\x22A7', '\x3', '\x2', '\x2', '\x2', '\x22A9', '\x22A8', '\x3', 
		'\x2', '\x2', '\x2', '\x22AA', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x22AB', 
		'\x22AC', '\b', '\x209', '\x1', '\x2', '\x22AC', '\x22AD', '\x5', '\x412', 
		'\x20A', '\x2', '\x22AD', '\x22B2', '\x3', '\x2', '\x2', '\x2', '\x22AE', 
		'\x22AF', '\f', '\x3', '\x2', '\x2', '\x22AF', '\x22B1', '\x5', '\x412', 
		'\x20A', '\x2', '\x22B0', '\x22AE', '\x3', '\x2', '\x2', '\x2', '\x22B1', 
		'\x22B4', '\x3', '\x2', '\x2', '\x2', '\x22B2', '\x22B0', '\x3', '\x2', 
		'\x2', '\x2', '\x22B2', '\x22B3', '\x3', '\x2', '\x2', '\x2', '\x22B3', 
		'\x411', '\x3', '\x2', '\x2', '\x2', '\x22B4', '\x22B2', '\x3', '\x2', 
		'\x2', '\x2', '\x22B5', '\x22B6', '\x5', '\x414', '\x20B', '\x2', '\x22B6', 
		'\x22B7', '\x5', '\x416', '\x20C', '\x2', '\x22B7', '\x22B8', '\x5', '\x3A6', 
		'\x1D4', '\x2', '\x22B8', '\x413', '\x3', '\x2', '\x2', '\x2', '\x22B9', 
		'\x22BA', '\a', '@', '\x2', '\x2', '\x22BA', '\x22C5', '\a', '\x16A', 
		'\x2', '\x2', '\x22BB', '\x22BC', '\a', '@', '\x2', '\x2', '\x22BC', '\x22BD', 
		'\a', '\x106', '\x2', '\x2', '\x22BD', '\x22BE', '\a', '\xEE', '\x2', 
		'\x2', '\x22BE', '\x22C5', '\a', '\x16A', '\x2', '\x2', '\x22BF', '\x22C0', 
		'\a', '@', '\x2', '\x2', '\x22C0', '\x22C5', '\a', '\x147', '\x2', '\x2', 
		'\x22C1', '\x22C2', '\a', '@', '\x2', '\x2', '\x22C2', '\x22C3', '\a', 
		'\xEE', '\x2', '\x2', '\x22C3', '\x22C5', '\a', '\x147', '\x2', '\x2', 
		'\x22C4', '\x22B9', '\x3', '\x2', '\x2', '\x2', '\x22C4', '\x22BB', '\x3', 
		'\x2', '\x2', '\x2', '\x22C4', '\x22BF', '\x3', '\x2', '\x2', '\x2', '\x22C4', 
		'\x22C1', '\x3', '\x2', '\x2', '\x2', '\x22C5', '\x415', '\x3', '\x2', 
		'\x2', '\x2', '\x22C6', '\x22C7', '\a', '\x10C', '\x2', '\x2', '\x22C7', 
		'\x22CA', '\x5', '\x50C', '\x287', '\x2', '\x22C8', '\x22CA', '\x3', '\x2', 
		'\x2', '\x2', '\x22C9', '\x22C6', '\x3', '\x2', '\x2', '\x2', '\x22C9', 
		'\x22C8', '\x3', '\x2', '\x2', '\x2', '\x22CA', '\x417', '\x3', '\x2', 
		'\x2', '\x2', '\x22CB', '\x22CC', '\b', '\x20D', '\x1', '\x2', '\x22CC', 
		'\x22CD', '\a', '\x19F', '\x2', '\x2', '\x22CD', '\x22CE', '\a', '\x4', 
		'\x2', '\x2', '\x22CE', '\x22CF', '\x5', '\x4D4', '\x26B', '\x2', '\x22CF', 
		'\x22D0', '\a', '\x5', '\x2', '\x2', '\x22D0', '\x22D9', '\x3', '\x2', 
		'\x2', '\x2', '\x22D1', '\x22D2', '\f', '\x3', '\x2', '\x2', '\x22D2', 
		'\x22D3', '\a', '\b', '\x2', '\x2', '\x22D3', '\x22D4', '\a', '\x4', '\x2', 
		'\x2', '\x22D4', '\x22D5', '\x5', '\x4D4', '\x26B', '\x2', '\x22D5', '\x22D6', 
		'\a', '\x5', '\x2', '\x2', '\x22D6', '\x22D8', '\x3', '\x2', '\x2', '\x2', 
		'\x22D7', '\x22D1', '\x3', '\x2', '\x2', '\x2', '\x22D8', '\x22DB', '\x3', 
		'\x2', '\x2', '\x2', '\x22D9', '\x22D7', '\x3', '\x2', '\x2', '\x2', '\x22D9', 
		'\x22DA', '\x3', '\x2', '\x2', '\x2', '\x22DA', '\x419', '\x3', '\x2', 
		'\x2', '\x2', '\x22DB', '\x22D9', '\x3', '\x2', '\x2', '\x2', '\x22DC', 
		'\x22DD', '\a', '\x42', '\x2', '\x2', '\x22DD', '\x22E0', '\x5', '\x41C', 
		'\x20F', '\x2', '\x22DE', '\x22E0', '\x3', '\x2', '\x2', '\x2', '\x22DF', 
		'\x22DC', '\x3', '\x2', '\x2', '\x2', '\x22DF', '\x22DE', '\x3', '\x2', 
		'\x2', '\x2', '\x22E0', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x22E1', 
		'\x22E6', '\x5', '\x41E', '\x210', '\x2', '\x22E2', '\x22E3', '\a', '\b', 
		'\x2', '\x2', '\x22E3', '\x22E5', '\x5', '\x41E', '\x210', '\x2', '\x22E4', 
		'\x22E2', '\x3', '\x2', '\x2', '\x2', '\x22E5', '\x22E8', '\x3', '\x2', 
		'\x2', '\x2', '\x22E6', '\x22E4', '\x3', '\x2', '\x2', '\x2', '\x22E6', 
		'\x22E7', '\x3', '\x2', '\x2', '\x2', '\x22E7', '\x41D', '\x3', '\x2', 
		'\x2', '\x2', '\x22E8', '\x22E6', '\x3', '\x2', '\x2', '\x2', '\x22E9', 
		'\x22EA', '\b', '\x210', '\x1', '\x2', '\x22EA', '\x22EB', '\x5', '\x42C', 
		'\x217', '\x2', '\x22EB', '\x22EC', '\x5', '\x422', '\x212', '\x2', '\x22EC', 
		'\x232D', '\x3', '\x2', '\x2', '\x2', '\x22ED', '\x22EE', '\x5', '\x42C', 
		'\x217', '\x2', '\x22EE', '\x22EF', '\x5', '\x422', '\x212', '\x2', '\x22EF', 
		'\x22F0', '\x5', '\x432', '\x21A', '\x2', '\x22F0', '\x232D', '\x3', '\x2', 
		'\x2', '\x2', '\x22F1', '\x22F2', '\x5', '\x436', '\x21C', '\x2', '\x22F2', 
		'\x22F3', '\x5', '\x424', '\x213', '\x2', '\x22F3', '\x232D', '\x3', '\x2', 
		'\x2', '\x2', '\x22F4', '\x22F5', '\a', 'J', '\x2', '\x2', '\x22F5', '\x22F6', 
		'\x5', '\x436', '\x21C', '\x2', '\x22F6', '\x22F7', '\x5', '\x424', '\x213', 
		'\x2', '\x22F7', '\x232D', '\x3', '\x2', '\x2', '\x2', '\x22F8', '\x22F9', 
		'\x5', '\x44A', '\x226', '\x2', '\x22F9', '\x22FA', '\x5', '\x422', '\x212', 
		'\x2', '\x22FA', '\x232D', '\x3', '\x2', '\x2', '\x2', '\x22FB', '\x22FC', 
		'\a', 'J', '\x2', '\x2', '\x22FC', '\x22FD', '\x5', '\x44A', '\x226', 
		'\x2', '\x22FD', '\x22FE', '\x5', '\x422', '\x212', '\x2', '\x22FE', '\x232D', 
		'\x3', '\x2', '\x2', '\x2', '\x22FF', '\x2300', '\x5', '\x3BC', '\x1DF', 
		'\x2', '\x2300', '\x2301', '\x5', '\x422', '\x212', '\x2', '\x2301', '\x232D', 
		'\x3', '\x2', '\x2', '\x2', '\x2302', '\x2303', '\a', 'J', '\x2', '\x2', 
		'\x2303', '\x2304', '\x5', '\x3BC', '\x1DF', '\x2', '\x2304', '\x2305', 
		'\x5', '\x422', '\x212', '\x2', '\x2305', '\x232D', '\x3', '\x2', '\x2', 
		'\x2', '\x2306', '\x2307', '\a', '\x4', '\x2', '\x2', '\x2307', '\x2308', 
		'\x5', '\x41E', '\x210', '\x2', '\x2308', '\x2309', '\a', '\x5', '\x2', 
		'\x2', '\x2309', '\x230A', '\x5', '\x422', '\x212', '\x2', '\x230A', '\x232D', 
		'\x3', '\x2', '\x2', '\x2', '\x230B', '\x2327', '\a', '\x4', '\x2', '\x2', 
		'\x230C', '\x230D', '\x5', '\x41E', '\x210', '\x2', '\x230D', '\x230E', 
		'\a', 'p', '\x2', '\x2', '\x230E', '\x230F', '\a', 'x', '\x2', '\x2', 
		'\x230F', '\x2310', '\x5', '\x41E', '\x210', '\x2', '\x2310', '\x2328', 
		'\x3', '\x2', '\x2', '\x2', '\x2311', '\x2312', '\x5', '\x41E', '\x210', 
		'\x2', '\x2312', '\x2313', '\x5', '\x426', '\x214', '\x2', '\x2313', '\x2314', 
		'\a', 'x', '\x2', '\x2', '\x2314', '\x2315', '\x5', '\x41E', '\x210', 
		'\x2', '\x2315', '\x2316', '\x5', '\x42A', '\x216', '\x2', '\x2316', '\x2328', 
		'\x3', '\x2', '\x2', '\x2', '\x2317', '\x2318', '\x5', '\x41E', '\x210', 
		'\x2', '\x2318', '\x2319', '\a', 'x', '\x2', '\x2', '\x2319', '\x231A', 
		'\x5', '\x41E', '\x210', '\x2', '\x231A', '\x231B', '\x5', '\x42A', '\x216', 
		'\x2', '\x231B', '\x2328', '\x3', '\x2', '\x2', '\x2', '\x231C', '\x231D', 
		'\x5', '\x41E', '\x210', '\x2', '\x231D', '\x231E', '\a', '{', '\x2', 
		'\x2', '\x231E', '\x231F', '\x5', '\x426', '\x214', '\x2', '\x231F', '\x2320', 
		'\a', 'x', '\x2', '\x2', '\x2320', '\x2321', '\x5', '\x41E', '\x210', 
		'\x2', '\x2321', '\x2328', '\x3', '\x2', '\x2', '\x2', '\x2322', '\x2323', 
		'\x5', '\x41E', '\x210', '\x2', '\x2323', '\x2324', '\a', '{', '\x2', 
		'\x2', '\x2324', '\x2325', '\a', 'x', '\x2', '\x2', '\x2325', '\x2326', 
		'\x5', '\x41E', '\x210', '\x2', '\x2326', '\x2328', '\x3', '\x2', '\x2', 
		'\x2', '\x2327', '\x230C', '\x3', '\x2', '\x2', '\x2', '\x2327', '\x2311', 
		'\x3', '\x2', '\x2', '\x2', '\x2327', '\x2317', '\x3', '\x2', '\x2', '\x2', 
		'\x2327', '\x231C', '\x3', '\x2', '\x2', '\x2', '\x2327', '\x2322', '\x3', 
		'\x2', '\x2', '\x2', '\x2328', '\x2329', '\x3', '\x2', '\x2', '\x2', '\x2329', 
		'\x232A', '\a', '\x5', '\x2', '\x2', '\x232A', '\x232B', '\x5', '\x422', 
		'\x212', '\x2', '\x232B', '\x232D', '\x3', '\x2', '\x2', '\x2', '\x232C', 
		'\x22E9', '\x3', '\x2', '\x2', '\x2', '\x232C', '\x22ED', '\x3', '\x2', 
		'\x2', '\x2', '\x232C', '\x22F1', '\x3', '\x2', '\x2', '\x2', '\x232C', 
		'\x22F4', '\x3', '\x2', '\x2', '\x2', '\x232C', '\x22F8', '\x3', '\x2', 
		'\x2', '\x2', '\x232C', '\x22FB', '\x3', '\x2', '\x2', '\x2', '\x232C', 
		'\x22FF', '\x3', '\x2', '\x2', '\x2', '\x232C', '\x2302', '\x3', '\x2', 
		'\x2', '\x2', '\x232C', '\x2306', '\x3', '\x2', '\x2', '\x2', '\x232C', 
		'\x230B', '\x3', '\x2', '\x2', '\x2', '\x232D', '\x2349', '\x3', '\x2', 
		'\x2', '\x2', '\x232E', '\x232F', '\f', '\t', '\x2', '\x2', '\x232F', 
		'\x2330', '\a', 'p', '\x2', '\x2', '\x2330', '\x2331', '\a', 'x', '\x2', 
		'\x2', '\x2331', '\x2348', '\x5', '\x41E', '\x210', '\n', '\x2332', '\x2333', 
		'\f', '\x6', '\x2', '\x2', '\x2333', '\x2334', '\a', '{', '\x2', '\x2', 
		'\x2334', '\x2335', '\x5', '\x426', '\x214', '\x2', '\x2335', '\x2336', 
		'\a', 'x', '\x2', '\x2', '\x2336', '\x2337', '\x5', '\x41E', '\x210', 
		'\a', '\x2337', '\x2348', '\x3', '\x2', '\x2', '\x2', '\x2338', '\x2339', 
		'\f', '\x5', '\x2', '\x2', '\x2339', '\x233A', '\a', '{', '\x2', '\x2', 
		'\x233A', '\x233B', '\a', 'x', '\x2', '\x2', '\x233B', '\x2348', '\x5', 
		'\x41E', '\x210', '\x6', '\x233C', '\x233D', '\f', '\b', '\x2', '\x2', 
		'\x233D', '\x233E', '\x5', '\x426', '\x214', '\x2', '\x233E', '\x233F', 
		'\a', 'x', '\x2', '\x2', '\x233F', '\x2340', '\x5', '\x41E', '\x210', 
		'\x2', '\x2340', '\x2341', '\x5', '\x42A', '\x216', '\x2', '\x2341', '\x2348', 
		'\x3', '\x2', '\x2', '\x2', '\x2342', '\x2343', '\f', '\a', '\x2', '\x2', 
		'\x2343', '\x2344', '\a', 'x', '\x2', '\x2', '\x2344', '\x2345', '\x5', 
		'\x41E', '\x210', '\x2', '\x2345', '\x2346', '\x5', '\x42A', '\x216', 
		'\x2', '\x2346', '\x2348', '\x3', '\x2', '\x2', '\x2', '\x2347', '\x232E', 
		'\x3', '\x2', '\x2', '\x2', '\x2347', '\x2332', '\x3', '\x2', '\x2', '\x2', 
		'\x2347', '\x2338', '\x3', '\x2', '\x2', '\x2', '\x2347', '\x233C', '\x3', 
		'\x2', '\x2', '\x2', '\x2347', '\x2342', '\x3', '\x2', '\x2', '\x2', '\x2348', 
		'\x234B', '\x3', '\x2', '\x2', '\x2', '\x2349', '\x2347', '\x3', '\x2', 
		'\x2', '\x2', '\x2349', '\x234A', '\x3', '\x2', '\x2', '\x2', '\x234A', 
		'\x41F', '\x3', '\x2', '\x2', '\x2', '\x234B', '\x2349', '\x3', '\x2', 
		'\x2', '\x2', '\x234C', '\x234D', '\a', '&', '\x2', '\x2', '\x234D', '\x234E', 
		'\x5', '\x532', '\x29A', '\x2', '\x234E', '\x234F', '\a', '\x4', '\x2', 
		'\x2', '\x234F', '\x2350', '\x5', '\x510', '\x289', '\x2', '\x2350', '\x2351', 
		'\a', '\x5', '\x2', '\x2', '\x2351', '\x235B', '\x3', '\x2', '\x2', '\x2', 
		'\x2352', '\x2353', '\a', '&', '\x2', '\x2', '\x2353', '\x235B', '\x5', 
		'\x532', '\x29A', '\x2', '\x2354', '\x2355', '\x5', '\x532', '\x29A', 
		'\x2', '\x2355', '\x2356', '\a', '\x4', '\x2', '\x2', '\x2356', '\x2357', 
		'\x5', '\x510', '\x289', '\x2', '\x2357', '\x2358', '\a', '\x5', '\x2', 
		'\x2', '\x2358', '\x235B', '\x3', '\x2', '\x2', '\x2', '\x2359', '\x235B', 
		'\x5', '\x532', '\x29A', '\x2', '\x235A', '\x234C', '\x3', '\x2', '\x2', 
		'\x2', '\x235A', '\x2352', '\x3', '\x2', '\x2', '\x2', '\x235A', '\x2354', 
		'\x3', '\x2', '\x2', '\x2', '\x235A', '\x2359', '\x3', '\x2', '\x2', '\x2', 
		'\x235B', '\x421', '\x3', '\x2', '\x2', '\x2', '\x235C', '\x235F', '\x5', 
		'\x420', '\x211', '\x2', '\x235D', '\x235F', '\x3', '\x2', '\x2', '\x2', 
		'\x235E', '\x235C', '\x3', '\x2', '\x2', '\x2', '\x235E', '\x235D', '\x3', 
		'\x2', '\x2', '\x2', '\x235F', '\x423', '\x3', '\x2', '\x2', '\x2', '\x2360', 
		'\x2373', '\x5', '\x420', '\x211', '\x2', '\x2361', '\x2362', '\a', '&', 
		'\x2', '\x2', '\x2362', '\x2363', '\a', '\x4', '\x2', '\x2', '\x2363', 
		'\x2364', '\x5', '\x446', '\x224', '\x2', '\x2364', '\x2365', '\a', '\x5', 
		'\x2', '\x2', '\x2365', '\x2373', '\x3', '\x2', '\x2', '\x2', '\x2366', 
		'\x2367', '\a', '&', '\x2', '\x2', '\x2367', '\x2368', '\x5', '\x532', 
		'\x29A', '\x2', '\x2368', '\x2369', '\a', '\x4', '\x2', '\x2', '\x2369', 
		'\x236A', '\x5', '\x446', '\x224', '\x2', '\x236A', '\x236B', '\a', '\x5', 
		'\x2', '\x2', '\x236B', '\x2373', '\x3', '\x2', '\x2', '\x2', '\x236C', 
		'\x236D', '\x5', '\x532', '\x29A', '\x2', '\x236D', '\x236E', '\a', '\x4', 
		'\x2', '\x2', '\x236E', '\x236F', '\x5', '\x446', '\x224', '\x2', '\x236F', 
		'\x2370', '\a', '\x5', '\x2', '\x2', '\x2370', '\x2373', '\x3', '\x2', 
		'\x2', '\x2', '\x2371', '\x2373', '\x3', '\x2', '\x2', '\x2', '\x2372', 
		'\x2360', '\x3', '\x2', '\x2', '\x2', '\x2372', '\x2361', '\x3', '\x2', 
		'\x2', '\x2', '\x2372', '\x2366', '\x3', '\x2', '\x2', '\x2', '\x2372', 
		'\x236C', '\x3', '\x2', '\x2', '\x2', '\x2372', '\x2371', '\x3', '\x2', 
		'\x2', '\x2', '\x2373', '\x425', '\x3', '\x2', '\x2', '\x2', '\x2374', 
		'\x2375', '\a', 's', '\x2', '\x2', '\x2375', '\x237C', '\x5', '\x428', 
		'\x215', '\x2', '\x2376', '\x2377', '\a', 'y', '\x2', '\x2', '\x2377', 
		'\x237C', '\x5', '\x428', '\x215', '\x2', '\x2378', '\x2379', '\a', '\x80', 
		'\x2', '\x2', '\x2379', '\x237C', '\x5', '\x428', '\x215', '\x2', '\x237A', 
		'\x237C', '\a', 'u', '\x2', '\x2', '\x237B', '\x2374', '\x3', '\x2', '\x2', 
		'\x2', '\x237B', '\x2376', '\x3', '\x2', '\x2', '\x2', '\x237B', '\x2378', 
		'\x3', '\x2', '\x2', '\x2', '\x237B', '\x237A', '\x3', '\x2', '\x2', '\x2', 
		'\x237C', '\x427', '\x3', '\x2', '\x2', '\x2', '\x237D', '\x2380', '\a', 
		'}', '\x2', '\x2', '\x237E', '\x2380', '\x3', '\x2', '\x2', '\x2', '\x237F', 
		'\x237D', '\x3', '\x2', '\x2', '\x2', '\x237F', '\x237E', '\x3', '\x2', 
		'\x2', '\x2', '\x2380', '\x429', '\x3', '\x2', '\x2', '\x2', '\x2381', 
		'\x2382', '\a', '\x66', '\x2', '\x2', '\x2382', '\x2383', '\a', '\x4', 
		'\x2', '\x2', '\x2383', '\x2384', '\x5', '\x510', '\x289', '\x2', '\x2384', 
		'\x2385', '\a', '\x5', '\x2', '\x2', '\x2385', '\x2389', '\x3', '\x2', 
		'\x2', '\x2', '\x2386', '\x2387', '\a', 'R', '\x2', '\x2', '\x2387', '\x2389', 
		'\x5', '\x484', '\x243', '\x2', '\x2388', '\x2381', '\x3', '\x2', '\x2', 
		'\x2', '\x2388', '\x2386', '\x3', '\x2', '\x2', '\x2', '\x2389', '\x42B', 
		'\x3', '\x2', '\x2', '\x2', '\x238A', '\x2396', '\x5', '\x50E', '\x288', 
		'\x2', '\x238B', '\x238C', '\x5', '\x50E', '\x288', '\x2', '\x238C', '\x238D', 
		'\a', '\v', '\x2', '\x2', '\x238D', '\x2396', '\x3', '\x2', '\x2', '\x2', 
		'\x238E', '\x238F', '\a', 'S', '\x2', '\x2', '\x238F', '\x2396', '\x5', 
		'\x50E', '\x288', '\x2', '\x2390', '\x2391', '\a', 'S', '\x2', '\x2', 
		'\x2391', '\x2392', '\a', '\x4', '\x2', '\x2', '\x2392', '\x2393', '\x5', 
		'\x50E', '\x288', '\x2', '\x2393', '\x2394', '\a', '\x5', '\x2', '\x2', 
		'\x2394', '\x2396', '\x3', '\x2', '\x2', '\x2', '\x2395', '\x238A', '\x3', 
		'\x2', '\x2', '\x2', '\x2395', '\x238B', '\x3', '\x2', '\x2', '\x2', '\x2395', 
		'\x238E', '\x3', '\x2', '\x2', '\x2', '\x2395', '\x2390', '\x3', '\x2', 
		'\x2', '\x2', '\x2396', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x2397', 
		'\x2398', '\b', '\x218', '\x1', '\x2', '\x2398', '\x2399', '\x5', '\x42C', 
		'\x217', '\x2', '\x2399', '\x239F', '\x3', '\x2', '\x2', '\x2', '\x239A', 
		'\x239B', '\f', '\x3', '\x2', '\x2', '\x239B', '\x239C', '\a', '\b', '\x2', 
		'\x2', '\x239C', '\x239E', '\x5', '\x42C', '\x217', '\x2', '\x239D', '\x239A', 
		'\x3', '\x2', '\x2', '\x2', '\x239E', '\x23A1', '\x3', '\x2', '\x2', '\x2', 
		'\x239F', '\x239D', '\x3', '\x2', '\x2', '\x2', '\x239F', '\x23A0', '\x3', 
		'\x2', '\x2', '\x2', '\x23A0', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x23A1', 
		'\x239F', '\x3', '\x2', '\x2', '\x2', '\x23A2', '\x23AB', '\x5', '\x42C', 
		'\x217', '\x2', '\x23A3', '\x23A4', '\x5', '\x42C', '\x217', '\x2', '\x23A4', 
		'\x23A5', '\x5', '\x532', '\x29A', '\x2', '\x23A5', '\x23AB', '\x3', '\x2', 
		'\x2', '\x2', '\x23A6', '\x23A7', '\x5', '\x42C', '\x217', '\x2', '\x23A7', 
		'\x23A8', '\a', '&', '\x2', '\x2', '\x23A8', '\x23A9', '\x5', '\x532', 
		'\x29A', '\x2', '\x23A9', '\x23AB', '\x3', '\x2', '\x2', '\x2', '\x23AA', 
		'\x23A2', '\x3', '\x2', '\x2', '\x2', '\x23AA', '\x23A3', '\x3', '\x2', 
		'\x2', '\x2', '\x23AA', '\x23A6', '\x3', '\x2', '\x2', '\x2', '\x23AB', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x23AC', '\x23AD', '\a', '\x1D2', 
		'\x2', '\x2', '\x23AD', '\x23AE', '\x5', '\x518', '\x28D', '\x2', '\x23AE', 
		'\x23AF', '\a', '\x4', '\x2', '\x2', '\x23AF', '\x23B0', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x23B0', '\x23B1', '\a', '\x5', '\x2', '\x2', '\x23B1', 
		'\x23B2', '\x5', '\x434', '\x21B', '\x2', '\x23B2', '\x433', '\x3', '\x2', 
		'\x2', '\x2', '\x23B3', '\x23B4', '\a', '\x12F', '\x2', '\x2', '\x23B4', 
		'\x23B5', '\a', '\x4', '\x2', '\x2', '\x23B5', '\x23B6', '\x5', '\x484', 
		'\x243', '\x2', '\x23B6', '\x23B7', '\a', '\x5', '\x2', '\x2', '\x23B7', 
		'\x23BA', '\x3', '\x2', '\x2', '\x2', '\x23B8', '\x23BA', '\x3', '\x2', 
		'\x2', '\x2', '\x23B9', '\x23B3', '\x3', '\x2', '\x2', '\x2', '\x23B9', 
		'\x23B8', '\x3', '\x2', '\x2', '\x2', '\x23BA', '\x435', '\x3', '\x2', 
		'\x2', '\x2', '\x23BB', '\x23BC', '\x5', '\x492', '\x24A', '\x2', '\x23BC', 
		'\x23BD', '\x5', '\x43E', '\x220', '\x2', '\x23BD', '\x23C6', '\x3', '\x2', 
		'\x2', '\x2', '\x23BE', '\x23BF', '\a', '\x139', '\x2', '\x2', '\x23BF', 
		'\x23C0', '\a', '\x42', '\x2', '\x2', '\x23C0', '\x23C1', '\a', '\x4', 
		'\x2', '\x2', '\x23C1', '\x23C2', '\x5', '\x43A', '\x21E', '\x2', '\x23C2', 
		'\x23C3', '\a', '\x5', '\x2', '\x2', '\x23C3', '\x23C4', '\x5', '\x43E', 
		'\x220', '\x2', '\x23C4', '\x23C6', '\x3', '\x2', '\x2', '\x2', '\x23C5', 
		'\x23BB', '\x3', '\x2', '\x2', '\x2', '\x23C5', '\x23BE', '\x3', '\x2', 
		'\x2', '\x2', '\x23C6', '\x437', '\x3', '\x2', '\x2', '\x2', '\x23C7', 
		'\x23C8', '\x5', '\x492', '\x24A', '\x2', '\x23C8', '\x23C9', '\x5', '\x43C', 
		'\x21F', '\x2', '\x23C9', '\x439', '\x3', '\x2', '\x2', '\x2', '\x23CA', 
		'\x23CB', '\b', '\x21E', '\x1', '\x2', '\x23CB', '\x23CC', '\x5', '\x438', 
		'\x21D', '\x2', '\x23CC', '\x23D2', '\x3', '\x2', '\x2', '\x2', '\x23CD', 
		'\x23CE', '\f', '\x3', '\x2', '\x2', '\x23CE', '\x23CF', '\a', '\b', '\x2', 
		'\x2', '\x23CF', '\x23D1', '\x5', '\x438', '\x21D', '\x2', '\x23D0', '\x23CD', 
		'\x3', '\x2', '\x2', '\x2', '\x23D1', '\x23D4', '\x3', '\x2', '\x2', '\x2', 
		'\x23D2', '\x23D0', '\x3', '\x2', '\x2', '\x2', '\x23D2', '\x23D3', '\x3', 
		'\x2', '\x2', '\x2', '\x23D3', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x23D4', 
		'\x23D2', '\x3', '\x2', '\x2', '\x2', '\x23D5', '\x23D6', '\a', '&', '\x2', 
		'\x2', '\x23D6', '\x23D7', '\a', '\x4', '\x2', '\x2', '\x23D7', '\x23D8', 
		'\x5', '\x446', '\x224', '\x2', '\x23D8', '\x23D9', '\a', '\x5', '\x2', 
		'\x2', '\x23D9', '\x23DC', '\x3', '\x2', '\x2', '\x2', '\x23DA', '\x23DC', 
		'\x3', '\x2', '\x2', '\x2', '\x23DB', '\x23D5', '\x3', '\x2', '\x2', '\x2', 
		'\x23DB', '\x23DA', '\x3', '\x2', '\x2', '\x2', '\x23DC', '\x43D', '\x3', 
		'\x2', '\x2', '\x2', '\x23DD', '\x23DE', '\a', 'k', '\x2', '\x2', '\x23DE', 
		'\x23E1', '\a', '\x1D3', '\x2', '\x2', '\x23DF', '\x23E1', '\x3', '\x2', 
		'\x2', '\x2', '\x23E0', '\x23DD', '\x3', '\x2', '\x2', '\x2', '\x23E0', 
		'\x23DF', '\x3', '\x2', '\x2', '\x2', '\x23E1', '\x43F', '\x3', '\x2', 
		'\x2', '\x2', '\x23E2', '\x23E3', '\a', 'i', '\x2', '\x2', '\x23E3', '\x23E6', 
		'\x5', '\x484', '\x243', '\x2', '\x23E4', '\x23E6', '\x3', '\x2', '\x2', 
		'\x2', '\x23E5', '\x23E2', '\x3', '\x2', '\x2', '\x2', '\x23E5', '\x23E4', 
		'\x3', '\x2', '\x2', '\x2', '\x23E6', '\x441', '\x3', '\x2', '\x2', '\x2', 
		'\x23E7', '\x23E8', '\a', 'i', '\x2', '\x2', '\x23E8', '\x23EF', '\x5', 
		'\x484', '\x243', '\x2', '\x23E9', '\x23EA', '\a', 'i', '\x2', '\x2', 
		'\x23EA', '\x23EB', '\a', '\x1AB', '\x2', '\x2', '\x23EB', '\x23EC', '\a', 
		'\x10C', '\x2', '\x2', '\x23EC', '\x23EF', '\x5', '\x3B4', '\x1DB', '\x2', 
		'\x23ED', '\x23EF', '\x3', '\x2', '\x2', '\x2', '\x23EE', '\x23E7', '\x3', 
		'\x2', '\x2', '\x2', '\x23EE', '\x23E9', '\x3', '\x2', '\x2', '\x2', '\x23EE', 
		'\x23ED', '\x3', '\x2', '\x2', '\x2', '\x23EF', '\x443', '\x3', '\x2', 
		'\x2', '\x2', '\x23F0', '\x23F3', '\x5', '\x446', '\x224', '\x2', '\x23F1', 
		'\x23F3', '\x3', '\x2', '\x2', '\x2', '\x23F2', '\x23F0', '\x3', '\x2', 
		'\x2', '\x2', '\x23F2', '\x23F1', '\x3', '\x2', '\x2', '\x2', '\x23F3', 
		'\x445', '\x3', '\x2', '\x2', '\x2', '\x23F4', '\x23F5', '\b', '\x224', 
		'\x1', '\x2', '\x23F5', '\x23F6', '\x5', '\x448', '\x225', '\x2', '\x23F6', 
		'\x23FC', '\x3', '\x2', '\x2', '\x2', '\x23F7', '\x23F8', '\f', '\x3', 
		'\x2', '\x2', '\x23F8', '\x23F9', '\a', '\b', '\x2', '\x2', '\x23F9', 
		'\x23FB', '\x5', '\x448', '\x225', '\x2', '\x23FA', '\x23F7', '\x3', '\x2', 
		'\x2', '\x2', '\x23FB', '\x23FE', '\x3', '\x2', '\x2', '\x2', '\x23FC', 
		'\x23FA', '\x3', '\x2', '\x2', '\x2', '\x23FC', '\x23FD', '\x3', '\x2', 
		'\x2', '\x2', '\x23FD', '\x447', '\x3', '\x2', '\x2', '\x2', '\x23FE', 
		'\x23FC', '\x3', '\x2', '\x2', '\x2', '\x23FF', '\x2400', '\x5', '\x532', 
		'\x29A', '\x2', '\x2400', '\x2401', '\x5', '\x458', '\x22D', '\x2', '\x2401', 
		'\x2402', '\x5', 'p', '\x39', '\x2', '\x2402', '\x449', '\x3', '\x2', 
		'\x2', '\x2', '\x2403', '\x2404', '\a', '\x1D4', '\x2', '\x2', '\x2404', 
		'\x2405', '\a', '\x4', '\x2', '\x2', '\x2405', '\x2406', '\x5', '\x48A', 
		'\x246', '\x2', '\x2406', '\x2407', '\x5', '\x4A4', '\x253', '\x2', '\x2407', 
		'\x2408', '\a', '\x1D5', '\x2', '\x2', '\x2408', '\x2409', '\x5', '\x44C', 
		'\x227', '\x2', '\x2409', '\x240A', '\a', '\x5', '\x2', '\x2', '\x240A', 
		'\x2419', '\x3', '\x2', '\x2', '\x2', '\x240B', '\x240C', '\a', '\x1D4', 
		'\x2', '\x2', '\x240C', '\x240D', '\a', '\x4', '\x2', '\x2', '\x240D', 
		'\x240E', '\a', '\x1D6', '\x2', '\x2', '\x240E', '\x240F', '\a', '\x4', 
		'\x2', '\x2', '\x240F', '\x2410', '\x5', '\x454', '\x22B', '\x2', '\x2410', 
		'\x2411', '\a', '\x5', '\x2', '\x2', '\x2411', '\x2412', '\a', '\b', '\x2', 
		'\x2', '\x2412', '\x2413', '\x5', '\x48A', '\x246', '\x2', '\x2413', '\x2414', 
		'\x5', '\x4A4', '\x253', '\x2', '\x2414', '\x2415', '\a', '\x1D5', '\x2', 
		'\x2', '\x2415', '\x2416', '\x5', '\x44C', '\x227', '\x2', '\x2416', '\x2417', 
		'\a', '\x5', '\x2', '\x2', '\x2417', '\x2419', '\x3', '\x2', '\x2', '\x2', 
		'\x2418', '\x2403', '\x3', '\x2', '\x2', '\x2', '\x2418', '\x240B', '\x3', 
		'\x2', '\x2', '\x2', '\x2419', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x241A', 
		'\x241B', '\b', '\x227', '\x1', '\x2', '\x241B', '\x241C', '\x5', '\x44E', 
		'\x228', '\x2', '\x241C', '\x2422', '\x3', '\x2', '\x2', '\x2', '\x241D', 
		'\x241E', '\f', '\x3', '\x2', '\x2', '\x241E', '\x241F', '\a', '\b', '\x2', 
		'\x2', '\x241F', '\x2421', '\x5', '\x44E', '\x228', '\x2', '\x2420', '\x241D', 
		'\x3', '\x2', '\x2', '\x2', '\x2421', '\x2424', '\x3', '\x2', '\x2', '\x2', 
		'\x2422', '\x2420', '\x3', '\x2', '\x2', '\x2', '\x2422', '\x2423', '\x3', 
		'\x2', '\x2', '\x2', '\x2423', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x2424', 
		'\x2422', '\x3', '\x2', '\x2', '\x2', '\x2425', '\x2426', '\x5', '\x532', 
		'\x29A', '\x2', '\x2426', '\x2427', '\x5', '\x458', '\x22D', '\x2', '\x2427', 
		'\x2431', '\x3', '\x2', '\x2', '\x2', '\x2428', '\x2429', '\x5', '\x532', 
		'\x29A', '\x2', '\x2429', '\x242A', '\x5', '\x458', '\x22D', '\x2', '\x242A', 
		'\x242B', '\x5', '\x450', '\x229', '\x2', '\x242B', '\x2431', '\x3', '\x2', 
		'\x2', '\x2', '\x242C', '\x242D', '\x5', '\x532', '\x29A', '\x2', '\x242D', 
		'\x242E', '\a', '@', '\x2', '\x2', '\x242E', '\x242F', '\a', '\x1D3', 
		'\x2', '\x2', '\x242F', '\x2431', '\x3', '\x2', '\x2', '\x2', '\x2430', 
		'\x2425', '\x3', '\x2', '\x2', '\x2', '\x2430', '\x2428', '\x3', '\x2', 
		'\x2', '\x2', '\x2430', '\x242C', '\x3', '\x2', '\x2', '\x2', '\x2431', 
		'\x44F', '\x3', '\x2', '\x2', '\x2', '\x2432', '\x2433', '\b', '\x229', 
		'\x1', '\x2', '\x2433', '\x2434', '\x5', '\x452', '\x22A', '\x2', '\x2434', 
		'\x2439', '\x3', '\x2', '\x2', '\x2', '\x2435', '\x2436', '\f', '\x3', 
		'\x2', '\x2', '\x2436', '\x2438', '\x5', '\x452', '\x22A', '\x2', '\x2437', 
		'\x2435', '\x3', '\x2', '\x2', '\x2', '\x2438', '\x243B', '\x3', '\x2', 
		'\x2', '\x2', '\x2439', '\x2437', '\x3', '\x2', '\x2', '\x2', '\x2439', 
		'\x243A', '\x3', '\x2', '\x2', '\x2', '\x243A', '\x451', '\x3', '\x2', 
		'\x2', '\x2', '\x243B', '\x2439', '\x3', '\x2', '\x2', '\x2', '\x243C', 
		'\x243D', '\x5', '\x53A', '\x29E', '\x2', '\x243D', '\x243E', '\x5', '\x488', 
		'\x245', '\x2', '\x243E', '\x2445', '\x3', '\x2', '\x2', '\x2', '\x243F', 
		'\x2440', '\a', '\x37', '\x2', '\x2', '\x2440', '\x2445', '\x5', '\x488', 
		'\x245', '\x2', '\x2441', '\x2442', '\a', 'O', '\x2', '\x2', '\x2442', 
		'\x2445', '\a', 'P', '\x2', '\x2', '\x2443', '\x2445', '\a', 'P', '\x2', 
		'\x2', '\x2444', '\x243C', '\x3', '\x2', '\x2', '\x2', '\x2444', '\x243F', 
		'\x3', '\x2', '\x2', '\x2', '\x2444', '\x2441', '\x3', '\x2', '\x2', '\x2', 
		'\x2444', '\x2443', '\x3', '\x2', '\x2', '\x2', '\x2445', '\x453', '\x3', 
		'\x2', '\x2', '\x2', '\x2446', '\x2447', '\b', '\x22B', '\x1', '\x2', 
		'\x2447', '\x2448', '\x5', '\x456', '\x22C', '\x2', '\x2448', '\x244E', 
		'\x3', '\x2', '\x2', '\x2', '\x2449', '\x244A', '\f', '\x3', '\x2', '\x2', 
		'\x244A', '\x244B', '\a', '\b', '\x2', '\x2', '\x244B', '\x244D', '\x5', 
		'\x456', '\x22C', '\x2', '\x244C', '\x2449', '\x3', '\x2', '\x2', '\x2', 
		'\x244D', '\x2450', '\x3', '\x2', '\x2', '\x2', '\x244E', '\x244C', '\x3', 
		'\x2', '\x2', '\x2', '\x244E', '\x244F', '\x3', '\x2', '\x2', '\x2', '\x244F', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x2450', '\x244E', '\x3', '\x2', 
		'\x2', '\x2', '\x2451', '\x2452', '\x5', '\x488', '\x245', '\x2', '\x2452', 
		'\x2453', '\a', '&', '\x2', '\x2', '\x2453', '\x2454', '\x5', '\x538', 
		'\x29D', '\x2', '\x2454', '\x2458', '\x3', '\x2', '\x2', '\x2', '\x2455', 
		'\x2456', '\a', '\x37', '\x2', '\x2', '\x2456', '\x2458', '\x5', '\x488', 
		'\x245', '\x2', '\x2457', '\x2451', '\x3', '\x2', '\x2', '\x2', '\x2457', 
		'\x2455', '\x3', '\x2', '\x2', '\x2', '\x2458', '\x457', '\x3', '\x2', 
		'\x2', '\x2', '\x2459', '\x245A', '\x5', '\x45C', '\x22F', '\x2', '\x245A', 
		'\x245B', '\x5', '\x45A', '\x22E', '\x2', '\x245B', '\x247D', '\x3', '\x2', 
		'\x2', '\x2', '\x245C', '\x245D', '\a', '\x198', '\x2', '\x2', '\x245D', 
		'\x245E', '\x5', '\x45C', '\x22F', '\x2', '\x245E', '\x245F', '\x5', '\x45A', 
		'\x22E', '\x2', '\x245F', '\x247D', '\x3', '\x2', '\x2', '\x2', '\x2460', 
		'\x2461', '\x5', '\x45C', '\x22F', '\x2', '\x2461', '\x2462', '\a', '%', 
		'\x2', '\x2', '\x2462', '\x2463', '\a', '\x6', '\x2', '\x2', '\x2463', 
		'\x2464', '\x5', '\x522', '\x292', '\x2', '\x2464', '\x2465', '\a', '\a', 
		'\x2', '\x2', '\x2465', '\x247D', '\x3', '\x2', '\x2', '\x2', '\x2466', 
		'\x2467', '\a', '\x198', '\x2', '\x2', '\x2467', '\x2468', '\x5', '\x45C', 
		'\x22F', '\x2', '\x2468', '\x2469', '\a', '%', '\x2', '\x2', '\x2469', 
		'\x246A', '\a', '\x6', '\x2', '\x2', '\x246A', '\x246B', '\x5', '\x522', 
		'\x292', '\x2', '\x246B', '\x246C', '\a', '\a', '\x2', '\x2', '\x246C', 
		'\x247D', '\x3', '\x2', '\x2', '\x2', '\x246D', '\x246E', '\x5', '\x45C', 
		'\x22F', '\x2', '\x246E', '\x246F', '\a', '%', '\x2', '\x2', '\x246F', 
		'\x247D', '\x3', '\x2', '\x2', '\x2', '\x2470', '\x2471', '\a', '\x198', 
		'\x2', '\x2', '\x2471', '\x2472', '\x5', '\x45C', '\x22F', '\x2', '\x2472', 
		'\x2473', '\a', '%', '\x2', '\x2', '\x2473', '\x247D', '\x3', '\x2', '\x2', 
		'\x2', '\x2474', '\x2475', '\x5', '\x50E', '\x288', '\x2', '\x2475', '\x2476', 
		'\a', '\x1D', '\x2', '\x2', '\x2476', '\x2477', '\a', '\x1D7', '\x2', 
		'\x2', '\x2477', '\x247D', '\x3', '\x2', '\x2', '\x2', '\x2478', '\x2479', 
		'\x5', '\x50E', '\x288', '\x2', '\x2479', '\x247A', '\a', '\x1D', '\x2', 
		'\x2', '\x247A', '\x247B', '\a', '\x161', '\x2', '\x2', '\x247B', '\x247D', 
		'\x3', '\x2', '\x2', '\x2', '\x247C', '\x2459', '\x3', '\x2', '\x2', '\x2', 
		'\x247C', '\x245C', '\x3', '\x2', '\x2', '\x2', '\x247C', '\x2460', '\x3', 
		'\x2', '\x2', '\x2', '\x247C', '\x2466', '\x3', '\x2', '\x2', '\x2', '\x247C', 
		'\x246D', '\x3', '\x2', '\x2', '\x2', '\x247C', '\x2470', '\x3', '\x2', 
		'\x2', '\x2', '\x247C', '\x2474', '\x3', '\x2', '\x2', '\x2', '\x247C', 
		'\x2478', '\x3', '\x2', '\x2', '\x2', '\x247D', '\x459', '\x3', '\x2', 
		'\x2', '\x2', '\x247E', '\x2489', '\b', '\x22E', '\x1', '\x2', '\x247F', 
		'\x2480', '\f', '\x5', '\x2', '\x2', '\x2480', '\x2481', '\a', '\x6', 
		'\x2', '\x2', '\x2481', '\x2488', '\a', '\a', '\x2', '\x2', '\x2482', 
		'\x2483', '\f', '\x4', '\x2', '\x2', '\x2483', '\x2484', '\a', '\x6', 
		'\x2', '\x2', '\x2484', '\x2485', '\x5', '\x522', '\x292', '\x2', '\x2485', 
		'\x2486', '\a', '\a', '\x2', '\x2', '\x2486', '\x2488', '\x3', '\x2', 
		'\x2', '\x2', '\x2487', '\x247F', '\x3', '\x2', '\x2', '\x2', '\x2487', 
		'\x2482', '\x3', '\x2', '\x2', '\x2', '\x2488', '\x248B', '\x3', '\x2', 
		'\x2', '\x2', '\x2489', '\x2487', '\x3', '\x2', '\x2', '\x2', '\x2489', 
		'\x248A', '\x3', '\x2', '\x2', '\x2', '\x248A', '\x45B', '\x3', '\x2', 
		'\x2', '\x2', '\x248B', '\x2489', '\x3', '\x2', '\x2', '\x2', '\x248C', 
		'\x249A', '\x5', '\x460', '\x231', '\x2', '\x248D', '\x249A', '\x5', '\x464', 
		'\x233', '\x2', '\x248E', '\x249A', '\x5', '\x468', '\x235', '\x2', '\x248F', 
		'\x249A', '\x5', '\x470', '\x239', '\x2', '\x2490', '\x249A', '\x5', '\x478', 
		'\x23D', '\x2', '\x2491', '\x2492', '\x5', '\x47A', '\x23E', '\x2', '\x2492', 
		'\x2493', '\x5', '\x47E', '\x240', '\x2', '\x2493', '\x249A', '\x3', '\x2', 
		'\x2', '\x2', '\x2494', '\x2495', '\x5', '\x47A', '\x23E', '\x2', '\x2495', 
		'\x2496', '\a', '\x4', '\x2', '\x2', '\x2496', '\x2497', '\x5', '\x522', 
		'\x292', '\x2', '\x2497', '\x2498', '\a', '\x5', '\x2', '\x2', '\x2498', 
		'\x249A', '\x3', '\x2', '\x2', '\x2', '\x2499', '\x248C', '\x3', '\x2', 
		'\x2', '\x2', '\x2499', '\x248D', '\x3', '\x2', '\x2', '\x2', '\x2499', 
		'\x248E', '\x3', '\x2', '\x2', '\x2', '\x2499', '\x248F', '\x3', '\x2', 
		'\x2', '\x2', '\x2499', '\x2490', '\x3', '\x2', '\x2', '\x2', '\x2499', 
		'\x2491', '\x3', '\x2', '\x2', '\x2', '\x2499', '\x2494', '\x3', '\x2', 
		'\x2', '\x2', '\x249A', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x249B', 
		'\x24A0', '\x5', '\x464', '\x233', '\x2', '\x249C', '\x24A0', '\x5', '\x46A', 
		'\x236', '\x2', '\x249D', '\x24A0', '\x5', '\x472', '\x23A', '\x2', '\x249E', 
		'\x24A0', '\x5', '\x478', '\x23D', '\x2', '\x249F', '\x249B', '\x3', '\x2', 
		'\x2', '\x2', '\x249F', '\x249C', '\x3', '\x2', '\x2', '\x2', '\x249F', 
		'\x249D', '\x3', '\x2', '\x2', '\x2', '\x249F', '\x249E', '\x3', '\x2', 
		'\x2', '\x2', '\x24A0', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x24A1', 
		'\x24A2', '\x5', '\x534', '\x29B', '\x2', '\x24A2', '\x24A3', '\x5', '\x462', 
		'\x232', '\x2', '\x24A3', '\x24A9', '\x3', '\x2', '\x2', '\x2', '\x24A4', 
		'\x24A5', '\x5', '\x534', '\x29B', '\x2', '\x24A5', '\x24A6', '\x5', '\x210', 
		'\x109', '\x2', '\x24A6', '\x24A7', '\x5', '\x462', '\x232', '\x2', '\x24A7', 
		'\x24A9', '\x3', '\x2', '\x2', '\x2', '\x24A8', '\x24A1', '\x3', '\x2', 
		'\x2', '\x2', '\x24A8', '\x24A4', '\x3', '\x2', '\x2', '\x2', '\x24A9', 
		'\x461', '\x3', '\x2', '\x2', '\x2', '\x24AA', '\x24AB', '\a', '\x4', 
		'\x2', '\x2', '\x24AB', '\x24AC', '\x5', '\x4D4', '\x26B', '\x2', '\x24AC', 
		'\x24AD', '\a', '\x5', '\x2', '\x2', '\x24AD', '\x24B0', '\x3', '\x2', 
		'\x2', '\x2', '\x24AE', '\x24B0', '\x3', '\x2', '\x2', '\x2', '\x24AF', 
		'\x24AA', '\x3', '\x2', '\x2', '\x2', '\x24AF', '\x24AE', '\x3', '\x2', 
		'\x2', '\x2', '\x24B0', '\x463', '\x3', '\x2', '\x2', '\x2', '\x24B1', 
		'\x24C2', '\a', '\x18A', '\x2', '\x2', '\x24B2', '\x24C2', '\a', '\x18B', 
		'\x2', '\x2', '\x24B3', '\x24C2', '\a', '\x199', '\x2', '\x2', '\x24B4', 
		'\x24C2', '\a', '\x17D', '\x2', '\x2', '\x24B5', '\x24C2', '\a', '\x196', 
		'\x2', '\x2', '\x24B6', '\x24B7', '\a', '\x187', '\x2', '\x2', '\x24B7', 
		'\x24C2', '\x5', '\x466', '\x234', '\x2', '\x24B8', '\x24B9', '\a', '\xC0', 
		'\x2', '\x2', '\x24B9', '\x24C2', '\a', '\x195', '\x2', '\x2', '\x24BA', 
		'\x24BB', '\a', '\x184', '\x2', '\x2', '\x24BB', '\x24C2', '\x5', '\x462', 
		'\x232', '\x2', '\x24BC', '\x24BD', '\a', '\x183', '\x2', '\x2', '\x24BD', 
		'\x24C2', '\x5', '\x462', '\x232', '\x2', '\x24BE', '\x24BF', '\a', '\x192', 
		'\x2', '\x2', '\x24BF', '\x24C2', '\x5', '\x462', '\x232', '\x2', '\x24C0', 
		'\x24C2', '\a', '\x17F', '\x2', '\x2', '\x24C1', '\x24B1', '\x3', '\x2', 
		'\x2', '\x2', '\x24C1', '\x24B2', '\x3', '\x2', '\x2', '\x2', '\x24C1', 
		'\x24B3', '\x3', '\x2', '\x2', '\x2', '\x24C1', '\x24B4', '\x3', '\x2', 
		'\x2', '\x2', '\x24C1', '\x24B5', '\x3', '\x2', '\x2', '\x2', '\x24C1', 
		'\x24B6', '\x3', '\x2', '\x2', '\x2', '\x24C1', '\x24B8', '\x3', '\x2', 
		'\x2', '\x2', '\x24C1', '\x24BA', '\x3', '\x2', '\x2', '\x2', '\x24C1', 
		'\x24BC', '\x3', '\x2', '\x2', '\x2', '\x24C1', '\x24BE', '\x3', '\x2', 
		'\x2', '\x2', '\x24C1', '\x24C0', '\x3', '\x2', '\x2', '\x2', '\x24C2', 
		'\x465', '\x3', '\x2', '\x2', '\x2', '\x24C3', '\x24C4', '\a', '\x4', 
		'\x2', '\x2', '\x24C4', '\x24C5', '\x5', '\x522', '\x292', '\x2', '\x24C5', 
		'\x24C6', '\a', '\x5', '\x2', '\x2', '\x24C6', '\x24C9', '\x3', '\x2', 
		'\x2', '\x2', '\x24C7', '\x24C9', '\x3', '\x2', '\x2', '\x2', '\x24C8', 
		'\x24C3', '\x3', '\x2', '\x2', '\x2', '\x24C8', '\x24C7', '\x3', '\x2', 
		'\x2', '\x2', '\x24C9', '\x467', '\x3', '\x2', '\x2', '\x2', '\x24CA', 
		'\x24CD', '\x5', '\x46C', '\x237', '\x2', '\x24CB', '\x24CD', '\x5', '\x46E', 
		'\x238', '\x2', '\x24CC', '\x24CA', '\x3', '\x2', '\x2', '\x2', '\x24CC', 
		'\x24CB', '\x3', '\x2', '\x2', '\x2', '\x24CD', '\x469', '\x3', '\x2', 
		'\x2', '\x2', '\x24CE', '\x24D1', '\x5', '\x46C', '\x237', '\x2', '\x24CF', 
		'\x24D1', '\x5', '\x46E', '\x238', '\x2', '\x24D0', '\x24CE', '\x3', '\x2', 
		'\x2', '\x2', '\x24D0', '\x24CF', '\x3', '\x2', '\x2', '\x2', '\x24D1', 
		'\x46B', '\x3', '\x2', '\x2', '\x2', '\x24D2', '\x24D3', '\a', '\x17E', 
		'\x2', '\x2', '\x24D3', '\x24D4', '\x5', '\x476', '\x23C', '\x2', '\x24D4', 
		'\x24D5', '\a', '\x4', '\x2', '\x2', '\x24D5', '\x24D6', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x24D6', '\x24D7', '\a', '\x5', '\x2', '\x2', '\x24D7', 
		'\x46D', '\x3', '\x2', '\x2', '\x2', '\x24D8', '\x24D9', '\a', '\x17E', 
		'\x2', '\x2', '\x24D9', '\x24DA', '\x5', '\x476', '\x23C', '\x2', '\x24DA', 
		'\x46F', '\x3', '\x2', '\x2', '\x2', '\x24DB', '\x24E0', '\x5', '\x474', 
		'\x23B', '\x2', '\x24DC', '\x24DD', '\a', '\x4', '\x2', '\x2', '\x24DD', 
		'\x24DE', '\x5', '\x522', '\x292', '\x2', '\x24DE', '\x24DF', '\a', '\x5', 
		'\x2', '\x2', '\x24DF', '\x24E1', '\x3', '\x2', '\x2', '\x2', '\x24E0', 
		'\x24DC', '\x3', '\x2', '\x2', '\x2', '\x24E0', '\x24E1', '\x3', '\x2', 
		'\x2', '\x2', '\x24E1', '\x471', '\x3', '\x2', '\x2', '\x2', '\x24E2', 
		'\x24E7', '\x5', '\x474', '\x23B', '\x2', '\x24E3', '\x24E4', '\a', '\x4', 
		'\x2', '\x2', '\x24E4', '\x24E5', '\x5', '\x522', '\x292', '\x2', '\x24E5', 
		'\x24E6', '\a', '\x5', '\x2', '\x2', '\x24E6', '\x24E8', '\x3', '\x2', 
		'\x2', '\x2', '\x24E7', '\x24E3', '\x3', '\x2', '\x2', '\x2', '\x24E7', 
		'\x24E8', '\x3', '\x2', '\x2', '\x2', '\x24E8', '\x473', '\x3', '\x2', 
		'\x2', '\x2', '\x24E9', '\x24EA', '\a', '\x181', '\x2', '\x2', '\x24EA', 
		'\x24F7', '\x5', '\x476', '\x23C', '\x2', '\x24EB', '\x24EC', '\a', '\x180', 
		'\x2', '\x2', '\x24EC', '\x24F7', '\x5', '\x476', '\x23C', '\x2', '\x24ED', 
		'\x24F7', '\a', '\x1A0', '\x2', '\x2', '\x24EE', '\x24EF', '\a', '\x18E', 
		'\x2', '\x2', '\x24EF', '\x24F0', '\a', '\x181', '\x2', '\x2', '\x24F0', 
		'\x24F7', '\x5', '\x476', '\x23C', '\x2', '\x24F1', '\x24F2', '\a', '\x18E', 
		'\x2', '\x2', '\x24F2', '\x24F3', '\a', '\x180', '\x2', '\x2', '\x24F3', 
		'\x24F7', '\x5', '\x476', '\x23C', '\x2', '\x24F4', '\x24F5', '\a', '\x18F', 
		'\x2', '\x2', '\x24F5', '\x24F7', '\x5', '\x476', '\x23C', '\x2', '\x24F6', 
		'\x24E9', '\x3', '\x2', '\x2', '\x2', '\x24F6', '\x24EB', '\x3', '\x2', 
		'\x2', '\x2', '\x24F6', '\x24ED', '\x3', '\x2', '\x2', '\x2', '\x24F6', 
		'\x24EE', '\x3', '\x2', '\x2', '\x2', '\x24F6', '\x24F1', '\x3', '\x2', 
		'\x2', '\x2', '\x24F6', '\x24F4', '\x3', '\x2', '\x2', '\x2', '\x24F7', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x24F8', '\x24FB', '\a', '\x16F', 
		'\x2', '\x2', '\x24F9', '\x24FB', '\x3', '\x2', '\x2', '\x2', '\x24FA', 
		'\x24F8', '\x3', '\x2', '\x2', '\x2', '\x24FA', '\x24F9', '\x3', '\x2', 
		'\x2', '\x2', '\x24FB', '\x477', '\x3', '\x2', '\x2', '\x2', '\x24FC', 
		'\x24FD', '\a', '\x19C', '\x2', '\x2', '\x24FD', '\x24FE', '\a', '\x4', 
		'\x2', '\x2', '\x24FE', '\x24FF', '\x5', '\x522', '\x292', '\x2', '\x24FF', 
		'\x2500', '\a', '\x5', '\x2', '\x2', '\x2500', '\x2501', '\x5', '\x47C', 
		'\x23F', '\x2', '\x2501', '\x250D', '\x3', '\x2', '\x2', '\x2', '\x2502', 
		'\x2503', '\a', '\x19C', '\x2', '\x2', '\x2503', '\x250D', '\x5', '\x47C', 
		'\x23F', '\x2', '\x2504', '\x2505', '\a', '\x19B', '\x2', '\x2', '\x2505', 
		'\x2506', '\a', '\x4', '\x2', '\x2', '\x2506', '\x2507', '\x5', '\x522', 
		'\x292', '\x2', '\x2507', '\x2508', '\a', '\x5', '\x2', '\x2', '\x2508', 
		'\x2509', '\x5', '\x47C', '\x23F', '\x2', '\x2509', '\x250D', '\x3', '\x2', 
		'\x2', '\x2', '\x250A', '\x250B', '\a', '\x19B', '\x2', '\x2', '\x250B', 
		'\x250D', '\x5', '\x47C', '\x23F', '\x2', '\x250C', '\x24FC', '\x3', '\x2', 
		'\x2', '\x2', '\x250C', '\x2502', '\x3', '\x2', '\x2', '\x2', '\x250C', 
		'\x2504', '\x3', '\x2', '\x2', '\x2', '\x250C', '\x250A', '\x3', '\x2', 
		'\x2', '\x2', '\x250D', '\x479', '\x3', '\x2', '\x2', '\x2', '\x250E', 
		'\x250F', '\a', '\x18C', '\x2', '\x2', '\x250F', '\x47B', '\x3', '\x2', 
		'\x2', '\x2', '\x2510', '\x2511', '\a', 'k', '\x2', '\x2', '\x2511', '\x2512', 
		'\a', '\x19B', '\x2', '\x2', '\x2512', '\x2518', '\a', '\x17B', '\x2', 
		'\x2', '\x2513', '\x2514', '\a', '\x174', '\x2', '\x2', '\x2514', '\x2515', 
		'\a', '\x19B', '\x2', '\x2', '\x2515', '\x2518', '\a', '\x17B', '\x2', 
		'\x2', '\x2516', '\x2518', '\x3', '\x2', '\x2', '\x2', '\x2517', '\x2510', 
		'\x3', '\x2', '\x2', '\x2', '\x2517', '\x2513', '\x3', '\x2', '\x2', '\x2', 
		'\x2517', '\x2516', '\x3', '\x2', '\x2', '\x2', '\x2518', '\x47D', '\x3', 
		'\x2', '\x2', '\x2', '\x2519', '\x2536', '\a', '\x179', '\x2', '\x2', 
		'\x251A', '\x2536', '\a', '\x101', '\x2', '\x2', '\x251B', '\x2536', '\a', 
		'\xB2', '\x2', '\x2', '\x251C', '\x2536', '\a', '\xDC', '\x2', '\x2', 
		'\x251D', '\x2536', '\a', '\xFE', '\x2', '\x2', '\x251E', '\x2536', '\x5', 
		'\x480', '\x241', '\x2', '\x251F', '\x2520', '\a', '\x179', '\x2', '\x2', 
		'\x2520', '\x2521', '\a', '`', '\x2', '\x2', '\x2521', '\x2536', '\a', 
		'\x101', '\x2', '\x2', '\x2522', '\x2523', '\a', '\xB2', '\x2', '\x2', 
		'\x2523', '\x2524', '\a', '`', '\x2', '\x2', '\x2524', '\x2536', '\a', 
		'\xDC', '\x2', '\x2', '\x2525', '\x2526', '\a', '\xB2', '\x2', '\x2', 
		'\x2526', '\x2527', '\a', '`', '\x2', '\x2', '\x2527', '\x2536', '\a', 
		'\xFE', '\x2', '\x2', '\x2528', '\x2529', '\a', '\xB2', '\x2', '\x2', 
		'\x2529', '\x252A', '\a', '`', '\x2', '\x2', '\x252A', '\x2536', '\x5', 
		'\x480', '\x241', '\x2', '\x252B', '\x252C', '\a', '\xDC', '\x2', '\x2', 
		'\x252C', '\x252D', '\a', '`', '\x2', '\x2', '\x252D', '\x2536', '\a', 
		'\xFE', '\x2', '\x2', '\x252E', '\x252F', '\a', '\xDC', '\x2', '\x2', 
		'\x252F', '\x2530', '\a', '`', '\x2', '\x2', '\x2530', '\x2536', '\x5', 
		'\x480', '\x241', '\x2', '\x2531', '\x2532', '\a', '\xFE', '\x2', '\x2', 
		'\x2532', '\x2533', '\a', '`', '\x2', '\x2', '\x2533', '\x2536', '\x5', 
		'\x480', '\x241', '\x2', '\x2534', '\x2536', '\x3', '\x2', '\x2', '\x2', 
		'\x2535', '\x2519', '\x3', '\x2', '\x2', '\x2', '\x2535', '\x251A', '\x3', 
		'\x2', '\x2', '\x2', '\x2535', '\x251B', '\x3', '\x2', '\x2', '\x2', '\x2535', 
		'\x251C', '\x3', '\x2', '\x2', '\x2', '\x2535', '\x251D', '\x3', '\x2', 
		'\x2', '\x2', '\x2535', '\x251E', '\x3', '\x2', '\x2', '\x2', '\x2535', 
		'\x251F', '\x3', '\x2', '\x2', '\x2', '\x2535', '\x2522', '\x3', '\x2', 
		'\x2', '\x2', '\x2535', '\x2525', '\x3', '\x2', '\x2', '\x2', '\x2535', 
		'\x2528', '\x3', '\x2', '\x2', '\x2', '\x2535', '\x252B', '\x3', '\x2', 
		'\x2', '\x2', '\x2535', '\x252E', '\x3', '\x2', '\x2', '\x2', '\x2535', 
		'\x2531', '\x3', '\x2', '\x2', '\x2', '\x2535', '\x2534', '\x3', '\x2', 
		'\x2', '\x2', '\x2536', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x2537', 
		'\x253E', '\a', '\x13F', '\x2', '\x2', '\x2538', '\x2539', '\a', '\x13F', 
		'\x2', '\x2', '\x2539', '\x253A', '\a', '\x4', '\x2', '\x2', '\x253A', 
		'\x253B', '\x5', '\x522', '\x292', '\x2', '\x253B', '\x253C', '\a', '\x5', 
		'\x2', '\x2', '\x253C', '\x253E', '\x3', '\x2', '\x2', '\x2', '\x253D', 
		'\x2537', '\x3', '\x2', '\x2', '\x2', '\x253D', '\x2538', '\x3', '\x2', 
		'\x2', '\x2', '\x253E', '\x481', '\x3', '\x2', '\x2', '\x2', '\x253F', 
		'\x2540', '\a', '\xC7', '\x2', '\x2', '\x2540', '\x2543', '\x5', '\x484', 
		'\x243', '\x2', '\x2541', '\x2543', '\x3', '\x2', '\x2', '\x2', '\x2542', 
		'\x253F', '\x3', '\x2', '\x2', '\x2', '\x2542', '\x2541', '\x3', '\x2', 
		'\x2', '\x2', '\x2543', '\x483', '\x3', '\x2', '\x2', '\x2', '\x2544', 
		'\x2545', '\b', '\x243', '\x1', '\x2', '\x2545', '\x2558', '\x5', '\x48A', 
		'\x246', '\x2', '\x2546', '\x2547', '\t', '\x15', '\x2', '\x2', '\x2547', 
		'\x2558', '\x5', '\x484', '\x243', '\x35', '\x2548', '\x2549', '\x5', 
		'\x4CE', '\x268', '\x2', '\x2549', '\x254A', '\x5', '\x484', '\x243', 
		'\x30', '\x254A', '\x2558', '\x3', '\x2', '\x2', '\x2', '\x254B', '\x254C', 
		'\x5', '\x4C2', '\x262', '\x2', '\x254C', '\x254D', '\a', '\x7F', '\x2', 
		'\x2', '\x254D', '\x254E', '\x5', '\x4C2', '\x262', '\x2', '\x254E', '\x2558', 
		'\x3', '\x2', '\x2', '\x2', '\x254F', '\x2550', '\a', 'O', '\x2', '\x2', 
		'\x2550', '\x2558', '\x5', '\x484', '\x243', '\xF', '\x2551', '\x2552', 
		'\x5', '\x486', '\x244', '\x2', '\x2552', '\x2553', '\x5', '\x484', '\x243', 
		'\xE', '\x2553', '\x2558', '\x3', '\x2', '\x2', '\x2', '\x2554', '\x2555', 
		'\a', '\x64', '\x2', '\x2', '\x2555', '\x2558', '\x5', '\x3BC', '\x1DF', 
		'\x2', '\x2556', '\x2558', '\a', '\x37', '\x2', '\x2', '\x2557', '\x2544', 
		'\x3', '\x2', '\x2', '\x2', '\x2557', '\x2546', '\x3', '\x2', '\x2', '\x2', 
		'\x2557', '\x2548', '\x3', '\x2', '\x2', '\x2', '\x2557', '\x254B', '\x3', 
		'\x2', '\x2', '\x2', '\x2557', '\x254F', '\x3', '\x2', '\x2', '\x2', '\x2557', 
		'\x2551', '\x3', '\x2', '\x2', '\x2', '\x2557', '\x2554', '\x3', '\x2', 
		'\x2', '\x2', '\x2557', '\x2556', '\x3', '\x2', '\x2', '\x2', '\x2558', 
		'\x262C', '\x3', '\x2', '\x2', '\x2', '\x2559', '\x255A', '\f', '\x36', 
		'\x2', '\x2', '\x255A', '\x255B', '\a', '\x90', '\x2', '\x2', '\x255B', 
		'\x255C', '\a', '\x19B', '\x2', '\x2', '\x255C', '\x255D', '\a', '\x17B', 
		'\x2', '\x2', '\x255D', '\x262B', '\x5', '\x484', '\x243', '\x37', '\x255E', 
		'\x255F', '\f', '\x34', '\x2', '\x2', '\x255F', '\x2560', '\a', '\x11', 
		'\x2', '\x2', '\x2560', '\x262B', '\x5', '\x484', '\x243', '\x35', '\x2561', 
		'\x2562', '\f', '\x33', '\x2', '\x2', '\x2562', '\x2563', '\t', '\x16', 
		'\x2', '\x2', '\x2563', '\x262B', '\x5', '\x484', '\x243', '\x34', '\x2564', 
		'\x2565', '\f', '\x32', '\x2', '\x2', '\x2565', '\x2566', '\t', '\x15', 
		'\x2', '\x2', '\x2566', '\x262B', '\x5', '\x484', '\x243', '\x33', '\x2567', 
		'\x2568', '\f', '\x31', '\x2', '\x2', '\x2568', '\x2569', '\x5', '\x4CE', 
		'\x268', '\x2', '\x2569', '\x256A', '\x5', '\x484', '\x243', '\x32', '\x256A', 
		'\x262B', '\x3', '\x2', '\x2', '\x2', '\x256B', '\x256C', '\f', ')', '\x2', 
		'\x2', '\x256C', '\x256D', '\a', '\x17C', '\x2', '\x2', '\x256D', '\x256E', 
		'\x5', '\x504', '\x283', '\x2', '\x256E', '\x256F', '\x5', '\x488', '\x245', 
		'\x2', '\x256F', '\x2570', '\a', '#', '\x2', '\x2', '\x2570', '\x2571', 
		'\x5', '\x484', '\x243', '*', '\x2571', '\x262B', '\x3', '\x2', '\x2', 
		'\x2', '\x2572', '\x2573', '\f', '(', '\x2', '\x2', '\x2573', '\x2574', 
		'\x5', '\x486', '\x244', '\x2', '\x2574', '\x2575', '\a', '\x17C', '\x2', 
		'\x2', '\x2575', '\x2576', '\x5', '\x504', '\x283', '\x2', '\x2576', '\x2577', 
		'\x5', '\x488', '\x245', '\x2', '\x2577', '\x2578', '\a', '#', '\x2', 
		'\x2', '\x2578', '\x2579', '\x5', '\x484', '\x243', ')', '\x2579', '\x262B', 
		'\x3', '\x2', '\x2', '\x2', '\x257A', '\x257B', '\f', '\'', '\x2', '\x2', 
		'\x257B', '\x257C', '\a', '\x17C', '\x2', '\x2', '\x257C', '\x257D', '\a', 
		']', '\x2', '\x2', '\x257D', '\x257E', '\x5', '\x488', '\x245', '\x2', 
		'\x257E', '\x257F', '\a', '#', '\x2', '\x2', '\x257F', '\x2580', '\x5', 
		'\x484', '\x243', '(', '\x2580', '\x262B', '\x3', '\x2', '\x2', '\x2', 
		'\x2581', '\x2582', '\f', '&', '\x2', '\x2', '\x2582', '\x2583', '\x5', 
		'\x486', '\x244', '\x2', '\x2583', '\x2584', '\a', '\x17C', '\x2', '\x2', 
		'\x2584', '\x2585', '\a', ']', '\x2', '\x2', '\x2585', '\x2586', '\x5', 
		'\x488', '\x245', '\x2', '\x2586', '\x2587', '\a', '#', '\x2', '\x2', 
		'\x2587', '\x2588', '\x5', '\x484', '\x243', '\'', '\x2588', '\x262B', 
		'\x3', '\x2', '\x2', '\x2', '\x2589', '\x258A', '\f', '%', '\x2', '\x2', 
		'\x258A', '\x258B', '\t', '\x17', '\x2', '\x2', '\x258B', '\x262B', '\x5', 
		'\x484', '\x243', '&', '\x258C', '\x258D', '\f', '\x19', '\x2', '\x2', 
		'\x258D', '\x258E', '\a', 'v', '\x2', '\x2', '\x258E', '\x258F', '\a', 
		':', '\x2', '\x2', '\x258F', '\x2590', '\a', '\x42', '\x2', '\x2', '\x2590', 
		'\x262B', '\x5', '\x484', '\x243', '\x1A', '\x2591', '\x2592', '\f', '\x18', 
		'\x2', '\x2', '\x2592', '\x2593', '\a', 'v', '\x2', '\x2', '\x2593', '\x2594', 
		'\a', 'O', '\x2', '\x2', '\x2594', '\x2595', '\a', ':', '\x2', '\x2', 
		'\x2595', '\x2596', '\a', '\x42', '\x2', '\x2', '\x2596', '\x262B', '\x5', 
		'\x484', '\x243', '\x19', '\x2597', '\x2598', '\f', '\r', '\x2', '\x2', 
		'\x2598', '\x2599', '\a', '#', '\x2', '\x2', '\x2599', '\x262B', '\x5', 
		'\x484', '\x243', '\xE', '\x259A', '\x259B', '\f', '\f', '\x2', '\x2', 
		'\x259B', '\x259C', '\a', 'T', '\x2', '\x2', '\x259C', '\x262B', '\x5', 
		'\x484', '\x243', '\r', '\x259D', '\x259E', '\f', '\v', '\x2', '\x2', 
		'\x259E', '\x259F', '\a', '\x14', '\x2', '\x2', '\x259F', '\x262B', '\x5', 
		'\x484', '\x243', '\f', '\x25A0', '\x25A1', '\f', '\n', '\x2', '\x2', 
		'\x25A1', '\x25A2', '\a', '\x15', '\x2', '\x2', '\x25A2', '\x262B', '\x5', 
		'\x484', '\x243', '\v', '\x25A3', '\x25A4', '\f', '\x38', '\x2', '\x2', 
		'\x25A4', '\x25A5', '\a', '\x1C', '\x2', '\x2', '\x25A5', '\x262B', '\x5', 
		'\x458', '\x22D', '\x2', '\x25A6', '\x25A7', '\f', '\x37', '\x2', '\x2', 
		'\x25A7', '\x25A8', '\a', '-', '\x2', '\x2', '\x25A8', '\x262B', '\x5', 
		'\x20E', '\x108', '\x2', '\x25A9', '\x25AA', '\f', '/', '\x2', '\x2', 
		'\x25AA', '\x25AB', '\a', 'z', '\x2', '\x2', '\x25AB', '\x25AC', '\x5', 
		'\x484', '\x243', '\x2', '\x25AC', '\x25AD', '\x5', '\x482', '\x242', 
		'\x2', '\x25AD', '\x262B', '\x3', '\x2', '\x2', '\x2', '\x25AE', '\x25AF', 
		'\f', '.', '\x2', '\x2', '\x25AF', '\x25B0', '\x5', '\x486', '\x244', 
		'\x2', '\x25B0', '\x25B1', '\a', 'z', '\x2', '\x2', '\x25B1', '\x25B2', 
		'\x5', '\x484', '\x243', '\x2', '\x25B2', '\x25B3', '\x5', '\x482', '\x242', 
		'\x2', '\x25B3', '\x262B', '\x3', '\x2', '\x2', '\x2', '\x25B4', '\x25B5', 
		'\f', '-', '\x2', '\x2', '\x25B5', '\x25B6', '\a', 't', '\x2', '\x2', 
		'\x25B6', '\x25B7', '\x5', '\x484', '\x243', '\x2', '\x25B7', '\x25B8', 
		'\x5', '\x482', '\x242', '\x2', '\x25B8', '\x262B', '\x3', '\x2', '\x2', 
		'\x2', '\x25B9', '\x25BA', '\f', ',', '\x2', '\x2', '\x25BA', '\x25BB', 
		'\x5', '\x486', '\x244', '\x2', '\x25BB', '\x25BC', '\a', 't', '\x2', 
		'\x2', '\x25BC', '\x25BD', '\x5', '\x484', '\x243', '\x2', '\x25BD', '\x25BE', 
		'\x5', '\x482', '\x242', '\x2', '\x25BE', '\x262B', '\x3', '\x2', '\x2', 
		'\x2', '\x25BF', '\x25C0', '\f', '+', '\x2', '\x2', '\x25C0', '\x25C1', 
		'\a', '\x81', '\x2', '\x2', '\x25C1', '\x25C2', '\a', '`', '\x2', '\x2', 
		'\x25C2', '\x25C3', '\x5', '\x484', '\x243', '\x2', '\x25C3', '\x25C4', 
		'\x5', '\x482', '\x242', '\x2', '\x25C4', '\x262B', '\x3', '\x2', '\x2', 
		'\x2', '\x25C5', '\x25C6', '\f', '*', '\x2', '\x2', '\x25C6', '\x25C7', 
		'\x5', '\x486', '\x244', '\x2', '\x25C7', '\x25C8', '\a', '\x81', '\x2', 
		'\x2', '\x25C8', '\x25C9', '\a', '`', '\x2', '\x2', '\x25C9', '\x25CA', 
		'\x5', '\x484', '\x243', '\x2', '\x25CA', '\x25CB', '\x5', '\x482', '\x242', 
		'\x2', '\x25CB', '\x262B', '\x3', '\x2', '\x2', '\x2', '\x25CC', '\x25CD', 
		'\f', '$', '\x2', '\x2', '\x25CD', '\x25CE', '\a', 'v', '\x2', '\x2', 
		'\x25CE', '\x262B', '\a', 'P', '\x2', '\x2', '\x25CF', '\x25D0', '\f', 
		'#', '\x2', '\x2', '\x25D0', '\x262B', '\a', 'w', '\x2', '\x2', '\x25D1', 
		'\x25D2', '\f', '\"', '\x2', '\x2', '\x25D2', '\x25D3', '\a', 'v', '\x2', 
		'\x2', '\x25D3', '\x25D4', '\a', 'O', '\x2', '\x2', '\x25D4', '\x262B', 
		'\a', 'P', '\x2', '\x2', '\x25D5', '\x25D6', '\f', '!', '\x2', '\x2', 
		'\x25D6', '\x262B', '\a', '|', '\x2', '\x2', '\x25D7', '\x25D8', '\f', 
		'\x1F', '\x2', '\x2', '\x25D8', '\x25D9', '\a', 'v', '\x2', '\x2', '\x25D9', 
		'\x262B', '\a', '\x62', '\x2', '\x2', '\x25DA', '\x25DB', '\f', '\x1E', 
		'\x2', '\x2', '\x25DB', '\x25DC', '\a', 'v', '\x2', '\x2', '\x25DC', '\x25DD', 
		'\a', 'O', '\x2', '\x2', '\x25DD', '\x262B', '\a', '\x62', '\x2', '\x2', 
		'\x25DE', '\x25DF', '\f', '\x1D', '\x2', '\x2', '\x25DF', '\x25E0', '\a', 
		'v', '\x2', '\x2', '\x25E0', '\x262B', '\a', '>', '\x2', '\x2', '\x25E1', 
		'\x25E2', '\f', '\x1C', '\x2', '\x2', '\x25E2', '\x25E3', '\a', 'v', '\x2', 
		'\x2', '\x25E3', '\x25E4', '\a', 'O', '\x2', '\x2', '\x25E4', '\x262B', 
		'\a', '>', '\x2', '\x2', '\x25E5', '\x25E6', '\f', '\x1B', '\x2', '\x2', 
		'\x25E6', '\x25E7', '\a', 'v', '\x2', '\x2', '\x25E7', '\x262B', '\a', 
		'\x166', '\x2', '\x2', '\x25E8', '\x25E9', '\f', '\x1A', '\x2', '\x2', 
		'\x25E9', '\x25EA', '\a', 'v', '\x2', '\x2', '\x25EA', '\x25EB', '\a', 
		'O', '\x2', '\x2', '\x25EB', '\x262B', '\a', '\x166', '\x2', '\x2', '\x25EC', 
		'\x25ED', '\f', '\x17', '\x2', '\x2', '\x25ED', '\x25EE', '\a', 'v', '\x2', 
		'\x2', '\x25EE', '\x25EF', '\a', '\x10C', '\x2', '\x2', '\x25EF', '\x25F0', 
		'\a', '\x4', '\x2', '\x2', '\x25F0', '\x25F1', '\x5', '\x4DA', '\x26E', 
		'\x2', '\x25F1', '\x25F2', '\a', '\x5', '\x2', '\x2', '\x25F2', '\x262B', 
		'\x3', '\x2', '\x2', '\x2', '\x25F3', '\x25F4', '\f', '\x16', '\x2', '\x2', 
		'\x25F4', '\x25F5', '\a', 'v', '\x2', '\x2', '\x25F5', '\x25F6', '\a', 
		'O', '\x2', '\x2', '\x25F6', '\x25F7', '\a', '\x10C', '\x2', '\x2', '\x25F7', 
		'\x25F8', '\a', '\x4', '\x2', '\x2', '\x25F8', '\x25F9', '\x5', '\x4DA', 
		'\x26E', '\x2', '\x25F9', '\x25FA', '\a', '\x5', '\x2', '\x2', '\x25FA', 
		'\x262B', '\x3', '\x2', '\x2', '\x2', '\x25FB', '\x25FC', '\f', '\x15', 
		'\x2', '\x2', '\x25FC', '\x25FD', '\a', 'v', '\x2', '\x2', '\x25FD', '\x262B', 
		'\a', '\xBE', '\x2', '\x2', '\x25FE', '\x25FF', '\f', '\x14', '\x2', '\x2', 
		'\x25FF', '\x2600', '\a', 'v', '\x2', '\x2', '\x2600', '\x2601', '\a', 
		'O', '\x2', '\x2', '\x2601', '\x262B', '\a', '\xBE', '\x2', '\x2', '\x2602', 
		'\x2603', '\f', '\x13', '\x2', '\x2', '\x2603', '\x2604', '\a', 'v', '\x2', 
		'\x2', '\x2604', '\x262B', '\a', '\x1D8', '\x2', '\x2', '\x2605', '\x2606', 
		'\f', '\x12', '\x2', '\x2', '\x2606', '\x2607', '\a', 'v', '\x2', '\x2', 
		'\x2607', '\x2608', '\x5', '\x4E4', '\x273', '\x2', '\x2608', '\x2609', 
		'\a', '\x1D8', '\x2', '\x2', '\x2609', '\x262B', '\x3', '\x2', '\x2', 
		'\x2', '\x260A', '\x260B', '\f', '\x11', '\x2', '\x2', '\x260B', '\x260C', 
		'\a', 'v', '\x2', '\x2', '\x260C', '\x260D', '\a', 'O', '\x2', '\x2', 
		'\x260D', '\x262B', '\a', '\x1D8', '\x2', '\x2', '\x260E', '\x260F', '\f', 
		'\x10', '\x2', '\x2', '\x260F', '\x2610', '\a', 'v', '\x2', '\x2', '\x2610', 
		'\x2611', '\a', 'O', '\x2', '\x2', '\x2611', '\x2612', '\x5', '\x4E4', 
		'\x273', '\x2', '\x2612', '\x2613', '\a', '\x1D8', '\x2', '\x2', '\x2613', 
		'\x262B', '\x3', '\x2', '\x2', '\x2', '\x2614', '\x2615', '\f', '\t', 
		'\x2', '\x2', '\x2615', '\x262B', '\x5', '\x4CE', '\x268', '\x2', '\x2616', 
		'\x2617', '\f', '\b', '\x2', '\x2', '\x2617', '\x2618', '\a', '\x46', 
		'\x2', '\x2', '\x2618', '\x262B', '\x5', '\x4EE', '\x278', '\x2', '\x2619', 
		'\x261A', '\f', '\a', '\x2', '\x2', '\x261A', '\x261B', '\x5', '\x486', 
		'\x244', '\x2', '\x261B', '\x261C', '\a', '\x46', '\x2', '\x2', '\x261C', 
		'\x261D', '\x5', '\x4EE', '\x278', '\x2', '\x261D', '\x262B', '\x3', '\x2', 
		'\x2', '\x2', '\x261E', '\x261F', '\f', '\x6', '\x2', '\x2', '\x261F', 
		'\x2620', '\x5', '\x4D2', '\x26A', '\x2', '\x2620', '\x2621', '\x5', '\x4C8', 
		'\x265', '\x2', '\x2621', '\x2622', '\x5', '\x3BC', '\x1DF', '\x2', '\x2622', 
		'\x262B', '\x3', '\x2', '\x2', '\x2', '\x2623', '\x2624', '\f', '\x5', 
		'\x2', '\x2', '\x2624', '\x2625', '\x5', '\x4D2', '\x26A', '\x2', '\x2625', 
		'\x2626', '\x5', '\x4C8', '\x265', '\x2', '\x2626', '\x2627', '\a', '\x4', 
		'\x2', '\x2', '\x2627', '\x2628', '\x5', '\x484', '\x243', '\x2', '\x2628', 
		'\x2629', '\a', '\x5', '\x2', '\x2', '\x2629', '\x262B', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2559', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x255E', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x2561', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2564', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x2567', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x256B', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2572', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x257A', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x2581', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2589', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x258C', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x2591', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2597', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x259A', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x259D', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25A0', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25A3', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25A6', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25A9', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25AE', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25B4', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25B9', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25BF', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25C5', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25CC', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25CF', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25D1', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25D5', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25D7', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25DA', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25DE', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25E1', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25E5', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25E8', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25EC', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x25F3', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x25FB', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x25FE', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x2602', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2605', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x260A', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x260E', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x2614', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x2616', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x2619', '\x3', '\x2', 
		'\x2', '\x2', '\x262A', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x262A', 
		'\x2623', '\x3', '\x2', '\x2', '\x2', '\x262B', '\x262E', '\x3', '\x2', 
		'\x2', '\x2', '\x262C', '\x262A', '\x3', '\x2', '\x2', '\x2', '\x262C', 
		'\x262D', '\x3', '\x2', '\x2', '\x2', '\x262D', '\x485', '\x3', '\x2', 
		'\x2', '\x2', '\x262E', '\x262C', '\x3', '\x2', '\x2', '\x2', '\x262F', 
		'\x2630', '\a', 'O', '\x2', '\x2', '\x2630', '\x487', '\x3', '\x2', '\x2', 
		'\x2', '\x2631', '\x2632', '\b', '\x245', '\x1', '\x2', '\x2632', '\x2639', 
		'\x5', '\x48A', '\x246', '\x2', '\x2633', '\x2634', '\t', '\x15', '\x2', 
		'\x2', '\x2634', '\x2639', '\x5', '\x488', '\x245', '\x10', '\x2635', 
		'\x2636', '\x5', '\x4CE', '\x268', '\x2', '\x2636', '\x2637', '\x5', '\x488', 
		'\x245', '\n', '\x2637', '\x2639', '\x3', '\x2', '\x2', '\x2', '\x2638', 
		'\x2631', '\x3', '\x2', '\x2', '\x2', '\x2638', '\x2633', '\x3', '\x2', 
		'\x2', '\x2', '\x2638', '\x2635', '\x3', '\x2', '\x2', '\x2', '\x2639', 
		'\x2672', '\x3', '\x2', '\x2', '\x2', '\x263A', '\x263B', '\f', '\xF', 
		'\x2', '\x2', '\x263B', '\x263C', '\a', '\x11', '\x2', '\x2', '\x263C', 
		'\x2671', '\x5', '\x488', '\x245', '\x10', '\x263D', '\x263E', '\f', '\xE', 
		'\x2', '\x2', '\x263E', '\x263F', '\t', '\x16', '\x2', '\x2', '\x263F', 
		'\x2671', '\x5', '\x488', '\x245', '\xF', '\x2640', '\x2641', '\f', '\r', 
		'\x2', '\x2', '\x2641', '\x2642', '\t', '\x15', '\x2', '\x2', '\x2642', 
		'\x2671', '\x5', '\x488', '\x245', '\xE', '\x2643', '\x2644', '\f', '\f', 
		'\x2', '\x2', '\x2644', '\x2645', '\x5', '\x4CE', '\x268', '\x2', '\x2645', 
		'\x2646', '\x5', '\x488', '\x245', '\r', '\x2646', '\x2671', '\x3', '\x2', 
		'\x2', '\x2', '\x2647', '\x2648', '\f', '\v', '\x2', '\x2', '\x2648', 
		'\x2649', '\t', '\x17', '\x2', '\x2', '\x2649', '\x2671', '\x5', '\x488', 
		'\x245', '\f', '\x264A', '\x264B', '\f', '\b', '\x2', '\x2', '\x264B', 
		'\x264C', '\a', 'v', '\x2', '\x2', '\x264C', '\x264D', '\a', ':', '\x2', 
		'\x2', '\x264D', '\x264E', '\a', '\x42', '\x2', '\x2', '\x264E', '\x2671', 
		'\x5', '\x488', '\x245', '\t', '\x264F', '\x2650', '\f', '\a', '\x2', 
		'\x2', '\x2650', '\x2651', '\a', 'v', '\x2', '\x2', '\x2651', '\x2652', 
		'\a', 'O', '\x2', '\x2', '\x2652', '\x2653', '\a', ':', '\x2', '\x2', 
		'\x2653', '\x2654', '\a', '\x42', '\x2', '\x2', '\x2654', '\x2671', '\x5', 
		'\x488', '\x245', '\b', '\x2655', '\x2656', '\f', '\x11', '\x2', '\x2', 
		'\x2656', '\x2657', '\a', '\x1C', '\x2', '\x2', '\x2657', '\x2671', '\x5', 
		'\x458', '\x22D', '\x2', '\x2658', '\x2659', '\f', '\t', '\x2', '\x2', 
		'\x2659', '\x2671', '\x5', '\x4CE', '\x268', '\x2', '\x265A', '\x265B', 
		'\f', '\x6', '\x2', '\x2', '\x265B', '\x265C', '\a', 'v', '\x2', '\x2', 
		'\x265C', '\x265D', '\a', '\x10C', '\x2', '\x2', '\x265D', '\x265E', '\a', 
		'\x4', '\x2', '\x2', '\x265E', '\x265F', '\x5', '\x4DA', '\x26E', '\x2', 
		'\x265F', '\x2660', '\a', '\x5', '\x2', '\x2', '\x2660', '\x2671', '\x3', 
		'\x2', '\x2', '\x2', '\x2661', '\x2662', '\f', '\x5', '\x2', '\x2', '\x2662', 
		'\x2663', '\a', 'v', '\x2', '\x2', '\x2663', '\x2664', '\a', 'O', '\x2', 
		'\x2', '\x2664', '\x2665', '\a', '\x10C', '\x2', '\x2', '\x2665', '\x2666', 
		'\a', '\x4', '\x2', '\x2', '\x2666', '\x2667', '\x5', '\x4DA', '\x26E', 
		'\x2', '\x2667', '\x2668', '\a', '\x5', '\x2', '\x2', '\x2668', '\x2671', 
		'\x3', '\x2', '\x2', '\x2', '\x2669', '\x266A', '\f', '\x4', '\x2', '\x2', 
		'\x266A', '\x266B', '\a', 'v', '\x2', '\x2', '\x266B', '\x2671', '\a', 
		'\xBE', '\x2', '\x2', '\x266C', '\x266D', '\f', '\x3', '\x2', '\x2', '\x266D', 
		'\x266E', '\a', 'v', '\x2', '\x2', '\x266E', '\x266F', '\a', 'O', '\x2', 
		'\x2', '\x266F', '\x2671', '\a', '\xBE', '\x2', '\x2', '\x2670', '\x263A', 
		'\x3', '\x2', '\x2', '\x2', '\x2670', '\x263D', '\x3', '\x2', '\x2', '\x2', 
		'\x2670', '\x2640', '\x3', '\x2', '\x2', '\x2', '\x2670', '\x2643', '\x3', 
		'\x2', '\x2', '\x2', '\x2670', '\x2647', '\x3', '\x2', '\x2', '\x2', '\x2670', 
		'\x264A', '\x3', '\x2', '\x2', '\x2', '\x2670', '\x264F', '\x3', '\x2', 
		'\x2', '\x2', '\x2670', '\x2655', '\x3', '\x2', '\x2', '\x2', '\x2670', 
		'\x2658', '\x3', '\x2', '\x2', '\x2', '\x2670', '\x265A', '\x3', '\x2', 
		'\x2', '\x2', '\x2670', '\x2661', '\x3', '\x2', '\x2', '\x2', '\x2670', 
		'\x2669', '\x3', '\x2', '\x2', '\x2', '\x2670', '\x266C', '\x3', '\x2', 
		'\x2', '\x2', '\x2671', '\x2674', '\x3', '\x2', '\x2', '\x2', '\x2672', 
		'\x2670', '\x3', '\x2', '\x2', '\x2', '\x2672', '\x2673', '\x3', '\x2', 
		'\x2', '\x2', '\x2673', '\x489', '\x3', '\x2', '\x2', '\x2', '\x2674', 
		'\x2672', '\x3', '\x2', '\x2', '\x2', '\x2675', '\x2693', '\x5', '\x4FA', 
		'\x27E', '\x2', '\x2676', '\x2693', '\x5', '\x51A', '\x28E', '\x2', '\x2677', 
		'\x2693', '\x5', '\x48C', '\x247', '\x2', '\x2678', '\x2679', '\a', '\x1E', 
		'\x2', '\x2', '\x2679', '\x2693', '\x5', '\x502', '\x282', '\x2', '\x267A', 
		'\x267B', '\a', '\x4', '\x2', '\x2', '\x267B', '\x267C', '\x5', '\x484', 
		'\x243', '\x2', '\x267C', '\x267D', '\a', '\x5', '\x2', '\x2', '\x267D', 
		'\x267E', '\x5', '\x502', '\x282', '\x2', '\x267E', '\x2693', '\x3', '\x2', 
		'\x2', '\x2', '\x267F', '\x2693', '\x5', '\x4F0', '\x279', '\x2', '\x2680', 
		'\x2693', '\x5', '\x490', '\x249', '\x2', '\x2681', '\x2683', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x2682', '\x2684', '\x5', '\x500', '\x281', '\x2', '\x2683', 
		'\x2682', '\x3', '\x2', '\x2', '\x2', '\x2683', '\x2684', '\x3', '\x2', 
		'\x2', '\x2', '\x2684', '\x2693', '\x3', '\x2', '\x2', '\x2', '\x2685', 
		'\x2686', '\a', '\x185', '\x2', '\x2', '\x2686', '\x2693', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x2687', '\x2688', '\a', '%', '\x2', '\x2', '\x2688', 
		'\x2693', '\x5', '\x3BC', '\x1DF', '\x2', '\x2689', '\x268A', '\a', '%', 
		'\x2', '\x2', '\x268A', '\x2693', '\x5', '\x4DC', '\x26F', '\x2', '\x268B', 
		'\x2693', '\x5', '\x4C4', '\x263', '\x2', '\x268C', '\x2693', '\x5', '\x4C6', 
		'\x264', '\x2', '\x268D', '\x268E', '\a', '\x1D0', '\x2', '\x2', '\x268E', 
		'\x268F', '\a', '\x4', '\x2', '\x2', '\x268F', '\x2690', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2690', '\x2691', '\a', '\x5', '\x2', '\x2', '\x2691', 
		'\x2693', '\x3', '\x2', '\x2', '\x2', '\x2692', '\x2675', '\x3', '\x2', 
		'\x2', '\x2', '\x2692', '\x2676', '\x3', '\x2', '\x2', '\x2', '\x2692', 
		'\x2677', '\x3', '\x2', '\x2', '\x2', '\x2692', '\x2678', '\x3', '\x2', 
		'\x2', '\x2', '\x2692', '\x267A', '\x3', '\x2', '\x2', '\x2', '\x2692', 
		'\x267F', '\x3', '\x2', '\x2', '\x2', '\x2692', '\x2680', '\x3', '\x2', 
		'\x2', '\x2', '\x2692', '\x2681', '\x3', '\x2', '\x2', '\x2', '\x2692', 
		'\x2685', '\x3', '\x2', '\x2', '\x2', '\x2692', '\x2687', '\x3', '\x2', 
		'\x2', '\x2', '\x2692', '\x2689', '\x3', '\x2', '\x2', '\x2', '\x2692', 
		'\x268B', '\x3', '\x2', '\x2', '\x2', '\x2692', '\x268C', '\x3', '\x2', 
		'\x2', '\x2', '\x2692', '\x268D', '\x3', '\x2', '\x2', '\x2', '\x2693', 
		'\x48B', '\x3', '\x2', '\x2', '\x2', '\x2694', '\x2695', '\a', '\x21C', 
		'\x2', '\x2', '\x2695', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x2696', 
		'\x2697', '\x5', '\x518', '\x28D', '\x2', '\x2697', '\x26AA', '\a', '\x4', 
		'\x2', '\x2', '\x2698', '\x269C', '\x5', '\x4D6', '\x26C', '\x2', '\x2699', 
		'\x269A', '\a', '\b', '\x2', '\x2', '\x269A', '\x269B', '\a', 'g', '\x2', 
		'\x2', '\x269B', '\x269D', '\x5', '\x4D8', '\x26D', '\x2', '\x269C', '\x2699', 
		'\x3', '\x2', '\x2', '\x2', '\x269C', '\x269D', '\x3', '\x2', '\x2', '\x2', 
		'\x269D', '\x269E', '\x3', '\x2', '\x2', '\x2', '\x269E', '\x269F', '\x5', 
		'\x3E0', '\x1F1', '\x2', '\x269F', '\x26AB', '\x3', '\x2', '\x2', '\x2', 
		'\x26A0', '\x26A1', '\a', 'g', '\x2', '\x2', '\x26A1', '\x26A2', '\x5', 
		'\x4D8', '\x26D', '\x2', '\x26A2', '\x26A3', '\x5', '\x3E0', '\x1F1', 
		'\x2', '\x26A3', '\x26AB', '\x3', '\x2', '\x2', '\x2', '\x26A4', '\x26A5', 
		'\t', '\x18', '\x2', '\x2', '\x26A5', '\x26A6', '\x5', '\x4D6', '\x26C', 
		'\x2', '\x26A6', '\x26A7', '\x5', '\x3E0', '\x1F1', '\x2', '\x26A7', '\x26AB', 
		'\x3', '\x2', '\x2', '\x2', '\x26A8', '\x26AB', '\a', '\v', '\x2', '\x2', 
		'\x26A9', '\x26AB', '\x3', '\x2', '\x2', '\x2', '\x26AA', '\x2698', '\x3', 
		'\x2', '\x2', '\x2', '\x26AA', '\x26A0', '\x3', '\x2', '\x2', '\x2', '\x26AA', 
		'\x26A4', '\x3', '\x2', '\x2', '\x2', '\x26AA', '\x26A8', '\x3', '\x2', 
		'\x2', '\x2', '\x26AA', '\x26A9', '\x3', '\x2', '\x2', '\x2', '\x26AB', 
		'\x26AC', '\x3', '\x2', '\x2', '\x2', '\x26AC', '\x26AD', '\a', '\x5', 
		'\x2', '\x2', '\x26AD', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x26AE', 
		'\x26AF', '\x5', '\x48E', '\x248', '\x2', '\x26AF', '\x26B0', '\x5', '\x4A8', 
		'\x255', '\x2', '\x26B0', '\x26B1', '\x5', '\x4AA', '\x256', '\x2', '\x26B1', 
		'\x26B2', '\x5', '\x4B2', '\x25A', '\x2', '\x26B2', '\x26B5', '\x3', '\x2', 
		'\x2', '\x2', '\x26B3', '\x26B5', '\x5', '\x494', '\x24B', '\x2', '\x26B4', 
		'\x26AE', '\x3', '\x2', '\x2', '\x2', '\x26B4', '\x26B3', '\x3', '\x2', 
		'\x2', '\x2', '\x26B5', '\x491', '\x3', '\x2', '\x2', '\x2', '\x26B6', 
		'\x26B9', '\x5', '\x48E', '\x248', '\x2', '\x26B7', '\x26B9', '\x5', '\x494', 
		'\x24B', '\x2', '\x26B8', '\x26B6', '\x3', '\x2', '\x2', '\x2', '\x26B8', 
		'\x26B7', '\x3', '\x2', '\x2', '\x2', '\x26B9', '\x493', '\x3', '\x2', 
		'\x2', '\x2', '\x26BA', '\x26BB', '\a', 'n', '\x2', '\x2', '\x26BB', '\x26BC', 
		'\a', '@', '\x2', '\x2', '\x26BC', '\x26BD', '\a', '\x4', '\x2', '\x2', 
		'\x26BD', '\x26BE', '\x5', '\x484', '\x243', '\x2', '\x26BE', '\x26BF', 
		'\a', '\x5', '\x2', '\x2', '\x26BF', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x26C0', '\x2791', '\a', '\x32', '\x2', '\x2', '\x26C1', '\x2791', '\a', 
		'\x34', '\x2', '\x2', '\x26C2', '\x26C3', '\a', '\x34', '\x2', '\x2', 
		'\x26C3', '\x26C4', '\a', '\x4', '\x2', '\x2', '\x26C4', '\x26C5', '\x5', 
		'\x522', '\x292', '\x2', '\x26C5', '\x26C6', '\a', '\x5', '\x2', '\x2', 
		'\x26C6', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x26C7', '\x2791', '\a', 
		'\x35', '\x2', '\x2', '\x26C8', '\x26C9', '\a', '\x35', '\x2', '\x2', 
		'\x26C9', '\x26CA', '\a', '\x4', '\x2', '\x2', '\x26CA', '\x26CB', '\x5', 
		'\x522', '\x292', '\x2', '\x26CB', '\x26CC', '\a', '\x5', '\x2', '\x2', 
		'\x26CC', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x26CD', '\x2791', '\a', 
		'M', '\x2', '\x2', '\x26CE', '\x26CF', '\a', 'M', '\x2', '\x2', '\x26CF', 
		'\x26D0', '\a', '\x4', '\x2', '\x2', '\x26D0', '\x26D1', '\x5', '\x522', 
		'\x292', '\x2', '\x26D1', '\x26D2', '\a', '\x5', '\x2', '\x2', '\x26D2', 
		'\x2791', '\x3', '\x2', '\x2', '\x2', '\x26D3', '\x2791', '\a', 'N', '\x2', 
		'\x2', '\x26D4', '\x26D5', '\a', 'N', '\x2', '\x2', '\x26D5', '\x26D6', 
		'\a', '\x4', '\x2', '\x2', '\x26D6', '\x26D7', '\x5', '\x522', '\x292', 
		'\x2', '\x26D7', '\x26D8', '\a', '\x5', '\x2', '\x2', '\x26D8', '\x2791', 
		'\x3', '\x2', '\x2', '\x2', '\x26D9', '\x2791', '\a', '\x33', '\x2', '\x2', 
		'\x26DA', '\x2791', '\a', '\x36', '\x2', '\x2', '\x26DB', '\x2791', '\a', 
		'[', '\x2', '\x2', '\x26DC', '\x2791', '\a', '\x65', '\x2', '\x2', '\x26DD', 
		'\x2791', '\a', '\x31', '\x2', '\x2', '\x26DE', '\x2791', '\a', 'q', '\x2', 
		'\x2', '\x26DF', '\x26E0', '\a', '+', '\x2', '\x2', '\x26E0', '\x26E1', 
		'\a', '\x4', '\x2', '\x2', '\x26E1', '\x26E2', '\x5', '\x484', '\x243', 
		'\x2', '\x26E2', '\x26E3', '\a', '&', '\x2', '\x2', '\x26E3', '\x26E4', 
		'\x5', '\x458', '\x22D', '\x2', '\x26E4', '\x26E5', '\a', '\x5', '\x2', 
		'\x2', '\x26E5', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x26E6', '\x26E7', 
		'\a', '\x186', '\x2', '\x2', '\x26E7', '\x26E8', '\a', '\x4', '\x2', '\x2', 
		'\x26E8', '\x26E9', '\x5', '\x4E0', '\x271', '\x2', '\x26E9', '\x26EA', 
		'\a', '\x5', '\x2', '\x2', '\x26EA', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x26EB', '\x26EC', '\a', '\x1E3', '\x2', '\x2', '\x26EC', '\x26ED', '\a', 
		'\x4', '\x2', '\x2', '\x26ED', '\x26EE', '\x5', '\x484', '\x243', '\x2', 
		'\x26EE', '\x26EF', '\a', '\x5', '\x2', '\x2', '\x26EF', '\x2791', '\x3', 
		'\x2', '\x2', '\x2', '\x26F0', '\x26F1', '\a', '\x1E3', '\x2', '\x2', 
		'\x26F1', '\x26F2', '\a', '\x4', '\x2', '\x2', '\x26F2', '\x26F3', '\x5', 
		'\x484', '\x243', '\x2', '\x26F3', '\x26F4', '\a', '\b', '\x2', '\x2', 
		'\x26F4', '\x26F5', '\x5', '\x4E4', '\x273', '\x2', '\x26F5', '\x26F6', 
		'\a', '\x5', '\x2', '\x2', '\x26F6', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x26F7', '\x26F8', '\a', '\x193', '\x2', '\x2', '\x26F8', '\x26F9', '\a', 
		'\x4', '\x2', '\x2', '\x26F9', '\x26FA', '\x5', '\x4E6', '\x274', '\x2', 
		'\x26FA', '\x26FB', '\a', '\x5', '\x2', '\x2', '\x26FB', '\x2791', '\x3', 
		'\x2', '\x2', '\x2', '\x26FC', '\x26FD', '\a', '\x194', '\x2', '\x2', 
		'\x26FD', '\x26FE', '\a', '\x4', '\x2', '\x2', '\x26FE', '\x26FF', '\x5', 
		'\x4E8', '\x275', '\x2', '\x26FF', '\x2700', '\a', '\x5', '\x2', '\x2', 
		'\x2700', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x2701', '\x2702', '\a', 
		'\x19A', '\x2', '\x2', '\x2702', '\x2703', '\a', '\x4', '\x2', '\x2', 
		'\x2703', '\x2704', '\x5', '\x4EA', '\x276', '\x2', '\x2704', '\x2705', 
		'\a', '\x5', '\x2', '\x2', '\x2705', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x2706', '\x2707', '\a', '\x19D', '\x2', '\x2', '\x2707', '\x2708', '\a', 
		'\x4', '\x2', '\x2', '\x2708', '\x2709', '\x5', '\x484', '\x243', '\x2', 
		'\x2709', '\x270A', '\a', '&', '\x2', '\x2', '\x270A', '\x270B', '\x5', 
		'\x458', '\x22D', '\x2', '\x270B', '\x270C', '\a', '\x5', '\x2', '\x2', 
		'\x270C', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x270D', '\x270E', '\a', 
		'\x19E', '\x2', '\x2', '\x270E', '\x270F', '\a', '\x4', '\x2', '\x2', 
		'\x270F', '\x2710', '\a', ')', '\x2', '\x2', '\x2710', '\x2711', '\x5', 
		'\x4EC', '\x277', '\x2', '\x2711', '\x2712', '\a', '\x5', '\x2', '\x2', 
		'\x2712', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x2713', '\x2714', '\a', 
		'\x19E', '\x2', '\x2', '\x2714', '\x2715', '\a', '\x4', '\x2', '\x2', 
		'\x2715', '\x2716', '\a', 'K', '\x2', '\x2', '\x2716', '\x2717', '\x5', 
		'\x4EC', '\x277', '\x2', '\x2717', '\x2718', '\a', '\x5', '\x2', '\x2', 
		'\x2718', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x2719', '\x271A', '\a', 
		'\x19E', '\x2', '\x2', '\x271A', '\x271B', '\a', '\x4', '\x2', '\x2', 
		'\x271B', '\x271C', '\a', '\x61', '\x2', '\x2', '\x271C', '\x271D', '\x5', 
		'\x4EC', '\x277', '\x2', '\x271D', '\x271E', '\a', '\x5', '\x2', '\x2', 
		'\x271E', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x271F', '\x2720', '\a', 
		'\x19E', '\x2', '\x2', '\x2720', '\x2721', '\a', '\x4', '\x2', '\x2', 
		'\x2721', '\x2722', '\x5', '\x4EC', '\x277', '\x2', '\x2722', '\x2723', 
		'\a', '\x5', '\x2', '\x2', '\x2723', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x2724', '\x2725', '\a', '\x191', '\x2', '\x2', '\x2725', '\x2726', '\a', 
		'\x4', '\x2', '\x2', '\x2726', '\x2727', '\x5', '\x484', '\x243', '\x2', 
		'\x2727', '\x2728', '\a', '\b', '\x2', '\x2', '\x2728', '\x2729', '\x5', 
		'\x484', '\x243', '\x2', '\x2729', '\x272A', '\a', '\x5', '\x2', '\x2', 
		'\x272A', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x272B', '\x272C', '\a', 
		'\x182', '\x2', '\x2', '\x272C', '\x272D', '\a', '\x4', '\x2', '\x2', 
		'\x272D', '\x272E', '\x5', '\x4D4', '\x26B', '\x2', '\x272E', '\x272F', 
		'\a', '\x5', '\x2', '\x2', '\x272F', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x2730', '\x2731', '\a', '\x188', '\x2', '\x2', '\x2731', '\x2732', '\a', 
		'\x4', '\x2', '\x2', '\x2732', '\x2733', '\x5', '\x4D4', '\x26B', '\x2', 
		'\x2733', '\x2734', '\a', '\x5', '\x2', '\x2', '\x2734', '\x2791', '\x3', 
		'\x2', '\x2', '\x2', '\x2735', '\x2736', '\a', '\x18D', '\x2', '\x2', 
		'\x2736', '\x2737', '\a', '\x4', '\x2', '\x2', '\x2737', '\x2738', '\x5', 
		'\x4D4', '\x26B', '\x2', '\x2738', '\x2739', '\a', '\x5', '\x2', '\x2', 
		'\x2739', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x273A', '\x273B', '\a', 
		'\x1A2', '\x2', '\x2', '\x273B', '\x273C', '\a', '\x4', '\x2', '\x2', 
		'\x273C', '\x273D', '\x5', '\x4D4', '\x26B', '\x2', '\x273D', '\x273E', 
		'\a', '\x5', '\x2', '\x2', '\x273E', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x273F', '\x2740', '\a', '\x1A3', '\x2', '\x2', '\x2740', '\x2741', '\a', 
		'\x4', '\x2', '\x2', '\x2741', '\x2742', '\a', '\x103', '\x2', '\x2', 
		'\x2742', '\x2743', '\x5', '\x538', '\x29D', '\x2', '\x2743', '\x2744', 
		'\a', '\x5', '\x2', '\x2', '\x2744', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x2745', '\x2746', '\a', '\x1A3', '\x2', '\x2', '\x2746', '\x2747', '\a', 
		'\x4', '\x2', '\x2', '\x2747', '\x2748', '\a', '\x103', '\x2', '\x2', 
		'\x2748', '\x2749', '\x5', '\x538', '\x29D', '\x2', '\x2749', '\x274A', 
		'\a', '\b', '\x2', '\x2', '\x274A', '\x274B', '\x5', '\x49A', '\x24E', 
		'\x2', '\x274B', '\x274C', '\a', '\x5', '\x2', '\x2', '\x274C', '\x2791', 
		'\x3', '\x2', '\x2', '\x2', '\x274D', '\x274E', '\a', '\x1A3', '\x2', 
		'\x2', '\x274E', '\x274F', '\a', '\x4', '\x2', '\x2', '\x274F', '\x2750', 
		'\a', '\x103', '\x2', '\x2', '\x2750', '\x2751', '\x5', '\x538', '\x29D', 
		'\x2', '\x2751', '\x2752', '\a', '\b', '\x2', '\x2', '\x2752', '\x2753', 
		'\x5', '\x4D4', '\x26B', '\x2', '\x2753', '\x2754', '\a', '\x5', '\x2', 
		'\x2', '\x2754', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x2755', '\x2756', 
		'\a', '\x1A3', '\x2', '\x2', '\x2756', '\x2757', '\a', '\x4', '\x2', '\x2', 
		'\x2757', '\x2758', '\a', '\x103', '\x2', '\x2', '\x2758', '\x2759', '\x5', 
		'\x538', '\x29D', '\x2', '\x2759', '\x275A', '\a', '\b', '\x2', '\x2', 
		'\x275A', '\x275B', '\x5', '\x49A', '\x24E', '\x2', '\x275B', '\x275C', 
		'\a', '\b', '\x2', '\x2', '\x275C', '\x275D', '\x5', '\x4D4', '\x26B', 
		'\x2', '\x275D', '\x275E', '\a', '\x5', '\x2', '\x2', '\x275E', '\x2791', 
		'\x3', '\x2', '\x2', '\x2', '\x275F', '\x2760', '\a', '\x1A4', '\x2', 
		'\x2', '\x2760', '\x2761', '\a', '\x4', '\x2', '\x2', '\x2761', '\x2762', 
		'\x5', '\x48A', '\x246', '\x2', '\x2762', '\x2763', '\x5', '\x4A4', '\x253', 
		'\x2', '\x2763', '\x2764', '\a', '\x5', '\x2', '\x2', '\x2764', '\x2791', 
		'\x3', '\x2', '\x2', '\x2', '\x2765', '\x2766', '\a', '\x1A5', '\x2', 
		'\x2', '\x2766', '\x2767', '\a', '\x4', '\x2', '\x2', '\x2767', '\x2768', 
		'\x5', '\x49C', '\x24F', '\x2', '\x2768', '\x2769', '\a', '\x5', '\x2', 
		'\x2', '\x2769', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x276A', '\x276B', 
		'\a', '\x1A6', '\x2', '\x2', '\x276B', '\x276C', '\a', '\x4', '\x2', '\x2', 
		'\x276C', '\x276D', '\x5', '\x4A0', '\x251', '\x2', '\x276D', '\x276E', 
		'\x5', '\x484', '\x243', '\x2', '\x276E', '\x276F', '\x5', '\x4A2', '\x252', 
		'\x2', '\x276F', '\x2770', '\a', '\x5', '\x2', '\x2', '\x2770', '\x2791', 
		'\x3', '\x2', '\x2', '\x2', '\x2771', '\x2772', '\a', '\x1A7', '\x2', 
		'\x2', '\x2772', '\x2773', '\a', '\x4', '\x2', '\x2', '\x2773', '\x2774', 
		'\a', '\x103', '\x2', '\x2', '\x2774', '\x2775', '\x5', '\x538', '\x29D', 
		'\x2', '\x2775', '\x2776', '\a', '\x5', '\x2', '\x2', '\x2776', '\x2791', 
		'\x3', '\x2', '\x2', '\x2', '\x2777', '\x2778', '\a', '\x1A7', '\x2', 
		'\x2', '\x2778', '\x2779', '\a', '\x4', '\x2', '\x2', '\x2779', '\x277A', 
		'\a', '\x103', '\x2', '\x2', '\x277A', '\x277B', '\x5', '\x538', '\x29D', 
		'\x2', '\x277B', '\x277C', '\a', '\b', '\x2', '\x2', '\x277C', '\x277D', 
		'\x5', '\x484', '\x243', '\x2', '\x277D', '\x277E', '\a', '\x5', '\x2', 
		'\x2', '\x277E', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x277F', '\x2780', 
		'\a', '\x1A8', '\x2', '\x2', '\x2780', '\x2781', '\a', '\x4', '\x2', '\x2', 
		'\x2781', '\x2782', '\a', '\x178', '\x2', '\x2', '\x2782', '\x2783', '\x5', 
		'\x484', '\x243', '\x2', '\x2783', '\x2784', '\a', '\b', '\x2', '\x2', 
		'\x2784', '\x2785', '\x5', '\x496', '\x24C', '\x2', '\x2785', '\x2786', 
		'\x5', '\x498', '\x24D', '\x2', '\x2786', '\x2787', '\a', '\x5', '\x2', 
		'\x2', '\x2787', '\x2791', '\x3', '\x2', '\x2', '\x2', '\x2788', '\x2789', 
		'\a', '\x1A9', '\x2', '\x2', '\x2789', '\x278A', '\a', '\x4', '\x2', '\x2', 
		'\x278A', '\x278B', '\x5', '\x4A0', '\x251', '\x2', '\x278B', '\x278C', 
		'\x5', '\x484', '\x243', '\x2', '\x278C', '\x278D', '\a', '&', '\x2', 
		'\x2', '\x278D', '\x278E', '\x5', '\x45C', '\x22F', '\x2', '\x278E', '\x278F', 
		'\a', '\x5', '\x2', '\x2', '\x278F', '\x2791', '\x3', '\x2', '\x2', '\x2', 
		'\x2790', '\x26BA', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26C0', '\x3', 
		'\x2', '\x2', '\x2', '\x2790', '\x26C1', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26C2', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26C7', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x26C8', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26CD', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26CE', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x26D3', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26D4', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26D9', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x26DA', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26DB', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26DC', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x26DD', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26DE', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26DF', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x26E6', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26EB', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x26F0', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x26F7', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x26FC', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2701', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x2706', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x270D', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2713', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x2719', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x271F', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2724', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x272B', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x2730', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2735', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x273A', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x273F', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2745', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x274D', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x2755', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x275F', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x2765', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x276A', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2771', '\x3', '\x2', 
		'\x2', '\x2', '\x2790', '\x2777', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x277F', '\x3', '\x2', '\x2', '\x2', '\x2790', '\x2788', '\x3', '\x2', 
		'\x2', '\x2', '\x2791', '\x495', '\x3', '\x2', '\x2', '\x2', '\x2792', 
		'\x2793', '\a', '\x170', '\x2', '\x2', '\x2793', '\x2798', '\x5', '\x484', 
		'\x243', '\x2', '\x2794', '\x2795', '\a', '\x170', '\x2', '\x2', '\x2795', 
		'\x2796', '\a', '\x106', '\x2', '\x2', '\x2796', '\x2798', '\a', '\x1BC', 
		'\x2', '\x2', '\x2797', '\x2792', '\x3', '\x2', '\x2', '\x2', '\x2797', 
		'\x2794', '\x3', '\x2', '\x2', '\x2', '\x2798', '\x497', '\x3', '\x2', 
		'\x2', '\x2', '\x2799', '\x279A', '\a', '\b', '\x2', '\x2', '\x279A', 
		'\x279B', '\a', '\x14C', '\x2', '\x2', '\x279B', '\x27A5', '\a', '\x17A', 
		'\x2', '\x2', '\x279C', '\x279D', '\a', '\b', '\x2', '\x2', '\x279D', 
		'\x279E', '\a', '\x14C', '\x2', '\x2', '\x279E', '\x27A5', '\a', '\x106', 
		'\x2', '\x2', '\x279F', '\x27A0', '\a', '\b', '\x2', '\x2', '\x27A0', 
		'\x27A1', '\a', '\x14C', '\x2', '\x2', '\x27A1', '\x27A2', '\a', '\x106', 
		'\x2', '\x2', '\x27A2', '\x27A5', '\a', '\x1BC', '\x2', '\x2', '\x27A3', 
		'\x27A5', '\x3', '\x2', '\x2', '\x2', '\x27A4', '\x2799', '\x3', '\x2', 
		'\x2', '\x2', '\x27A4', '\x279C', '\x3', '\x2', '\x2', '\x2', '\x27A4', 
		'\x279F', '\x3', '\x2', '\x2', '\x2', '\x27A4', '\x27A3', '\x3', '\x2', 
		'\x2', '\x2', '\x27A5', '\x499', '\x3', '\x2', '\x2', '\x2', '\x27A6', 
		'\x27A7', '\a', '\x1A1', '\x2', '\x2', '\x27A7', '\x27A8', '\a', '\x4', 
		'\x2', '\x2', '\x27A8', '\x27A9', '\x5', '\x49C', '\x24F', '\x2', '\x27A9', 
		'\x27AA', '\a', '\x5', '\x2', '\x2', '\x27AA', '\x49B', '\x3', '\x2', 
		'\x2', '\x2', '\x27AB', '\x27AC', '\b', '\x24F', '\x1', '\x2', '\x27AC', 
		'\x27AD', '\x5', '\x49E', '\x250', '\x2', '\x27AD', '\x27B3', '\x3', '\x2', 
		'\x2', '\x2', '\x27AE', '\x27AF', '\f', '\x3', '\x2', '\x2', '\x27AF', 
		'\x27B0', '\a', '\b', '\x2', '\x2', '\x27B0', '\x27B2', '\x5', '\x49E', 
		'\x250', '\x2', '\x27B1', '\x27AE', '\x3', '\x2', '\x2', '\x2', '\x27B2', 
		'\x27B5', '\x3', '\x2', '\x2', '\x2', '\x27B3', '\x27B1', '\x3', '\x2', 
		'\x2', '\x2', '\x27B3', '\x27B4', '\x3', '\x2', '\x2', '\x2', '\x27B4', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x27B5', '\x27B3', '\x3', '\x2', 
		'\x2', '\x2', '\x27B6', '\x27B7', '\x5', '\x484', '\x243', '\x2', '\x27B7', 
		'\x27B8', '\a', '&', '\x2', '\x2', '\x27B8', '\x27B9', '\x5', '\x538', 
		'\x29D', '\x2', '\x27B9', '\x27BC', '\x3', '\x2', '\x2', '\x2', '\x27BA', 
		'\x27BC', '\x5', '\x484', '\x243', '\x2', '\x27BB', '\x27B6', '\x3', '\x2', 
		'\x2', '\x2', '\x27BB', '\x27BA', '\x3', '\x2', '\x2', '\x2', '\x27BC', 
		'\x49F', '\x3', '\x2', '\x2', '\x2', '\x27BD', '\x27BE', '\t', '\x19', 
		'\x2', '\x2', '\x27BE', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x27BF', 
		'\x27C0', '\a', '\x11D', '\x2', '\x2', '\x27C0', '\x27C5', '\a', '\x173', 
		'\x2', '\x2', '\x27C1', '\x27C2', '\a', '\x154', '\x2', '\x2', '\x27C2', 
		'\x27C5', '\a', '\x173', '\x2', '\x2', '\x27C3', '\x27C5', '\x3', '\x2', 
		'\x2', '\x2', '\x27C4', '\x27BF', '\x3', '\x2', '\x2', '\x2', '\x27C4', 
		'\x27C1', '\x3', '\x2', '\x2', '\x2', '\x27C4', '\x27C3', '\x3', '\x2', 
		'\x2', '\x2', '\x27C5', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x27C6', 
		'\x27C7', '\a', '\x117', '\x2', '\x2', '\x27C7', '\x27D6', '\x5', '\x48A', 
		'\x246', '\x2', '\x27C8', '\x27C9', '\a', '\x117', '\x2', '\x2', '\x27C9', 
		'\x27CA', '\x5', '\x48A', '\x246', '\x2', '\x27CA', '\x27CB', '\x5', '\x4A6', 
		'\x254', '\x2', '\x27CB', '\x27D6', '\x3', '\x2', '\x2', '\x2', '\x27CC', 
		'\x27CD', '\a', '\x117', '\x2', '\x2', '\x27CD', '\x27CE', '\x5', '\x4A6', 
		'\x254', '\x2', '\x27CE', '\x27CF', '\x5', '\x48A', '\x246', '\x2', '\x27CF', 
		'\x27D6', '\x3', '\x2', '\x2', '\x2', '\x27D0', '\x27D1', '\a', '\x117', 
		'\x2', '\x2', '\x27D1', '\x27D2', '\x5', '\x4A6', '\x254', '\x2', '\x27D2', 
		'\x27D3', '\x5', '\x48A', '\x246', '\x2', '\x27D3', '\x27D4', '\x5', '\x4A6', 
		'\x254', '\x2', '\x27D4', '\x27D6', '\x3', '\x2', '\x2', '\x2', '\x27D5', 
		'\x27C6', '\x3', '\x2', '\x2', '\x2', '\x27D5', '\x27C8', '\x3', '\x2', 
		'\x2', '\x2', '\x27D5', '\x27CC', '\x3', '\x2', '\x2', '\x2', '\x27D5', 
		'\x27D0', '\x3', '\x2', '\x2', '\x2', '\x27D6', '\x4A5', '\x3', '\x2', 
		'\x2', '\x2', '\x27D7', '\x27D8', '\a', '\x95', '\x2', '\x2', '\x27D8', 
		'\x27DC', '\a', '\x129', '\x2', '\x2', '\x27D9', '\x27DA', '\a', '\x95', 
		'\x2', '\x2', '\x27DA', '\x27DC', '\a', '\x1BC', '\x2', '\x2', '\x27DB', 
		'\x27D7', '\x3', '\x2', '\x2', '\x2', '\x27DB', '\x27D9', '\x3', '\x2', 
		'\x2', '\x2', '\x27DC', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x27DD', 
		'\x27DE', '\a', '\x1D9', '\x2', '\x2', '\x27DE', '\x27DF', '\a', '\x44', 
		'\x2', '\x2', '\x27DF', '\x27E0', '\a', '\x4', '\x2', '\x2', '\x27E0', 
		'\x27E1', '\x5', '\x3E2', '\x1F2', '\x2', '\x27E1', '\x27E2', '\a', '\x5', 
		'\x2', '\x2', '\x27E2', '\x27E5', '\x3', '\x2', '\x2', '\x2', '\x27E3', 
		'\x27E5', '\x3', '\x2', '\x2', '\x2', '\x27E4', '\x27DD', '\x3', '\x2', 
		'\x2', '\x2', '\x27E4', '\x27E3', '\x3', '\x2', '\x2', '\x2', '\x27E5', 
		'\x4A9', '\x3', '\x2', '\x2', '\x2', '\x27E6', '\x27E7', '\a', '\x1DA', 
		'\x2', '\x2', '\x27E7', '\x27E8', '\a', '\x4', '\x2', '\x2', '\x27E8', 
		'\x27E9', '\a', 'i', '\x2', '\x2', '\x27E9', '\x27EA', '\x5', '\x484', 
		'\x243', '\x2', '\x27EA', '\x27EB', '\a', '\x5', '\x2', '\x2', '\x27EB', 
		'\x27EE', '\x3', '\x2', '\x2', '\x2', '\x27EC', '\x27EE', '\x3', '\x2', 
		'\x2', '\x2', '\x27ED', '\x27E6', '\x3', '\x2', '\x2', '\x2', '\x27ED', 
		'\x27EC', '\x3', '\x2', '\x2', '\x2', '\x27EE', '\x4AB', '\x3', '\x2', 
		'\x2', '\x2', '\x27EF', '\x27F0', '\a', 'j', '\x2', '\x2', '\x27F0', '\x27F3', 
		'\x5', '\x4AE', '\x258', '\x2', '\x27F1', '\x27F3', '\x3', '\x2', '\x2', 
		'\x2', '\x27F2', '\x27EF', '\x3', '\x2', '\x2', '\x2', '\x27F2', '\x27F1', 
		'\x3', '\x2', '\x2', '\x2', '\x27F3', '\x4AD', '\x3', '\x2', '\x2', '\x2', 
		'\x27F4', '\x27F5', '\b', '\x258', '\x1', '\x2', '\x27F5', '\x27F6', '\x5', 
		'\x4B0', '\x259', '\x2', '\x27F6', '\x27FC', '\x3', '\x2', '\x2', '\x2', 
		'\x27F7', '\x27F8', '\f', '\x3', '\x2', '\x2', '\x27F8', '\x27F9', '\a', 
		'\b', '\x2', '\x2', '\x27F9', '\x27FB', '\x5', '\x4B0', '\x259', '\x2', 
		'\x27FA', '\x27F7', '\x3', '\x2', '\x2', '\x2', '\x27FB', '\x27FE', '\x3', 
		'\x2', '\x2', '\x2', '\x27FC', '\x27FA', '\x3', '\x2', '\x2', '\x2', '\x27FC', 
		'\x27FD', '\x3', '\x2', '\x2', '\x2', '\x27FD', '\x4AF', '\x3', '\x2', 
		'\x2', '\x2', '\x27FE', '\x27FC', '\x3', '\x2', '\x2', '\x2', '\x27FF', 
		'\x2800', '\x5', '\x532', '\x29A', '\x2', '\x2800', '\x2801', '\a', '&', 
		'\x2', '\x2', '\x2801', '\x2802', '\x5', '\x4B4', '\x25B', '\x2', '\x2802', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x2803', '\x2804', '\a', '~', '\x2', 
		'\x2', '\x2804', '\x2809', '\x5', '\x4B4', '\x25B', '\x2', '\x2805', '\x2806', 
		'\a', '~', '\x2', '\x2', '\x2806', '\x2809', '\x5', '\x532', '\x29A', 
		'\x2', '\x2807', '\x2809', '\x3', '\x2', '\x2', '\x2', '\x2808', '\x2803', 
		'\x3', '\x2', '\x2', '\x2', '\x2808', '\x2805', '\x3', '\x2', '\x2', '\x2', 
		'\x2808', '\x2807', '\x3', '\x2', '\x2', '\x2', '\x2809', '\x4B3', '\x3', 
		'\x2', '\x2', '\x2', '\x280A', '\x280B', '\a', '\x4', '\x2', '\x2', '\x280B', 
		'\x280C', '\x5', '\x4B6', '\x25C', '\x2', '\x280C', '\x280D', '\x5', '\x4B8', 
		'\x25D', '\x2', '\x280D', '\x280E', '\x5', '\x3E0', '\x1F1', '\x2', '\x280E', 
		'\x280F', '\x5', '\x4BA', '\x25E', '\x2', '\x280F', '\x2810', '\a', '\x5', 
		'\x2', '\x2', '\x2810', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x2811', 
		'\x2814', '\x5', '\x532', '\x29A', '\x2', '\x2812', '\x2814', '\x3', '\x2', 
		'\x2', '\x2', '\x2813', '\x2811', '\x3', '\x2', '\x2', '\x2', '\x2813', 
		'\x2812', '\x3', '\x2', '\x2', '\x2', '\x2814', '\x4B7', '\x3', '\x2', 
		'\x2', '\x2', '\x2815', '\x2816', '\a', '\x116', '\x2', '\x2', '\x2816', 
		'\x2817', '\a', '\x95', '\x2', '\x2', '\x2817', '\x281A', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2818', '\x281A', '\x3', '\x2', '\x2', '\x2', '\x2819', 
		'\x2815', '\x3', '\x2', '\x2', '\x2', '\x2819', '\x2818', '\x3', '\x2', 
		'\x2', '\x2', '\x281A', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x281B', 
		'\x281C', '\a', '\x124', '\x2', '\x2', '\x281C', '\x281D', '\x5', '\x4BC', 
		'\x25F', '\x2', '\x281D', '\x281E', '\x5', '\x4C0', '\x261', '\x2', '\x281E', 
		'\x2829', '\x3', '\x2', '\x2', '\x2', '\x281F', '\x2820', '\a', '\x139', 
		'\x2', '\x2', '\x2820', '\x2821', '\x5', '\x4BC', '\x25F', '\x2', '\x2821', 
		'\x2822', '\x5', '\x4C0', '\x261', '\x2', '\x2822', '\x2829', '\x3', '\x2', 
		'\x2', '\x2', '\x2823', '\x2824', '\a', '\x1DB', '\x2', '\x2', '\x2824', 
		'\x2825', '\x5', '\x4BC', '\x25F', '\x2', '\x2825', '\x2826', '\x5', '\x4C0', 
		'\x261', '\x2', '\x2826', '\x2829', '\x3', '\x2', '\x2', '\x2', '\x2827', 
		'\x2829', '\x3', '\x2', '\x2', '\x2', '\x2828', '\x281B', '\x3', '\x2', 
		'\x2', '\x2', '\x2828', '\x281F', '\x3', '\x2', '\x2', '\x2', '\x2828', 
		'\x2823', '\x3', '\x2', '\x2', '\x2', '\x2828', '\x2827', '\x3', '\x2', 
		'\x2', '\x2', '\x2829', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x282A', 
		'\x2831', '\x5', '\x4BE', '\x260', '\x2', '\x282B', '\x282C', '\a', '\x17C', 
		'\x2', '\x2', '\x282C', '\x282D', '\x5', '\x4BE', '\x260', '\x2', '\x282D', 
		'\x282E', '\a', '#', '\x2', '\x2', '\x282E', '\x282F', '\x5', '\x4BE', 
		'\x260', '\x2', '\x282F', '\x2831', '\x3', '\x2', '\x2', '\x2', '\x2830', 
		'\x282A', '\x3', '\x2', '\x2', '\x2', '\x2830', '\x282B', '\x3', '\x2', 
		'\x2', '\x2', '\x2831', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x2832', 
		'\x2833', '\a', '\x163', '\x2', '\x2', '\x2833', '\x283F', '\a', '\x11A', 
		'\x2', '\x2', '\x2834', '\x2835', '\a', '\x163', '\x2', '\x2', '\x2835', 
		'\x283F', '\a', '\xD2', '\x2', '\x2', '\x2836', '\x2837', '\a', '\x1AB', 
		'\x2', '\x2', '\x2837', '\x283F', '\a', '\x197', '\x2', '\x2', '\x2838', 
		'\x2839', '\x5', '\x484', '\x243', '\x2', '\x2839', '\x283A', '\a', '\x11A', 
		'\x2', '\x2', '\x283A', '\x283F', '\x3', '\x2', '\x2', '\x2', '\x283B', 
		'\x283C', '\x5', '\x484', '\x243', '\x2', '\x283C', '\x283D', '\a', '\xD2', 
		'\x2', '\x2', '\x283D', '\x283F', '\x3', '\x2', '\x2', '\x2', '\x283E', 
		'\x2832', '\x3', '\x2', '\x2', '\x2', '\x283E', '\x2834', '\x3', '\x2', 
		'\x2', '\x2', '\x283E', '\x2836', '\x3', '\x2', '\x2', '\x2', '\x283E', 
		'\x2838', '\x3', '\x2', '\x2', '\x2', '\x283E', '\x283B', '\x3', '\x2', 
		'\x2', '\x2', '\x283F', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x2840', 
		'\x2841', '\a', '\xC9', '\x2', '\x2', '\x2841', '\x2842', '\a', '\x1AB', 
		'\x2', '\x2', '\x2842', '\x284C', '\a', '\x197', '\x2', '\x2', '\x2843', 
		'\x2844', '\a', '\xC9', '\x2', '\x2', '\x2844', '\x284C', '\a', '\x44', 
		'\x2', '\x2', '\x2845', '\x2846', '\a', '\xC9', '\x2', '\x2', '\x2846', 
		'\x284C', '\a', '\x1CD', '\x2', '\x2', '\x2847', '\x2848', '\a', '\xC9', 
		'\x2', '\x2', '\x2848', '\x2849', '\a', '\x106', '\x2', '\x2', '\x2849', 
		'\x284C', '\a', '\x1DC', '\x2', '\x2', '\x284A', '\x284C', '\x3', '\x2', 
		'\x2', '\x2', '\x284B', '\x2840', '\x3', '\x2', '\x2', '\x2', '\x284B', 
		'\x2843', '\x3', '\x2', '\x2', '\x2', '\x284B', '\x2845', '\x3', '\x2', 
		'\x2', '\x2', '\x284B', '\x2847', '\x3', '\x2', '\x2', '\x2', '\x284B', 
		'\x284A', '\x3', '\x2', '\x2', '\x2', '\x284C', '\x4C1', '\x3', '\x2', 
		'\x2', '\x2', '\x284D', '\x284E', '\a', '\x197', '\x2', '\x2', '\x284E', 
		'\x284F', '\a', '\x4', '\x2', '\x2', '\x284F', '\x2850', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2850', '\x2851', '\a', '\x5', '\x2', '\x2', '\x2851', 
		'\x285C', '\x3', '\x2', '\x2', '\x2', '\x2852', '\x2853', '\a', '\x197', 
		'\x2', '\x2', '\x2853', '\x2854', '\a', '\x4', '\x2', '\x2', '\x2854', 
		'\x285C', '\a', '\x5', '\x2', '\x2', '\x2855', '\x2856', '\a', '\x4', 
		'\x2', '\x2', '\x2856', '\x2857', '\x5', '\x4D4', '\x26B', '\x2', '\x2857', 
		'\x2858', '\a', '\b', '\x2', '\x2', '\x2858', '\x2859', '\x5', '\x484', 
		'\x243', '\x2', '\x2859', '\x285A', '\a', '\x5', '\x2', '\x2', '\x285A', 
		'\x285C', '\x3', '\x2', '\x2', '\x2', '\x285B', '\x284D', '\x3', '\x2', 
		'\x2', '\x2', '\x285B', '\x2852', '\x3', '\x2', '\x2', '\x2', '\x285B', 
		'\x2855', '\x3', '\x2', '\x2', '\x2', '\x285C', '\x4C3', '\x3', '\x2', 
		'\x2', '\x2', '\x285D', '\x285E', '\a', '\x197', '\x2', '\x2', '\x285E', 
		'\x285F', '\a', '\x4', '\x2', '\x2', '\x285F', '\x2860', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2860', '\x2861', '\a', '\x5', '\x2', '\x2', '\x2861', 
		'\x2866', '\x3', '\x2', '\x2', '\x2', '\x2862', '\x2863', '\a', '\x197', 
		'\x2', '\x2', '\x2863', '\x2864', '\a', '\x4', '\x2', '\x2', '\x2864', 
		'\x2866', '\a', '\x5', '\x2', '\x2', '\x2865', '\x285D', '\x3', '\x2', 
		'\x2', '\x2', '\x2865', '\x2862', '\x3', '\x2', '\x2', '\x2', '\x2866', 
		'\x4C5', '\x3', '\x2', '\x2', '\x2', '\x2867', '\x2868', '\a', '\x4', 
		'\x2', '\x2', '\x2868', '\x2869', '\x5', '\x4D4', '\x26B', '\x2', '\x2869', 
		'\x286A', '\a', '\b', '\x2', '\x2', '\x286A', '\x286B', '\x5', '\x484', 
		'\x243', '\x2', '\x286B', '\x286C', '\a', '\x5', '\x2', '\x2', '\x286C', 
		'\x4C7', '\x3', '\x2', '\x2', '\x2', '\x286D', '\x286E', '\t', '\x1A', 
		'\x2', '\x2', '\x286E', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x286F', 
		'\x2872', '\a', '\x1F', '\x2', '\x2', '\x2870', '\x2872', '\x5', '\x4CC', 
		'\x267', '\x2', '\x2871', '\x286F', '\x3', '\x2', '\x2', '\x2', '\x2871', 
		'\x2870', '\x3', '\x2', '\x2', '\x2', '\x2872', '\x4CB', '\x3', '\x2', 
		'\x2', '\x2', '\x2873', '\x2874', '\t', '\x1B', '\x2', '\x2', '\x2874', 
		'\x4CD', '\x3', '\x2', '\x2', '\x2', '\x2875', '\x287C', '\a', '\x1F', 
		'\x2', '\x2', '\x2876', '\x2877', '\a', '\x10F', '\x2', '\x2', '\x2877', 
		'\x2878', '\a', '\x4', '\x2', '\x2', '\x2878', '\x2879', '\x5', '\x2AE', 
		'\x158', '\x2', '\x2879', '\x287A', '\a', '\x5', '\x2', '\x2', '\x287A', 
		'\x287C', '\x3', '\x2', '\x2', '\x2', '\x287B', '\x2875', '\x3', '\x2', 
		'\x2', '\x2', '\x287B', '\x2876', '\x3', '\x2', '\x2', '\x2', '\x287C', 
		'\x4CF', '\x3', '\x2', '\x2', '\x2', '\x287D', '\x2884', '\x5', '\x4CA', 
		'\x266', '\x2', '\x287E', '\x287F', '\a', '\x10F', '\x2', '\x2', '\x287F', 
		'\x2880', '\a', '\x4', '\x2', '\x2', '\x2880', '\x2881', '\x5', '\x2AE', 
		'\x158', '\x2', '\x2881', '\x2882', '\a', '\x5', '\x2', '\x2', '\x2882', 
		'\x2884', '\x3', '\x2', '\x2', '\x2', '\x2883', '\x287D', '\x3', '\x2', 
		'\x2', '\x2', '\x2883', '\x287E', '\x3', '\x2', '\x2', '\x2', '\x2884', 
		'\x4D1', '\x3', '\x2', '\x2', '\x2', '\x2885', '\x2892', '\x5', '\x4CA', 
		'\x266', '\x2', '\x2886', '\x2887', '\a', '\x10F', '\x2', '\x2', '\x2887', 
		'\x2888', '\a', '\x4', '\x2', '\x2', '\x2888', '\x2889', '\x5', '\x2AE', 
		'\x158', '\x2', '\x2889', '\x288A', '\a', '\x5', '\x2', '\x2', '\x288A', 
		'\x2892', '\x3', '\x2', '\x2', '\x2', '\x288B', '\x2892', '\a', 'z', '\x2', 
		'\x2', '\x288C', '\x288D', '\a', 'O', '\x2', '\x2', '\x288D', '\x2892', 
		'\a', 'z', '\x2', '\x2', '\x288E', '\x2892', '\a', 't', '\x2', '\x2', 
		'\x288F', '\x2890', '\a', 'O', '\x2', '\x2', '\x2890', '\x2892', '\a', 
		't', '\x2', '\x2', '\x2891', '\x2885', '\x3', '\x2', '\x2', '\x2', '\x2891', 
		'\x2886', '\x3', '\x2', '\x2', '\x2', '\x2891', '\x288B', '\x3', '\x2', 
		'\x2', '\x2', '\x2891', '\x288C', '\x3', '\x2', '\x2', '\x2', '\x2891', 
		'\x288E', '\x3', '\x2', '\x2', '\x2', '\x2891', '\x288F', '\x3', '\x2', 
		'\x2', '\x2', '\x2892', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x2893', 
		'\x2894', '\b', '\x26B', '\x1', '\x2', '\x2894', '\x2895', '\x5', '\x484', 
		'\x243', '\x2', '\x2895', '\x289B', '\x3', '\x2', '\x2', '\x2', '\x2896', 
		'\x2897', '\f', '\x3', '\x2', '\x2', '\x2897', '\x2898', '\a', '\b', '\x2', 
		'\x2', '\x2898', '\x289A', '\x5', '\x484', '\x243', '\x2', '\x2899', '\x2896', 
		'\x3', '\x2', '\x2', '\x2', '\x289A', '\x289D', '\x3', '\x2', '\x2', '\x2', 
		'\x289B', '\x2899', '\x3', '\x2', '\x2', '\x2', '\x289B', '\x289C', '\x3', 
		'\x2', '\x2', '\x2', '\x289C', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x289D', 
		'\x289B', '\x3', '\x2', '\x2', '\x2', '\x289E', '\x289F', '\b', '\x26C', 
		'\x1', '\x2', '\x289F', '\x28A0', '\x5', '\x4D8', '\x26D', '\x2', '\x28A0', 
		'\x28A6', '\x3', '\x2', '\x2', '\x2', '\x28A1', '\x28A2', '\f', '\x3', 
		'\x2', '\x2', '\x28A2', '\x28A3', '\a', '\b', '\x2', '\x2', '\x28A3', 
		'\x28A5', '\x5', '\x4D8', '\x26D', '\x2', '\x28A4', '\x28A1', '\x3', '\x2', 
		'\x2', '\x2', '\x28A5', '\x28A8', '\x3', '\x2', '\x2', '\x2', '\x28A6', 
		'\x28A4', '\x3', '\x2', '\x2', '\x2', '\x28A6', '\x28A7', '\x3', '\x2', 
		'\x2', '\x2', '\x28A7', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x28A8', 
		'\x28A6', '\x3', '\x2', '\x2', '\x2', '\x28A9', '\x28B3', '\x5', '\x484', 
		'\x243', '\x2', '\x28AA', '\x28AB', '\x5', '\x27E', '\x140', '\x2', '\x28AB', 
		'\x28AC', '\a', '\x16', '\x2', '\x2', '\x28AC', '\x28AD', '\x5', '\x484', 
		'\x243', '\x2', '\x28AD', '\x28B3', '\x3', '\x2', '\x2', '\x2', '\x28AE', 
		'\x28AF', '\x5', '\x27E', '\x140', '\x2', '\x28AF', '\x28B0', '\a', '\x18', 
		'\x2', '\x2', '\x28B0', '\x28B1', '\x5', '\x484', '\x243', '\x2', '\x28B1', 
		'\x28B3', '\x3', '\x2', '\x2', '\x2', '\x28B2', '\x28A9', '\x3', '\x2', 
		'\x2', '\x2', '\x28B2', '\x28AA', '\x3', '\x2', '\x2', '\x2', '\x28B2', 
		'\x28AE', '\x3', '\x2', '\x2', '\x2', '\x28B3', '\x4D9', '\x3', '\x2', 
		'\x2', '\x2', '\x28B4', '\x28B5', '\b', '\x26E', '\x1', '\x2', '\x28B5', 
		'\x28B6', '\x5', '\x458', '\x22D', '\x2', '\x28B6', '\x28BC', '\x3', '\x2', 
		'\x2', '\x2', '\x28B7', '\x28B8', '\f', '\x3', '\x2', '\x2', '\x28B8', 
		'\x28B9', '\a', '\b', '\x2', '\x2', '\x28B9', '\x28BB', '\x5', '\x458', 
		'\x22D', '\x2', '\x28BA', '\x28B7', '\x3', '\x2', '\x2', '\x2', '\x28BB', 
		'\x28BE', '\x3', '\x2', '\x2', '\x2', '\x28BC', '\x28BA', '\x3', '\x2', 
		'\x2', '\x2', '\x28BC', '\x28BD', '\x3', '\x2', '\x2', '\x2', '\x28BD', 
		'\x4DB', '\x3', '\x2', '\x2', '\x2', '\x28BE', '\x28BC', '\x3', '\x2', 
		'\x2', '\x2', '\x28BF', '\x28C0', '\a', '\x6', '\x2', '\x2', '\x28C0', 
		'\x28C1', '\x5', '\x4D4', '\x26B', '\x2', '\x28C1', '\x28C2', '\a', '\a', 
		'\x2', '\x2', '\x28C2', '\x28CA', '\x3', '\x2', '\x2', '\x2', '\x28C3', 
		'\x28C4', '\a', '\x6', '\x2', '\x2', '\x28C4', '\x28C5', '\x5', '\x4DE', 
		'\x270', '\x2', '\x28C5', '\x28C6', '\a', '\a', '\x2', '\x2', '\x28C6', 
		'\x28CA', '\x3', '\x2', '\x2', '\x2', '\x28C7', '\x28C8', '\a', '\x6', 
		'\x2', '\x2', '\x28C8', '\x28CA', '\a', '\a', '\x2', '\x2', '\x28C9', 
		'\x28BF', '\x3', '\x2', '\x2', '\x2', '\x28C9', '\x28C3', '\x3', '\x2', 
		'\x2', '\x2', '\x28C9', '\x28C7', '\x3', '\x2', '\x2', '\x2', '\x28CA', 
		'\x4DD', '\x3', '\x2', '\x2', '\x2', '\x28CB', '\x28CC', '\b', '\x270', 
		'\x1', '\x2', '\x28CC', '\x28CD', '\x5', '\x4DC', '\x26F', '\x2', '\x28CD', 
		'\x28D3', '\x3', '\x2', '\x2', '\x2', '\x28CE', '\x28CF', '\f', '\x3', 
		'\x2', '\x2', '\x28CF', '\x28D0', '\a', '\b', '\x2', '\x2', '\x28D0', 
		'\x28D2', '\x5', '\x4DC', '\x26F', '\x2', '\x28D1', '\x28CE', '\x3', '\x2', 
		'\x2', '\x2', '\x28D2', '\x28D5', '\x3', '\x2', '\x2', '\x2', '\x28D3', 
		'\x28D1', '\x3', '\x2', '\x2', '\x2', '\x28D3', '\x28D4', '\x3', '\x2', 
		'\x2', '\x2', '\x28D4', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x28D5', 
		'\x28D3', '\x3', '\x2', '\x2', '\x2', '\x28D6', '\x28D7', '\x5', '\x4E2', 
		'\x272', '\x2', '\x28D7', '\x28D8', '\a', '\x42', '\x2', '\x2', '\x28D8', 
		'\x28D9', '\x5', '\x484', '\x243', '\x2', '\x28D9', '\x28DC', '\x3', '\x2', 
		'\x2', '\x2', '\x28DA', '\x28DC', '\x3', '\x2', '\x2', '\x2', '\x28DB', 
		'\x28D6', '\x3', '\x2', '\x2', '\x2', '\x28DB', '\x28DA', '\x3', '\x2', 
		'\x2', '\x2', '\x28DC', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x28DD', 
		'\x28E6', '\x5', '\x53A', '\x29E', '\x2', '\x28DE', '\x28E6', '\a', '\x179', 
		'\x2', '\x2', '\x28DF', '\x28E6', '\a', '\x101', '\x2', '\x2', '\x28E0', 
		'\x28E6', '\a', '\xB2', '\x2', '\x2', '\x28E1', '\x28E6', '\a', '\xDC', 
		'\x2', '\x2', '\x28E2', '\x28E6', '\a', '\xFE', '\x2', '\x2', '\x28E3', 
		'\x28E6', '\a', '\x13F', '\x2', '\x2', '\x28E4', '\x28E6', '\x5', '\x524', 
		'\x293', '\x2', '\x28E5', '\x28DD', '\x3', '\x2', '\x2', '\x2', '\x28E5', 
		'\x28DE', '\x3', '\x2', '\x2', '\x2', '\x28E5', '\x28DF', '\x3', '\x2', 
		'\x2', '\x2', '\x28E5', '\x28E0', '\x3', '\x2', '\x2', '\x2', '\x28E5', 
		'\x28E1', '\x3', '\x2', '\x2', '\x2', '\x28E5', '\x28E2', '\x3', '\x2', 
		'\x2', '\x2', '\x28E5', '\x28E3', '\x3', '\x2', '\x2', '\x2', '\x28E5', 
		'\x28E4', '\x3', '\x2', '\x2', '\x2', '\x28E6', '\x4E3', '\x3', '\x2', 
		'\x2', '\x2', '\x28E7', '\x28E8', '\t', '\x1C', '\x2', '\x2', '\x28E8', 
		'\x4E5', '\x3', '\x2', '\x2', '\x2', '\x28E9', '\x28EA', '\x5', '\x484', 
		'\x243', '\x2', '\x28EA', '\x28EB', '\a', 'V', '\x2', '\x2', '\x28EB', 
		'\x28EC', '\x5', '\x484', '\x243', '\x2', '\x28EC', '\x28ED', '\a', '\x42', 
		'\x2', '\x2', '\x28ED', '\x28EE', '\x5', '\x484', '\x243', '\x2', '\x28EE', 
		'\x28EF', '\a', '@', '\x2', '\x2', '\x28EF', '\x28F0', '\x5', '\x484', 
		'\x243', '\x2', '\x28F0', '\x28F8', '\x3', '\x2', '\x2', '\x2', '\x28F1', 
		'\x28F2', '\x5', '\x484', '\x243', '\x2', '\x28F2', '\x28F3', '\a', 'V', 
		'\x2', '\x2', '\x28F3', '\x28F4', '\x5', '\x484', '\x243', '\x2', '\x28F4', 
		'\x28F5', '\a', '\x42', '\x2', '\x2', '\x28F5', '\x28F6', '\x5', '\x484', 
		'\x243', '\x2', '\x28F6', '\x28F8', '\x3', '\x2', '\x2', '\x2', '\x28F7', 
		'\x28E9', '\x3', '\x2', '\x2', '\x2', '\x28F7', '\x28F1', '\x3', '\x2', 
		'\x2', '\x2', '\x28F8', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x28F9', 
		'\x28FA', '\x5', '\x488', '\x245', '\x2', '\x28FA', '\x28FB', '\a', '\x46', 
		'\x2', '\x2', '\x28FB', '\x28FC', '\x5', '\x488', '\x245', '\x2', '\x28FC', 
		'\x28FF', '\x3', '\x2', '\x2', '\x2', '\x28FD', '\x28FF', '\x3', '\x2', 
		'\x2', '\x2', '\x28FE', '\x28F9', '\x3', '\x2', '\x2', '\x2', '\x28FE', 
		'\x28FD', '\x3', '\x2', '\x2', '\x2', '\x28FF', '\x4E9', '\x3', '\x2', 
		'\x2', '\x2', '\x2900', '\x2901', '\x5', '\x484', '\x243', '\x2', '\x2901', 
		'\x2902', '\a', '\x42', '\x2', '\x2', '\x2902', '\x2903', '\x5', '\x484', 
		'\x243', '\x2', '\x2903', '\x2904', '\a', '@', '\x2', '\x2', '\x2904', 
		'\x2905', '\x5', '\x484', '\x243', '\x2', '\x2905', '\x291D', '\x3', '\x2', 
		'\x2', '\x2', '\x2906', '\x2907', '\x5', '\x484', '\x243', '\x2', '\x2907', 
		'\x2908', '\a', '@', '\x2', '\x2', '\x2908', '\x2909', '\x5', '\x484', 
		'\x243', '\x2', '\x2909', '\x290A', '\a', '\x42', '\x2', '\x2', '\x290A', 
		'\x290B', '\x5', '\x484', '\x243', '\x2', '\x290B', '\x291D', '\x3', '\x2', 
		'\x2', '\x2', '\x290C', '\x290D', '\x5', '\x484', '\x243', '\x2', '\x290D', 
		'\x290E', '\a', '\x42', '\x2', '\x2', '\x290E', '\x290F', '\x5', '\x484', 
		'\x243', '\x2', '\x290F', '\x291D', '\x3', '\x2', '\x2', '\x2', '\x2910', 
		'\x2911', '\x5', '\x484', '\x243', '\x2', '\x2911', '\x2912', '\a', '@', 
		'\x2', '\x2', '\x2912', '\x2913', '\x5', '\x484', '\x243', '\x2', '\x2913', 
		'\x291D', '\x3', '\x2', '\x2', '\x2', '\x2914', '\x2915', '\x5', '\x484', 
		'\x243', '\x2', '\x2915', '\x2916', '\a', '\x81', '\x2', '\x2', '\x2916', 
		'\x2917', '\x5', '\x484', '\x243', '\x2', '\x2917', '\x2918', '\a', '\xC7', 
		'\x2', '\x2', '\x2918', '\x2919', '\x5', '\x484', '\x243', '\x2', '\x2919', 
		'\x291D', '\x3', '\x2', '\x2', '\x2', '\x291A', '\x291D', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x291B', '\x291D', '\x3', '\x2', '\x2', '\x2', '\x291C', 
		'\x2900', '\x3', '\x2', '\x2', '\x2', '\x291C', '\x2906', '\x3', '\x2', 
		'\x2', '\x2', '\x291C', '\x290C', '\x3', '\x2', '\x2', '\x2', '\x291C', 
		'\x2910', '\x3', '\x2', '\x2', '\x2', '\x291C', '\x2914', '\x3', '\x2', 
		'\x2', '\x2', '\x291C', '\x291A', '\x3', '\x2', '\x2', '\x2', '\x291C', 
		'\x291B', '\x3', '\x2', '\x2', '\x2', '\x291D', '\x4EB', '\x3', '\x2', 
		'\x2', '\x2', '\x291E', '\x291F', '\x5', '\x484', '\x243', '\x2', '\x291F', 
		'\x2920', '\a', '\x42', '\x2', '\x2', '\x2920', '\x2921', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2921', '\x2926', '\x3', '\x2', '\x2', '\x2', '\x2922', 
		'\x2923', '\a', '\x42', '\x2', '\x2', '\x2923', '\x2926', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2924', '\x2926', '\x5', '\x4D4', '\x26B', '\x2', '\x2925', 
		'\x291E', '\x3', '\x2', '\x2', '\x2', '\x2925', '\x2922', '\x3', '\x2', 
		'\x2', '\x2', '\x2925', '\x2924', '\x3', '\x2', '\x2', '\x2', '\x2926', 
		'\x4ED', '\x3', '\x2', '\x2', '\x2', '\x2927', '\x292D', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x2928', '\x2929', '\a', '\x4', '\x2', '\x2', '\x2929', 
		'\x292A', '\x5', '\x4D4', '\x26B', '\x2', '\x292A', '\x292B', '\a', '\x5', 
		'\x2', '\x2', '\x292B', '\x292D', '\x3', '\x2', '\x2', '\x2', '\x292C', 
		'\x2927', '\x3', '\x2', '\x2', '\x2', '\x292C', '\x2928', '\x3', '\x2', 
		'\x2', '\x2', '\x292D', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x292E', 
		'\x292F', '\a', '*', '\x2', '\x2', '\x292F', '\x2930', '\x5', '\x4F8', 
		'\x27D', '\x2', '\x2930', '\x2931', '\x5', '\x4F2', '\x27A', '\x2', '\x2931', 
		'\x2932', '\x5', '\x4F6', '\x27C', '\x2', '\x2932', '\x2933', '\a', '\x1C0', 
		'\x2', '\x2', '\x2933', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x2934', 
		'\x2935', '\b', '\x27A', '\x1', '\x2', '\x2935', '\x2936', '\x5', '\x4F4', 
		'\x27B', '\x2', '\x2936', '\x293B', '\x3', '\x2', '\x2', '\x2', '\x2937', 
		'\x2938', '\f', '\x3', '\x2', '\x2', '\x2938', '\x293A', '\x5', '\x4F4', 
		'\x27B', '\x2', '\x2939', '\x2937', '\x3', '\x2', '\x2', '\x2', '\x293A', 
		'\x293D', '\x3', '\x2', '\x2', '\x2', '\x293B', '\x2939', '\x3', '\x2', 
		'\x2', '\x2', '\x293B', '\x293C', '\x3', '\x2', '\x2', '\x2', '\x293C', 
		'\x4F3', '\x3', '\x2', '\x2', '\x2', '\x293D', '\x293B', '\x3', '\x2', 
		'\x2', '\x2', '\x293E', '\x293F', '\a', 'h', '\x2', '\x2', '\x293F', '\x2940', 
		'\x5', '\x484', '\x243', '\x2', '\x2940', '\x2941', '\a', '_', '\x2', 
		'\x2', '\x2941', '\x2942', '\x5', '\x484', '\x243', '\x2', '\x2942', '\x4F5', 
		'\x3', '\x2', '\x2', '\x2', '\x2943', '\x2944', '\a', '<', '\x2', '\x2', 
		'\x2944', '\x2947', '\x5', '\x484', '\x243', '\x2', '\x2945', '\x2947', 
		'\x3', '\x2', '\x2', '\x2', '\x2946', '\x2943', '\x3', '\x2', '\x2', '\x2', 
		'\x2946', '\x2945', '\x3', '\x2', '\x2', '\x2', '\x2947', '\x4F7', '\x3', 
		'\x2', '\x2', '\x2', '\x2948', '\x294B', '\x5', '\x484', '\x243', '\x2', 
		'\x2949', '\x294B', '\x3', '\x2', '\x2', '\x2', '\x294A', '\x2948', '\x3', 
		'\x2', '\x2', '\x2', '\x294A', '\x2949', '\x3', '\x2', '\x2', '\x2', '\x294B', 
		'\x4F9', '\x3', '\x2', '\x2', '\x2', '\x294C', '\x2951', '\x5', '\x532', 
		'\x29A', '\x2', '\x294D', '\x294E', '\x5', '\x532', '\x29A', '\x2', '\x294E', 
		'\x294F', '\x5', '\x500', '\x281', '\x2', '\x294F', '\x2951', '\x3', '\x2', 
		'\x2', '\x2', '\x2950', '\x294C', '\x3', '\x2', '\x2', '\x2', '\x2950', 
		'\x294D', '\x3', '\x2', '\x2', '\x2', '\x2951', '\x4FB', '\x3', '\x2', 
		'\x2', '\x2', '\x2952', '\x2953', '\a', '\r', '\x2', '\x2', '\x2953', 
		'\x2961', '\x5', '\x514', '\x28B', '\x2', '\x2954', '\x2955', '\a', '\r', 
		'\x2', '\x2', '\x2955', '\x2961', '\a', '\v', '\x2', '\x2', '\x2956', 
		'\x2957', '\a', '\x6', '\x2', '\x2', '\x2957', '\x2958', '\x5', '\x484', 
		'\x243', '\x2', '\x2958', '\x2959', '\a', '\a', '\x2', '\x2', '\x2959', 
		'\x2961', '\x3', '\x2', '\x2', '\x2', '\x295A', '\x295B', '\a', '\x6', 
		'\x2', '\x2', '\x295B', '\x295C', '\x5', '\x4FE', '\x280', '\x2', '\x295C', 
		'\x295D', '\a', '\n', '\x2', '\x2', '\x295D', '\x295E', '\x5', '\x4FE', 
		'\x280', '\x2', '\x295E', '\x295F', '\a', '\a', '\x2', '\x2', '\x295F', 
		'\x2961', '\x3', '\x2', '\x2', '\x2', '\x2960', '\x2952', '\x3', '\x2', 
		'\x2', '\x2', '\x2960', '\x2954', '\x3', '\x2', '\x2', '\x2', '\x2960', 
		'\x2956', '\x3', '\x2', '\x2', '\x2', '\x2960', '\x295A', '\x3', '\x2', 
		'\x2', '\x2', '\x2961', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x2962', 
		'\x2965', '\x5', '\x484', '\x243', '\x2', '\x2963', '\x2965', '\x3', '\x2', 
		'\x2', '\x2', '\x2964', '\x2962', '\x3', '\x2', '\x2', '\x2', '\x2964', 
		'\x2963', '\x3', '\x2', '\x2', '\x2', '\x2965', '\x4FF', '\x3', '\x2', 
		'\x2', '\x2', '\x2966', '\x2967', '\b', '\x281', '\x1', '\x2', '\x2967', 
		'\x2968', '\x5', '\x4FC', '\x27F', '\x2', '\x2968', '\x296D', '\x3', '\x2', 
		'\x2', '\x2', '\x2969', '\x296A', '\f', '\x3', '\x2', '\x2', '\x296A', 
		'\x296C', '\x5', '\x4FC', '\x27F', '\x2', '\x296B', '\x2969', '\x3', '\x2', 
		'\x2', '\x2', '\x296C', '\x296F', '\x3', '\x2', '\x2', '\x2', '\x296D', 
		'\x296B', '\x3', '\x2', '\x2', '\x2', '\x296D', '\x296E', '\x3', '\x2', 
		'\x2', '\x2', '\x296E', '\x501', '\x3', '\x2', '\x2', '\x2', '\x296F', 
		'\x296D', '\x3', '\x2', '\x2', '\x2', '\x2970', '\x2975', '\b', '\x282', 
		'\x1', '\x2', '\x2971', '\x2972', '\f', '\x3', '\x2', '\x2', '\x2972', 
		'\x2974', '\x5', '\x4FC', '\x27F', '\x2', '\x2973', '\x2971', '\x3', '\x2', 
		'\x2', '\x2', '\x2974', '\x2977', '\x3', '\x2', '\x2', '\x2', '\x2975', 
		'\x2973', '\x3', '\x2', '\x2', '\x2', '\x2975', '\x2976', '\x3', '\x2', 
		'\x2', '\x2', '\x2976', '\x503', '\x3', '\x2', '\x2', '\x2', '\x2977', 
		'\x2975', '\x3', '\x2', '\x2', '\x2', '\x2978', '\x297B', '\a', '(', '\x2', 
		'\x2', '\x2979', '\x297B', '\x3', '\x2', '\x2', '\x2', '\x297A', '\x2978', 
		'\x3', '\x2', '\x2', '\x2', '\x297A', '\x2979', '\x3', '\x2', '\x2', '\x2', 
		'\x297B', '\x505', '\x3', '\x2', '\x2', '\x2', '\x297C', '\x297F', '\x5', 
		'\x508', '\x285', '\x2', '\x297D', '\x297F', '\x3', '\x2', '\x2', '\x2', 
		'\x297E', '\x297C', '\x3', '\x2', '\x2', '\x2', '\x297E', '\x297D', '\x3', 
		'\x2', '\x2', '\x2', '\x297F', '\x507', '\x3', '\x2', '\x2', '\x2', '\x2980', 
		'\x2985', '\x5', '\x50A', '\x286', '\x2', '\x2981', '\x2982', '\a', '\b', 
		'\x2', '\x2', '\x2982', '\x2984', '\x5', '\x50A', '\x286', '\x2', '\x2983', 
		'\x2981', '\x3', '\x2', '\x2', '\x2', '\x2984', '\x2987', '\x3', '\x2', 
		'\x2', '\x2', '\x2985', '\x2983', '\x3', '\x2', '\x2', '\x2', '\x2985', 
		'\x2986', '\x3', '\x2', '\x2', '\x2', '\x2986', '\x509', '\x3', '\x2', 
		'\x2', '\x2', '\x2987', '\x2985', '\x3', '\x2', '\x2', '\x2', '\x2988', 
		'\x298D', '\x5', '\x484', '\x243', '\x2', '\x2989', '\x298A', '\a', '&', 
		'\x2', '\x2', '\x298A', '\x298E', '\x5', '\x538', '\x29D', '\x2', '\x298B', 
		'\x298E', '\x5', '\x53A', '\x29E', '\x2', '\x298C', '\x298E', '\x3', '\x2', 
		'\x2', '\x2', '\x298D', '\x2989', '\x3', '\x2', '\x2', '\x2', '\x298D', 
		'\x298B', '\x3', '\x2', '\x2', '\x2', '\x298D', '\x298C', '\x3', '\x2', 
		'\x2', '\x2', '\x298E', '\x2991', '\x3', '\x2', '\x2', '\x2', '\x298F', 
		'\x2991', '\a', '\v', '\x2', '\x2', '\x2990', '\x2988', '\x3', '\x2', 
		'\x2', '\x2', '\x2990', '\x298F', '\x3', '\x2', '\x2', '\x2', '\x2991', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x2992', '\x2993', '\b', '\x287', 
		'\x1', '\x2', '\x2993', '\x2994', '\x5', '\x50E', '\x288', '\x2', '\x2994', 
		'\x299A', '\x3', '\x2', '\x2', '\x2', '\x2995', '\x2996', '\f', '\x3', 
		'\x2', '\x2', '\x2996', '\x2997', '\a', '\b', '\x2', '\x2', '\x2997', 
		'\x2999', '\x5', '\x50E', '\x288', '\x2', '\x2998', '\x2995', '\x3', '\x2', 
		'\x2', '\x2', '\x2999', '\x299C', '\x3', '\x2', '\x2', '\x2', '\x299A', 
		'\x2998', '\x3', '\x2', '\x2', '\x2', '\x299A', '\x299B', '\x3', '\x2', 
		'\x2', '\x2', '\x299B', '\x50D', '\x3', '\x2', '\x2', '\x2', '\x299C', 
		'\x299A', '\x3', '\x2', '\x2', '\x2', '\x299D', '\x29A2', '\x5', '\x532', 
		'\x29A', '\x2', '\x299E', '\x299F', '\x5', '\x532', '\x29A', '\x2', '\x299F', 
		'\x29A0', '\x5', '\x500', '\x281', '\x2', '\x29A0', '\x29A2', '\x3', '\x2', 
		'\x2', '\x2', '\x29A1', '\x299D', '\x3', '\x2', '\x2', '\x2', '\x29A1', 
		'\x299E', '\x3', '\x2', '\x2', '\x2', '\x29A2', '\x50F', '\x3', '\x2', 
		'\x2', '\x2', '\x29A3', '\x29A4', '\b', '\x289', '\x1', '\x2', '\x29A4', 
		'\x29A5', '\x5', '\x512', '\x28A', '\x2', '\x29A5', '\x29AB', '\x3', '\x2', 
		'\x2', '\x2', '\x29A6', '\x29A7', '\f', '\x3', '\x2', '\x2', '\x29A7', 
		'\x29A8', '\a', '\b', '\x2', '\x2', '\x29A8', '\x29AA', '\x5', '\x512', 
		'\x28A', '\x2', '\x29A9', '\x29A6', '\x3', '\x2', '\x2', '\x2', '\x29AA', 
		'\x29AD', '\x3', '\x2', '\x2', '\x2', '\x29AB', '\x29A9', '\x3', '\x2', 
		'\x2', '\x2', '\x29AB', '\x29AC', '\x3', '\x2', '\x2', '\x2', '\x29AC', 
		'\x511', '\x3', '\x2', '\x2', '\x2', '\x29AD', '\x29AB', '\x3', '\x2', 
		'\x2', '\x2', '\x29AE', '\x29AF', '\x5', '\x532', '\x29A', '\x2', '\x29AF', 
		'\x513', '\x3', '\x2', '\x2', '\x2', '\x29B0', '\x29B1', '\x5', '\x538', 
		'\x29D', '\x2', '\x29B1', '\x515', '\x3', '\x2', '\x2', '\x2', '\x29B2', 
		'\x29B3', '\x5', '\x524', '\x293', '\x2', '\x29B3', '\x517', '\x3', '\x2', 
		'\x2', '\x2', '\x29B4', '\x29B9', '\x5', '\x534', '\x29B', '\x2', '\x29B5', 
		'\x29B6', '\x5', '\x532', '\x29A', '\x2', '\x29B6', '\x29B7', '\x5', '\x500', 
		'\x281', '\x2', '\x29B7', '\x29B9', '\x3', '\x2', '\x2', '\x2', '\x29B8', 
		'\x29B4', '\x3', '\x2', '\x2', '\x2', '\x29B8', '\x29B5', '\x3', '\x2', 
		'\x2', '\x2', '\x29B9', '\x519', '\x3', '\x2', '\x2', '\x2', '\x29BA', 
		'\x29DA', '\x5', '\x522', '\x292', '\x2', '\x29BB', '\x29DA', '\x5', '\x520', 
		'\x291', '\x2', '\x29BC', '\x29DA', '\x5', '\x524', '\x293', '\x2', '\x29BD', 
		'\x29DA', '\x5', '\x51E', '\x290', '\x2', '\x29BE', '\x29DA', '\x5', '\x51C', 
		'\x28F', '\x2', '\x29BF', '\x29C0', '\x5', '\x518', '\x28D', '\x2', '\x29C0', 
		'\x29C1', '\x5', '\x524', '\x293', '\x2', '\x29C1', '\x29DA', '\x3', '\x2', 
		'\x2', '\x2', '\x29C2', '\x29C3', '\x5', '\x518', '\x28D', '\x2', '\x29C3', 
		'\x29C4', '\a', '\x4', '\x2', '\x2', '\x29C4', '\x29C5', '\x5', '\x4D6', 
		'\x26C', '\x2', '\x29C5', '\x29C6', '\x5', '\x3E0', '\x1F1', '\x2', '\x29C6', 
		'\x29C7', '\a', '\x5', '\x2', '\x2', '\x29C7', '\x29C8', '\x5', '\x524', 
		'\x293', '\x2', '\x29C8', '\x29DA', '\x3', '\x2', '\x2', '\x2', '\x29C9', 
		'\x29CA', '\x5', '\x45E', '\x230', '\x2', '\x29CA', '\x29CB', '\x5', '\x524', 
		'\x293', '\x2', '\x29CB', '\x29DA', '\x3', '\x2', '\x2', '\x2', '\x29CC', 
		'\x29CD', '\x5', '\x47A', '\x23E', '\x2', '\x29CD', '\x29CE', '\x5', '\x524', 
		'\x293', '\x2', '\x29CE', '\x29CF', '\x5', '\x47E', '\x240', '\x2', '\x29CF', 
		'\x29DA', '\x3', '\x2', '\x2', '\x2', '\x29D0', '\x29D1', '\x5', '\x47A', 
		'\x23E', '\x2', '\x29D1', '\x29D2', '\a', '\x4', '\x2', '\x2', '\x29D2', 
		'\x29D3', '\x5', '\x522', '\x292', '\x2', '\x29D3', '\x29D4', '\a', '\x5', 
		'\x2', '\x2', '\x29D4', '\x29D5', '\x5', '\x524', '\x293', '\x2', '\x29D5', 
		'\x29DA', '\x3', '\x2', '\x2', '\x2', '\x29D6', '\x29DA', '\a', '\x62', 
		'\x2', '\x2', '\x29D7', '\x29DA', '\a', '>', '\x2', '\x2', '\x29D8', '\x29DA', 
		'\a', 'P', '\x2', '\x2', '\x29D9', '\x29BA', '\x3', '\x2', '\x2', '\x2', 
		'\x29D9', '\x29BB', '\x3', '\x2', '\x2', '\x2', '\x29D9', '\x29BC', '\x3', 
		'\x2', '\x2', '\x2', '\x29D9', '\x29BD', '\x3', '\x2', '\x2', '\x2', '\x29D9', 
		'\x29BE', '\x3', '\x2', '\x2', '\x2', '\x29D9', '\x29BF', '\x3', '\x2', 
		'\x2', '\x2', '\x29D9', '\x29C2', '\x3', '\x2', '\x2', '\x2', '\x29D9', 
		'\x29C9', '\x3', '\x2', '\x2', '\x2', '\x29D9', '\x29CC', '\x3', '\x2', 
		'\x2', '\x2', '\x29D9', '\x29D0', '\x3', '\x2', '\x2', '\x2', '\x29D9', 
		'\x29D6', '\x3', '\x2', '\x2', '\x2', '\x29D9', '\x29D7', '\x3', '\x2', 
		'\x2', '\x2', '\x29D9', '\x29D8', '\x3', '\x2', '\x2', '\x2', '\x29DA', 
		'\x51B', '\x3', '\x2', '\x2', '\x2', '\x29DB', '\x29DC', '\a', '\x215', 
		'\x2', '\x2', '\x29DC', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x29DD', 
		'\x29DE', '\a', '\x211', '\x2', '\x2', '\x29DE', '\x51F', '\x3', '\x2', 
		'\x2', '\x2', '\x29DF', '\x29E0', '\a', '\x21B', '\x2', '\x2', '\x29E0', 
		'\x521', '\x3', '\x2', '\x2', '\x2', '\x29E1', '\x29E2', '\a', '\x219', 
		'\x2', '\x2', '\x29E2', '\x523', '\x3', '\x2', '\x2', '\x2', '\x29E3', 
		'\x29E4', '\x5', '\x526', '\x294', '\x2', '\x29E4', '\x29E5', '\x5', '\x528', 
		'\x295', '\x2', '\x29E5', '\x525', '\x3', '\x2', '\x2', '\x2', '\x29E6', 
		'\x29F2', '\a', '\x20C', '\x2', '\x2', '\x29E7', '\x29F2', '\a', '\x20E', 
		'\x2', '\x2', '\x29E8', '\x29EC', '\a', '\x210', '\x2', '\x2', '\x29E9', 
		'\x29EB', '\a', '\x22C', '\x2', '\x2', '\x29EA', '\x29E9', '\x3', '\x2', 
		'\x2', '\x2', '\x29EB', '\x29EE', '\x3', '\x2', '\x2', '\x2', '\x29EC', 
		'\x29EA', '\x3', '\x2', '\x2', '\x2', '\x29EC', '\x29ED', '\x3', '\x2', 
		'\x2', '\x2', '\x29ED', '\x29EF', '\x3', '\x2', '\x2', '\x2', '\x29EE', 
		'\x29EC', '\x3', '\x2', '\x2', '\x2', '\x29EF', '\x29F2', '\a', '\x22D', 
		'\x2', '\x2', '\x29F0', '\x29F2', '\a', '\x226', '\x2', '\x2', '\x29F1', 
		'\x29E6', '\x3', '\x2', '\x2', '\x2', '\x29F1', '\x29E7', '\x3', '\x2', 
		'\x2', '\x2', '\x29F1', '\x29E8', '\x3', '\x2', '\x2', '\x2', '\x29F1', 
		'\x29F0', '\x3', '\x2', '\x2', '\x2', '\x29F2', '\x527', '\x3', '\x2', 
		'\x2', '\x2', '\x29F3', '\x29F4', '\a', '\x1E1', '\x2', '\x2', '\x29F4', 
		'\x29F7', '\x5', '\x526', '\x294', '\x2', '\x29F5', '\x29F7', '\x3', '\x2', 
		'\x2', '\x2', '\x29F6', '\x29F3', '\x3', '\x2', '\x2', '\x2', '\x29F6', 
		'\x29F5', '\x3', '\x2', '\x2', '\x2', '\x29F7', '\x529', '\x3', '\x2', 
		'\x2', '\x2', '\x29F8', '\x29FE', '\x5', '\x522', '\x292', '\x2', '\x29F9', 
		'\x29FA', '\a', '\xE', '\x2', '\x2', '\x29FA', '\x29FE', '\x5', '\x522', 
		'\x292', '\x2', '\x29FB', '\x29FC', '\a', '\xF', '\x2', '\x2', '\x29FC', 
		'\x29FE', '\x5', '\x522', '\x292', '\x2', '\x29FD', '\x29F8', '\x3', '\x2', 
		'\x2', '\x2', '\x29FD', '\x29F9', '\x3', '\x2', '\x2', '\x2', '\x29FD', 
		'\x29FB', '\x3', '\x2', '\x2', '\x2', '\x29FE', '\x52B', '\x3', '\x2', 
		'\x2', '\x2', '\x29FF', '\x2A00', '\x5', '\x52E', '\x298', '\x2', '\x2A00', 
		'\x52D', '\x3', '\x2', '\x2', '\x2', '\x2A01', '\x2A05', '\x5', '\x536', 
		'\x29C', '\x2', '\x2A02', '\x2A05', '\a', '\x36', '\x2', '\x2', '\x2A03', 
		'\x2A05', '\a', '[', '\x2', '\x2', '\x2A04', '\x2A01', '\x3', '\x2', '\x2', 
		'\x2', '\x2A04', '\x2A02', '\x3', '\x2', '\x2', '\x2', '\x2A04', '\x2A03', 
		'\x3', '\x2', '\x2', '\x2', '\x2A05', '\x52F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A06', '\x2A07', '\b', '\x299', '\x1', '\x2', '\x2A07', '\x2A08', '\x5', 
		'\x52E', '\x298', '\x2', '\x2A08', '\x2A0E', '\x3', '\x2', '\x2', '\x2', 
		'\x2A09', '\x2A0A', '\f', '\x3', '\x2', '\x2', '\x2A0A', '\x2A0B', '\a', 
		'\b', '\x2', '\x2', '\x2A0B', '\x2A0D', '\x5', '\x52E', '\x298', '\x2', 
		'\x2A0C', '\x2A09', '\x3', '\x2', '\x2', '\x2', '\x2A0D', '\x2A10', '\x3', 
		'\x2', '\x2', '\x2', '\x2A0E', '\x2A0C', '\x3', '\x2', '\x2', '\x2', '\x2A0E', 
		'\x2A0F', '\x3', '\x2', '\x2', '\x2', '\x2A0F', '\x531', '\x3', '\x2', 
		'\x2', '\x2', '\x2A10', '\x2A0E', '\x3', '\x2', '\x2', '\x2', '\x2A11', 
		'\x2A16', '\x5', '\x53A', '\x29E', '\x2', '\x2A12', '\x2A16', '\x5', '\x53E', 
		'\x2A0', '\x2', '\x2A13', '\x2A16', '\x5', '\x540', '\x2A1', '\x2', '\x2A14', 
		'\x2A16', '\x5', '\x61C', '\x30F', '\x2', '\x2A15', '\x2A11', '\x3', '\x2', 
		'\x2', '\x2', '\x2A15', '\x2A12', '\x3', '\x2', '\x2', '\x2', '\x2A15', 
		'\x2A13', '\x3', '\x2', '\x2', '\x2', '\x2A15', '\x2A14', '\x3', '\x2', 
		'\x2', '\x2', '\x2A16', '\x533', '\x3', '\x2', '\x2', '\x2', '\x2A17', 
		'\x2A1C', '\x5', '\x53A', '\x29E', '\x2', '\x2A18', '\x2A1C', '\x5', '\x53E', 
		'\x2A0', '\x2', '\x2A19', '\x2A1C', '\x5', '\x61C', '\x30F', '\x2', '\x2A1A', 
		'\x2A1C', '\x5', '\x542', '\x2A2', '\x2', '\x2A1B', '\x2A17', '\x3', '\x2', 
		'\x2', '\x2', '\x2A1B', '\x2A18', '\x3', '\x2', '\x2', '\x2', '\x2A1B', 
		'\x2A19', '\x3', '\x2', '\x2', '\x2', '\x2A1B', '\x2A1A', '\x3', '\x2', 
		'\x2', '\x2', '\x2A1C', '\x535', '\x3', '\x2', '\x2', '\x2', '\x2A1D', 
		'\x2A22', '\x5', '\x53A', '\x29E', '\x2', '\x2A1E', '\x2A22', '\x5', '\x53E', 
		'\x2A0', '\x2', '\x2A1F', '\x2A22', '\x5', '\x540', '\x2A1', '\x2', '\x2A20', 
		'\x2A22', '\x5', '\x542', '\x2A2', '\x2', '\x2A21', '\x2A1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2A21', '\x2A1E', '\x3', '\x2', '\x2', '\x2', '\x2A21', 
		'\x2A1F', '\x3', '\x2', '\x2', '\x2', '\x2A21', '\x2A20', '\x3', '\x2', 
		'\x2', '\x2', '\x2A22', '\x537', '\x3', '\x2', '\x2', '\x2', '\x2A23', 
		'\x2A2A', '\x5', '\x53A', '\x29E', '\x2', '\x2A24', '\x2A2A', '\x5', '\x61C', 
		'\x30F', '\x2', '\x2A25', '\x2A2A', '\x5', '\x53E', '\x2A0', '\x2', '\x2A26', 
		'\x2A2A', '\x5', '\x540', '\x2A1', '\x2', '\x2A27', '\x2A2A', '\x5', '\x542', 
		'\x2A2', '\x2', '\x2A28', '\x2A2A', '\x5', '\x544', '\x2A3', '\x2', '\x2A29', 
		'\x2A23', '\x3', '\x2', '\x2', '\x2', '\x2A29', '\x2A24', '\x3', '\x2', 
		'\x2', '\x2', '\x2A29', '\x2A25', '\x3', '\x2', '\x2', '\x2', '\x2A29', 
		'\x2A26', '\x3', '\x2', '\x2', '\x2', '\x2A29', '\x2A27', '\x3', '\x2', 
		'\x2', '\x2', '\x2A29', '\x2A28', '\x3', '\x2', '\x2', '\x2', '\x2A2A', 
		'\x539', '\x3', '\x2', '\x2', '\x2', '\x2A2B', '\x2A2C', '\a', '\x203', 
		'\x2', '\x2', '\x2A2C', '\x2A33', '\x5', '\x528', '\x295', '\x2', '\x2A2D', 
		'\x2A33', '\a', '\x204', '\x2', '\x2', '\x2A2E', '\x2A33', '\a', '\x208', 
		'\x2', '\x2', '\x2A2F', '\x2A33', '\x5', '\x48C', '\x247', '\x2', '\x2A30', 
		'\x2A33', '\x5', '\x53C', '\x29F', '\x2', '\x2A31', '\x2A33', '\x5', '\x61C', 
		'\x30F', '\x2', '\x2A32', '\x2A2B', '\x3', '\x2', '\x2', '\x2', '\x2A32', 
		'\x2A2D', '\x3', '\x2', '\x2', '\x2', '\x2A32', '\x2A2E', '\x3', '\x2', 
		'\x2', '\x2', '\x2A32', '\x2A2F', '\x3', '\x2', '\x2', '\x2', '\x2A32', 
		'\x2A30', '\x3', '\x2', '\x2', '\x2', '\x2A32', '\x2A31', '\x3', '\x2', 
		'\x2', '\x2', '\x2A33', '\x53B', '\x3', '\x2', '\x2', '\x2', '\x2A34', 
		'\x2A35', '\a', '\x21D', '\x2', '\x2', '\x2A35', '\x53D', '\x3', '\x2', 
		'\x2', '\x2', '\x2A36', '\x2A37', '\t', '\x1D', '\x2', '\x2', '\x2A37', 
		'\x53F', '\x3', '\x2', '\x2', '\x2', '\x2A38', '\x2A6C', '\a', '\x17C', 
		'\x2', '\x2', '\x2A39', '\x2A6C', '\a', '\x17D', '\x2', '\x2', '\x2A3A', 
		'\x2A6C', '\x5', '\x468', '\x235', '\x2', '\x2A3B', '\x2A6C', '\a', '\x17F', 
		'\x2', '\x2', '\x2A3C', '\x2A6C', '\a', '\x180', '\x2', '\x2', '\x2A3D', 
		'\x2A6C', '\x5', '\x470', '\x239', '\x2', '\x2A3E', '\x2A6C', '\a', '\x182', 
		'\x2', '\x2', '\x2A3F', '\x2A6C', '\a', '\x183', '\x2', '\x2', '\x2A40', 
		'\x2A6C', '\a', '\x184', '\x2', '\x2', '\x2A41', '\x2A6C', '\a', '\x185', 
		'\x2', '\x2', '\x2A42', '\x2A6C', '\a', '\x186', '\x2', '\x2', '\x2A43', 
		'\x2A6C', '\a', '\x187', '\x2', '\x2', '\x2A44', '\x2A6C', '\a', '\x188', 
		'\x2', '\x2', '\x2A45', '\x2A6C', '\a', '\x1D0', '\x2', '\x2', '\x2A46', 
		'\x2A6C', '\a', '\x189', '\x2', '\x2', '\x2A47', '\x2A6C', '\a', '\x18A', 
		'\x2', '\x2', '\x2A48', '\x2A6C', '\a', '\x18B', '\x2', '\x2', '\x2A49', 
		'\x2A6C', '\a', '\x18C', '\x2', '\x2', '\x2A4A', '\x2A6C', '\a', '\x18D', 
		'\x2', '\x2', '\x2A4B', '\x2A6C', '\a', '\x18E', '\x2', '\x2', '\x2A4C', 
		'\x2A6C', '\a', '\x18F', '\x2', '\x2', '\x2A4D', '\x2A6C', '\a', '\x190', 
		'\x2', '\x2', '\x2A4E', '\x2A6C', '\a', '\x1E3', '\x2', '\x2', '\x2A4F', 
		'\x2A6C', '\a', '\x191', '\x2', '\x2', '\x2A50', '\x2A6C', '\x5', '\x464', 
		'\x233', '\x2', '\x2A51', '\x2A6C', '\a', '\x1BF', '\x2', '\x2', '\x2A52', 
		'\x2A6C', '\a', '\x193', '\x2', '\x2', '\x2A53', '\x2A6C', '\a', '\x194', 
		'\x2', '\x2', '\x2A54', '\x2A6C', '\a', '\x195', '\x2', '\x2', '\x2A55', 
		'\x2A6C', '\a', '\x196', '\x2', '\x2', '\x2A56', '\x2A6C', '\a', '\x197', 
		'\x2', '\x2', '\x2A57', '\x2A6C', '\a', '\x198', '\x2', '\x2', '\x2A58', 
		'\x2A6C', '\a', '\x199', '\x2', '\x2', '\x2A59', '\x2A6C', '\a', '\x19A', 
		'\x2', '\x2', '\x2A5A', '\x2A6C', '\a', '\x19B', '\x2', '\x2', '\x2A5B', 
		'\x2A6C', '\a', '\x19C', '\x2', '\x2', '\x2A5C', '\x2A6C', '\a', '\x19D', 
		'\x2', '\x2', '\x2A5D', '\x2A6C', '\a', '\x19E', '\x2', '\x2', '\x2A5E', 
		'\x2A6C', '\a', '\x19F', '\x2', '\x2', '\x2A5F', '\x2A6C', '\a', '\x1A0', 
		'\x2', '\x2', '\x2A60', '\x2A6C', '\a', '\x1A1', '\x2', '\x2', '\x2A61', 
		'\x2A6C', '\a', '\x1A2', '\x2', '\x2', '\x2A62', '\x2A6C', '\a', '\x1A3', 
		'\x2', '\x2', '\x2A63', '\x2A6C', '\a', '\x1A4', '\x2', '\x2', '\x2A64', 
		'\x2A6C', '\a', '\x1A5', '\x2', '\x2', '\x2A65', '\x2A6C', '\a', '\x1D6', 
		'\x2', '\x2', '\x2A66', '\x2A6C', '\a', '\x1A6', '\x2', '\x2', '\x2A67', 
		'\x2A6C', '\a', '\x1A7', '\x2', '\x2', '\x2A68', '\x2A6C', '\a', '\x1A8', 
		'\x2', '\x2', '\x2A69', '\x2A6C', '\a', '\x1A9', '\x2', '\x2', '\x2A6A', 
		'\x2A6C', '\a', '\x1D4', '\x2', '\x2', '\x2A6B', '\x2A38', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A39', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A3A', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A3B', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A3C', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A3D', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A3E', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A3F', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A40', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A41', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A42', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A43', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A44', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A45', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A46', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A47', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A48', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A49', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A4A', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A4B', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A4C', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A4D', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A4E', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A4F', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A50', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A51', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A52', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A53', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A54', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A55', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A56', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A57', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A58', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A59', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A5A', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A5B', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A5C', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A5D', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A5E', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A5F', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A60', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A61', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A62', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A63', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A64', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A65', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A66', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A67', '\x3', '\x2', '\x2', '\x2', '\x2A6B', '\x2A68', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6B', '\x2A69', '\x3', '\x2', '\x2', '\x2', '\x2A6B', 
		'\x2A6A', '\x3', '\x2', '\x2', '\x2', '\x2A6C', '\x541', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6D', '\x2A6E', '\t', '\x1E', '\x2', '\x2', '\x2A6E', 
		'\x543', '\x3', '\x2', '\x2', '\x2', '\x2A6F', '\x2A70', '\t', '\x1F', 
		'\x2', '\x2', '\x2A70', '\x545', '\x3', '\x2', '\x2', '\x2', '\x2A71', 
		'\x2A72', '\x5', '\x548', '\x2A5', '\x2', '\x2A72', '\x2A73', '\x5', '\x552', 
		'\x2AA', '\x2', '\x2A73', '\x2A74', '\x5', '\x550', '\x2A9', '\x2', '\x2A74', 
		'\x547', '\x3', '\x2', '\x2', '\x2', '\x2A75', '\x2A7A', '\b', '\x2A5', 
		'\x1', '\x2', '\x2A76', '\x2A77', '\f', '\x3', '\x2', '\x2', '\x2A77', 
		'\x2A79', '\x5', '\x54A', '\x2A6', '\x2', '\x2A78', '\x2A76', '\x3', '\x2', 
		'\x2', '\x2', '\x2A79', '\x2A7C', '\x3', '\x2', '\x2', '\x2', '\x2A7A', 
		'\x2A78', '\x3', '\x2', '\x2', '\x2', '\x2A7A', '\x2A7B', '\x3', '\x2', 
		'\x2', '\x2', '\x2A7B', '\x549', '\x3', '\x2', '\x2', '\x2', '\x2A7C', 
		'\x2A7A', '\x3', '\x2', '\x2', '\x2', '\x2A7D', '\x2A7E', '\x5', '\x54C', 
		'\x2A7', '\x2', '\x2A7E', '\x2A7F', '\a', '\x110', '\x2', '\x2', '\x2A7F', 
		'\x2A80', '\a', '\x1E4', '\x2', '\x2', '\x2A80', '\x2A92', '\x3', '\x2', 
		'\x2', '\x2', '\x2A81', '\x2A82', '\x5', '\x54C', '\x2A7', '\x2', '\x2A82', 
		'\x2A83', '\a', '\x1E5', '\x2', '\x2', '\x2A83', '\x2A84', '\x5', '\x54E', 
		'\x2A8', '\x2', '\x2A84', '\x2A92', '\x3', '\x2', '\x2', '\x2', '\x2A85', 
		'\x2A86', '\x5', '\x54C', '\x2A7', '\x2', '\x2A86', '\x2A87', '\a', '\x1E6', 
		'\x2', '\x2', '\x2A87', '\x2A88', '\a', '\x1E7', '\x2', '\x2', '\x2A88', 
		'\x2A92', '\x3', '\x2', '\x2', '\x2', '\x2A89', '\x2A8A', '\x5', '\x54C', 
		'\x2A7', '\x2', '\x2A8A', '\x2A8B', '\a', '\x1E6', '\x2', '\x2', '\x2A8B', 
		'\x2A8C', '\a', '\x1E8', '\x2', '\x2', '\x2A8C', '\x2A92', '\x3', '\x2', 
		'\x2', '\x2', '\x2A8D', '\x2A8E', '\x5', '\x54C', '\x2A7', '\x2', '\x2A8E', 
		'\x2A8F', '\a', '\x1E6', '\x2', '\x2', '\x2A8F', '\x2A90', '\a', '\x1E9', 
		'\x2', '\x2', '\x2A90', '\x2A92', '\x3', '\x2', '\x2', '\x2', '\x2A91', 
		'\x2A7D', '\x3', '\x2', '\x2', '\x2', '\x2A91', '\x2A81', '\x3', '\x2', 
		'\x2', '\x2', '\x2A91', '\x2A85', '\x3', '\x2', '\x2', '\x2', '\x2A91', 
		'\x2A89', '\x3', '\x2', '\x2', '\x2', '\x2A91', '\x2A8D', '\x3', '\x2', 
		'\x2', '\x2', '\x2A92', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x2A93', 
		'\x2A94', '\a', '\x1F', '\x2', '\x2', '\x2A94', '\x54D', '\x3', '\x2', 
		'\x2', '\x2', '\x2A95', '\x2A9A', '\x5', '\x524', '\x293', '\x2', '\x2A96', 
		'\x2A9A', '\x5', '\x544', '\x2A3', '\x2', '\x2A97', '\x2A9A', '\x5', '\x61C', 
		'\x30F', '\x2', '\x2A98', '\x2A9A', '\x5', '\x53E', '\x2A0', '\x2', '\x2A99', 
		'\x2A95', '\x3', '\x2', '\x2', '\x2', '\x2A99', '\x2A96', '\x3', '\x2', 
		'\x2', '\x2', '\x2A99', '\x2A97', '\x3', '\x2', '\x2', '\x2', '\x2A99', 
		'\x2A98', '\x3', '\x2', '\x2', '\x2', '\x2A9A', '\x54F', '\x3', '\x2', 
		'\x2', '\x2', '\x2A9B', '\x2A9E', '\x3', '\x2', '\x2', '\x2', '\x2A9C', 
		'\x2A9E', '\a', '\t', '\x2', '\x2', '\x2A9D', '\x2A9B', '\x3', '\x2', 
		'\x2', '\x2', '\x2A9D', '\x2A9C', '\x3', '\x2', '\x2', '\x2', '\x2A9E', 
		'\x551', '\x3', '\x2', '\x2', '\x2', '\x2A9F', '\x2AA0', '\x5', '\x554', 
		'\x2AB', '\x2', '\x2AA0', '\x2AA1', '\a', '\x94', '\x2', '\x2', '\x2AA1', 
		'\x2AA2', '\x5', '\x57E', '\x2C0', '\x2', '\x2AA2', '\x2AA3', '\x5', '\x608', 
		'\x305', '\x2', '\x2AA3', '\x2AA4', '\a', '\x1C0', '\x2', '\x2', '\x2AA4', 
		'\x2AA5', '\x5', '\x616', '\x30C', '\x2', '\x2AA5', '\x553', '\x3', '\x2', 
		'\x2', '\x2', '\x2AA6', '\x2AAF', '\x5', '\x612', '\x30A', '\x2', '\x2AA7', 
		'\x2AA8', '\x5', '\x612', '\x30A', '\x2', '\x2AA8', '\x2AA9', '\x5', '\x556', 
		'\x2AC', '\x2', '\x2AA9', '\x2AAF', '\x3', '\x2', '\x2', '\x2', '\x2AAA', 
		'\x2AAB', '\x5', '\x612', '\x30A', '\x2', '\x2AAB', '\x2AAC', '\x5', '\x556', 
		'\x2AC', '\x2', '\x2AAC', '\x2AAD', '\x5', '\x558', '\x2AD', '\x2', '\x2AAD', 
		'\x2AAF', '\x3', '\x2', '\x2', '\x2', '\x2AAE', '\x2AA6', '\x3', '\x2', 
		'\x2', '\x2', '\x2AAE', '\x2AA7', '\x3', '\x2', '\x2', '\x2', '\x2AAE', 
		'\x2AAA', '\x3', '\x2', '\x2', '\x2', '\x2AAF', '\x555', '\x3', '\x2', 
		'\x2', '\x2', '\x2AB0', '\x2AB1', '\a', '\xB4', '\x2', '\x2', '\x2AB1', 
		'\x557', '\x3', '\x2', '\x2', '\x2', '\x2AB2', '\x2AB3', '\b', '\x2AD', 
		'\x1', '\x2', '\x2AB3', '\x2AB4', '\x5', '\x55C', '\x2AF', '\x2', '\x2AB4', 
		'\x2AB9', '\x3', '\x2', '\x2', '\x2', '\x2AB5', '\x2AB6', '\f', '\x4', 
		'\x2', '\x2', '\x2AB6', '\x2AB8', '\x5', '\x55C', '\x2AF', '\x2', '\x2AB7', 
		'\x2AB5', '\x3', '\x2', '\x2', '\x2', '\x2AB8', '\x2ABB', '\x3', '\x2', 
		'\x2', '\x2', '\x2AB9', '\x2AB7', '\x3', '\x2', '\x2', '\x2', '\x2AB9', 
		'\x2ABA', '\x3', '\x2', '\x2', '\x2', '\x2ABA', '\x559', '\x3', '\x2', 
		'\x2', '\x2', '\x2ABB', '\x2AB9', '\x3', '\x2', '\x2', '\x2', '\x2ABC', 
		'\x2ABD', '\a', '\x14', '\x2', '\x2', '\x2ABD', '\x2ABE', '\x5', '\x61A', 
		'\x30E', '\x2', '\x2ABE', '\x2ABF', '\a', '\x15', '\x2', '\x2', '\x2ABF', 
		'\x55B', '\x3', '\x2', '\x2', '\x2', '\x2AC0', '\x2AC4', '\x5', '\x55E', 
		'\x2B0', '\x2', '\x2AC1', '\x2AC4', '\a', '\xB4', '\x2', '\x2', '\x2AC2', 
		'\x2AC4', '\x5', '\x55A', '\x2AE', '\x2', '\x2AC3', '\x2AC0', '\x3', '\x2', 
		'\x2', '\x2', '\x2AC3', '\x2AC1', '\x3', '\x2', '\x2', '\x2', '\x2AC3', 
		'\x2AC2', '\x3', '\x2', '\x2', '\x2', '\x2AC4', '\x55D', '\x3', '\x2', 
		'\x2', '\x2', '\x2AC5', '\x2AC6', '\x5', '\x56E', '\x2B8', '\x2', '\x2AC6', 
		'\x2AC7', '\a', '\x1EA', '\x2', '\x2', '\x2AC7', '\x2AC8', '\a', '@', 
		'\x2', '\x2', '\x2AC8', '\x2AC9', '\x5', '\x56C', '\x2B7', '\x2', '\x2AC9', 
		'\x2ACA', '\a', '\t', '\x2', '\x2', '\x2ACA', '\x2ADC', '\x3', '\x2', 
		'\x2', '\x2', '\x2ACB', '\x2ACC', '\x5', '\x56E', '\x2B8', '\x2', '\x2ACC', 
		'\x2ACD', '\x5', '\x570', '\x2B9', '\x2', '\x2ACD', '\x2ACE', '\x5', '\x572', 
		'\x2BA', '\x2', '\x2ACE', '\x2ACF', '\x5', '\x574', '\x2BB', '\x2', '\x2ACF', 
		'\x2AD0', '\x5', '\x576', '\x2BC', '\x2', '\x2AD0', '\x2AD1', '\x5', '\x578', 
		'\x2BD', '\x2', '\x2AD1', '\x2AD2', '\a', '\t', '\x2', '\x2', '\x2AD2', 
		'\x2ADC', '\x3', '\x2', '\x2', '\x2', '\x2AD3', '\x2AD4', '\x5', '\x56E', 
		'\x2B8', '\x2', '\x2AD4', '\x2AD5', '\x5', '\x560', '\x2B1', '\x2', '\x2AD5', 
		'\x2AD6', '\a', '\xAE', '\x2', '\x2', '\x2AD6', '\x2AD7', '\x5', '\x564', 
		'\x2B3', '\x2', '\x2AD7', '\x2AD8', '\x5', '\x56A', '\x2B6', '\x2', '\x2AD8', 
		'\x2AD9', '\x5', '\x562', '\x2B2', '\x2', '\x2AD9', '\x2ADA', '\a', '\t', 
		'\x2', '\x2', '\x2ADA', '\x2ADC', '\x3', '\x2', '\x2', '\x2', '\x2ADB', 
		'\x2AC5', '\x3', '\x2', '\x2', '\x2', '\x2ADB', '\x2ACB', '\x3', '\x2', 
		'\x2', '\x2', '\x2ADB', '\x2AD3', '\x3', '\x2', '\x2', '\x2', '\x2ADC', 
		'\x55F', '\x3', '\x2', '\x2', '\x2', '\x2ADD', '\x2AE2', '\x3', '\x2', 
		'\x2', '\x2', '\x2ADE', '\x2ADF', '\a', '\x106', '\x2', '\x2', '\x2ADF', 
		'\x2AE2', '\a', '\x13D', '\x2', '\x2', '\x2AE0', '\x2AE2', '\a', '\x13D', 
		'\x2', '\x2', '\x2AE1', '\x2ADD', '\x3', '\x2', '\x2', '\x2', '\x2AE1', 
		'\x2ADE', '\x3', '\x2', '\x2', '\x2', '\x2AE1', '\x2AE0', '\x3', '\x2', 
		'\x2', '\x2', '\x2AE2', '\x561', '\x3', '\x2', '\x2', '\x2', '\x2AE3', 
		'\x2AE4', '\x5', '\x3BA', '\x1DE', '\x2', '\x2AE4', '\x563', '\x3', '\x2', 
		'\x2', '\x2', '\x2AE5', '\x2AEB', '\x3', '\x2', '\x2', '\x2', '\x2AE6', 
		'\x2AE7', '\a', '\x4', '\x2', '\x2', '\x2AE7', '\x2AE8', '\x5', '\x566', 
		'\x2B4', '\x2', '\x2AE8', '\x2AE9', '\a', '\x5', '\x2', '\x2', '\x2AE9', 
		'\x2AEB', '\x3', '\x2', '\x2', '\x2', '\x2AEA', '\x2AE5', '\x3', '\x2', 
		'\x2', '\x2', '\x2AEA', '\x2AE6', '\x3', '\x2', '\x2', '\x2', '\x2AEB', 
		'\x565', '\x3', '\x2', '\x2', '\x2', '\x2AEC', '\x2AED', '\b', '\x2B4', 
		'\x1', '\x2', '\x2AED', '\x2AEE', '\x5', '\x568', '\x2B5', '\x2', '\x2AEE', 
		'\x2AF4', '\x3', '\x2', '\x2', '\x2', '\x2AEF', '\x2AF0', '\f', '\x3', 
		'\x2', '\x2', '\x2AF0', '\x2AF1', '\a', '\b', '\x2', '\x2', '\x2AF1', 
		'\x2AF3', '\x5', '\x568', '\x2B5', '\x2', '\x2AF2', '\x2AEF', '\x3', '\x2', 
		'\x2', '\x2', '\x2AF3', '\x2AF6', '\x3', '\x2', '\x2', '\x2', '\x2AF4', 
		'\x2AF2', '\x3', '\x2', '\x2', '\x2', '\x2AF4', '\x2AF5', '\x3', '\x2', 
		'\x2', '\x2', '\x2AF5', '\x567', '\x3', '\x2', '\x2', '\x2', '\x2AF6', 
		'\x2AF4', '\x3', '\x2', '\x2', '\x2', '\x2AF7', '\x2AF8', '\x5', '\x56E', 
		'\x2B8', '\x2', '\x2AF8', '\x2AF9', '\x5', '\x572', '\x2BA', '\x2', '\x2AF9', 
		'\x569', '\x3', '\x2', '\x2', '\x2', '\x2AFA', '\x2AFB', '\t', ' ', '\x2', 
		'\x2', '\x2AFB', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x2AFC', '\x2AFF', 
		'\a', '\x1E', '\x2', '\x2', '\x2AFD', '\x2AFF', '\x5', '\x532', '\x29A', 
		'\x2', '\x2AFE', '\x2AFC', '\x3', '\x2', '\x2', '\x2', '\x2AFE', '\x2AFD', 
		'\x3', '\x2', '\x2', '\x2', '\x2AFF', '\x56D', '\x3', '\x2', '\x2', '\x2', 
		'\x2B00', '\x2B01', '\x5', '\x61A', '\x30E', '\x2', '\x2B01', '\x56F', 
		'\x3', '\x2', '\x2', '\x2', '\x2B02', '\x2B05', '\x3', '\x2', '\x2', '\x2', 
		'\x2B03', '\x2B05', '\a', '\x1EB', '\x2', '\x2', '\x2B04', '\x2B02', '\x3', 
		'\x2', '\x2', '\x2', '\x2B04', '\x2B03', '\x3', '\x2', '\x2', '\x2', '\x2B05', 
		'\x571', '\x3', '\x2', '\x2', '\x2', '\x2B06', '\x2B07', '\x5', '\x458', 
		'\x22D', '\x2', '\x2B07', '\x573', '\x3', '\x2', '\x2', '\x2', '\x2B08', 
		'\x2B0C', '\x3', '\x2', '\x2', '\x2', '\x2B09', '\x2B0A', '\a', '-', '\x2', 
		'\x2', '\x2B0A', '\x2B0C', '\x5', '\x20E', '\x108', '\x2', '\x2B0B', '\x2B08', 
		'\x3', '\x2', '\x2', '\x2', '\x2B0B', '\x2B09', '\x3', '\x2', '\x2', '\x2', 
		'\x2B0C', '\x575', '\x3', '\x2', '\x2', '\x2', '\x2B0D', '\x2B11', '\x3', 
		'\x2', '\x2', '\x2', '\x2B0E', '\x2B0F', '\a', 'O', '\x2', '\x2', '\x2B0F', 
		'\x2B11', '\a', 'P', '\x2', '\x2', '\x2B10', '\x2B0D', '\x3', '\x2', '\x2', 
		'\x2', '\x2B10', '\x2B0E', '\x3', '\x2', '\x2', '\x2', '\x2B11', '\x577', 
		'\x3', '\x2', '\x2', '\x2', '\x2B12', '\x2B17', '\x3', '\x2', '\x2', '\x2', 
		'\x2B13', '\x2B14', '\x5', '\x57A', '\x2BE', '\x2', '\x2B14', '\x2B15', 
		'\x5', '\x61E', '\x310', '\x2', '\x2B15', '\x2B17', '\x3', '\x2', '\x2', 
		'\x2', '\x2B16', '\x2B12', '\x3', '\x2', '\x2', '\x2', '\x2B16', '\x2B13', 
		'\x3', '\x2', '\x2', '\x2', '\x2B17', '\x579', '\x3', '\x2', '\x2', '\x2', 
		'\x2B18', '\x2B1B', '\x5', '\x57C', '\x2BF', '\x2', '\x2B19', '\x2B1B', 
		'\a', '\x37', '\x2', '\x2', '\x2B1A', '\x2B18', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1A', '\x2B19', '\x3', '\x2', '\x2', '\x2', '\x2B1B', '\x57B', '\x3', 
		'\x2', '\x2', '\x2', '\x2B1C', '\x2B1D', '\t', '!', '\x2', '\x2', '\x2B1D', 
		'\x57D', '\x3', '\x2', '\x2', '\x2', '\x2B1E', '\x2B23', '\b', '\x2C0', 
		'\x1', '\x2', '\x2B1F', '\x2B20', '\f', '\x3', '\x2', '\x2', '\x2B20', 
		'\x2B22', '\x5', '\x580', '\x2C1', '\x2', '\x2B21', '\x2B1F', '\x3', '\x2', 
		'\x2', '\x2', '\x2B22', '\x2B25', '\x3', '\x2', '\x2', '\x2', '\x2B23', 
		'\x2B21', '\x3', '\x2', '\x2', '\x2', '\x2B23', '\x2B24', '\x3', '\x2', 
		'\x2', '\x2', '\x2B24', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x2B25', 
		'\x2B23', '\x3', '\x2', '\x2', '\x2', '\x2B26', '\x2B27', '\x5', '\x552', 
		'\x2AA', '\x2', '\x2B27', '\x2B28', '\a', '\t', '\x2', '\x2', '\x2B28', 
		'\x2B42', '\x3', '\x2', '\x2', '\x2', '\x2B29', '\x2B42', '\x5', '\x5C2', 
		'\x2E2', '\x2', '\x2B2A', '\x2B42', '\x5', '\x5C6', '\x2E4', '\x2', '\x2B2B', 
		'\x2B42', '\x5', '\x588', '\x2C5', '\x2', '\x2B2C', '\x2B42', '\x5', '\x598', 
		'\x2CD', '\x2', '\x2B2D', '\x2B42', '\x5', '\x59E', '\x2D0', '\x2', '\x2B2E', 
		'\x2B42', '\x5', '\x5A8', '\x2D5', '\x2', '\x2B2F', '\x2B42', '\x5', '\x5AA', 
		'\x2D6', '\x2', '\x2B30', '\x2B42', '\x5', '\x5AC', '\x2D7', '\x2', '\x2B31', 
		'\x2B42', '\x5', '\x5BA', '\x2DE', '\x2', '\x2B32', '\x2B42', '\x5', '\x5BE', 
		'\x2E0', '\x2', '\x2B33', '\x2B42', '\x5', '\x5D2', '\x2EA', '\x2', '\x2B34', 
		'\x2B42', '\x5', '\x5D8', '\x2ED', '\x2', '\x2B35', '\x2B42', '\x5', '\x5DA', 
		'\x2EE', '\x2', '\x2B36', '\x2B42', '\x5', '\x582', '\x2C2', '\x2', '\x2B37', 
		'\x2B42', '\x5', '\x584', '\x2C3', '\x2', '\x2B38', '\x2B42', '\x5', '\x58A', 
		'\x2C6', '\x2', '\x2B39', '\x2B42', '\x5', '\x5E2', '\x2F2', '\x2', '\x2B3A', 
		'\x2B42', '\x5', '\x5F0', '\x2F9', '\x2', '\x2B3B', '\x2B42', '\x5', '\x5F8', 
		'\x2FD', '\x2', '\x2B3C', '\x2B42', '\x5', '\x5FA', '\x2FE', '\x2', '\x2B3D', 
		'\x2B42', '\x5', '\x5FC', '\x2FF', '\x2', '\x2B3E', '\x2B42', '\x5', '\x5FE', 
		'\x300', '\x2', '\x2B3F', '\x2B42', '\x5', '\x600', '\x301', '\x2', '\x2B40', 
		'\x2B42', '\x5', '\x604', '\x303', '\x2', '\x2B41', '\x2B26', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B29', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B2A', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B2B', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B2C', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B2D', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B2E', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B2F', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B30', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B31', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B32', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B33', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B34', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B35', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B36', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B37', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B38', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B39', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B3A', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B3B', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B3C', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B3D', '\x3', '\x2', 
		'\x2', '\x2', '\x2B41', '\x2B3E', '\x3', '\x2', '\x2', '\x2', '\x2B41', 
		'\x2B3F', '\x3', '\x2', '\x2', '\x2', '\x2B41', '\x2B40', '\x3', '\x2', 
		'\x2', '\x2', '\x2B42', '\x581', '\x3', '\x2', '\x2', '\x2', '\x2B43', 
		'\x2B44', '\a', '\x1EC', '\x2', '\x2', '\x2B44', '\x2B45', '\x5', '\x622', 
		'\x312', '\x2', '\x2B45', '\x2B46', '\a', '\t', '\x2', '\x2', '\x2B46', 
		'\x583', '\x3', '\x2', '\x2', '\x2', '\x2B47', '\x2B48', '\a', '\x1AA', 
		'\x2', '\x2', '\x2B48', '\x2B49', '\x5', '\x61A', '\x30E', '\x2', '\x2B49', 
		'\x2B4A', '\a', '\x4', '\x2', '\x2', '\x2B4A', '\x2B4B', '\x5', '\x586', 
		'\x2C4', '\x2', '\x2B4B', '\x2B4C', '\a', '\x5', '\x2', '\x2', '\x2B4C', 
		'\x2B4D', '\a', '\t', '\x2', '\x2', '\x2B4D', '\x2B56', '\x3', '\x2', 
		'\x2', '\x2', '\x2B4E', '\x2B4F', '\a', ';', '\x2', '\x2', '\x2B4F', '\x2B50', 
		'\x5', '\x61A', '\x30E', '\x2', '\x2B50', '\x2B51', '\a', '\x4', '\x2', 
		'\x2', '\x2B51', '\x2B52', '\x5', '\x586', '\x2C4', '\x2', '\x2B52', '\x2B53', 
		'\a', '\x5', '\x2', '\x2', '\x2B53', '\x2B54', '\a', '\t', '\x2', '\x2', 
		'\x2B54', '\x2B56', '\x3', '\x2', '\x2', '\x2', '\x2B55', '\x2B47', '\x3', 
		'\x2', '\x2', '\x2', '\x2B55', '\x2B4E', '\x3', '\x2', '\x2', '\x2', '\x2B56', 
		'\x585', '\x3', '\x2', '\x2', '\x2', '\x2B57', '\x2B5A', '\x3', '\x2', 
		'\x2', '\x2', '\x2B58', '\x2B5A', '\x5', '\x4D4', '\x26B', '\x2', '\x2B59', 
		'\x2B57', '\x3', '\x2', '\x2', '\x2', '\x2B59', '\x2B58', '\x3', '\x2', 
		'\x2', '\x2', '\x2B5A', '\x587', '\x3', '\x2', '\x2', '\x2', '\x2B5B', 
		'\x2B5C', '\x5', '\x596', '\x2CC', '\x2', '\x2B5C', '\x2B5D', '\x5', '\x57C', 
		'\x2BF', '\x2', '\x2B5D', '\x2B5E', '\x5', '\x61E', '\x310', '\x2', '\x2B5E', 
		'\x2B5F', '\a', '\t', '\x2', '\x2', '\x2B5F', '\x589', '\x3', '\x2', '\x2', 
		'\x2', '\x2B60', '\x2B61', '\a', '\x1ED', '\x2', '\x2', '\x2B61', '\x2B62', 
		'\x5', '\x58C', '\x2C7', '\x2', '\x2B62', '\x2B63', '\a', '\x1EE', '\x2', 
		'\x2', '\x2B63', '\x2B64', '\x5', '\x58E', '\x2C8', '\x2', '\x2B64', '\x2B65', 
		'\a', '\t', '\x2', '\x2', '\x2B65', '\x58B', '\x3', '\x2', '\x2', '\x2', 
		'\x2B66', '\x2B6A', '\x3', '\x2', '\x2', '\x2', '\x2B67', '\x2B6A', '\a', 
		'\x1AB', '\x2', '\x2', '\x2B68', '\x2B6A', '\a', '\x1EF', '\x2', '\x2', 
		'\x2B69', '\x2B66', '\x3', '\x2', '\x2', '\x2', '\x2B69', '\x2B67', '\x3', 
		'\x2', '\x2', '\x2', '\x2B69', '\x2B68', '\x3', '\x2', '\x2', '\x2', '\x2B6A', 
		'\x58D', '\x3', '\x2', '\x2', '\x2', '\x2B6B', '\x2B6C', '\b', '\x2C8', 
		'\x1', '\x2', '\x2B6C', '\x2B6D', '\x5', '\x590', '\x2C9', '\x2', '\x2B6D', 
		'\x2B73', '\x3', '\x2', '\x2', '\x2', '\x2B6E', '\x2B6F', '\f', '\x4', 
		'\x2', '\x2', '\x2B6F', '\x2B70', '\a', '\b', '\x2', '\x2', '\x2B70', 
		'\x2B72', '\x5', '\x590', '\x2C9', '\x2', '\x2B71', '\x2B6E', '\x3', '\x2', 
		'\x2', '\x2', '\x2B72', '\x2B75', '\x3', '\x2', '\x2', '\x2', '\x2B73', 
		'\x2B71', '\x3', '\x2', '\x2', '\x2', '\x2B73', '\x2B74', '\x3', '\x2', 
		'\x2', '\x2', '\x2B74', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x2B75', 
		'\x2B73', '\x3', '\x2', '\x2', '\x2', '\x2B76', '\x2B77', '\x5', '\x594', 
		'\x2CB', '\x2', '\x2B77', '\x2B78', '\x5', '\x57C', '\x2BF', '\x2', '\x2B78', 
		'\x2B79', '\x5', '\x592', '\x2CA', '\x2', '\x2B79', '\x591', '\x3', '\x2', 
		'\x2', '\x2', '\x2B7A', '\x2B7B', '\x5', '\x532', '\x29A', '\x2', '\x2B7B', 
		'\x593', '\x3', '\x2', '\x2', '\x2', '\x2B7C', '\x2B7D', '\x5', '\x596', 
		'\x2CC', '\x2', '\x2B7D', '\x595', '\x3', '\x2', '\x2', '\x2', '\x2B7E', 
		'\x2B7F', '\b', '\x2CC', '\x1', '\x2', '\x2B7F', '\x2B82', '\x5', '\x20E', 
		'\x108', '\x2', '\x2B80', '\x2B82', '\a', '\x1E', '\x2', '\x2', '\x2B81', 
		'\x2B7E', '\x3', '\x2', '\x2', '\x2', '\x2B81', '\x2B80', '\x3', '\x2', 
		'\x2', '\x2', '\x2B82', '\x2B8A', '\x3', '\x2', '\x2', '\x2', '\x2B83', 
		'\x2B84', '\f', '\x3', '\x2', '\x2', '\x2B84', '\x2B85', '\a', '\x6', 
		'\x2', '\x2', '\x2B85', '\x2B86', '\x5', '\x624', '\x313', '\x2', '\x2B86', 
		'\x2B87', '\a', '\a', '\x2', '\x2', '\x2B87', '\x2B89', '\x3', '\x2', 
		'\x2', '\x2', '\x2B88', '\x2B83', '\x3', '\x2', '\x2', '\x2', '\x2B89', 
		'\x2B8C', '\x3', '\x2', '\x2', '\x2', '\x2B8A', '\x2B88', '\x3', '\x2', 
		'\x2', '\x2', '\x2B8A', '\x2B8B', '\x3', '\x2', '\x2', '\x2', '\x2B8B', 
		'\x597', '\x3', '\x2', '\x2', '\x2', '\x2B8C', '\x2B8A', '\x3', '\x2', 
		'\x2', '\x2', '\x2B8D', '\x2B8E', '\a', '\xDE', '\x2', '\x2', '\x2B8E', 
		'\x2B8F', '\x5', '\x620', '\x311', '\x2', '\x2B8F', '\x2B90', '\a', '_', 
		'\x2', '\x2', '\x2B90', '\x2B91', '\x5', '\x57E', '\x2C0', '\x2', '\x2B91', 
		'\x2B92', '\x5', '\x59A', '\x2CE', '\x2', '\x2B92', '\x2B93', '\x5', '\x59C', 
		'\x2CF', '\x2', '\x2B93', '\x2B94', '\a', '\x1C0', '\x2', '\x2', '\x2B94', 
		'\x2B95', '\a', '\xDE', '\x2', '\x2', '\x2B95', '\x2B96', '\a', '\t', 
		'\x2', '\x2', '\x2B96', '\x599', '\x3', '\x2', '\x2', '\x2', '\x2B97', 
		'\x2BA0', '\b', '\x2CE', '\x1', '\x2', '\x2B98', '\x2B99', '\f', '\x3', 
		'\x2', '\x2', '\x2B99', '\x2B9A', '\a', '\x1F0', '\x2', '\x2', '\x2B9A', 
		'\x2B9B', '\x5', '\x484', '\x243', '\x2', '\x2B9B', '\x2B9C', '\a', '_', 
		'\x2', '\x2', '\x2B9C', '\x2B9D', '\x5', '\x57E', '\x2C0', '\x2', '\x2B9D', 
		'\x2B9F', '\x3', '\x2', '\x2', '\x2', '\x2B9E', '\x2B98', '\x3', '\x2', 
		'\x2', '\x2', '\x2B9F', '\x2BA2', '\x3', '\x2', '\x2', '\x2', '\x2BA0', 
		'\x2B9E', '\x3', '\x2', '\x2', '\x2', '\x2BA0', '\x2BA1', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA1', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x2BA2', 
		'\x2BA0', '\x3', '\x2', '\x2', '\x2', '\x2BA3', '\x2BA7', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA4', '\x2BA5', '\a', '<', '\x2', '\x2', '\x2BA5', '\x2BA7', 
		'\x5', '\x57E', '\x2C0', '\x2', '\x2BA6', '\x2BA3', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA6', '\x2BA4', '\x3', '\x2', '\x2', '\x2', '\x2BA7', '\x59D', 
		'\x3', '\x2', '\x2', '\x2', '\x2BA8', '\x2BA9', '\a', '*', '\x2', '\x2', 
		'\x2BA9', '\x2BAA', '\x5', '\x5A0', '\x2D1', '\x2', '\x2BAA', '\x2BAB', 
		'\x5', '\x5A2', '\x2D2', '\x2', '\x2BAB', '\x2BAC', '\x5', '\x5A6', '\x2D4', 
		'\x2', '\x2BAC', '\x2BAD', '\a', '\x1C0', '\x2', '\x2', '\x2BAD', '\x2BAE', 
		'\a', '*', '\x2', '\x2', '\x2BAE', '\x2BAF', '\a', '\t', '\x2', '\x2', 
		'\x2BAF', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x2BB0', '\x2BB3', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB1', '\x2BB3', '\x5', '\x61E', '\x310', '\x2', 
		'\x2BB2', '\x2BB0', '\x3', '\x2', '\x2', '\x2', '\x2BB2', '\x2BB1', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB3', '\x5A1', '\x3', '\x2', '\x2', '\x2', '\x2BB4', 
		'\x2BB5', '\b', '\x2D2', '\x1', '\x2', '\x2BB5', '\x2BB6', '\x5', '\x5A4', 
		'\x2D3', '\x2', '\x2BB6', '\x2BBB', '\x3', '\x2', '\x2', '\x2', '\x2BB7', 
		'\x2BB8', '\f', '\x4', '\x2', '\x2', '\x2BB8', '\x2BBA', '\x5', '\x5A4', 
		'\x2D3', '\x2', '\x2BB9', '\x2BB7', '\x3', '\x2', '\x2', '\x2', '\x2BBA', 
		'\x2BBD', '\x3', '\x2', '\x2', '\x2', '\x2BBB', '\x2BB9', '\x3', '\x2', 
		'\x2', '\x2', '\x2BBB', '\x2BBC', '\x3', '\x2', '\x2', '\x2', '\x2BBC', 
		'\x5A3', '\x3', '\x2', '\x2', '\x2', '\x2BBD', '\x2BBB', '\x3', '\x2', 
		'\x2', '\x2', '\x2BBE', '\x2BBF', '\a', 'h', '\x2', '\x2', '\x2BBF', '\x2BC0', 
		'\x5', '\x4D4', '\x26B', '\x2', '\x2BC0', '\x2BC1', '\a', '_', '\x2', 
		'\x2', '\x2BC1', '\x2BC2', '\x5', '\x57E', '\x2C0', '\x2', '\x2BC2', '\x5A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC3', '\x2BC7', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC4', '\x2BC5', '\a', '<', '\x2', '\x2', '\x2BC5', '\x2BC7', '\x5', 
		'\x57E', '\x2C0', '\x2', '\x2BC6', '\x2BC3', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC6', '\x2BC4', '\x3', '\x2', '\x2', '\x2', '\x2BC7', '\x5A7', '\x3', 
		'\x2', '\x2', '\x2', '\x2BC8', '\x2BC9', '\x5', '\x614', '\x30B', '\x2', 
		'\x2BC9', '\x2BCA', '\x5', '\x5D6', '\x2EC', '\x2', '\x2BCA', '\x5A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2BCB', '\x2BCC', '\x5', '\x614', '\x30B', 
		'\x2', '\x2BCC', '\x2BCD', '\a', '\x1F1', '\x2', '\x2', '\x2BCD', '\x2BCE', 
		'\x5', '\x626', '\x314', '\x2', '\x2BCE', '\x2BCF', '\x5', '\x5D6', '\x2EC', 
		'\x2', '\x2BCF', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\x2BD0', '\x2BD1', 
		'\x5', '\x614', '\x30B', '\x2', '\x2BD1', '\x2BD2', '\a', '@', '\x2', 
		'\x2', '\x2BD2', '\x2BD3', '\x5', '\x5AE', '\x2D8', '\x2', '\x2BD3', '\x2BD4', 
		'\x5', '\x5D6', '\x2EC', '\x2', '\x2BD4', '\x5AD', '\x3', '\x2', '\x2', 
		'\x2', '\x2BD5', '\x2BD6', '\x5', '\x5B8', '\x2DD', '\x2', '\x2BD6', '\x2BD7', 
		'\a', '\x46', '\x2', '\x2', '\x2BD7', '\x2BD8', '\x5', '\x5B4', '\x2DB', 
		'\x2', '\x2BD8', '\x2BD9', '\x5', '\x484', '\x243', '\x2', '\x2BD9', '\x2BDA', 
		'\a', '\x1A', '\x2', '\x2', '\x2BDA', '\x2BDB', '\x5', '\x484', '\x243', 
		'\x2', '\x2BDB', '\x2BDC', '\x5', '\x5B6', '\x2DC', '\x2', '\x2BDC', '\x2BF1', 
		'\x3', '\x2', '\x2', '\x2', '\x2BDD', '\x2BDE', '\x5', '\x5B8', '\x2DD', 
		'\x2', '\x2BDE', '\x2BDF', '\a', '\x46', '\x2', '\x2', '\x2BDF', '\x2BE0', 
		'\x5', '\x3B4', '\x1DB', '\x2', '\x2BE0', '\x2BE1', '\x5', '\x5B2', '\x2DA', 
		'\x2', '\x2BE1', '\x2BF1', '\x3', '\x2', '\x2', '\x2', '\x2BE2', '\x2BE3', 
		'\x5', '\x5B8', '\x2DD', '\x2', '\x2BE3', '\x2BE4', '\a', '\x46', '\x2', 
		'\x2', '\x2BE4', '\x2BE5', '\x5', '\x3BA', '\x1DE', '\x2', '\x2BE5', '\x2BF1', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE6', '\x2BE7', '\x5', '\x5B8', '\x2DD', 
		'\x2', '\x2BE7', '\x2BE8', '\a', '\x46', '\x2', '\x2', '\x2BE8', '\x2BE9', 
		'\a', '\xCC', '\x2', '\x2', '\x2BE9', '\x2BEA', '\x5', '\x484', '\x243', 
		'\x2', '\x2BEA', '\x2BEB', '\x5', '\x5B0', '\x2D9', '\x2', '\x2BEB', '\x2BF1', 
		'\x3', '\x2', '\x2', '\x2', '\x2BEC', '\x2BED', '\x5', '\x5B8', '\x2DD', 
		'\x2', '\x2BED', '\x2BEE', '\a', '\x46', '\x2', '\x2', '\x2BEE', '\x2BEF', 
		'\x5', '\x370', '\x1B9', '\x2', '\x2BEF', '\x2BF1', '\x3', '\x2', '\x2', 
		'\x2', '\x2BF0', '\x2BD5', '\x3', '\x2', '\x2', '\x2', '\x2BF0', '\x2BDD', 
		'\x3', '\x2', '\x2', '\x2', '\x2BF0', '\x2BE2', '\x3', '\x2', '\x2', '\x2', 
		'\x2BF0', '\x2BE6', '\x3', '\x2', '\x2', '\x2', '\x2BF0', '\x2BEC', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF1', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x2BF2', 
		'\x2BF6', '\x3', '\x2', '\x2', '\x2', '\x2BF3', '\x2BF4', '\a', '\x66', 
		'\x2', '\x2', '\x2BF4', '\x2BF6', '\x5', '\x4D4', '\x26B', '\x2', '\x2BF5', 
		'\x2BF2', '\x3', '\x2', '\x2', '\x2', '\x2BF5', '\x2BF3', '\x3', '\x2', 
		'\x2', '\x2', '\x2BF6', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x2BF7', 
		'\x2C04', '\x3', '\x2', '\x2', '\x2', '\x2BF8', '\x2BF9', '\a', '\x4', 
		'\x2', '\x2', '\x2BF9', '\x2BFE', '\x5', '\x484', '\x243', '\x2', '\x2BFA', 
		'\x2BFB', '\a', '\b', '\x2', '\x2', '\x2BFB', '\x2BFD', '\x5', '\x484', 
		'\x243', '\x2', '\x2BFC', '\x2BFA', '\x3', '\x2', '\x2', '\x2', '\x2BFD', 
		'\x2C00', '\x3', '\x2', '\x2', '\x2', '\x2BFE', '\x2BFC', '\x3', '\x2', 
		'\x2', '\x2', '\x2BFE', '\x2BFF', '\x3', '\x2', '\x2', '\x2', '\x2BFF', 
		'\x2C01', '\x3', '\x2', '\x2', '\x2', '\x2C00', '\x2BFE', '\x3', '\x2', 
		'\x2', '\x2', '\x2C01', '\x2C02', '\a', '\x5', '\x2', '\x2', '\x2C02', 
		'\x2C04', '\x3', '\x2', '\x2', '\x2', '\x2C03', '\x2BF7', '\x3', '\x2', 
		'\x2', '\x2', '\x2C03', '\x2BF8', '\x3', '\x2', '\x2', '\x2', '\x2C04', 
		'\x5B3', '\x3', '\x2', '\x2', '\x2', '\x2C05', '\x2C08', '\x3', '\x2', 
		'\x2', '\x2', '\x2C06', '\x2C08', '\a', '\x1F2', '\x2', '\x2', '\x2C07', 
		'\x2C05', '\x3', '\x2', '\x2', '\x2', '\x2C07', '\x2C06', '\x3', '\x2', 
		'\x2', '\x2', '\x2C08', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x2C09', 
		'\x2C0D', '\x3', '\x2', '\x2', '\x2', '\x2C0A', '\x2C0B', '\a', '\x95', 
		'\x2', '\x2', '\x2C0B', '\x2C0D', '\x5', '\x484', '\x243', '\x2', '\x2C0C', 
		'\x2C09', '\x3', '\x2', '\x2', '\x2', '\x2C0C', '\x2C0A', '\x3', '\x2', 
		'\x2', '\x2', '\x2C0D', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x2C0E', 
		'\x2C0F', '\x5', '\x20C', '\x107', '\x2', '\x2C0F', '\x5B9', '\x3', '\x2', 
		'\x2', '\x2', '\x2C10', '\x2C11', '\x5', '\x614', '\x30B', '\x2', '\x2C11', 
		'\x2C12', '\a', '\x1F3', '\x2', '\x2', '\x2C12', '\x2C13', '\x5', '\x5B8', 
		'\x2DD', '\x2', '\x2C13', '\x2C14', '\x5', '\x5BC', '\x2DF', '\x2', '\x2C14', 
		'\x2C15', '\a', '\x46', '\x2', '\x2', '\x2C15', '\x2C16', '\a', '%', '\x2', 
		'\x2', '\x2C16', '\x2C17', '\x5', '\x484', '\x243', '\x2', '\x2C17', '\x2C18', 
		'\x5', '\x5D6', '\x2EC', '\x2', '\x2C18', '\x5BB', '\x3', '\x2', '\x2', 
		'\x2', '\x2C19', '\x2C1D', '\x3', '\x2', '\x2', '\x2', '\x2C1A', '\x2C1B', 
		'\a', '\x1F4', '\x2', '\x2', '\x2C1B', '\x2C1D', '\x5', '\x522', '\x292', 
		'\x2', '\x2C1C', '\x2C19', '\x3', '\x2', '\x2', '\x2', '\x2C1C', '\x2C1A', 
		'\x3', '\x2', '\x2', '\x2', '\x2C1D', '\x5BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1E', '\x2C1F', '\x5', '\x5C0', '\x2E1', '\x2', '\x2C1F', '\x2C20', 
		'\x5', '\x616', '\x30C', '\x2', '\x2C20', '\x2C21', '\x5', '\x618', '\x30D', 
		'\x2', '\x2C21', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\x2C22', '\x2C23', 
		'\t', '\"', '\x2', '\x2', '\x2C23', '\x5C1', '\x3', '\x2', '\x2', '\x2', 
		'\x2C24', '\x2C25', '\a', '\x1F6', '\x2', '\x2', '\x2C25', '\x2C26', '\a', 
		'\x105', '\x2', '\x2', '\x2C26', '\x2C27', '\x5', '\x61E', '\x310', '\x2', 
		'\x2C27', '\x2C28', '\a', '\t', '\x2', '\x2', '\x2C28', '\x2C3A', '\x3', 
		'\x2', '\x2', '\x2', '\x2C29', '\x2C2A', '\a', '\x1F6', '\x2', '\x2', 
		'\x2C2A', '\x2C2B', '\a', '\x1F7', '\x2', '\x2', '\x2C2B', '\x2C2C', '\a', 
		'\xCC', '\x2', '\x2', '\x2C2C', '\x2C2D', '\x5', '\x484', '\x243', '\x2', 
		'\x2C2D', '\x2C2E', '\x5', '\x5B0', '\x2D9', '\x2', '\x2C2E', '\x2C2F', 
		'\a', '\t', '\x2', '\x2', '\x2C2F', '\x2C3A', '\x3', '\x2', '\x2', '\x2', 
		'\x2C30', '\x2C31', '\a', '\x1F6', '\x2', '\x2', '\x2C31', '\x2C32', '\a', 
		'\x1F7', '\x2', '\x2', '\x2C32', '\x2C33', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x2C33', '\x2C34', '\a', '\t', '\x2', '\x2', '\x2C34', '\x2C3A', '\x3', 
		'\x2', '\x2', '\x2', '\x2C35', '\x2C36', '\a', '\x1F6', '\x2', '\x2', 
		'\x2C36', '\x2C37', '\x5', '\x5C4', '\x2E3', '\x2', '\x2C37', '\x2C38', 
		'\a', '\t', '\x2', '\x2', '\x2C38', '\x2C3A', '\x3', '\x2', '\x2', '\x2', 
		'\x2C39', '\x2C24', '\x3', '\x2', '\x2', '\x2', '\x2C39', '\x2C29', '\x3', 
		'\x2', '\x2', '\x2', '\x2C39', '\x2C30', '\x3', '\x2', '\x2', '\x2', '\x2C39', 
		'\x2C35', '\x3', '\x2', '\x2', '\x2', '\x2C3A', '\x5C3', '\x3', '\x2', 
		'\x2', '\x2', '\x2C3B', '\x2C3E', '\x3', '\x2', '\x2', '\x2', '\x2C3C', 
		'\x2C3E', '\x5', '\x61E', '\x310', '\x2', '\x2C3D', '\x2C3B', '\x3', '\x2', 
		'\x2', '\x2', '\x2C3D', '\x2C3C', '\x3', '\x2', '\x2', '\x2', '\x2C3E', 
		'\x5C5', '\x3', '\x2', '\x2', '\x2', '\x2C3F', '\x2C40', '\a', '\x1F8', 
		'\x2', '\x2', '\x2C40', '\x2C41', '\x5', '\x5C8', '\x2E5', '\x2', '\x2C41', 
		'\x2C42', '\x5', '\x524', '\x293', '\x2', '\x2C42', '\x2C43', '\x5', '\x5CA', 
		'\x2E6', '\x2', '\x2C43', '\x2C44', '\x5', '\x5CC', '\x2E7', '\x2', '\x2C44', 
		'\x2C45', '\a', '\t', '\x2', '\x2', '\x2C45', '\x2C5A', '\x3', '\x2', 
		'\x2', '\x2', '\x2C46', '\x2C47', '\a', '\x1F8', '\x2', '\x2', '\x2C47', 
		'\x2C48', '\x5', '\x5C8', '\x2E5', '\x2', '\x2C48', '\x2C49', '\x5', '\x53A', 
		'\x29E', '\x2', '\x2C49', '\x2C4A', '\x5', '\x5CC', '\x2E7', '\x2', '\x2C4A', 
		'\x2C4B', '\a', '\t', '\x2', '\x2', '\x2C4B', '\x2C5A', '\x3', '\x2', 
		'\x2', '\x2', '\x2C4C', '\x2C4D', '\a', '\x1F8', '\x2', '\x2', '\x2C4D', 
		'\x2C4E', '\x5', '\x5C8', '\x2E5', '\x2', '\x2C4E', '\x2C4F', '\a', '\x1F9', 
		'\x2', '\x2', '\x2C4F', '\x2C50', '\x5', '\x524', '\x293', '\x2', '\x2C50', 
		'\x2C51', '\x5', '\x5CC', '\x2E7', '\x2', '\x2C51', '\x2C52', '\a', '\t', 
		'\x2', '\x2', '\x2C52', '\x2C5A', '\x3', '\x2', '\x2', '\x2', '\x2C53', 
		'\x2C54', '\a', '\x1F8', '\x2', '\x2', '\x2C54', '\x2C55', '\x5', '\x5C8', 
		'\x2E5', '\x2', '\x2C55', '\x2C56', '\x5', '\x5CC', '\x2E7', '\x2', '\x2C56', 
		'\x2C57', '\a', '\t', '\x2', '\x2', '\x2C57', '\x2C5A', '\x3', '\x2', 
		'\x2', '\x2', '\x2C58', '\x2C5A', '\a', '\x1F8', '\x2', '\x2', '\x2C59', 
		'\x2C3F', '\x3', '\x2', '\x2', '\x2', '\x2C59', '\x2C46', '\x3', '\x2', 
		'\x2', '\x2', '\x2C59', '\x2C4C', '\x3', '\x2', '\x2', '\x2', '\x2C59', 
		'\x2C53', '\x3', '\x2', '\x2', '\x2', '\x2C59', '\x2C58', '\x3', '\x2', 
		'\x2', '\x2', '\x2C5A', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x2C5B', 
		'\x2C64', '\x3', '\x2', '\x2', '\x2', '\x2C5C', '\x2C64', '\x3', '\x2', 
		'\x2', '\x2', '\x2C5D', '\x2C64', '\a', '\x1FA', '\x2', '\x2', '\x2C5E', 
		'\x2C64', '\a', '\x1FB', '\x2', '\x2', '\x2C5F', '\x2C64', '\a', '\x1FC', 
		'\x2', '\x2', '\x2C60', '\x2C64', '\a', '\x1FD', '\x2', '\x2', '\x2C61', 
		'\x2C64', '\a', '\x1FE', '\x2', '\x2', '\x2C62', '\x2C64', '\a', '\x1FF', 
		'\x2', '\x2', '\x2C63', '\x2C5B', '\x3', '\x2', '\x2', '\x2', '\x2C63', 
		'\x2C5C', '\x3', '\x2', '\x2', '\x2', '\x2C63', '\x2C5D', '\x3', '\x2', 
		'\x2', '\x2', '\x2C63', '\x2C5E', '\x3', '\x2', '\x2', '\x2', '\x2C63', 
		'\x2C5F', '\x3', '\x2', '\x2', '\x2', '\x2C63', '\x2C60', '\x3', '\x2', 
		'\x2', '\x2', '\x2C63', '\x2C61', '\x3', '\x2', '\x2', '\x2', '\x2C63', 
		'\x2C62', '\x3', '\x2', '\x2', '\x2', '\x2C64', '\x5C9', '\x3', '\x2', 
		'\x2', '\x2', '\x2C65', '\x2C69', '\b', '\x2E6', '\x1', '\x2', '\x2C66', 
		'\x2C67', '\a', '\b', '\x2', '\x2', '\x2C67', '\x2C69', '\x5', '\x484', 
		'\x243', '\x2', '\x2C68', '\x2C65', '\x3', '\x2', '\x2', '\x2', '\x2C68', 
		'\x2C66', '\x3', '\x2', '\x2', '\x2', '\x2C69', '\x2C6F', '\x3', '\x2', 
		'\x2', '\x2', '\x2C6A', '\x2C6B', '\f', '\x3', '\x2', '\x2', '\x2C6B', 
		'\x2C6C', '\a', '\b', '\x2', '\x2', '\x2C6C', '\x2C6E', '\x5', '\x484', 
		'\x243', '\x2', '\x2C6D', '\x2C6A', '\x3', '\x2', '\x2', '\x2', '\x2C6E', 
		'\x2C71', '\x3', '\x2', '\x2', '\x2', '\x2C6F', '\x2C6D', '\x3', '\x2', 
		'\x2', '\x2', '\x2C6F', '\x2C70', '\x3', '\x2', '\x2', '\x2', '\x2C70', 
		'\x5CB', '\x3', '\x2', '\x2', '\x2', '\x2C71', '\x2C6F', '\x3', '\x2', 
		'\x2', '\x2', '\x2C72', '\x2C76', '\x3', '\x2', '\x2', '\x2', '\x2C73', 
		'\x2C74', '\a', '\x66', '\x2', '\x2', '\x2C74', '\x2C76', '\x5', '\x5D0', 
		'\x2E9', '\x2', '\x2C75', '\x2C72', '\x3', '\x2', '\x2', '\x2', '\x2C75', 
		'\x2C73', '\x3', '\x2', '\x2', '\x2', '\x2C76', '\x5CD', '\x3', '\x2', 
		'\x2', '\x2', '\x2C77', '\x2C78', '\x5', '\x53A', '\x29E', '\x2', '\x2C78', 
		'\x2C79', '\a', '\f', '\x2', '\x2', '\x2C79', '\x2C7A', '\x5', '\x484', 
		'\x243', '\x2', '\x2C7A', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x2C7B', 
		'\x2C81', '\x5', '\x5CE', '\x2E8', '\x2', '\x2C7C', '\x2C7D', '\x5', '\x5CE', 
		'\x2E8', '\x2', '\x2C7D', '\x2C7E', '\a', '\b', '\x2', '\x2', '\x2C7E', 
		'\x2C7F', '\x5', '\x5D0', '\x2E9', '\x2', '\x2C7F', '\x2C81', '\x3', '\x2', 
		'\x2', '\x2', '\x2C80', '\x2C7B', '\x3', '\x2', '\x2', '\x2', '\x2C80', 
		'\x2C7C', '\x3', '\x2', '\x2', '\x2', '\x2C81', '\x5D1', '\x3', '\x2', 
		'\x2', '\x2', '\x2C82', '\x2C83', '\a', '\x200', '\x2', '\x2', '\x2C83', 
		'\x2C84', '\x5', '\x61E', '\x310', '\x2', '\x2C84', '\x2C85', '\x5', '\x5D4', 
		'\x2EB', '\x2', '\x2C85', '\x2C86', '\a', '\t', '\x2', '\x2', '\x2C86', 
		'\x5D3', '\x3', '\x2', '\x2', '\x2', '\x2C87', '\x2C8B', '\x3', '\x2', 
		'\x2', '\x2', '\x2C88', '\x2C89', '\a', '\b', '\x2', '\x2', '\x2C89', 
		'\x2C8B', '\x5', '\x61E', '\x310', '\x2', '\x2C8A', '\x2C87', '\x3', '\x2', 
		'\x2', '\x2', '\x2C8A', '\x2C88', '\x3', '\x2', '\x2', '\x2', '\x2C8B', 
		'\x5D5', '\x3', '\x2', '\x2', '\x2', '\x2C8C', '\x2C8D', '\a', '\x201', 
		'\x2', '\x2', '\x2C8D', '\x2C8E', '\x5', '\x57E', '\x2C0', '\x2', '\x2C8E', 
		'\x2C8F', '\a', '\x1C0', '\x2', '\x2', '\x2C8F', '\x2C90', '\a', '\x201', 
		'\x2', '\x2', '\x2C90', '\x2C91', '\x5', '\x616', '\x30C', '\x2', '\x2C91', 
		'\x2C92', '\a', '\t', '\x2', '\x2', '\x2C92', '\x5D7', '\x3', '\x2', '\x2', 
		'\x2', '\x2C93', '\x2C94', '\x5', '\x628', '\x315', '\x2', '\x2C94', '\x2C95', 
		'\a', '\t', '\x2', '\x2', '\x2C95', '\x5D9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C96', '\x2C97', '\a', '\xCC', '\x2', '\x2', '\x2C97', '\x2C9F', '\x5', 
		'\x484', '\x243', '\x2', '\x2C98', '\x2C99', '\x5', '\x5E0', '\x2F1', 
		'\x2', '\x2C99', '\x2C9A', '\x5', '\x5DC', '\x2EF', '\x2', '\x2C9A', '\x2CA0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C9B', '\x2C9C', '\x5', '\x5DC', '\x2EF', 
		'\x2', '\x2C9C', '\x2C9D', '\x5', '\x5E0', '\x2F1', '\x2', '\x2C9D', '\x2CA0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C9E', '\x2CA0', '\x3', '\x2', '\x2', '\x2', 
		'\x2C9F', '\x2C98', '\x3', '\x2', '\x2', '\x2', '\x2C9F', '\x2C9B', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9F', '\x2C9E', '\x3', '\x2', '\x2', '\x2', '\x2CA0', 
		'\x2CA1', '\x3', '\x2', '\x2', '\x2', '\x2CA1', '\x2CA2', '\a', '\t', 
		'\x2', '\x2', '\x2CA2', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x2CA3', 
		'\x2CA7', '\x3', '\x2', '\x2', '\x2', '\x2CA4', '\x2CA5', '\a', '\x66', 
		'\x2', '\x2', '\x2CA5', '\x2CA7', '\x5', '\x5DE', '\x2F0', '\x2', '\x2CA6', 
		'\x2CA3', '\x3', '\x2', '\x2', '\x2', '\x2CA6', '\x2CA4', '\x3', '\x2', 
		'\x2', '\x2', '\x2CA7', '\x5DD', '\x3', '\x2', '\x2', '\x2', '\x2CA8', 
		'\x2CA9', '\b', '\x2F0', '\x1', '\x2', '\x2CA9', '\x2CAA', '\x5', '\x484', 
		'\x243', '\x2', '\x2CAA', '\x2CB0', '\x3', '\x2', '\x2', '\x2', '\x2CAB', 
		'\x2CAC', '\f', '\x3', '\x2', '\x2', '\x2CAC', '\x2CAD', '\a', '\b', '\x2', 
		'\x2', '\x2CAD', '\x2CAF', '\x5', '\x484', '\x243', '\x2', '\x2CAE', '\x2CAB', 
		'\x3', '\x2', '\x2', '\x2', '\x2CAF', '\x2CB2', '\x3', '\x2', '\x2', '\x2', 
		'\x2CB0', '\x2CAE', '\x3', '\x2', '\x2', '\x2', '\x2CB0', '\x2CB1', '\x3', 
		'\x2', '\x2', '\x2', '\x2CB1', '\x5DF', '\x3', '\x2', '\x2', '\x2', '\x2CB2', 
		'\x2CB0', '\x3', '\x2', '\x2', '\x2', '\x2CB3', '\x2CBA', '\x3', '\x2', 
		'\x2', '\x2', '\x2CB4', '\x2CB5', '\a', 'I', '\x2', '\x2', '\x2CB5', '\x2CB6', 
		'\a', '\x153', '\x2', '\x2', '\x2CB6', '\x2CBA', '\x5', '\x5F2', '\x2FA', 
		'\x2', '\x2CB7', '\x2CB8', '\a', 'I', '\x2', '\x2', '\x2CB8', '\x2CBA', 
		'\x5', '\x5F2', '\x2FA', '\x2', '\x2CB9', '\x2CB3', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB9', '\x2CB4', '\x3', '\x2', '\x2', '\x2', '\x2CB9', '\x2CB7', 
		'\x3', '\x2', '\x2', '\x2', '\x2CBA', '\x5E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2CBB', '\x2CBC', '\a', '\x202', '\x2', '\x2', '\x2CBC', '\x2CD5', '\x5', 
		'\x532', '\x29A', '\x2', '\x2CBD', '\x2CBE', '\a', '\x202', '\x2', '\x2', 
		'\x2CBE', '\x2CBF', '\x5', '\x606', '\x304', '\x2', '\x2CBF', '\x2CC0', 
		'\x5', '\x5EC', '\x2F7', '\x2', '\x2CC0', '\x2CC1', '\a', '@', '\x2', 
		'\x2', '\x2CC1', '\x2CC2', '\x5', '\x3BA', '\x1DE', '\x2', '\x2CC2', '\x2CC3', 
		'\a', '\t', '\x2', '\x2', '\x2CC3', '\x2CD5', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC4', '\x2CC5', '\a', '\x202', '\x2', '\x2', '\x2CC5', '\x2CC6', '\x5', 
		'\x606', '\x304', '\x2', '\x2CC6', '\x2CC7', '\x5', '\x5EC', '\x2F7', 
		'\x2', '\x2CC7', '\x2CC8', '\a', '@', '\x2', '\x2', '\x2CC8', '\x2CC9', 
		'\a', '\xCC', '\x2', '\x2', '\x2CC9', '\x2CCA', '\x5', '\x61E', '\x310', 
		'\x2', '\x2CCA', '\x2CCB', '\x5', '\x5E8', '\x2F5', '\x2', '\x2CCB', '\x2CCC', 
		'\a', '\t', '\x2', '\x2', '\x2CCC', '\x2CD5', '\x3', '\x2', '\x2', '\x2', 
		'\x2CCD', '\x2CCE', '\a', '\x202', '\x2', '\x2', '\x2CCE', '\x2CCF', '\x5', 
		'\x532', '\x29A', '\x2', '\x2CCF', '\x2CD0', '\a', '\x4', '\x2', '\x2', 
		'\x2CD0', '\x2CD1', '\x5', '\x5E6', '\x2F4', '\x2', '\x2CD1', '\x2CD2', 
		'\a', '\x5', '\x2', '\x2', '\x2CD2', '\x2CD3', '\a', '\t', '\x2', '\x2', 
		'\x2CD3', '\x2CD5', '\x3', '\x2', '\x2', '\x2', '\x2CD4', '\x2CBB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CD4', '\x2CBD', '\x3', '\x2', '\x2', '\x2', '\x2CD4', 
		'\x2CC4', '\x3', '\x2', '\x2', '\x2', '\x2CD4', '\x2CCD', '\x3', '\x2', 
		'\x2', '\x2', '\x2CD5', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x2CD6', 
		'\x2CD7', '\x5', '\x532', '\x29A', '\x2', '\x2CD7', '\x2CD8', '\a', '\x16', 
		'\x2', '\x2', '\x2CD8', '\x2CD9', '\x5', '\x484', '\x243', '\x2', '\x2CD9', 
		'\x2CDC', '\x3', '\x2', '\x2', '\x2', '\x2CDA', '\x2CDC', '\x5', '\x484', 
		'\x243', '\x2', '\x2CDB', '\x2CD6', '\x3', '\x2', '\x2', '\x2', '\x2CDB', 
		'\x2CDA', '\x3', '\x2', '\x2', '\x2', '\x2CDC', '\x5E5', '\x3', '\x2', 
		'\x2', '\x2', '\x2CDD', '\x2CDE', '\b', '\x2F4', '\x1', '\x2', '\x2CDE', 
		'\x2CDF', '\x5', '\x5E4', '\x2F3', '\x2', '\x2CDF', '\x2CE5', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE0', '\x2CE1', '\f', '\x3', '\x2', '\x2', '\x2CE1', 
		'\x2CE2', '\a', '\b', '\x2', '\x2', '\x2CE2', '\x2CE4', '\x5', '\x5E4', 
		'\x2F3', '\x2', '\x2CE3', '\x2CE0', '\x3', '\x2', '\x2', '\x2', '\x2CE4', 
		'\x2CE7', '\x3', '\x2', '\x2', '\x2', '\x2CE5', '\x2CE3', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE5', '\x2CE6', '\x3', '\x2', '\x2', '\x2', '\x2CE6', 
		'\x5E7', '\x3', '\x2', '\x2', '\x2', '\x2CE7', '\x2CE5', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE8', '\x2CEC', '\x3', '\x2', '\x2', '\x2', '\x2CE9', 
		'\x2CEA', '\a', '\x66', '\x2', '\x2', '\x2CEA', '\x2CEC', '\x5', '\x4D4', 
		'\x26B', '\x2', '\x2CEB', '\x2CE8', '\x3', '\x2', '\x2', '\x2', '\x2CEB', 
		'\x2CE9', '\x3', '\x2', '\x2', '\x2', '\x2CEC', '\x5E9', '\x3', '\x2', 
		'\x2', '\x2', '\x2CED', '\x2CF2', '\x5', '\x61E', '\x310', '\x2', '\x2CEE', 
		'\x2CEF', '\a', '\b', '\x2', '\x2', '\x2CEF', '\x2CF1', '\x5', '\x61E', 
		'\x310', '\x2', '\x2CF0', '\x2CEE', '\x3', '\x2', '\x2', '\x2', '\x2CF1', 
		'\x2CF4', '\x3', '\x2', '\x2', '\x2', '\x2CF2', '\x2CF0', '\x3', '\x2', 
		'\x2', '\x2', '\x2CF2', '\x2CF3', '\x3', '\x2', '\x2', '\x2', '\x2CF3', 
		'\x5EB', '\x3', '\x2', '\x2', '\x2', '\x2CF4', '\x2CF2', '\x3', '\x2', 
		'\x2', '\x2', '\x2CF5', '\x2CFA', '\x3', '\x2', '\x2', '\x2', '\x2CF6', 
		'\x2CF7', '\x5', '\x5EE', '\x2F8', '\x2', '\x2CF7', '\x2CF8', '\a', '\x13D', 
		'\x2', '\x2', '\x2CF8', '\x2CFA', '\x3', '\x2', '\x2', '\x2', '\x2CF9', 
		'\x2CF5', '\x3', '\x2', '\x2', '\x2', '\x2CF9', '\x2CF6', '\x3', '\x2', 
		'\x2', '\x2', '\x2CFA', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x2CFB', 
		'\x2CFE', '\x3', '\x2', '\x2', '\x2', '\x2CFC', '\x2CFE', '\a', '\x106', 
		'\x2', '\x2', '\x2CFD', '\x2CFB', '\x3', '\x2', '\x2', '\x2', '\x2CFD', 
		'\x2CFC', '\x3', '\x2', '\x2', '\x2', '\x2CFE', '\x5EF', '\x3', '\x2', 
		'\x2', '\x2', '\x2CFF', '\x2D00', '\a', '?', '\x2', '\x2', '\x2D00', '\x2D01', 
		'\x5', '\x5F6', '\x2FC', '\x2', '\x2D01', '\x2D02', '\x5', '\x5F4', '\x2FB', 
		'\x2', '\x2D02', '\x2D03', '\x5', '\x606', '\x304', '\x2', '\x2D03', '\x2D04', 
		'\a', 'I', '\x2', '\x2', '\x2D04', '\x2D05', '\x5', '\x5F2', '\x2FA', 
		'\x2', '\x2D05', '\x2D06', '\a', '\t', '\x2', '\x2', '\x2D06', '\x5F1', 
		'\x3', '\x2', '\x2', '\x2', '\x2D07', '\x2D08', '\x5', '\x4D4', '\x26B', 
		'\x2', '\x2D08', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x2D09', '\x2D0D', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0A', '\x2D0D', '\a', '\x42', '\x2', '\x2', 
		'\x2D0B', '\x2D0D', '\a', '\x46', '\x2', '\x2', '\x2D0C', '\x2D09', '\x3', 
		'\x2', '\x2', '\x2', '\x2D0C', '\x2D0A', '\x3', '\x2', '\x2', '\x2', '\x2D0C', 
		'\x2D0B', '\x3', '\x2', '\x2', '\x2', '\x2D0D', '\x5F5', '\x3', '\x2', 
		'\x2', '\x2', '\x2D0E', '\x2D25', '\x3', '\x2', '\x2', '\x2', '\x2D0F', 
		'\x2D25', '\x3', '\x2', '\x2', '\x2', '\x2D10', '\x2D25', '\a', '\x105', 
		'\x2', '\x2', '\x2D11', '\x2D25', '\a', '\x11E', '\x2', '\x2', '\x2D12', 
		'\x2D25', '\a', '\xD1', '\x2', '\x2', '\x2D13', '\x2D25', '\a', '\xF2', 
		'\x2', '\x2', '\x2D14', '\x2D15', '\a', '\x84', '\x2', '\x2', '\x2D15', 
		'\x2D25', '\x5', '\x484', '\x243', '\x2', '\x2D16', '\x2D17', '\a', '\x12C', 
		'\x2', '\x2', '\x2D17', '\x2D25', '\x5', '\x484', '\x243', '\x2', '\x2D18', 
		'\x2D25', '\x5', '\x484', '\x243', '\x2', '\x2D19', '\x2D25', '\a', ' ', 
		'\x2', '\x2', '\x2D1A', '\x2D25', '\a', '\xD4', '\x2', '\x2', '\x2D1B', 
		'\x2D1C', '\a', '\xD4', '\x2', '\x2', '\x2D1C', '\x2D25', '\x5', '\x484', 
		'\x243', '\x2', '\x2D1D', '\x2D1E', '\a', '\xD4', '\x2', '\x2', '\x2D1E', 
		'\x2D25', '\a', ' ', '\x2', '\x2', '\x2D1F', '\x2D25', '\a', '\x92', '\x2', 
		'\x2', '\x2D20', '\x2D21', '\a', '\x92', '\x2', '\x2', '\x2D21', '\x2D25', 
		'\x5', '\x484', '\x243', '\x2', '\x2D22', '\x2D23', '\a', '\x92', '\x2', 
		'\x2', '\x2D23', '\x2D25', '\a', ' ', '\x2', '\x2', '\x2D24', '\x2D0E', 
		'\x3', '\x2', '\x2', '\x2', '\x2D24', '\x2D0F', '\x3', '\x2', '\x2', '\x2', 
		'\x2D24', '\x2D10', '\x3', '\x2', '\x2', '\x2', '\x2D24', '\x2D11', '\x3', 
		'\x2', '\x2', '\x2', '\x2D24', '\x2D12', '\x3', '\x2', '\x2', '\x2', '\x2D24', 
		'\x2D13', '\x3', '\x2', '\x2', '\x2', '\x2D24', '\x2D14', '\x3', '\x2', 
		'\x2', '\x2', '\x2D24', '\x2D16', '\x3', '\x2', '\x2', '\x2', '\x2D24', 
		'\x2D18', '\x3', '\x2', '\x2', '\x2', '\x2D24', '\x2D19', '\x3', '\x2', 
		'\x2', '\x2', '\x2D24', '\x2D1A', '\x3', '\x2', '\x2', '\x2', '\x2D24', 
		'\x2D1B', '\x3', '\x2', '\x2', '\x2', '\x2D24', '\x2D1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2D24', '\x2D1F', '\x3', '\x2', '\x2', '\x2', '\x2D24', 
		'\x2D20', '\x3', '\x2', '\x2', '\x2', '\x2D24', '\x2D22', '\x3', '\x2', 
		'\x2', '\x2', '\x2D25', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x2D26', 
		'\x2D27', '\a', '\x102', '\x2', '\x2', '\x2D27', '\x2D28', '\x5', '\x5F6', 
		'\x2FC', '\x2', '\x2D28', '\x2D29', '\x5', '\x606', '\x304', '\x2', '\x2D29', 
		'\x2D2A', '\a', '\t', '\x2', '\x2', '\x2D2A', '\x5F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2D2B', '\x2D2C', '\a', '\x9F', '\x2', '\x2', '\x2D2C', '\x2D2D', 
		'\x5', '\x606', '\x304', '\x2', '\x2D2D', '\x2D2E', '\a', '\t', '\x2', 
		'\x2', '\x2D2E', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x2D2F', '\x2D30', 
		'\a', 'P', '\x2', '\x2', '\x2D30', '\x2D31', '\a', '\t', '\x2', '\x2', 
		'\x2D31', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x2D32', '\x2D33', '\a', 
		'\xA3', '\x2', '\x2', '\x2D33', '\x2D34', '\x5', '\x602', '\x302', '\x2', 
		'\x2D34', '\x2D35', '\a', '\t', '\x2', '\x2', '\x2D35', '\x5FF', '\x3', 
		'\x2', '\x2', '\x2', '\x2D36', '\x2D37', '\a', '\x138', '\x2', '\x2', 
		'\x2D37', '\x2D38', '\x5', '\x602', '\x302', '\x2', '\x2D38', '\x2D39', 
		'\a', '\t', '\x2', '\x2', '\x2D39', '\x601', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3A', '\x2D3B', '\a', '#', '\x2', '\x2', '\x2D3B', '\x2D41', '\a', 
		'\x9B', '\x2', '\x2', '\x2D3C', '\x2D3D', '\a', '#', '\x2', '\x2', '\x2D3D', 
		'\x2D3E', '\a', '\x106', '\x2', '\x2', '\x2D3E', '\x2D41', '\a', '\x9B', 
		'\x2', '\x2', '\x2D3F', '\x2D41', '\x3', '\x2', '\x2', '\x2', '\x2D40', 
		'\x2D3A', '\x3', '\x2', '\x2', '\x2', '\x2D40', '\x2D3C', '\x3', '\x2', 
		'\x2', '\x2', '\x2D40', '\x2D3F', '\x3', '\x2', '\x2', '\x2', '\x2D41', 
		'\x603', '\x3', '\x2', '\x2', '\x2', '\x2D42', '\x2D43', '\a', '\x146', 
		'\x2', '\x2', '\x2D43', '\x2D44', '\x5', '\x20E', '\x108', '\x2', '\x2D44', 
		'\x2D45', '\a', '`', '\x2', '\x2', '\x2D45', '\x2D46', '\a', '\x37', '\x2', 
		'\x2', '\x2D46', '\x2D47', '\a', '\t', '\x2', '\x2', '\x2D47', '\x2D50', 
		'\x3', '\x2', '\x2', '\x2', '\x2D48', '\x2D49', '\a', '\x132', '\x2', 
		'\x2', '\x2D49', '\x2D4A', '\x5', '\x20E', '\x108', '\x2', '\x2D4A', '\x2D4B', 
		'\a', '\t', '\x2', '\x2', '\x2D4B', '\x2D50', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4C', '\x2D4D', '\a', '\x132', '\x2', '\x2', '\x2D4D', '\x2D4E', '\a', 
		' ', '\x2', '\x2', '\x2D4E', '\x2D50', '\a', '\t', '\x2', '\x2', '\x2D4F', 
		'\x2D42', '\x3', '\x2', '\x2', '\x2', '\x2D4F', '\x2D48', '\x3', '\x2', 
		'\x2', '\x2', '\x2D4F', '\x2D4C', '\x3', '\x2', '\x2', '\x2', '\x2D50', 
		'\x605', '\x3', '\x2', '\x2', '\x2', '\x2D51', '\x2D54', '\x5', '\x532', 
		'\x29A', '\x2', '\x2D52', '\x2D54', '\a', '\x1E', '\x2', '\x2', '\x2D53', 
		'\x2D51', '\x3', '\x2', '\x2', '\x2', '\x2D53', '\x2D52', '\x3', '\x2', 
		'\x2', '\x2', '\x2D54', '\x607', '\x3', '\x2', '\x2', '\x2', '\x2D55', 
		'\x2D59', '\x3', '\x2', '\x2', '\x2', '\x2D56', '\x2D57', '\a', '\x1FF', 
		'\x2', '\x2', '\x2D57', '\x2D59', '\x5', '\x60A', '\x306', '\x2', '\x2D58', 
		'\x2D55', '\x3', '\x2', '\x2', '\x2', '\x2D58', '\x2D56', '\x3', '\x2', 
		'\x2', '\x2', '\x2D59', '\x609', '\x3', '\x2', '\x2', '\x2', '\x2D5A', 
		'\x2D5B', '\b', '\x306', '\x1', '\x2', '\x2D5B', '\x2D5C', '\x5', '\x60C', 
		'\x307', '\x2', '\x2D5C', '\x2D61', '\x3', '\x2', '\x2', '\x2', '\x2D5D', 
		'\x2D5E', '\f', '\x4', '\x2', '\x2', '\x2D5E', '\x2D60', '\x5', '\x60C', 
		'\x307', '\x2', '\x2D5F', '\x2D5D', '\x3', '\x2', '\x2', '\x2', '\x2D60', 
		'\x2D63', '\x3', '\x2', '\x2', '\x2', '\x2D61', '\x2D5F', '\x3', '\x2', 
		'\x2', '\x2', '\x2D61', '\x2D62', '\x3', '\x2', '\x2', '\x2', '\x2D62', 
		'\x60B', '\x3', '\x2', '\x2', '\x2', '\x2D63', '\x2D61', '\x3', '\x2', 
		'\x2', '\x2', '\x2D64', '\x2D65', '\a', 'h', '\x2', '\x2', '\x2D65', '\x2D66', 
		'\x5', '\x60E', '\x308', '\x2', '\x2D66', '\x2D67', '\a', '_', '\x2', 
		'\x2', '\x2D67', '\x2D68', '\x5', '\x57E', '\x2C0', '\x2', '\x2D68', '\x60D', 
		'\x3', '\x2', '\x2', '\x2', '\x2D69', '\x2D6A', '\b', '\x308', '\x1', 
		'\x2', '\x2D6A', '\x2D6B', '\x5', '\x610', '\x309', '\x2', '\x2D6B', '\x2D71', 
		'\x3', '\x2', '\x2', '\x2', '\x2D6C', '\x2D6D', '\f', '\x4', '\x2', '\x2', 
		'\x2D6D', '\x2D6E', '\a', 'T', '\x2', '\x2', '\x2D6E', '\x2D70', '\x5', 
		'\x610', '\x309', '\x2', '\x2D6F', '\x2D6C', '\x3', '\x2', '\x2', '\x2', 
		'\x2D70', '\x2D73', '\x3', '\x2', '\x2', '\x2', '\x2D71', '\x2D6F', '\x3', 
		'\x2', '\x2', '\x2', '\x2D71', '\x2D72', '\x3', '\x2', '\x2', '\x2', '\x2D72', 
		'\x60F', '\x3', '\x2', '\x2', '\x2', '\x2D73', '\x2D71', '\x3', '\x2', 
		'\x2', '\x2', '\x2D74', '\x2D78', '\x5', '\x61A', '\x30E', '\x2', '\x2D75', 
		'\x2D76', '\a', '\x1F9', '\x2', '\x2', '\x2D76', '\x2D78', '\x5', '\x524', 
		'\x293', '\x2', '\x2D77', '\x2D74', '\x3', '\x2', '\x2', '\x2', '\x2D77', 
		'\x2D75', '\x3', '\x2', '\x2', '\x2', '\x2D78', '\x611', '\x3', '\x2', 
		'\x2', '\x2', '\x2D79', '\x2D7C', '\x3', '\x2', '\x2', '\x2', '\x2D7A', 
		'\x2D7C', '\x5', '\x55A', '\x2AE', '\x2', '\x2D7B', '\x2D79', '\x3', '\x2', 
		'\x2', '\x2', '\x2D7B', '\x2D7A', '\x3', '\x2', '\x2', '\x2', '\x2D7C', 
		'\x613', '\x3', '\x2', '\x2', '\x2', '\x2D7D', '\x2D80', '\x3', '\x2', 
		'\x2', '\x2', '\x2D7E', '\x2D80', '\x5', '\x55A', '\x2AE', '\x2', '\x2D7F', 
		'\x2D7D', '\x3', '\x2', '\x2', '\x2', '\x2D7F', '\x2D7E', '\x3', '\x2', 
		'\x2', '\x2', '\x2D80', '\x615', '\x3', '\x2', '\x2', '\x2', '\x2D81', 
		'\x2D84', '\x3', '\x2', '\x2', '\x2', '\x2D82', '\x2D84', '\x5', '\x61A', 
		'\x30E', '\x2', '\x2D83', '\x2D81', '\x3', '\x2', '\x2', '\x2', '\x2D83', 
		'\x2D82', '\x3', '\x2', '\x2', '\x2', '\x2D84', '\x617', '\x3', '\x2', 
		'\x2', '\x2', '\x2D85', '\x2D89', '\a', '\t', '\x2', '\x2', '\x2D86', 
		'\x2D87', '\a', 'h', '\x2', '\x2', '\x2D87', '\x2D89', '\x5', '\x622', 
		'\x312', '\x2', '\x2D88', '\x2D85', '\x3', '\x2', '\x2', '\x2', '\x2D88', 
		'\x2D86', '\x3', '\x2', '\x2', '\x2', '\x2D89', '\x619', '\x3', '\x2', 
		'\x2', '\x2', '\x2D8A', '\x2D8D', '\x5', '\x532', '\x29A', '\x2', '\x2D8B', 
		'\x2D8D', '\x5', '\x61C', '\x30F', '\x2', '\x2D8C', '\x2D8A', '\x3', '\x2', 
		'\x2', '\x2', '\x2D8C', '\x2D8B', '\x3', '\x2', '\x2', '\x2', '\x2D8D', 
		'\x61B', '\x3', '\x2', '\x2', '\x2', '\x2D8E', '\x2D8F', '\t', '#', '\x2', 
		'\x2', '\x2D8F', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x2D90', '\x2D91', 
		'\x5', '\x506', '\x284', '\x2', '\x2D91', '\x2D92', '\x5', '\x3D2', '\x1EA', 
		'\x2', '\x2D92', '\x2D93', '\x5', '\x41A', '\x20E', '\x2', '\x2D93', '\x2D94', 
		'\x5', '\x440', '\x221', '\x2', '\x2D94', '\x2D95', '\x5', '\x3FC', '\x1FF', 
		'\x2', '\x2D95', '\x2D96', '\x5', '\x40A', '\x206', '\x2', '\x2D96', '\x2D97', 
		'\x5', '\x4AC', '\x257', '\x2', '\x2D97', '\x61F', '\x3', '\x2', '\x2', 
		'\x2', '\x2D98', '\x2D99', '\x5', '\x61E', '\x310', '\x2', '\x2D99', '\x621', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9A', '\x2D9B', '\x5', '\x61E', '\x310', 
		'\x2', '\x2D9B', '\x623', '\x3', '\x2', '\x2', '\x2', '\x2D9C', '\x2D9D', 
		'\x5', '\x484', '\x243', '\x2', '\x2D9D', '\x625', '\x3', '\x2', '\x2', 
		'\x2', '\x2D9E', '\x2D9F', '\x5', '\x484', '\x243', '\x2', '\x2D9F', '\x627', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA0', '\x2DA1', '\x5', '\n', '\x6', '\x2', 
		'\x2DA1', '\x2DA2', '\x5', '\x62A', '\x316', '\x2', '\x2DA2', '\x629', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA3', '\x2DA4', '\a', 'I', '\x2', '\x2', 
		'\x2DA4', '\x2DA5', '\x5', '\x3D4', '\x1EB', '\x2', '\x2DA5', '\x2DA6', 
		'\x5', '\x5F2', '\x2FA', '\x2', '\x2DA6', '\x2DA9', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA7', '\x2DA9', '\x3', '\x2', '\x2', '\x2', '\x2DA8', '\x2DA3', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA8', '\x2DA7', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA9', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x264', '\x636', '\x63A', 
		'\x6B9', '\x6BD', '\x6CA', '\x6D1', '\x6D9', '\x6F0', '\x6FF', '\x713', 
		'\x719', '\x733', '\x74D', '\x77C', '\x780', '\x787', '\x790', '\x79A', 
		'\x7A4', '\x7B6', '\x7D4', '\x7DE', '\x7E9', '\x7EE', '\x7F7', '\x7FD', 
		'\x80E', '\x813', '\x817', '\x824', '\x828', '\x82D', '\x832', '\x842', 
		'\x84B', '\x85B', '\x907', '\x911', '\x91C', '\xA1E', '\xA25', '\xA2A', 
		'\xA2F', '\xA34', '\xA3C', '\xA45', '\xA4F', '\xA61', '\xA6A', '\xA77', 
		'\xA93', '\xAA0', '\xAB0', '\xACD', '\xAD3', '\xAEB', '\xAF1', '\xAF6', 
		'\xAFD', '\xB04', '\xB2A', '\xB2E', '\xB35', '\xB39', '\xB43', '\xB51', 
		'\xB5B', '\xBBD', '\xBCB', '\xBCF', '\xBD6', '\xBE0', '\xBEB', '\xBF1', 
		'\xBF5', '\xC04', '\xC0B', '\xC16', '\xC40', '\xC45', '\xC4E', '\xC5B', 
		'\xC5D', '\xC67', '\xCA2', '\xCA7', '\xCAE', '\xCB8', '\xCC3', '\xCCC', 
		'\xCD6', '\xCE4', '\xCEC', '\xCF7', '\xD09', '\xD11', '\xD15', '\xD26', 
		'\xD37', '\xD3C', '\xD43', '\xD51', '\xD56', '\xD5D', '\xD78', '\xD8A', 
		'\xD9F', '\xDAE', '\xDC5', '\xDCF', '\xDE7', '\xDF5', '\xDF9', '\xE00', 
		'\xE09', '\xE2E', '\xE32', '\xE3A', '\xE44', '\xE59', '\xE5D', '\xE63', 
		'\xE68', '\xE6E', '\xE72', '\xE76', '\xE83', '\xE8D', '\xE9E', '\xEA5', 
		'\xEAF', '\xEBC', '\xF2A', '\xF3C', '\xF45', '\xF4A', '\xF5B', '\xF63', 
		'\xF6D', '\xF7D', '\xF87', '\xFA9', '\xFAE', '\xFB4', '\xFB8', '\xFCA', 
		'\x1004', '\x1015', '\x101D', '\x1034', '\x1038', '\x104C', '\x1071', 
		'\x107A', '\x107F', '\x1084', '\x1089', '\x108E', '\x10C3', '\x10C9', 
		'\x10D3', '\x10DD', '\x10E2', '\x10EB', '\x10FE', '\x1102', '\x110C', 
		'\x1113', '\x111A', '\x1121', '\x1126', '\x112D', '\x113B', '\x1157', 
		'\x1161', '\x1172', '\x1181', '\x11F6', '\x1204', '\x120C', '\x1214', 
		'\x1222', '\x122B', '\x1235', '\x125D', '\x1263', '\x127B', '\x1297', 
		'\x129B', '\x12A0', '\x12A9', '\x12AD', '\x12C8', '\x12D2', '\x12E1', 
		'\x12F5', '\x1309', '\x1366', '\x137F', '\x1386', '\x1396', '\x13A2', 
		'\x13A9', '\x13B4', '\x13BF', '\x13CD', '\x1462', '\x1466', '\x14C3', 
		'\x14C8', '\x14CC', '\x14D2', '\x1516', '\x151C', '\x1539', '\x154A', 
		'\x1554', '\x1560', '\x159C', '\x15A6', '\x15AC', '\x15B2', '\x15CC', 
		'\x15D2', '\x15D8', '\x15E5', '\x15F1', '\x160E', '\x1635', '\x1639', 
		'\x163D', '\x1641', '\x1646', '\x1650', '\x165E', '\x166B', '\x1673', 
		'\x167D', '\x1683', '\x1687', '\x168C', '\x1693', '\x16B8', '\x16BD', 
		'\x16C5', '\x16CF', '\x16DA', '\x16E5', '\x16ED', '\x16F7', '\x1709', 
		'\x1711', '\x1723', '\x172E', '\x1746', '\x1750', '\x175E', '\x1764', 
		'\x178B', '\x1795', '\x179E', '\x17AC', '\x17B2', '\x17BF', '\x17D4', 
		'\x17DD', '\x17E2', '\x1808', '\x1816', '\x1824', '\x183C', '\x1843', 
		'\x184D', '\x185D', '\x1863', '\x1887', '\x188E', '\x189D', '\x18CC', 
		'\x18F1', '\x18FF', '\x1910', '\x1AE6', '\x1AEA', '\x1AEF', '\x1B2A', 
		'\x1B2E', '\x1C09', '\x1C1B', '\x1C26', '\x1C2D', '\x1CEE', '\x1CF8', 
		'\x1D00', '\x1D1D', '\x1D30', '\x1D5A', '\x1D68', '\x1D7E', '\x1D88', 
		'\x1D90', '\x1D94', '\x1D9B', '\x1DA4', '\x1DAD', '\x1DE1', '\x1DE6', 
		'\x1DF2', '\x1DFC', '\x1DFE', '\x1E03', '\x1E0B', '\x1E3F', '\x1E4D', 
		'\x1E5A', '\x1E63', '\x1E72', '\x1E7C', '\x1E80', '\x1E94', '\x1EB5', 
		'\x1EBF', '\x1ED2', '\x1F0D', '\x1F11', '\x1F62', '\x1F7E', '\x1F83', 
		'\x1F92', '\x1F9E', '\x1FA8', '\x1FB2', '\x1FB7', '\x1FBB', '\x1FBF', 
		'\x1FC3', '\x1FC7', '\x1FCE', '\x1FDB', '\x1FE0', '\x1FF2', '\x1FFD', 
		'\x2007', '\x200F', '\x2014', '\x2021', '\x2027', '\x2044', '\x204B', 
		'\x2057', '\x2066', '\x207D', '\x2089', '\x209F', '\x20AA', '\x20AF', 
		'\x20BC', '\x20C9', '\x20DB', '\x20DF', '\x20E5', '\x20F8', '\x2105', 
		'\x2112', '\x2129', '\x212B', '\x2133', '\x2137', '\x2141', '\x2164', 
		'\x2168', '\x2187', '\x2189', '\x218F', '\x2193', '\x2199', '\x21A3', 
		'\x21AD', '\x21BC', '\x21C0', '\x21C9', '\x21CD', '\x21F2', '\x21F6', 
		'\x21FB', '\x2204', '\x2208', '\x220C', '\x2217', '\x2223', '\x222D', 
		'\x2231', '\x2252', '\x225A', '\x225E', '\x2267', '\x226B', '\x2275', 
		'\x227F', '\x2287', '\x229F', '\x22A5', '\x22A9', '\x22B2', '\x22C4', 
		'\x22C9', '\x22D9', '\x22DF', '\x22E6', '\x2327', '\x232C', '\x2347', 
		'\x2349', '\x235A', '\x235E', '\x2372', '\x237B', '\x237F', '\x2388', 
		'\x2395', '\x239F', '\x23AA', '\x23B9', '\x23C5', '\x23D2', '\x23DB', 
		'\x23E0', '\x23E5', '\x23EE', '\x23F2', '\x23FC', '\x2418', '\x2422', 
		'\x2430', '\x2439', '\x2444', '\x244E', '\x2457', '\x247C', '\x2487', 
		'\x2489', '\x2499', '\x249F', '\x24A8', '\x24AF', '\x24C1', '\x24C8', 
		'\x24CC', '\x24D0', '\x24E0', '\x24E7', '\x24F6', '\x24FA', '\x250C', 
		'\x2517', '\x2535', '\x253D', '\x2542', '\x2557', '\x262A', '\x262C', 
		'\x2638', '\x2670', '\x2672', '\x2683', '\x2692', '\x269C', '\x26AA', 
		'\x26B4', '\x26B8', '\x2790', '\x2797', '\x27A4', '\x27B3', '\x27BB', 
		'\x27C4', '\x27D5', '\x27DB', '\x27E4', '\x27ED', '\x27F2', '\x27FC', 
		'\x2808', '\x2813', '\x2819', '\x2828', '\x2830', '\x283E', '\x284B', 
		'\x285B', '\x2865', '\x2871', '\x287B', '\x2883', '\x2891', '\x289B', 
		'\x28A6', '\x28B2', '\x28BC', '\x28C9', '\x28D3', '\x28DB', '\x28E5', 
		'\x28F7', '\x28FE', '\x291C', '\x2925', '\x292C', '\x293B', '\x2946', 
		'\x294A', '\x2950', '\x2960', '\x2964', '\x296D', '\x2975', '\x297A', 
		'\x297E', '\x2985', '\x298D', '\x2990', '\x299A', '\x29A1', '\x29AB', 
		'\x29B8', '\x29D9', '\x29EC', '\x29F1', '\x29F6', '\x29FD', '\x2A04', 
		'\x2A0E', '\x2A15', '\x2A1B', '\x2A21', '\x2A29', '\x2A32', '\x2A6B', 
		'\x2A7A', '\x2A91', '\x2A99', '\x2A9D', '\x2AAE', '\x2AB9', '\x2AC3', 
		'\x2ADB', '\x2AE1', '\x2AEA', '\x2AF4', '\x2AFE', '\x2B04', '\x2B0B', 
		'\x2B10', '\x2B16', '\x2B1A', '\x2B23', '\x2B41', '\x2B55', '\x2B59', 
		'\x2B69', '\x2B73', '\x2B81', '\x2B8A', '\x2BA0', '\x2BA6', '\x2BB2', 
		'\x2BBB', '\x2BC6', '\x2BF0', '\x2BF5', '\x2BFE', '\x2C03', '\x2C07', 
		'\x2C0C', '\x2C1C', '\x2C39', '\x2C3D', '\x2C59', '\x2C63', '\x2C68', 
		'\x2C6F', '\x2C75', '\x2C80', '\x2C8A', '\x2C9F', '\x2CA6', '\x2CB0', 
		'\x2CB9', '\x2CD4', '\x2CDB', '\x2CE5', '\x2CEB', '\x2CF2', '\x2CF9', 
		'\x2CFD', '\x2D0C', '\x2D24', '\x2D40', '\x2D4F', '\x2D53', '\x2D58', 
		'\x2D61', '\x2D71', '\x2D77', '\x2D7B', '\x2D7F', '\x2D83', '\x2D88', 
		'\x2D8C', '\x2DA8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
